import unittest
from TestUtils import TestAST
from AST import *

class ASTGenSuite(unittest.TestCase):
    def test_0(self):
        line = '''Class s_{Constructor (){}Val S:e;}Class Q_{}Class __N7:_{}Class nl{Destructor (){Val _:Array [Array [Array [Boolean ,032],1],0X59];} }Class J_{Val U__,__,$a7U,q,$6,$_,__:_7s6_;}'''
        expect = '''Program([ClassDecl(Id(s_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(S),ClassType(Id(e)),None))]),ClassDecl(Id(Q_),[]),ClassDecl(Id(__N7),Id(_),[]),ClassDecl(Id(nl),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(89,ArrayType(1,ArrayType(26,BoolType))),None)]))]),ClassDecl(Id(J_),[AttributeDecl(Instance,ConstDecl(Id(U__),ClassType(Id(_7s6_)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_7s6_)),None)),AttributeDecl(Static,ConstDecl(Id($a7U),ClassType(Id(_7s6_)),None)),AttributeDecl(Instance,ConstDecl(Id(q),ClassType(Id(_7s6_)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_7s6_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_7s6_)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_7s6_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 0))

    def test_1(self):
        line = '''Class z:f{Constructor (uh:Y;K_g_:F;_,__:Array [Array [Int ,0x4E],0X5E];_,_:Float ){}Constructor (){} }Class r:_{}Class _D6t_:__{Var _:Float ;Val K_5:Array [Boolean ,8];Var S_,i,_:Array [Array [String ,0XB],65];$_(w_,_4,va7_d:Int ;_:F){}Val $5:String ;Val $v,$5:_63D;}'''
        expect = '''Program([ClassDecl(Id(z),Id(f),[MethodDecl(Id(Constructor),Instance,[param(Id(uh),ClassType(Id(Y))),param(Id(K_g_),ClassType(Id(F))),param(Id(_),ArrayType(94,ArrayType(78,IntType))),param(Id(__),ArrayType(94,ArrayType(78,IntType))),param(Id(_),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(r),Id(_),[]),ClassDecl(Id(_D6t_),Id(__),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,ConstDecl(Id(K_5),ArrayType(8,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(S_),ArrayType(65,ArrayType(11,StringType)))),AttributeDecl(Instance,VarDecl(Id(i),ArrayType(65,ArrayType(11,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(65,ArrayType(11,StringType)))),MethodDecl(Id($_),Static,[param(Id(w_),IntType),param(Id(_4),IntType),param(Id(va7_d),IntType),param(Id(_),ClassType(Id(F)))],Block([])),AttributeDecl(Static,ConstDecl(Id($5),StringType,None)),AttributeDecl(Static,ConstDecl(Id($v),ClassType(Id(_63D)),None)),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(_63D)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 1))

    def test_2(self):
        line = '''Class _:_L{Constructor (_8_k:H;_R,_DY_5:z4_8;_:q1;K:wo5){Return ;} }Class _6{Constructor (N4:String ;J,_:String ;_,q:_h;K:_;k,_:UC){}Var $U,C,$95,$5_,p,$3:_;$64(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_L),[MethodDecl(Id(Constructor),Instance,[param(Id(_8_k),ClassType(Id(H))),param(Id(_R),ClassType(Id(z4_8))),param(Id(_DY_5),ClassType(Id(z4_8))),param(Id(_),ClassType(Id(q1))),param(Id(K),ClassType(Id(wo5)))],Block([Return()]))]),ClassDecl(Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(N4),StringType),param(Id(J),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_h))),param(Id(q),ClassType(Id(_h))),param(Id(K),ClassType(Id(_))),param(Id(k),ClassType(Id(UC))),param(Id(_),ClassType(Id(UC)))],Block([])),AttributeDecl(Static,VarDecl(Id($U),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(C),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($95),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(p),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($64),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 2))

    def test_3(self):
        line = '''Class m8x2_22{Val _,_,$6:_;Var _d:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0107],0xA_5],0107],95],0XF],0107],95],5];Var x,VU2:_2;Var f,zg:_2__h;}Class _:o_f{}Class nN1:A{}'''
        expect = '''Program([ClassDecl(Id(m8x2_22),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_)),None)),AttributeDecl(Instance,VarDecl(Id(_d),ArrayType(5,ArrayType(95,ArrayType(71,ArrayType(15,ArrayType(95,ArrayType(71,ArrayType(165,ArrayType(71,FloatType)))))))))),AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(VU2),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(f),ClassType(Id(_2__h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(zg),ClassType(Id(_2__h)),NullLiteral()))]),ClassDecl(Id(_),Id(o_f),[]),ClassDecl(Id(nN1),Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 3))

    def test_4(self):
        line = '''Class _{Destructor (){}Destructor (){} }Class _{w(z_,N:M;QS:_;Z1:Int ){u::$1=O_::$7;}Val nUM:String ;Constructor (_____,_1,__z:Float ){ {Break ;} }Val S2:Int ;Var $t7_A,G_,z,$__:b_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(w),Instance,[param(Id(z_),ClassType(Id(M))),param(Id(N),ClassType(Id(M))),param(Id(QS),ClassType(Id(_))),param(Id(Z1),IntType)],Block([AssignStmt(FieldAccess(Id(u),Id($1)),FieldAccess(Id(O_),Id($7)))])),AttributeDecl(Instance,ConstDecl(Id(nUM),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_____),FloatType),param(Id(_1),FloatType),param(Id(__z),FloatType)],Block([Block([Break])])),AttributeDecl(Instance,ConstDecl(Id(S2),IntType,None)),AttributeDecl(Static,VarDecl(Id($t7_A),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(G_),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(z),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(b_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 4))

    def test_5(self):
        line = '''Class U___{Destructor (){Break ;Continue ;Continue ;Continue ;}Var _,Ys:String ;gR_o_(S1,_07_j96:Array [Array [Int ,0x9_58FA7],0B1];uZ,_:Float ;b2:String ;q7_,_:Array [Array [Boolean ,4],0X78]){} }'''
        expect = '''Program([ClassDecl(Id(U___),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue,Continue,Continue])),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(Ys),StringType)),MethodDecl(Id(gR_o_),Instance,[param(Id(S1),ArrayType(1,ArrayType(9801639,IntType))),param(Id(_07_j96),ArrayType(1,ArrayType(9801639,IntType))),param(Id(uZ),FloatType),param(Id(_),FloatType),param(Id(b2),StringType),param(Id(q7_),ArrayType(120,ArrayType(4,BoolType))),param(Id(_),ArrayType(120,ArrayType(4,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 5))

    def test_6(self):
        line = '''Class _6h:_{Val RLt_:_Y;}Class L:__D{Val $__4:Int ;}Class W{Destructor (){Break ;Break ;Continue ;} }Class C{Var $5:String ;Constructor (_4_9,_:Boolean ;q:String ;J:String ;m,_,_,d3,T0X_:_){} }Class w:_{}'''
        expect = '''Program([ClassDecl(Id(_6h),Id(_),[AttributeDecl(Instance,ConstDecl(Id(RLt_),ClassType(Id(_Y)),None))]),ClassDecl(Id(L),Id(__D),[AttributeDecl(Static,ConstDecl(Id($__4),IntType,None))]),ClassDecl(Id(W),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Break,Continue]))]),ClassDecl(Id(C),[AttributeDecl(Static,VarDecl(Id($5),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_4_9),BoolType),param(Id(_),BoolType),param(Id(q),StringType),param(Id(J),StringType),param(Id(m),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(d3),ClassType(Id(_))),param(Id(T0X_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(w),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 6))

    def test_7(self):
        line = '''Class I{}Class a:_{Constructor (F,f,_,u_0:Array [Int ,050];s:_A;N:_Y;e_24X,__,__,__,z,w:Array [Array [Boolean ,0b1100100],0b1];_,s__2:Array [Array [String ,0B1],0x2D];__,_:Array [Array [Float ,21_1_59],44];_:Array [Int ,0B10101]){} }Class _:f_b_2I{Var $5:Array [Array [String ,0X27],0X27];Val F3:_;}'''
        expect = '''Program([ClassDecl(Id(I),[]),ClassDecl(Id(a),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(F),ArrayType(40,IntType)),param(Id(f),ArrayType(40,IntType)),param(Id(_),ArrayType(40,IntType)),param(Id(u_0),ArrayType(40,IntType)),param(Id(s),ClassType(Id(_A))),param(Id(N),ClassType(Id(_Y))),param(Id(e_24X),ArrayType(1,ArrayType(100,BoolType))),param(Id(__),ArrayType(1,ArrayType(100,BoolType))),param(Id(__),ArrayType(1,ArrayType(100,BoolType))),param(Id(__),ArrayType(1,ArrayType(100,BoolType))),param(Id(z),ArrayType(1,ArrayType(100,BoolType))),param(Id(w),ArrayType(1,ArrayType(100,BoolType))),param(Id(_),ArrayType(45,ArrayType(1,StringType))),param(Id(s__2),ArrayType(45,ArrayType(1,StringType))),param(Id(__),ArrayType(44,ArrayType(21159,FloatType))),param(Id(_),ArrayType(44,ArrayType(21159,FloatType))),param(Id(_),ArrayType(21,IntType))],Block([]))]),ClassDecl(Id(_),Id(f_b_2I),[AttributeDecl(Static,VarDecl(Id($5),ArrayType(39,ArrayType(39,StringType)))),AttributeDecl(Instance,ConstDecl(Id(F3),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 7))

    def test_8(self):
        line = '''Class __:h_{}Class _4{Constructor (){}$7_(){} }Class t:K_{}Class i{Constructor (d,yY4:_){}Val $o,g_4,_8:_;}Class M4{V(){Break ;}Val $3jqD1,$6:_;}Class _{}Class _{z(){Break ;Return ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(h_),[]),ClassDecl(Id(_4),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($7_),Static,[],Block([]))]),ClassDecl(Id(t),Id(K_),[]),ClassDecl(Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(_))),param(Id(yY4),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($o),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(g_4),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_8),ClassType(Id(_)),None))]),ClassDecl(Id(M4),[MethodDecl(Id(V),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($3jqD1),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(z),Instance,[],Block([Break,Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 8))

    def test_9(self):
        line = '''Class _3:__6{Var $_:_s;}Class _:_{Constructor (_,Y,D:Float ;_,_:Array [Array [Array [Array [String ,0b1],0B1_1],0X6],0B11];N6l_,A:_;J:_K2){}Val F:Boolean ;Var $SS:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_3),Id(__6),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_s)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(Y),FloatType),param(Id(D),FloatType),param(Id(_),ArrayType(3,ArrayType(6,ArrayType(3,ArrayType(1,StringType))))),param(Id(_),ArrayType(3,ArrayType(6,ArrayType(3,ArrayType(1,StringType))))),param(Id(N6l_),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(J),ClassType(Id(_K2)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(F),BoolType,None)),AttributeDecl(Static,VarDecl(Id($SS),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 9))

    def test_10(self):
        line = '''Class p_:_{}Class v831:_i2{Var $mG4_,l6p,$141w_,__,J9_7,$65_,$40,c_,$P_A_3S,$4,r__,L6iQS:Array [Float ,6];Constructor (){}Var $1_,Oy:Array [Array [Int ,0x9B],0b101111];}Class q_:__{}'''
        expect = '''Program([ClassDecl(Id(p_),Id(_),[]),ClassDecl(Id(v831),Id(_i2),[AttributeDecl(Static,VarDecl(Id($mG4_),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(l6p),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($141w_),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(J9_7),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($65_),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($40),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(c_),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($P_A_3S),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(r__),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(L6iQS),ArrayType(6,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($1_),ArrayType(47,ArrayType(155,IntType)))),AttributeDecl(Instance,VarDecl(Id(Oy),ArrayType(47,ArrayType(155,IntType))))]),ClassDecl(Id(q_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 10))

    def test_11(self):
        line = '''Class _{Constructor (Y,r1_,w5K,_,_,l03_S6:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B11_1],0124],25],0xBC],0xC],0b1111],07_5_0_4],25]){Break ;}Constructor (Y3Pri:Int ){} }Class dh:__P{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Y),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(r1_),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(w5K),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(_),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(_),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(l03_S6),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType)))))))))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(Y3Pri),IntType)],Block([]))]),ClassDecl(Id(dh),Id(__P),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 11))

    def test_12(self):
        line = '''Class _Op:__7{}Class TZ{}Class N___:u{}Class U__{Constructor (S,u7,_:x;_:Array [Float ,0b10111]){}$_(_P,_,_7:Array [Int ,0x3B]){} }Class Z_:_{Val $_G_:Array [Array [Array [Array [Array [Array [Float ,0b1],0x5],0b10111],0106],0B1],0b1];}'''
        expect = '''Program([ClassDecl(Id(_Op),Id(__7),[]),ClassDecl(Id(TZ),[]),ClassDecl(Id(N___),Id(u),[]),ClassDecl(Id(U__),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(x))),param(Id(u7),ClassType(Id(x))),param(Id(_),ClassType(Id(x))),param(Id(_),ArrayType(23,FloatType))],Block([])),MethodDecl(Id($_),Static,[param(Id(_P),ArrayType(59,IntType)),param(Id(_),ArrayType(59,IntType)),param(Id(_7),ArrayType(59,IntType))],Block([]))]),ClassDecl(Id(Z_),Id(_),[AttributeDecl(Static,ConstDecl(Id($_G_),ArrayType(1,ArrayType(1,ArrayType(70,ArrayType(23,ArrayType(5,ArrayType(1,FloatType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 12))

    def test_13(self):
        line = '''Class K:__9___8{__(Q:Array [Array [Array [Int ,0X38],0b10],0125];__o:Array [Boolean ,0125];_:Z;__,q:_O003;v_,_B3W,_8:String ;_,Mr_:_8;S:__D_){}Var $P_:Float ;Constructor (){Var _Oi:String ;} }Class pxB6_G__Z7{}Class _{}'''
        expect = '''Program([ClassDecl(Id(K),Id(__9___8),[MethodDecl(Id(__),Instance,[param(Id(Q),ArrayType(85,ArrayType(2,ArrayType(56,IntType)))),param(Id(__o),ArrayType(85,BoolType)),param(Id(_),ClassType(Id(Z))),param(Id(__),ClassType(Id(_O003))),param(Id(q),ClassType(Id(_O003))),param(Id(v_),StringType),param(Id(_B3W),StringType),param(Id(_8),StringType),param(Id(_),ClassType(Id(_8))),param(Id(Mr_),ClassType(Id(_8))),param(Id(S),ClassType(Id(__D_)))],Block([])),AttributeDecl(Static,VarDecl(Id($P_),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_Oi),StringType)]))]),ClassDecl(Id(pxB6_G__Z7),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 13))

    def test_14(self):
        line = '''Class _8{Destructor (){Val __K9__:Array [Array [Array [Float ,1],0B110000],0XA];}Destructor (){}$v(M,_,Q7O8:Boolean ;_3_:Array [Array [Array [Array [Array [Boolean ,0XA],2],0b111],0X5],23];Y:Array [Array [Boolean ,0X92],0b101]){Return ;} }Class C_{}'''
        expect = '''Program([ClassDecl(Id(_8),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(__K9__),ArrayType(10,ArrayType(48,ArrayType(1,FloatType))),None)])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($v),Static,[param(Id(M),BoolType),param(Id(_),BoolType),param(Id(Q7O8),BoolType),param(Id(_3_),ArrayType(23,ArrayType(5,ArrayType(7,ArrayType(2,ArrayType(10,BoolType)))))),param(Id(Y),ArrayType(5,ArrayType(146,BoolType)))],Block([Return()]))]),ClassDecl(Id(C_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 14))

    def test_15(self):
        line = '''Class jo{}Class _{}Class Q:d{}Class W{Var _,$i:Array [Int ,97];}Class v{Val $P:Int ;Val $9,$3:String ;Val $_J1:Array [Array [Array [Float ,0b110111],034],0B111010];}Class _:X{}Class D:yM{}'''
        expect = '''Program([ClassDecl(Id(jo),[]),ClassDecl(Id(_),[]),ClassDecl(Id(Q),Id(d),[]),ClassDecl(Id(W),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,IntType))),AttributeDecl(Static,VarDecl(Id($i),ArrayType(97,IntType)))]),ClassDecl(Id(v),[AttributeDecl(Static,ConstDecl(Id($P),IntType,None)),AttributeDecl(Static,ConstDecl(Id($9),StringType,None)),AttributeDecl(Static,ConstDecl(Id($3),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_J1),ArrayType(58,ArrayType(28,ArrayType(55,FloatType))),None))]),ClassDecl(Id(_),Id(X),[]),ClassDecl(Id(D),Id(yM),[])])'''
        self.assertTrue(TestAST.test(line, expect, 15))

    def test_16(self):
        line = '''Class nx{Var $__:_;$_2(){}Constructor (_4,_,P7,_0:Array [Array [Array [Array [Boolean ,0X26],0B1_0],7],7];__,_,a0_,___5__:Int ;__,_:Float ;eP,B,MV_2m5,_:B;_,f9_,V_:_){} }Class _PM{}'''
        expect = '''Program([ClassDecl(Id(nx),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($_2),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_4),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(_),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(P7),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(_0),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(__),IntType),param(Id(_),IntType),param(Id(a0_),IntType),param(Id(___5__),IntType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(eP),ClassType(Id(B))),param(Id(B),ClassType(Id(B))),param(Id(MV_2m5),ClassType(Id(B))),param(Id(_),ClassType(Id(B))),param(Id(_),ClassType(Id(_))),param(Id(f9_),ClassType(Id(_))),param(Id(V_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_PM),[])])'''
        self.assertTrue(TestAST.test(line, expect, 16))

    def test_17(self):
        line = '''Class pH:_{Val $____:Array [Float ,0B111101];Constructor (__,_:Array [String ,87_8_6_5_37_26_576];_:_1_;XR,_:Array [Array [Int ,0B111101],033]){Continue ;}Constructor (){ {Return ;Continue ;} }}'''
        expect = '''Program([ClassDecl(Id(pH),Id(_),[AttributeDecl(Static,ConstDecl(Id($____),ArrayType(61,FloatType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(878653726576,StringType)),param(Id(_),ArrayType(878653726576,StringType)),param(Id(_),ClassType(Id(_1_))),param(Id(XR),ArrayType(27,ArrayType(61,IntType))),param(Id(_),ArrayType(27,ArrayType(61,IntType)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Block([Return(),Continue])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 17))

    def test_18(self):
        line = '''Class o{Constructor (U:Boolean ){}Destructor (){}$_6(f:Int ;I:Array [Array [Array [Float ,3],0X5],0XFC];bK:String ;_:Array [Int ,0xF];n,i:Int ;t6,_91_S5,_:Array [Float ,050]){Continue ;{} }Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(U),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_6),Static,[param(Id(f),IntType),param(Id(I),ArrayType(252,ArrayType(5,ArrayType(3,FloatType)))),param(Id(bK),StringType),param(Id(_),ArrayType(15,IntType)),param(Id(n),IntType),param(Id(i),IntType),param(Id(t6),ArrayType(40,FloatType)),param(Id(_91_S5),ArrayType(40,FloatType)),param(Id(_),ArrayType(40,FloatType))],Block([Continue,Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 18))

    def test_19(self):
        line = '''Class q_s:_{p0(__no,F,_2,_:Array [String ,0b1_0_0_0_1_11111];___:v_;_,X:O;vS_:Array [Boolean ,0133];Nz_8:Z_;Z:Array [Array [Array [Array [Boolean ,0b111100],0b111100],0133],0133];h67,_9,q_2,_:_P___;_:Int ;_N_2:Array [Array [Array [Array [String ,0b11],0b111100],86],0B11];e_:_){} }Class N:sC{Destructor (){}Val _6,$____3:Boolean ;}Class N:_{}Class _L3{}'''
        expect = '''Program([ClassDecl(Id(q_s),Id(_),[MethodDecl(Id(p0),Instance,[param(Id(__no),ArrayType(575,StringType)),param(Id(F),ArrayType(575,StringType)),param(Id(_2),ArrayType(575,StringType)),param(Id(_),ArrayType(575,StringType)),param(Id(___),ClassType(Id(v_))),param(Id(_),ClassType(Id(O))),param(Id(X),ClassType(Id(O))),param(Id(vS_),ArrayType(91,BoolType)),param(Id(Nz_8),ClassType(Id(Z_))),param(Id(Z),ArrayType(91,ArrayType(91,ArrayType(60,ArrayType(60,BoolType))))),param(Id(h67),ClassType(Id(_P___))),param(Id(_9),ClassType(Id(_P___))),param(Id(q_2),ClassType(Id(_P___))),param(Id(_),ClassType(Id(_P___))),param(Id(_),IntType),param(Id(_N_2),ArrayType(3,ArrayType(86,ArrayType(60,ArrayType(3,StringType))))),param(Id(e_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(N),Id(sC),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_6),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($____3),BoolType,None))]),ClassDecl(Id(N),Id(_),[]),ClassDecl(Id(_L3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 19))

    def test_20(self):
        line = '''Class __8:_n{Var __,_:_D_;Constructor (_8,_,_s9Q:j_B;_j77:Array [Array [Array [Array [Float ,2],49],49],0B101_0];g7,__,B_,_:Array [Array [String ,49],042];RW:Boolean ;_287N:String ;_:aP){} }Class _9:U65{}'''
        expect = '''Program([ClassDecl(Id(__8),Id(_n),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_D_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_D_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_8),ClassType(Id(j_B))),param(Id(_),ClassType(Id(j_B))),param(Id(_s9Q),ClassType(Id(j_B))),param(Id(_j77),ArrayType(10,ArrayType(49,ArrayType(49,ArrayType(2,FloatType))))),param(Id(g7),ArrayType(34,ArrayType(49,StringType))),param(Id(__),ArrayType(34,ArrayType(49,StringType))),param(Id(B_),ArrayType(34,ArrayType(49,StringType))),param(Id(_),ArrayType(34,ArrayType(49,StringType))),param(Id(RW),BoolType),param(Id(_287N),StringType),param(Id(_),ClassType(Id(aP)))],Block([]))]),ClassDecl(Id(_9),Id(U65),[])])'''
        self.assertTrue(TestAST.test(line, expect, 20))

    def test_21(self):
        line = '''Class h_{}Class _{Val _O:Array [Array [Array [Array [Array [Array [Array [Int ,8],0b11],14_5],0101],0b1],0377],01_302];Var H,$_99_y,n_0,$8:Array [Array [Boolean ,0X3A],07];}Class _{}'''
        expect = '''Program([ClassDecl(Id(h_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_O),ArrayType(706,ArrayType(255,ArrayType(1,ArrayType(65,ArrayType(145,ArrayType(3,ArrayType(8,IntType))))))),None)),AttributeDecl(Instance,VarDecl(Id(H),ArrayType(7,ArrayType(58,BoolType)))),AttributeDecl(Static,VarDecl(Id($_99_y),ArrayType(7,ArrayType(58,BoolType)))),AttributeDecl(Instance,VarDecl(Id(n_0),ArrayType(7,ArrayType(58,BoolType)))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(7,ArrayType(58,BoolType))))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 21))

    def test_22(self):
        line = '''Class _t{_(n1:Array [Array [Array [Array [Float ,0X53],05_72_1_5],03],03];d,h:Boolean ;_:___9;G_:Qv;jL:h6;_,e9,Q7G,_:_W82){ {} }Val $4A:Array [String ,69];Destructor (){}Destructor (){} }Class A:a_{}Class X:U{Var $4J_,$lj:_;}'''
        expect = '''Program([ClassDecl(Id(_t),[MethodDecl(Id(_),Instance,[param(Id(n1),ArrayType(3,ArrayType(3,ArrayType(24205,ArrayType(83,FloatType))))),param(Id(d),BoolType),param(Id(h),BoolType),param(Id(_),ClassType(Id(___9))),param(Id(G_),ClassType(Id(Qv))),param(Id(jL),ClassType(Id(h6))),param(Id(_),ClassType(Id(_W82))),param(Id(e9),ClassType(Id(_W82))),param(Id(Q7G),ClassType(Id(_W82))),param(Id(_),ClassType(Id(_W82)))],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($4A),ArrayType(69,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(A),Id(a_),[]),ClassDecl(Id(X),Id(U),[AttributeDecl(Static,VarDecl(Id($4J_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($lj),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 22))

    def test_23(self):
        line = '''Class _06:u08h{Constructor (){}v9l(i:Array [Array [Array [Boolean ,7_84],0X5A],0x28];_o464,_5Z2k,_w,sE,_,__,_,z:Gt;y:Int ;_:Int ;T:l7;T9,v,N5,aH_:Float ;_x:Array [String ,0b11_0];l:Float ){Return ;} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_06),Id(u08h),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(v9l),Instance,[param(Id(i),ArrayType(40,ArrayType(90,ArrayType(784,BoolType)))),param(Id(_o464),ClassType(Id(Gt))),param(Id(_5Z2k),ClassType(Id(Gt))),param(Id(_w),ClassType(Id(Gt))),param(Id(sE),ClassType(Id(Gt))),param(Id(_),ClassType(Id(Gt))),param(Id(__),ClassType(Id(Gt))),param(Id(_),ClassType(Id(Gt))),param(Id(z),ClassType(Id(Gt))),param(Id(y),IntType),param(Id(_),IntType),param(Id(T),ClassType(Id(l7))),param(Id(T9),FloatType),param(Id(v),FloatType),param(Id(N5),FloatType),param(Id(aH_),FloatType),param(Id(_x),ArrayType(6,StringType)),param(Id(l),FloatType)],Block([Return()]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 23))

    def test_24(self):
        line = '''Class __:_o_{Var ul:_E3_;Constructor (_zC:___8;D,h:String ;z_9,R_,__e:Array [Array [Array [Boolean ,6_7],0b1001111],0b1]){} }Class _{Destructor (){}Val $_:Int ;}Class __3GV:C7_{}Class t{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_o_),[AttributeDecl(Instance,VarDecl(Id(ul),ClassType(Id(_E3_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_zC),ClassType(Id(___8))),param(Id(D),StringType),param(Id(h),StringType),param(Id(z_9),ArrayType(1,ArrayType(79,ArrayType(67,BoolType)))),param(Id(R_),ArrayType(1,ArrayType(79,ArrayType(67,BoolType)))),param(Id(__e),ArrayType(1,ArrayType(79,ArrayType(67,BoolType))))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(__3GV),Id(C7_),[]),ClassDecl(Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 24))

    def test_25(self):
        line = '''Class _:_5vV{}Class _8{Val _:Array [Array [Array [Array [Boolean ,0X5],5],01],0x37];Val _,$q_:Array [Array [Array [String ,0B1011100],0X8],0x1_B];Constructor (){} }Class J{}Class I0_:_{}Class o9_j25J{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_5vV),[]),ClassDecl(Id(_8),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(55,ArrayType(1,ArrayType(5,ArrayType(5,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(27,ArrayType(8,ArrayType(92,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($q_),ArrayType(27,ArrayType(8,ArrayType(92,StringType))),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(J),[]),ClassDecl(Id(I0_),Id(_),[]),ClassDecl(Id(o9_j25J),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 25))

    def test_26(self):
        line = '''Class _O{}Class g{}Class __{Constructor (_,_4:X6;x__,X:String ;G,_:Array [Int ,0x2B];_JV:Array [Array [Array [Array [Array [Array [Array [Int ,6],1],4_94],01],64],8],03];_,_8_w,B6:Array [Int ,0b11_0];U_:X;_8Vq__:Float ;_,_y:Array [Float ,2_7];_1:Array [String ,033_57_2];r:Array [Array [Float ,0X12],0b10_1_11]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_O),[]),ClassDecl(Id(g),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(X6))),param(Id(_4),ClassType(Id(X6))),param(Id(x__),StringType),param(Id(X),StringType),param(Id(G),ArrayType(43,IntType)),param(Id(_),ArrayType(43,IntType)),param(Id(_JV),ArrayType(3,ArrayType(8,ArrayType(64,ArrayType(1,ArrayType(494,ArrayType(1,ArrayType(6,IntType)))))))),param(Id(_),ArrayType(6,IntType)),param(Id(_8_w),ArrayType(6,IntType)),param(Id(B6),ArrayType(6,IntType)),param(Id(U_),ClassType(Id(X))),param(Id(_8Vq__),FloatType),param(Id(_),ArrayType(27,FloatType)),param(Id(_y),ArrayType(27,FloatType)),param(Id(_1),ArrayType(14202,StringType)),param(Id(r),ArrayType(23,ArrayType(18,FloatType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 26))

    def test_27(self):
        line = '''Class _:t_{}Class _{Val $_:Array [Float ,80];Constructor (B5:Array [Array [Boolean ,0B1],4];b:Array [Array [Array [Array [Int ,0X3],0B1],0X3],0x16]){}Var $_SsMp4:Boolean ;KS9(){}y8(){}$3_(_z__b,J,_l:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(t_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(80,FloatType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(B5),ArrayType(4,ArrayType(1,BoolType))),param(Id(b),ArrayType(22,ArrayType(3,ArrayType(1,ArrayType(3,IntType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($_SsMp4),BoolType)),MethodDecl(Id(KS9),Instance,[],Block([])),MethodDecl(Id(y8),Instance,[],Block([])),MethodDecl(Id($3_),Static,[param(Id(_z__b),IntType),param(Id(J),IntType),param(Id(_l),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 27))

    def test_28(self):
        line = '''Class S__:_{}Class J:_0__{}Class r__{W5_4jm__(_,c,_:_;vt:String ;_:P;L3,_,_6N_:Array [Float ,025];_,__:Array [Int ,75];_8L,_,C,_,d,_:String ;_,_,q,_A:C_;V:Array [Array [Float ,4],0B11_111];_w,w:Int ){}Val $Ie:String ;}'''
        expect = '''Program([ClassDecl(Id(S__),Id(_),[]),ClassDecl(Id(J),Id(_0__),[]),ClassDecl(Id(r__),[MethodDecl(Id(W5_4jm__),Instance,[param(Id(_),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(vt),StringType),param(Id(_),ClassType(Id(P))),param(Id(L3),ArrayType(21,FloatType)),param(Id(_),ArrayType(21,FloatType)),param(Id(_6N_),ArrayType(21,FloatType)),param(Id(_),ArrayType(75,IntType)),param(Id(__),ArrayType(75,IntType)),param(Id(_8L),StringType),param(Id(_),StringType),param(Id(C),StringType),param(Id(_),StringType),param(Id(d),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(C_))),param(Id(_),ClassType(Id(C_))),param(Id(q),ClassType(Id(C_))),param(Id(_A),ClassType(Id(C_))),param(Id(V),ArrayType(31,ArrayType(4,FloatType))),param(Id(_w),IntType),param(Id(w),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Ie),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 28))

    def test_29(self):
        line = '''Class D7:u_j{Val T:Array [Boolean ,0B1010011];Var __m01:Array [Array [Array [Array [Array [Array [Int ,0332],061276],63_8],0x12],0x8_8],5_4];Var e57R:Array [String ,0105];$4x2r(){} }'''
        expect = '''Program([ClassDecl(Id(D7),Id(u_j),[AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(83,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(__m01),ArrayType(54,ArrayType(136,ArrayType(18,ArrayType(638,ArrayType(25278,ArrayType(218,IntType)))))))),AttributeDecl(Instance,VarDecl(Id(e57R),ArrayType(69,StringType))),MethodDecl(Id($4x2r),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 29))

    def test_30(self):
        line = '''Class M{}Class _0:_M5{}Class _:B5{Var $___:_;Constructor (_:Int ){}$P___(q,_,bL5__RD,pO36_:_8;M_5,c,AsF:Array [Array [Array [Array [Array [Array [Boolean ,0b1],0113],0b11],0B1_101_1_0],0X5B],55];_:X;_:Float ){} }Class oZ{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(M),[]),ClassDecl(Id(_0),Id(_M5),[]),ClassDecl(Id(_),Id(B5),[AttributeDecl(Static,VarDecl(Id($___),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),MethodDecl(Id($P___),Static,[param(Id(q),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(bL5__RD),ClassType(Id(_8))),param(Id(pO36_),ClassType(Id(_8))),param(Id(M_5),ArrayType(55,ArrayType(91,ArrayType(54,ArrayType(3,ArrayType(75,ArrayType(1,BoolType))))))),param(Id(c),ArrayType(55,ArrayType(91,ArrayType(54,ArrayType(3,ArrayType(75,ArrayType(1,BoolType))))))),param(Id(AsF),ArrayType(55,ArrayType(91,ArrayType(54,ArrayType(3,ArrayType(75,ArrayType(1,BoolType))))))),param(Id(_),ClassType(Id(X))),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(oZ),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 30))

    def test_31(self):
        line = '''Class __{z(){}Constructor (_,g5WWs76_:Boolean ;_,_,m7566_n:Boolean ;_:Float ;_:Array [Array [Float ,0b1000111],0B1011011];_,X:Array [Array [Array [Boolean ,0404_64_0_5_6_5],0X51],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(z),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(g5WWs76_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(m7566_n),BoolType),param(Id(_),FloatType),param(Id(_),ArrayType(91,ArrayType(71,FloatType))),param(Id(_),ArrayType(1,ArrayType(81,ArrayType(68370805,BoolType)))),param(Id(X),ArrayType(1,ArrayType(81,ArrayType(68370805,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 31))

    def test_32(self):
        line = '''Class uE:V{Constructor (_7:Int ;F97:Array [Array [Int ,0B110],0X53];M:Array [Array [Array [Array [Array [Float ,0B1010000],0103],10],7_0],94]){} }Class _{}Class _9:_{}Class qX:b{Val J:Int ;}'''
        expect = '''Program([ClassDecl(Id(uE),Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),IntType),param(Id(F97),ArrayType(83,ArrayType(6,IntType))),param(Id(M),ArrayType(94,ArrayType(70,ArrayType(10,ArrayType(67,ArrayType(80,FloatType))))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_9),Id(_),[]),ClassDecl(Id(qX),Id(b),[AttributeDecl(Instance,ConstDecl(Id(J),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 32))

    def test_33(self):
        line = '''Class __79:Q_{Constructor (_,__:Int ;x,l1,_:Float ;a,V:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,044],0B1],0b100],0X3_2],0b11],0XBD3],38],044],38],0B1011101]){} }'''
        expect = '''Program([ClassDecl(Id(__79),Id(Q_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(__),IntType),param(Id(x),FloatType),param(Id(l1),FloatType),param(Id(_),FloatType),param(Id(a),ArrayType(93,ArrayType(38,ArrayType(36,ArrayType(38,ArrayType(3027,ArrayType(3,ArrayType(50,ArrayType(4,ArrayType(1,ArrayType(36,FloatType))))))))))),param(Id(V),ArrayType(93,ArrayType(38,ArrayType(36,ArrayType(38,ArrayType(3027,ArrayType(3,ArrayType(50,ArrayType(4,ArrayType(1,ArrayType(36,FloatType)))))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 33))

    def test_34(self):
        line = '''Class _eZ8U_{Var _:d;Constructor (){}Destructor (){ {}Continue ;Return ;}Var t,MCQ:_;Var $4_S:String ;Var $H,$H:String ;}Class z{Val $__,_,$2_,$_x__JU:i_;}Class e2{Val Lu:y;}'''
        expect = '''Program([ClassDecl(Id(_eZ8U_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(d)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Continue,Return()])),AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(MCQ),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4_S),StringType)),AttributeDecl(Static,VarDecl(Id($H),StringType)),AttributeDecl(Static,VarDecl(Id($H),StringType))]),ClassDecl(Id(z),[AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(i_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(i_)),None)),AttributeDecl(Static,ConstDecl(Id($2_),ClassType(Id(i_)),None)),AttributeDecl(Static,ConstDecl(Id($_x__JU),ClassType(Id(i_)),None))]),ClassDecl(Id(e2),[AttributeDecl(Instance,ConstDecl(Id(Lu),ClassType(Id(y)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 34))

    def test_35(self):
        line = '''Class L:u{Var e,$H:Array [Array [Array [Array [Array [Float ,0B1],0B1001110],77],0B1001110],9_1];}Class _{}Class i4c{}Class E_{Var $_6:Array [Array [Array [Int ,026_00],0X42],0110];}Class e{}'''
        expect = '''Program([ClassDecl(Id(L),Id(u),[AttributeDecl(Instance,VarDecl(Id(e),ArrayType(91,ArrayType(78,ArrayType(77,ArrayType(78,ArrayType(1,FloatType))))))),AttributeDecl(Static,VarDecl(Id($H),ArrayType(91,ArrayType(78,ArrayType(77,ArrayType(78,ArrayType(1,FloatType)))))))]),ClassDecl(Id(_),[]),ClassDecl(Id(i4c),[]),ClassDecl(Id(E_),[AttributeDecl(Static,VarDecl(Id($_6),ArrayType(72,ArrayType(66,ArrayType(1408,IntType)))))]),ClassDecl(Id(e),[])])'''
        self.assertTrue(TestAST.test(line, expect, 35))

    def test_36(self):
        line = '''Class _Z3_:_g_j{}Class f__:LT{Destructor (){ {} }Var __:Array [Int ,0117];}Class b4:p{$_(_:Array [Array [Array [Float ,0b11_0],0x3C],0x3C];dTp__,_H9:_39;h,p_J:_;XH_,_73__,_:Array [String ,0b101]){}Constructor (i6_,_5_a,_8:z9;_,C:Float ){} }Class U_R_{}'''
        expect = '''Program([ClassDecl(Id(_Z3_),Id(_g_j),[]),ClassDecl(Id(f__),Id(LT),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(79,IntType)))]),ClassDecl(Id(b4),Id(p),[MethodDecl(Id($_),Static,[param(Id(_),ArrayType(60,ArrayType(60,ArrayType(6,FloatType)))),param(Id(dTp__),ClassType(Id(_39))),param(Id(_H9),ClassType(Id(_39))),param(Id(h),ClassType(Id(_))),param(Id(p_J),ClassType(Id(_))),param(Id(XH_),ArrayType(5,StringType)),param(Id(_73__),ArrayType(5,StringType)),param(Id(_),ArrayType(5,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i6_),ClassType(Id(z9))),param(Id(_5_a),ClassType(Id(z9))),param(Id(_8),ClassType(Id(z9))),param(Id(_),FloatType),param(Id(C),FloatType)],Block([]))]),ClassDecl(Id(U_R_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 36))

    def test_37(self):
        line = '''Class _{Destructor (){} }Class __{Var $fcU8,$_,$_,_,$T,_:String ;Var _:Array [Array [Array [String ,0B100010],34_429],014];}Class _H{Ky(_3:Array [Array [Array [Array [Float ,0b1011111],36],36],36];ue6,XV5,saG0:Array [Array [Array [Int ,9],04],0x5];p_t:Boolean ){}Destructor (){}Val D9_F_:Array [Array [String ,0X5],050];Destructor (){Continue ;{} }}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($fcU8),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($T),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(12,ArrayType(34429,ArrayType(34,StringType)))))]),ClassDecl(Id(_H),[MethodDecl(Id(Ky),Instance,[param(Id(_3),ArrayType(36,ArrayType(36,ArrayType(36,ArrayType(95,FloatType))))),param(Id(ue6),ArrayType(5,ArrayType(4,ArrayType(9,IntType)))),param(Id(XV5),ArrayType(5,ArrayType(4,ArrayType(9,IntType)))),param(Id(saG0),ArrayType(5,ArrayType(4,ArrayType(9,IntType)))),param(Id(p_t),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(D9_F_),ArrayType(40,ArrayType(5,StringType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 37))

    def test_38(self):
        line = '''Class I1:Z_1UbF{Var __:Boolean ;}Class _{}Class c2:Z{}Class _:__{Val $2_p:Array [Array [Array [Boolean ,07_27],0b1_00],07_5_02_2];}Class _9:_{}Class _e:hH{Destructor (){}Val $_:Array [Float ,0X1A];}'''
        expect = '''Program([ClassDecl(Id(I1),Id(Z_1UbF),[AttributeDecl(Instance,VarDecl(Id(__),BoolType))]),ClassDecl(Id(_),[]),ClassDecl(Id(c2),Id(Z),[]),ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($2_p),ArrayType(31250,ArrayType(4,ArrayType(471,BoolType))),None))]),ClassDecl(Id(_9),Id(_),[]),ClassDecl(Id(_e),Id(hH),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(26,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 38))

    def test_39(self):
        line = '''Class __C7q0_j{Constructor (){}H(_0:Array [Int ,66];qL:Array [Float ,07];_n:Array [Int ,66];X_,S:Float ;C:String ;MY:Array [Boolean ,02];_,_y7__,_,_:y;w:Boolean ;_:_;u8,m_5:Array [Array [Int ,66],0b110010]){} }'''
        expect = '''Program([ClassDecl(Id(__C7q0_j),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(H),Instance,[param(Id(_0),ArrayType(66,IntType)),param(Id(qL),ArrayType(7,FloatType)),param(Id(_n),ArrayType(66,IntType)),param(Id(X_),FloatType),param(Id(S),FloatType),param(Id(C),StringType),param(Id(MY),ArrayType(2,BoolType)),param(Id(_),ClassType(Id(y))),param(Id(_y7__),ClassType(Id(y))),param(Id(_),ClassType(Id(y))),param(Id(_),ClassType(Id(y))),param(Id(w),BoolType),param(Id(_),ClassType(Id(_))),param(Id(u8),ArrayType(50,ArrayType(66,IntType))),param(Id(m_5),ArrayType(50,ArrayType(66,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 39))

    def test_40(self):
        line = '''Class H{Val $1,$m,$_3:Array [Array [Boolean ,35],35];J_(){} }Class __2_7{}Class _1{Constructor (_:Array [Array [Array [Boolean ,0b10011],0b11],0x8_0_F_5];_L,__:Array [Array [Float ,0B1110],017];V,tE__:Boolean ;__3,c,m,__c,_:Array [Int ,0b1];RJ,Q_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(H),[AttributeDecl(Static,ConstDecl(Id($1),ArrayType(35,ArrayType(35,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($m),ArrayType(35,ArrayType(35,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_3),ArrayType(35,ArrayType(35,BoolType)),None)),MethodDecl(Id(J_),Instance,[],Block([]))]),ClassDecl(Id(__2_7),[]),ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(33013,ArrayType(3,ArrayType(19,BoolType)))),param(Id(_L),ArrayType(15,ArrayType(14,FloatType))),param(Id(__),ArrayType(15,ArrayType(14,FloatType))),param(Id(V),BoolType),param(Id(tE__),BoolType),param(Id(__3),ArrayType(1,IntType)),param(Id(c),ArrayType(1,IntType)),param(Id(m),ArrayType(1,IntType)),param(Id(__c),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(RJ),IntType),param(Id(Q_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 40))

    def test_41(self):
        line = '''Class _:gZ673{}Class __{Constructor (){Break ;m1_::$__();Return ;e::$_1();Break ;} }Class ZG2{Constructor (){Var _:Array [Array [Array [Float ,864],0B11],0B100100];Return ;Return ;}Val $_,$_7____:_9;}'''
        expect = '''Program([ClassDecl(Id(_),Id(gZ673),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Call(Id(m1_),Id($__),[]),Return(),Call(Id(e),Id($_1),[]),Break]))]),ClassDecl(Id(ZG2),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_),ArrayType(36,ArrayType(3,ArrayType(864,FloatType)))),Return(),Return()])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_9)),None)),AttributeDecl(Static,ConstDecl(Id($_7____),ClassType(Id(_9)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 41))

    def test_42(self):
        line = '''Class IG:_{f(_:Array [Float ,072];c_h,__,s,_,k5P:Array [Int ,7];_,_4_T,_,_,_:Array [Array [Array [Array [Int ,0X5B],057],0x1],0X5_1];P0_D,oo:w;_I,_O,r,_7:Array [Float ,0x7]){} }'''
        expect = '''Program([ClassDecl(Id(IG),Id(_),[MethodDecl(Id(f),Instance,[param(Id(_),ArrayType(58,FloatType)),param(Id(c_h),ArrayType(7,IntType)),param(Id(__),ArrayType(7,IntType)),param(Id(s),ArrayType(7,IntType)),param(Id(_),ArrayType(7,IntType)),param(Id(k5P),ArrayType(7,IntType)),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_4_T),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(P0_D),ClassType(Id(w))),param(Id(oo),ClassType(Id(w))),param(Id(_I),ArrayType(7,FloatType)),param(Id(_O),ArrayType(7,FloatType)),param(Id(r),ArrayType(7,FloatType)),param(Id(_7),ArrayType(7,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 42))

    def test_43(self):
        line = '''Class __T0SU:_{Destructor (){}Val $_R:Array [Int ,0b101111];Val $P,$___8,$2,$o_82_,D2R:M_;Var $N,$__,$9_,F,X,$e,$wj:String ;}Class __n:_{Constructor (k:_5g){} }Class _2:_{}'''
        expect = '''Program([ClassDecl(Id(__T0SU),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_R),ArrayType(47,IntType),None)),AttributeDecl(Static,ConstDecl(Id($P),ClassType(Id(M_)),None)),AttributeDecl(Static,ConstDecl(Id($___8),ClassType(Id(M_)),None)),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(M_)),None)),AttributeDecl(Static,ConstDecl(Id($o_82_),ClassType(Id(M_)),None)),AttributeDecl(Instance,ConstDecl(Id(D2R),ClassType(Id(M_)),None)),AttributeDecl(Static,VarDecl(Id($N),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType)),AttributeDecl(Static,VarDecl(Id($9_),StringType)),AttributeDecl(Instance,VarDecl(Id(F),StringType)),AttributeDecl(Instance,VarDecl(Id(X),StringType)),AttributeDecl(Static,VarDecl(Id($e),StringType)),AttributeDecl(Static,VarDecl(Id($wj),StringType))]),ClassDecl(Id(__n),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(_5g)))],Block([]))]),ClassDecl(Id(_2),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 43))

    def test_44(self):
        line = '''Class H_:_k_{Constructor (__pR:Int ;D___:W){}Destructor (){} }Class _1_{}Class _{$_(_C_97_,_1,Y:Array [String ,16];T:Array [Array [Float ,6_0],06]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(H_),Id(_k_),[MethodDecl(Id(Constructor),Instance,[param(Id(__pR),IntType),param(Id(D___),ClassType(Id(W)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_1_),[]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[param(Id(_C_97_),ArrayType(16,StringType)),param(Id(_1),ArrayType(16,StringType)),param(Id(Y),ArrayType(16,StringType)),param(Id(T),ArrayType(6,ArrayType(60,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 44))

    def test_45(self):
        line = '''Class u4R4:_6{$3(_9:_){} }Class G:_{Var RD,$_7:_63;}Class PQ1_B_D{}Class _:K{_(_,_0:Array [String ,0xF5D_4];PnK6N_v,_:Boolean ){} }Class _:J{$N(_,Z_3,_:Boolean ){}Var L43:_95;}'''
        expect = '''Program([ClassDecl(Id(u4R4),Id(_6),[MethodDecl(Id($3),Static,[param(Id(_9),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(G),Id(_),[AttributeDecl(Instance,VarDecl(Id(RD),ClassType(Id(_63)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_7),ClassType(Id(_63)),NullLiteral()))]),ClassDecl(Id(PQ1_B_D),[]),ClassDecl(Id(_),Id(K),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(62932,StringType)),param(Id(_0),ArrayType(62932,StringType)),param(Id(PnK6N_v),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),Id(J),[MethodDecl(Id($N),Static,[param(Id(_),BoolType),param(Id(Z_3),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(L43),ClassType(Id(_95)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 45))

    def test_46(self):
        line = '''Class __8{Var j_,_:Array [Array [Float ,0B1010101],0153];Val $F_7_,_:_;}Class __{}Class _8{}Class _:_{Constructor (__,_,_,_D,_0,aIRP114,_8_:S;_,_:Array [Array [Float ,100],025];p:Int ;__5,o:String ;___k_O:C;r,w:Array [Array [String ,03],8_9]){} }'''
        expect = '''Program([ClassDecl(Id(__8),[AttributeDecl(Instance,VarDecl(Id(j_),ArrayType(107,ArrayType(85,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(107,ArrayType(85,FloatType)))),AttributeDecl(Static,ConstDecl(Id($F_7_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None))]),ClassDecl(Id(__),[]),ClassDecl(Id(_8),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_D),ClassType(Id(S))),param(Id(_0),ClassType(Id(S))),param(Id(aIRP114),ClassType(Id(S))),param(Id(_8_),ClassType(Id(S))),param(Id(_),ArrayType(21,ArrayType(100,FloatType))),param(Id(_),ArrayType(21,ArrayType(100,FloatType))),param(Id(p),IntType),param(Id(__5),StringType),param(Id(o),StringType),param(Id(___k_O),ClassType(Id(C))),param(Id(r),ArrayType(89,ArrayType(3,StringType))),param(Id(w),ArrayType(89,ArrayType(3,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 46))

    def test_47(self):
        line = '''Class _{Val _,_,a0_:c;Val g09_1,e:Array [Float ,030];}Class e7{}Class Ee:__{$_530(){}Constructor (__:Int ;_v4,_,_,c9:_y;f,_E:Array [Float ,0b1011100];us,a_,_6_,_,_5:q){}Var g,X,$ZtO,TNc,_:Array [String ,05_407];Val e7:L984;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(c)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(c)),None)),AttributeDecl(Instance,ConstDecl(Id(a0_),ClassType(Id(c)),None)),AttributeDecl(Instance,ConstDecl(Id(g09_1),ArrayType(24,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(24,FloatType),None))]),ClassDecl(Id(e7),[]),ClassDecl(Id(Ee),Id(__),[MethodDecl(Id($_530),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(_v4),ClassType(Id(_y))),param(Id(_),ClassType(Id(_y))),param(Id(_),ClassType(Id(_y))),param(Id(c9),ClassType(Id(_y))),param(Id(f),ArrayType(92,FloatType)),param(Id(_E),ArrayType(92,FloatType)),param(Id(us),ClassType(Id(q))),param(Id(a_),ClassType(Id(q))),param(Id(_6_),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(_5),ClassType(Id(q)))],Block([])),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(2823,StringType))),AttributeDecl(Instance,VarDecl(Id(X),ArrayType(2823,StringType))),AttributeDecl(Static,VarDecl(Id($ZtO),ArrayType(2823,StringType))),AttributeDecl(Instance,VarDecl(Id(TNc),ArrayType(2823,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2823,StringType))),AttributeDecl(Instance,ConstDecl(Id(e7),ClassType(Id(L984)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 47))

    def test_48(self):
        line = '''Class _:__15E{Var $G,_:Array [Array [String ,0B10],0X3];Constructor (_:Array [Array [Array [Float ,0113],073],93];rm_,_1cW_Mm,ke,f5_O:B;_,i_:_;_b_0:Boolean ;Z,_,G,_:Array [Int ,7_7_8];r,_,_256,f,R:_TR){}Destructor (){Continue ;}Destructor (){}kq7(Y,GN7aw_:Array [Boolean ,5]){} }Class p{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__15E),[AttributeDecl(Static,VarDecl(Id($G),ArrayType(3,ArrayType(2,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(2,StringType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(93,ArrayType(59,ArrayType(75,FloatType)))),param(Id(rm_),ClassType(Id(B))),param(Id(_1cW_Mm),ClassType(Id(B))),param(Id(ke),ClassType(Id(B))),param(Id(f5_O),ClassType(Id(B))),param(Id(_),ClassType(Id(_))),param(Id(i_),ClassType(Id(_))),param(Id(_b_0),BoolType),param(Id(Z),ArrayType(778,IntType)),param(Id(_),ArrayType(778,IntType)),param(Id(G),ArrayType(778,IntType)),param(Id(_),ArrayType(778,IntType)),param(Id(r),ClassType(Id(_TR))),param(Id(_),ClassType(Id(_TR))),param(Id(_256),ClassType(Id(_TR))),param(Id(f),ClassType(Id(_TR))),param(Id(R),ClassType(Id(_TR)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(kq7),Instance,[param(Id(Y),ArrayType(5,BoolType)),param(Id(GN7aw_),ArrayType(5,BoolType))],Block([]))]),ClassDecl(Id(p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 48))

    def test_49(self):
        line = '''Class P:r{Val $15__,K_3,$0:Array [Array [Array [Array [Array [Array [Boolean ,2],0XD],2],0X9],017],2];Var $Eq,$o,_8,$_,$M_E_:Array [Int ,017];Val $___,_P:String ;_F(p_:_5___){}_(WVhN_,m:__7_1_m_;_:Int ){} }Class B:En_{Val $_1_60_:Array [Boolean ,2];}'''
        expect = '''Program([ClassDecl(Id(P),Id(r),[AttributeDecl(Static,ConstDecl(Id($15__),ArrayType(2,ArrayType(15,ArrayType(9,ArrayType(2,ArrayType(13,ArrayType(2,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(K_3),ArrayType(2,ArrayType(15,ArrayType(9,ArrayType(2,ArrayType(13,ArrayType(2,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(2,ArrayType(15,ArrayType(9,ArrayType(2,ArrayType(13,ArrayType(2,BoolType)))))),None)),AttributeDecl(Static,VarDecl(Id($Eq),ArrayType(15,IntType))),AttributeDecl(Static,VarDecl(Id($o),ArrayType(15,IntType))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(15,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15,IntType))),AttributeDecl(Static,VarDecl(Id($M_E_),ArrayType(15,IntType))),AttributeDecl(Static,ConstDecl(Id($___),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_P),StringType,None)),MethodDecl(Id(_F),Instance,[param(Id(p_),ClassType(Id(_5___)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(WVhN_),ClassType(Id(__7_1_m_))),param(Id(m),ClassType(Id(__7_1_m_))),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(B),Id(En_),[AttributeDecl(Static,ConstDecl(Id($_1_60_),ArrayType(2,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 49))

    def test_50(self):
        line = '''Class SZN:H2{Val i:Array [String ,022];}Class aY_:_{}Class o{Constructor (){} }Class Z_:z{}Class _:A_{Var __41:Array [Int ,03];Constructor (){} }Class As5:G52{Val D_,$sk,__8,J:_9X;}'''
        expect = '''Program([ClassDecl(Id(SZN),Id(H2),[AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(18,StringType),None))]),ClassDecl(Id(aY_),Id(_),[]),ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Z_),Id(z),[]),ClassDecl(Id(_),Id(A_),[AttributeDecl(Instance,VarDecl(Id(__41),ArrayType(3,IntType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(As5),Id(G52),[AttributeDecl(Instance,ConstDecl(Id(D_),ClassType(Id(_9X)),None)),AttributeDecl(Static,ConstDecl(Id($sk),ClassType(Id(_9X)),None)),AttributeDecl(Instance,ConstDecl(Id(__8),ClassType(Id(_9X)),None)),AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(_9X)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 50))

    def test_51(self):
        line = '''Class _Z:g64{}Class _{Val C_:Array [Array [Array [Array [Float ,14_76_8],01],0b11001],01_0_1];Destructor (){ {} }}Class _49__v:I{}Class _:_{Var $d:Array [String ,0103];}Class __{}Class b:__{Constructor (){} }Class C:g{C__(){Continue ;}Val ui:Array [Array [Boolean ,0x62],0X6A];}'''
        expect = '''Program([ClassDecl(Id(_Z),Id(g64),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(C_),ArrayType(65,ArrayType(25,ArrayType(1,ArrayType(14768,FloatType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_49__v),Id(I),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($d),ArrayType(67,StringType)))]),ClassDecl(Id(__),[]),ClassDecl(Id(b),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(C),Id(g),[MethodDecl(Id(C__),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(ui),ArrayType(106,ArrayType(98,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 51))

    def test_52(self):
        line = '''Class U03_1X7_:T{Destructor (){}Destructor (){Val _,w:Array [Array [Array [Array [Boolean ,0116],0B1],0116],0X2E];}_8_8(Y,d_:Boolean ;_3,__F:_;U:_){Break ;}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(U03_1X7_),Id(T),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(46,ArrayType(78,ArrayType(1,ArrayType(78,BoolType)))),None),ConstDecl(Id(w),ArrayType(46,ArrayType(78,ArrayType(1,ArrayType(78,BoolType)))),None)])),MethodDecl(Id(_8_8),Instance,[param(Id(Y),BoolType),param(Id(d_),BoolType),param(Id(_3),ClassType(Id(_))),param(Id(__F),ClassType(Id(_))),param(Id(U),ClassType(Id(_)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 52))

    def test_53(self):
        line = '''Class _8O{a(_,M,L,_:Array [Boolean ,0B101_1]){Continue ;Return ;} }Class _lj{}Class _2W{Val $6,_:Boolean ;w5(k9_:m;E_H9,_7,n7L:String ){}Destructor (){Return ;} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_8O),[MethodDecl(Id(a),Instance,[param(Id(_),ArrayType(11,BoolType)),param(Id(M),ArrayType(11,BoolType)),param(Id(L),ArrayType(11,BoolType)),param(Id(_),ArrayType(11,BoolType))],Block([Continue,Return()]))]),ClassDecl(Id(_lj),[]),ClassDecl(Id(_2W),[AttributeDecl(Static,ConstDecl(Id($6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(w5),Instance,[param(Id(k9_),ClassType(Id(m))),param(Id(E_H9),StringType),param(Id(_7),StringType),param(Id(n7L),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 53))

    def test_54(self):
        line = '''Class K7{Var _2:_;}Class ____{}Class _1v{Constructor (_1_:Float ;__,_,__:Boolean ;_H:String ;x_H,_A_:K_){Val e3:Float ;} }Class FPx_{}Class s:_{}Class _{}Class _ex:__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(K7),[AttributeDecl(Instance,VarDecl(Id(_2),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(____),[]),ClassDecl(Id(_1v),[MethodDecl(Id(Constructor),Instance,[param(Id(_1_),FloatType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(__),BoolType),param(Id(_H),StringType),param(Id(x_H),ClassType(Id(K_))),param(Id(_A_),ClassType(Id(K_)))],Block([ConstDecl(Id(e3),FloatType,None)]))]),ClassDecl(Id(FPx_),[]),ClassDecl(Id(s),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_ex),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 54))

    def test_55(self):
        line = '''Class __:_{}Class _{Constructor (T:Z){}$_(){}_(H,D:Array [Array [Array [Float ,0X10],0x7],9];_c:Array [Array [Float ,7],0X10];__5,i_,m_38:_;__h,j_,L,M:Array [Array [Array [Array [Array [Boolean ,9_936],620],0135],0B100101],0135];P:Int ){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T),ClassType(Id(Z)))],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(H),ArrayType(9,ArrayType(7,ArrayType(16,FloatType)))),param(Id(D),ArrayType(9,ArrayType(7,ArrayType(16,FloatType)))),param(Id(_c),ArrayType(16,ArrayType(7,FloatType))),param(Id(__5),ClassType(Id(_))),param(Id(i_),ClassType(Id(_))),param(Id(m_38),ClassType(Id(_))),param(Id(__h),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(j_),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(L),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(M),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(P),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 55))

    def test_56(self):
        line = '''Class l_o_{Val $_0_6,_3O:Float ;}Class b:_82{Constructor (K:Array [Int ,0144]){Return ;}Constructor (Q:Boolean ;_:Array [Int ,0b101110];__,d3n_:Int ;dj:_;X:_){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(l_o_),[AttributeDecl(Static,ConstDecl(Id($_0_6),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_3O),FloatType,None))]),ClassDecl(Id(b),Id(_82),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(100,IntType))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(Q),BoolType),param(Id(_),ArrayType(46,IntType)),param(Id(__),IntType),param(Id(d3n_),IntType),param(Id(dj),ClassType(Id(_))),param(Id(X),ClassType(Id(_)))],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 56))

    def test_57(self):
        line = '''Class __2:_{Destructor (){} }Class _:_90__k4__{$4(R,_,_570:_;j_,L,_,Kw,Ns7Y,_5:Array [String ,06_67]){}Constructor (Po,N:Array [Boolean ,0X9_F]){}Destructor (){} }Class _____0{}Class a57:__a3{}'''
        expect = '''Program([ClassDecl(Id(__2),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_90__k4__),[MethodDecl(Id($4),Static,[param(Id(R),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_570),ClassType(Id(_))),param(Id(j_),ArrayType(439,StringType)),param(Id(L),ArrayType(439,StringType)),param(Id(_),ArrayType(439,StringType)),param(Id(Kw),ArrayType(439,StringType)),param(Id(Ns7Y),ArrayType(439,StringType)),param(Id(_5),ArrayType(439,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Po),ArrayType(159,BoolType)),param(Id(N),ArrayType(159,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_____0),[]),ClassDecl(Id(a57),Id(__a3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 57))

    def test_58(self):
        line = '''Class _:_6{Destructor (){}S(){}Constructor (_V,_6,__2_,Z:M_P;b,W_,_74D_:Array [Array [Array [Array [Array [Array [String ,02],01],28],07_1],015_7_2],0X1];v_b__:Array [String ,0x8]){Return ;}Val r__0:A;Var $_1:Array [Array [String ,0xFF_F],02];}Class _{}Class _f{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_6),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(S),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_V),ClassType(Id(M_P))),param(Id(_6),ClassType(Id(M_P))),param(Id(__2_),ClassType(Id(M_P))),param(Id(Z),ClassType(Id(M_P))),param(Id(b),ArrayType(1,ArrayType(890,ArrayType(57,ArrayType(28,ArrayType(1,ArrayType(2,StringType))))))),param(Id(W_),ArrayType(1,ArrayType(890,ArrayType(57,ArrayType(28,ArrayType(1,ArrayType(2,StringType))))))),param(Id(_74D_),ArrayType(1,ArrayType(890,ArrayType(57,ArrayType(28,ArrayType(1,ArrayType(2,StringType))))))),param(Id(v_b__),ArrayType(8,StringType))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(r__0),ClassType(Id(A)),None)),AttributeDecl(Static,VarDecl(Id($_1),ArrayType(2,ArrayType(4095,StringType))))]),ClassDecl(Id(_),[]),ClassDecl(Id(_f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 58))

    def test_59(self):
        line = '''Class _:_g{Constructor (_:Array [Int ,0B1];pe_:Array [Array [Array [Array [Array [Array [Array [String ,0xC],0X46_06],1],1],0X247],0B11101],5_42]){} }Class __L_{Val s0:Array [Array [String ,0X8],0x3];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,IntType)),param(Id(pe_),ArrayType(542,ArrayType(29,ArrayType(583,ArrayType(1,ArrayType(1,ArrayType(17926,ArrayType(12,StringType))))))))],Block([]))]),ClassDecl(Id(__L_),[AttributeDecl(Instance,ConstDecl(Id(s0),ArrayType(3,ArrayType(8,StringType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 59))

    def test_60(self):
        line = '''Class _U{$26(_Q_4T,_,_H,_,_:Array [Array [Array [Int ,0x4],0b1],0b1101];_,_:Boolean ){}Constructor (T:Array [String ,0x4]){}Val $hI,_:Array [Array [Array [Int ,05],0xC],50];Destructor (){} }Class _{Var N_,_,H:Array [Boolean ,0B1_01];Constructor (){}Constructor (t,_:Float ){}Var $06:k_;b(){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_U),[MethodDecl(Id($26),Static,[param(Id(_Q_4T),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_H),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(4,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($hI),ArrayType(50,ArrayType(12,ArrayType(5,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(50,ArrayType(12,ArrayType(5,IntType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(N_),ArrayType(5,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,BoolType))),AttributeDecl(Instance,VarDecl(Id(H),ArrayType(5,BoolType))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(t),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($06),ClassType(Id(k_)),NullLiteral())),MethodDecl(Id(b),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 60))

    def test_61(self):
        line = '''Class _:_F{$g3(_,__07,w:Array [Array [String ,0125],3];_l,__:Array [Float ,0125];_5,_U:Array [String ,0x44]){}Var Xv:Array [Array [Int ,04],0xB_0_DB];Destructor (){}Constructor (Q0,_r:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_F),[MethodDecl(Id($g3),Static,[param(Id(_),ArrayType(3,ArrayType(85,StringType))),param(Id(__07),ArrayType(3,ArrayType(85,StringType))),param(Id(w),ArrayType(3,ArrayType(85,StringType))),param(Id(_l),ArrayType(85,FloatType)),param(Id(__),ArrayType(85,FloatType)),param(Id(_5),ArrayType(68,StringType)),param(Id(_U),ArrayType(68,StringType))],Block([])),AttributeDecl(Instance,VarDecl(Id(Xv),ArrayType(45275,ArrayType(4,IntType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Q0),FloatType),param(Id(_r),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 61))

    def test_62(self):
        line = '''Class LA49{}Class _{}Class S:_{Var $J2,$01,__,_:Array [Float ,5];}Class _:Q{Constructor (){} }Class _{}Class c1{Constructor (){Continue ;Break ;}Var $3_,n_,$2,_34,$_,$6,$V,$_z__I_:_;}Class G{}'''
        expect = '''Program([ClassDecl(Id(LA49),[]),ClassDecl(Id(_),[]),ClassDecl(Id(S),Id(_),[AttributeDecl(Static,VarDecl(Id($J2),ArrayType(5,FloatType))),AttributeDecl(Static,VarDecl(Id($01),ArrayType(5,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(5,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,FloatType)))]),ClassDecl(Id(_),Id(Q),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(c1),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Break])),AttributeDecl(Static,VarDecl(Id($3_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_34),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($V),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_z__I_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 62))

    def test_63(self):
        line = '''Class YIL_:I_{Constructor (_:Array [Array [String ,0B1011000],03];Cn:Array [Array [Array [Float ,0b110000],0376],9_7_1];_:Boolean ;B:_pZ;X_F__,_:Float ){} }Class _hl6_:EVA7{Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(YIL_),Id(I_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(88,StringType))),param(Id(Cn),ArrayType(971,ArrayType(254,ArrayType(48,FloatType)))),param(Id(_),BoolType),param(Id(B),ClassType(Id(_pZ))),param(Id(X_F__),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_hl6_),Id(EVA7),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 63))

    def test_64(self):
        line = '''Class r{Val $5253_,$Z:X6;}Class T4:p{Destructor (){}Destructor (){Val P:Float ;} }Class m7_5hx8:p_{Var $lm:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b10],0x7],0x44],0x7_C_B],9],0xE29_C8],034],05_6_1];}Class G{Cc(){} }'''
        expect = '''Program([ClassDecl(Id(r),[AttributeDecl(Static,ConstDecl(Id($5253_),ClassType(Id(X6)),None)),AttributeDecl(Static,ConstDecl(Id($Z),ClassType(Id(X6)),None))]),ClassDecl(Id(T4),Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(P),FloatType,None)]))]),ClassDecl(Id(m7_5hx8),Id(p_),[AttributeDecl(Static,VarDecl(Id($lm),ArrayType(369,ArrayType(28,ArrayType(928200,ArrayType(9,ArrayType(1995,ArrayType(68,ArrayType(7,ArrayType(2,BoolType))))))))))]),ClassDecl(Id(G),[MethodDecl(Id(Cc),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 64))

    def test_65(self):
        line = '''Class __:_{}Class _{Var $6,_,$4,$_,$7,$_:Int ;}Class v_{}Class Z:v8_{}Class w_{Constructor (){}Var $8x_W_,$mX,wy_7_,$s,S_9:F;Val $7_Y:Int ;Constructor (l,mT,J0J,FX:Float ;_6L:Float ;_3Q_,e,EsR:Float ;W9v_6__:Array [Int ,0xB];_c____,_:s){Var k,_,D8x:_;} }Class _0s_w4:_{}Class ___67_305__:_{Val LO7:Boolean ;}Class x2:s_9W{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($6),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($4),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(v_),[]),ClassDecl(Id(Z),Id(v8_),[]),ClassDecl(Id(w_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($8x_W_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($mX),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(wy_7_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($s),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S_9),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($7_Y),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(l),FloatType),param(Id(mT),FloatType),param(Id(J0J),FloatType),param(Id(FX),FloatType),param(Id(_6L),FloatType),param(Id(_3Q_),FloatType),param(Id(e),FloatType),param(Id(EsR),FloatType),param(Id(W9v_6__),ArrayType(11,IntType)),param(Id(_c____),ClassType(Id(s))),param(Id(_),ClassType(Id(s)))],Block([VarDecl(Id(k),ClassType(Id(_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_)),NullLiteral()),VarDecl(Id(D8x),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(_0s_w4),Id(_),[]),ClassDecl(Id(___67_305__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(LO7),BoolType,None))]),ClassDecl(Id(x2),Id(s_9W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 65))

    def test_66(self):
        line = '''Class _:mo_{Var _,_:Boolean ;Var l_d:m;Constructor (_69,_:Array [Array [Boolean ,44_9],7];_:Array [Array [Boolean ,0x5F],0X4C]){Return ;}$U(M_9:Array [Int ,1];MK7b_d39:L;S_:Array [String ,0b11]){Break ;{} }Val Az,$_:j;}'''
        expect = '''Program([ClassDecl(Id(_),Id(mo_),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(l_d),ClassType(Id(m)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_69),ArrayType(7,ArrayType(449,BoolType))),param(Id(_),ArrayType(7,ArrayType(449,BoolType))),param(Id(_),ArrayType(76,ArrayType(95,BoolType)))],Block([Return()])),MethodDecl(Id($U),Static,[param(Id(M_9),ArrayType(1,IntType)),param(Id(MK7b_d39),ClassType(Id(L))),param(Id(S_),ArrayType(3,StringType))],Block([Break,Block([])])),AttributeDecl(Instance,ConstDecl(Id(Az),ClassType(Id(j)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(j)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 66))

    def test_67(self):
        line = '''Class ____{}Class _{Constructor (X2,__:KI55;_:x;_6m8,__W,n0:Boolean ;N5:_){} }Class _3:p5Q{Val $10_:Boolean ;_6(){} }Class D{}Class csY4_:d{}Class C:_{}Class S:_q{}'''
        expect = '''Program([ClassDecl(Id(____),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(X2),ClassType(Id(KI55))),param(Id(__),ClassType(Id(KI55))),param(Id(_),ClassType(Id(x))),param(Id(_6m8),BoolType),param(Id(__W),BoolType),param(Id(n0),BoolType),param(Id(N5),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_3),Id(p5Q),[AttributeDecl(Static,ConstDecl(Id($10_),BoolType,None)),MethodDecl(Id(_6),Instance,[],Block([]))]),ClassDecl(Id(D),[]),ClassDecl(Id(csY4_),Id(d),[]),ClassDecl(Id(C),Id(_),[]),ClassDecl(Id(S),Id(_q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 67))

    def test_68(self):
        line = '''Class s:__{Var $_,$_:String ;}Class O2:_P_J1{Constructor (t:n;_n,_,E_4:Array [Array [Array [Array [Float ,0X26],03],0b11111],01_3]){Break ;}Destructor (){}Val _,d_K_:Float ;Val shE:Array [Array [Array [Array [Int ,0B1010],0x45],0x45],0B1010];Var Y_i__i_:Array [String ,03];Var $ZN,Z:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(s),Id(__),[AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType))]),ClassDecl(Id(O2),Id(_P_J1),[MethodDecl(Id(Constructor),Instance,[param(Id(t),ClassType(Id(n))),param(Id(_n),ArrayType(11,ArrayType(31,ArrayType(3,ArrayType(38,FloatType))))),param(Id(_),ArrayType(11,ArrayType(31,ArrayType(3,ArrayType(38,FloatType))))),param(Id(E_4),ArrayType(11,ArrayType(31,ArrayType(3,ArrayType(38,FloatType)))))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(d_K_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(shE),ArrayType(10,ArrayType(69,ArrayType(69,ArrayType(10,IntType)))),None)),AttributeDecl(Instance,VarDecl(Id(Y_i__i_),ArrayType(3,StringType))),AttributeDecl(Static,VarDecl(Id($ZN),BoolType)),AttributeDecl(Instance,VarDecl(Id(Z),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 68))

    def test_69(self):
        line = '''Class a{$x(b,PDi,_C,_8_:Array [String ,0b1100000];_,_s_v,_1:_){Break ;Continue ;} }Class _{Constructor (){}_(J_a_23o7,j_:Array [Array [Array [Boolean ,01],5_3_4_4],036];_V:Array [Int ,060_6];_,G:Array [Int ,02_53];Kk:Float ){}Constructor (q:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id($x),Static,[param(Id(b),ArrayType(96,StringType)),param(Id(PDi),ArrayType(96,StringType)),param(Id(_C),ArrayType(96,StringType)),param(Id(_8_),ArrayType(96,StringType)),param(Id(_),ClassType(Id(_))),param(Id(_s_v),ClassType(Id(_))),param(Id(_1),ClassType(Id(_)))],Block([Break,Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(J_a_23o7),ArrayType(30,ArrayType(5344,ArrayType(1,BoolType)))),param(Id(j_),ArrayType(30,ArrayType(5344,ArrayType(1,BoolType)))),param(Id(_V),ArrayType(390,IntType)),param(Id(_),ArrayType(171,IntType)),param(Id(G),ArrayType(171,IntType)),param(Id(Kk),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(q),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 69))

    def test_70(self):
        line = '''Class _:a__{Constructor (_:Array [Array [Boolean ,48],033];F1a0p,M,__:X;_,f:Array [Array [Array [Array [Array [Array [Array [Float ,033],0x54],03],6],48],363_2_1_4_3],0b1];_,_,Q:_4v_0_;W:Array [Array [String ,0x9],48];i__,T,_,A:_9;U,_W:_){}Destructor (){Val _,u9_X:Array [Int ,0B1_0_1];} }'''
        expect = '''Program([ClassDecl(Id(_),Id(a__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(27,ArrayType(48,BoolType))),param(Id(F1a0p),ClassType(Id(X))),param(Id(M),ClassType(Id(X))),param(Id(__),ClassType(Id(X))),param(Id(_),ArrayType(1,ArrayType(3632143,ArrayType(48,ArrayType(6,ArrayType(3,ArrayType(84,ArrayType(27,FloatType)))))))),param(Id(f),ArrayType(1,ArrayType(3632143,ArrayType(48,ArrayType(6,ArrayType(3,ArrayType(84,ArrayType(27,FloatType)))))))),param(Id(_),ClassType(Id(_4v_0_))),param(Id(_),ClassType(Id(_4v_0_))),param(Id(Q),ClassType(Id(_4v_0_))),param(Id(W),ArrayType(48,ArrayType(9,StringType))),param(Id(i__),ClassType(Id(_9))),param(Id(T),ClassType(Id(_9))),param(Id(_),ClassType(Id(_9))),param(Id(A),ClassType(Id(_9))),param(Id(U),ClassType(Id(_))),param(Id(_W),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(5,IntType),None),ConstDecl(Id(u9_X),ArrayType(5,IntType),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 70))

    def test_71(self):
        line = '''Class _0_:_5{}Class _WD:D___8{$91_(_,M26,S,__:Array [String ,0b11110]){} }Class _:__8ip{}Class k26kFw:_1{Constructor (Z:Int ;_32,CN:Array [Float ,0X13]){}Val _:J5;Constructor (){}$d(){} }Class _:f{}'''
        expect = '''Program([ClassDecl(Id(_0_),Id(_5),[]),ClassDecl(Id(_WD),Id(D___8),[MethodDecl(Id($91_),Static,[param(Id(_),ArrayType(30,StringType)),param(Id(M26),ArrayType(30,StringType)),param(Id(S),ArrayType(30,StringType)),param(Id(__),ArrayType(30,StringType))],Block([]))]),ClassDecl(Id(_),Id(__8ip),[]),ClassDecl(Id(k26kFw),Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),IntType),param(Id(_32),ArrayType(19,FloatType)),param(Id(CN),ArrayType(19,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(J5)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($d),Static,[],Block([]))]),ClassDecl(Id(_),Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 71))

    def test_72(self):
        line = '''Class P{Var _:Array [Array [Array [Array [Array [String ,06_3_3],0B11_1_1],0X46],2],062];Var $___:Int ;}Class __:baZ{Destructor (){}Val $5:Array [Array [Array [Array [Array [Array [Boolean ,02],9],0x1A],024],0b1000],04_0];}'''
        expect = '''Program([ClassDecl(Id(P),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(50,ArrayType(2,ArrayType(70,ArrayType(15,ArrayType(411,StringType))))))),AttributeDecl(Static,VarDecl(Id($___),IntType))]),ClassDecl(Id(__),Id(baZ),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(32,ArrayType(8,ArrayType(20,ArrayType(26,ArrayType(9,ArrayType(2,BoolType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 72))

    def test_73(self):
        line = '''Class _:ve__Q_9_{}Class _:H1{Constructor (__,_,q_T_0:Array [Int ,58];_W,J,_1,_s_:Array [Array [Array [Array [Array [Array [String ,6_8_41_9],0b1],93],58],58],3_3];z,t:Array [Boolean ,047];_8:N8___){ {}{} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(ve__Q_9_),[]),ClassDecl(Id(_),Id(H1),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(58,IntType)),param(Id(_),ArrayType(58,IntType)),param(Id(q_T_0),ArrayType(58,IntType)),param(Id(_W),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(J),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(_1),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(_s_),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(z),ArrayType(39,BoolType)),param(Id(t),ArrayType(39,BoolType)),param(Id(_8),ClassType(Id(N8___)))],Block([Block([]),Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 73))

    def test_74(self):
        line = '''Class a__1:u{}Class ePz{}Class _946{Destructor (){} }Class _{$9(){Continue ;}Constructor (){}Val e:Array [String ,0b101];Val $4:Array [Array [Array [Array [Array [Array [Array [Float ,87_6_92],0X46],0X5],0b1_11],75],0b101],0b101];}Class e{}Class L_0A{Destructor (){Continue ;Return ;Return ;} }Class _{Val Y,$___:Array [Boolean ,021];}'''
        expect = '''Program([ClassDecl(Id(a__1),Id(u),[]),ClassDecl(Id(ePz),[]),ClassDecl(Id(_946),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($9),Static,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(5,StringType),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(5,ArrayType(5,ArrayType(75,ArrayType(7,ArrayType(5,ArrayType(70,ArrayType(87692,FloatType))))))),None))]),ClassDecl(Id(e),[]),ClassDecl(Id(L_0A),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return(),Return()]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(17,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($___),ArrayType(17,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 74))

    def test_75(self):
        line = '''Class L{}Class _f{Val $6,$8,X,cX0,$9,$l,__r2_y_:Array [String ,0B111100];$__(){}Val $y,$C:Boolean ;Var $h:Array [Array [Array [Array [Array [String ,0X31],0X31],0B111100],020],0xB];}'''
        expect = '''Program([ClassDecl(Id(L),[]),ClassDecl(Id(_f),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(cX0),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($l),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(__r2_y_),ArrayType(60,StringType),None)),MethodDecl(Id($__),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($y),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($C),BoolType,None)),AttributeDecl(Static,VarDecl(Id($h),ArrayType(11,ArrayType(16,ArrayType(60,ArrayType(49,ArrayType(49,StringType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 75))

    def test_76(self):
        line = '''Class _:_{}Class f__:u799{$K_z3__(){Continue ;_::$50F();Continue ;}Constructor (){Return ;} }Class qX9U:K76{$8(X:Array [Boolean ,0X44];_,_:Array [Int ,652];F_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(f__),Id(u799),[MethodDecl(Id($K_z3__),Static,[],Block([Continue,Call(Id(_),Id($50F),[]),Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))]),ClassDecl(Id(qX9U),Id(K76),[MethodDecl(Id($8),Static,[param(Id(X),ArrayType(68,BoolType)),param(Id(_),ArrayType(652,IntType)),param(Id(_),ArrayType(652,IntType)),param(Id(F_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 76))

    def test_77(self):
        line = '''Class b24U{Var $7_,$_k_:Int ;BP80(_:Array [Float ,013_13_4];_:Array [Array [Boolean ,021],29];d2D_,_:Array [String ,60]){}q(L9_,_:Array [Array [String ,60],10]){} }Class A0{}'''
        expect = '''Program([ClassDecl(Id(b24U),[AttributeDecl(Static,VarDecl(Id($7_),IntType)),AttributeDecl(Static,VarDecl(Id($_k_),IntType)),MethodDecl(Id(BP80),Instance,[param(Id(_),ArrayType(5724,FloatType)),param(Id(_),ArrayType(29,ArrayType(17,BoolType))),param(Id(d2D_),ArrayType(60,StringType)),param(Id(_),ArrayType(60,StringType))],Block([])),MethodDecl(Id(q),Instance,[param(Id(L9_),ArrayType(10,ArrayType(60,StringType))),param(Id(_),ArrayType(10,ArrayType(60,StringType)))],Block([]))]),ClassDecl(Id(A0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 77))

    def test_78(self):
        line = '''Class _2{Var A:Array [Array [Array [Float ,05],3],0b10];__(_:Array [Array [Array [Array [Array [Array [Float ,0x12],0x5],0x12],45],045],0b1];_:_;__,__:_N_){} }Class _5B:qv_{Var _:Tc9_;}Class __:_S{}Class V___30_{}'''
        expect = '''Program([ClassDecl(Id(_2),[AttributeDecl(Instance,VarDecl(Id(A),ArrayType(2,ArrayType(3,ArrayType(5,FloatType))))),MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(1,ArrayType(37,ArrayType(45,ArrayType(18,ArrayType(5,ArrayType(18,FloatType))))))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_N_))),param(Id(__),ClassType(Id(_N_)))],Block([]))]),ClassDecl(Id(_5B),Id(qv_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(Tc9_)),NullLiteral()))]),ClassDecl(Id(__),Id(_S),[]),ClassDecl(Id(V___30_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 78))

    def test_79(self):
        line = '''Class _____{B4(_:Array [String ,0x50];__J1,_:Array [Array [Array [Array [Array [Array [Int ,0B1],06_3],2_7],0b100111],0B1_1_1],0b100111];D2,d,__4,_:e;d,p,_a_9pQ,Ni7__:_;_:_){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_____),[MethodDecl(Id(B4),Instance,[param(Id(_),ArrayType(80,StringType)),param(Id(__J1),ArrayType(39,ArrayType(7,ArrayType(39,ArrayType(27,ArrayType(51,ArrayType(1,IntType))))))),param(Id(_),ArrayType(39,ArrayType(7,ArrayType(39,ArrayType(27,ArrayType(51,ArrayType(1,IntType))))))),param(Id(D2),ClassType(Id(e))),param(Id(d),ClassType(Id(e))),param(Id(__4),ClassType(Id(e))),param(Id(_),ClassType(Id(e))),param(Id(d),ClassType(Id(_))),param(Id(p),ClassType(Id(_))),param(Id(_a_9pQ),ClassType(Id(_))),param(Id(Ni7__),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 79))

    def test_80(self):
        line = '''Class C:GIT{}Class R:k{}Class h:d{Val vc0,$1,$x,$_r369_:_Q_7;Constructor (_:_K;_2:Boolean ;w,l:Int ;_:Array [Array [Array [Array [Int ,0B101011],0x1D],0b1100100],0XC];J8,_:Int ;_b,_P:_){} }'''
        expect = '''Program([ClassDecl(Id(C),Id(GIT),[]),ClassDecl(Id(R),Id(k),[]),ClassDecl(Id(h),Id(d),[AttributeDecl(Instance,ConstDecl(Id(vc0),ClassType(Id(_Q_7)),None)),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_Q_7)),None)),AttributeDecl(Static,ConstDecl(Id($x),ClassType(Id(_Q_7)),None)),AttributeDecl(Static,ConstDecl(Id($_r369_),ClassType(Id(_Q_7)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_K))),param(Id(_2),BoolType),param(Id(w),IntType),param(Id(l),IntType),param(Id(_),ArrayType(12,ArrayType(100,ArrayType(29,ArrayType(43,IntType))))),param(Id(J8),IntType),param(Id(_),IntType),param(Id(_b),ClassType(Id(_))),param(Id(_P),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 80))

    def test_81(self):
        line = '''Class Z{}Class ZA{Constructor (){}Destructor (){} }Class _j_:_{}Class _i:_91r{}Class x{Val _,$p,$X:g;Var h3u_4K__,$39,$_:Array [Array [Float ,0x43],0b11_0];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Z),[]),ClassDecl(Id(ZA),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_j_),Id(_),[]),ClassDecl(Id(_i),Id(_91r),[]),ClassDecl(Id(x),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(g)),None)),AttributeDecl(Static,ConstDecl(Id($p),ClassType(Id(g)),None)),AttributeDecl(Static,ConstDecl(Id($X),ClassType(Id(g)),None)),AttributeDecl(Instance,VarDecl(Id(h3u_4K__),ArrayType(6,ArrayType(67,FloatType)))),AttributeDecl(Static,VarDecl(Id($39),ArrayType(6,ArrayType(67,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(6,ArrayType(67,FloatType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 81))

    def test_82(self):
        line = '''Class _:E{Constructor (_,J:_W_;_q,_e1_:Array [Float ,0b111000];m:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0X3],0X1],0X5],25],0x1],0xB_E],04],97_1],05],03];l,_:Array [Array [String ,0b1],0b101];_5_,_9_:S;J,_,U:J8){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_W_))),param(Id(J),ClassType(Id(_W_))),param(Id(_q),ArrayType(56,FloatType)),param(Id(_e1_),ArrayType(56,FloatType)),param(Id(m),ArrayType(3,ArrayType(5,ArrayType(971,ArrayType(4,ArrayType(190,ArrayType(1,ArrayType(25,ArrayType(5,ArrayType(1,ArrayType(3,StringType))))))))))),param(Id(l),ArrayType(5,ArrayType(1,StringType))),param(Id(_),ArrayType(5,ArrayType(1,StringType))),param(Id(_5_),ClassType(Id(S))),param(Id(_9_),ClassType(Id(S))),param(Id(J),ClassType(Id(J8))),param(Id(_),ClassType(Id(J8))),param(Id(U),ClassType(Id(J8)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 82))

    def test_83(self):
        line = '''Class _0:_2{Constructor (_j,uW:Array [Array [Array [String ,0b100],0x4C],0B1010000];L:Float ;YW:Array [Boolean ,0B1010000];Ek,__,_:Dju_;Q_3_5_,_:Boolean ;_a5,L:Float ;_,_:Array [Float ,3_6_407]){}Val _4_:Float ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_0),Id(_2),[MethodDecl(Id(Constructor),Instance,[param(Id(_j),ArrayType(80,ArrayType(76,ArrayType(4,StringType)))),param(Id(uW),ArrayType(80,ArrayType(76,ArrayType(4,StringType)))),param(Id(L),FloatType),param(Id(YW),ArrayType(80,BoolType)),param(Id(Ek),ClassType(Id(Dju_))),param(Id(__),ClassType(Id(Dju_))),param(Id(_),ClassType(Id(Dju_))),param(Id(Q_3_5_),BoolType),param(Id(_),BoolType),param(Id(_a5),FloatType),param(Id(L),FloatType),param(Id(_),ArrayType(36407,FloatType)),param(Id(_),ArrayType(36407,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_4_),FloatType,None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 83))

    def test_84(self):
        line = '''Class _:__8{Constructor (F6,l,m72:Int ;L5_:Array [Array [Array [Int ,33],0b1001],0b101];p,B9,_l:Array [Float ,82];_E:Array [Float ,0x23]){Continue ;} }Class X{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(__8),[MethodDecl(Id(Constructor),Instance,[param(Id(F6),IntType),param(Id(l),IntType),param(Id(m72),IntType),param(Id(L5_),ArrayType(5,ArrayType(9,ArrayType(33,IntType)))),param(Id(p),ArrayType(82,FloatType)),param(Id(B9),ArrayType(82,FloatType)),param(Id(_l),ArrayType(82,FloatType)),param(Id(_E),ArrayType(35,FloatType))],Block([Continue]))]),ClassDecl(Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 84))

    def test_85(self):
        line = '''Class _7{Constructor (_:x1Z;X:Array [Array [Array [Array [Int ,0b11_0],0b1100000],07],0x22];K_,i,Rd:Boolean ){} }Class __{$7t(SR:J;H_:Array [Array [Array [Boolean ,31],010],0X20];J_Eq8:String ){}Var V:Array [Float ,0b1];}'''
        expect = '''Program([ClassDecl(Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(x1Z))),param(Id(X),ArrayType(34,ArrayType(7,ArrayType(96,ArrayType(6,IntType))))),param(Id(K_),BoolType),param(Id(i),BoolType),param(Id(Rd),BoolType)],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($7t),Static,[param(Id(SR),ClassType(Id(J))),param(Id(H_),ArrayType(32,ArrayType(8,ArrayType(31,BoolType)))),param(Id(J_Eq8),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(V),ArrayType(1,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 85))

    def test_86(self):
        line = '''Class __D_{Constructor (_l50,t,f:String ;D08:Int ;S:Array [Array [Boolean ,56],0x6];_:Boolean ;_i:m){Continue ;Val _8a__,_:Array [Float ,6];Val X_9_:Boolean ;Continue ;}Var _,_:Array [Array [Boolean ,56],076];}'''
        expect = '''Program([ClassDecl(Id(__D_),[MethodDecl(Id(Constructor),Instance,[param(Id(_l50),StringType),param(Id(t),StringType),param(Id(f),StringType),param(Id(D08),IntType),param(Id(S),ArrayType(6,ArrayType(56,BoolType))),param(Id(_),BoolType),param(Id(_i),ClassType(Id(m)))],Block([Continue,ConstDecl(Id(_8a__),ArrayType(6,FloatType),None),ConstDecl(Id(_),ArrayType(6,FloatType),None),ConstDecl(Id(X_9_),BoolType,None),Continue])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(62,ArrayType(56,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(62,ArrayType(56,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 86))

    def test_87(self):
        line = '''Class SX:_O{Val $H,$Q5,_:Array [String ,0x41];Constructor (){Break ;Var _8_,a,jJS:i;}Var _,$F:Array [Array [Boolean ,01],36];}Class W_{Constructor (__:Array [Boolean ,0B1010111]){}Constructor (_IU_:_){} }Class w_{Val t:Array [Boolean ,0X3D];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(SX),Id(_O),[AttributeDecl(Static,ConstDecl(Id($H),ArrayType(65,StringType),None)),AttributeDecl(Static,ConstDecl(Id($Q5),ArrayType(65,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(65,StringType),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break,VarDecl(Id(_8_),ClassType(Id(i)),NullLiteral()),VarDecl(Id(a),ClassType(Id(i)),NullLiteral()),VarDecl(Id(jJS),ClassType(Id(i)),NullLiteral())])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(36,ArrayType(1,BoolType)))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(36,ArrayType(1,BoolType))))]),ClassDecl(Id(W_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(87,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_IU_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(w_),[AttributeDecl(Instance,ConstDecl(Id(t),ArrayType(61,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 87))

    def test_88(self):
        line = '''Class m__{Val _,$4s_,lN:z;$8(){Continue ;}Val $10:E;$__(KG_5:Array [Boolean ,32];H7,F:String ;O7ay_:Array [Array [Float ,0141],0X1C];_,Y9:Int ;_,X2,C,nD_,_:E;y0_S_:_){Return ;}Val _6,_g_Fk:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(m__),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(z)),None)),AttributeDecl(Static,ConstDecl(Id($4s_),ClassType(Id(z)),None)),AttributeDecl(Instance,ConstDecl(Id(lN),ClassType(Id(z)),None)),MethodDecl(Id($8),Static,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($10),ClassType(Id(E)),None)),MethodDecl(Id($__),Static,[param(Id(KG_5),ArrayType(32,BoolType)),param(Id(H7),StringType),param(Id(F),StringType),param(Id(O7ay_),ArrayType(28,ArrayType(97,FloatType))),param(Id(_),IntType),param(Id(Y9),IntType),param(Id(_),ClassType(Id(E))),param(Id(X2),ClassType(Id(E))),param(Id(C),ClassType(Id(E))),param(Id(nD_),ClassType(Id(E))),param(Id(_),ClassType(Id(E))),param(Id(y0_S_),ClassType(Id(_)))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(_6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_g_Fk),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 88))

    def test_89(self):
        line = '''Class f:w{}Class c{}Class E{Constructor (D:Array [Array [Float ,014_7],66];_,_,H,_2,_:Array [Float ,0B110000];_,xNa_:Array [Int ,055];D:Boolean ;__79,_h7,_:Array [Array [Array [Int ,03_2],055],0b110111];_:Array [Float ,3];k_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(w),[]),ClassDecl(Id(c),[]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(D),ArrayType(66,ArrayType(103,FloatType))),param(Id(_),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(H),ArrayType(48,FloatType)),param(Id(_2),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(_),ArrayType(45,IntType)),param(Id(xNa_),ArrayType(45,IntType)),param(Id(D),BoolType),param(Id(__79),ArrayType(55,ArrayType(45,ArrayType(26,IntType)))),param(Id(_h7),ArrayType(55,ArrayType(45,ArrayType(26,IntType)))),param(Id(_),ArrayType(55,ArrayType(45,ArrayType(26,IntType)))),param(Id(_),ArrayType(3,FloatType)),param(Id(k_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 89))

    def test_90(self):
        line = '''Class W{}Class Q9{}Class _4_{Constructor (_:Array [Boolean ,0b1];_,_:I8_6;_,_:String ;_,p,_,J,___5,KN:Array [Array [Array [Array [Array [Int ,28],28],0b110100],031],031]){} }'''
        expect = '''Program([ClassDecl(Id(W),[]),ClassDecl(Id(Q9),[]),ClassDecl(Id(_4_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(I8_6))),param(Id(_),ClassType(Id(I8_6))),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(p),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(_),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(J),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(___5),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(KN),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 90))

    def test_91(self):
        line = '''Class L{b(_,__W:Array [Array [Array [Boolean ,0x38],0x38],4169_4];y,I_4_,_,i,O1,C,I3:_;_2t,_e:Array [Array [Array [Array [Array [Boolean ,0X4D],0b1000001],04],01],0B1000100]){} }Class _R_:L{Constructor (){ {} }Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id(b),Instance,[param(Id(_),ArrayType(41694,ArrayType(56,ArrayType(56,BoolType)))),param(Id(__W),ArrayType(41694,ArrayType(56,ArrayType(56,BoolType)))),param(Id(y),ClassType(Id(_))),param(Id(I_4_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(O1),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(I3),ClassType(Id(_))),param(Id(_2t),ArrayType(68,ArrayType(1,ArrayType(4,ArrayType(65,ArrayType(77,BoolType)))))),param(Id(_e),ArrayType(68,ArrayType(1,ArrayType(4,ArrayType(65,ArrayType(77,BoolType))))))],Block([]))]),ClassDecl(Id(_R_),Id(L),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 91))

    def test_92(self):
        line = '''Class _:XB3{Var _:__;}Class V8_3:_Z_2{}Class _{}Class _c:S{Constructor (_,w3:_;S_,_:Array [Boolean ,8];R1,_3tV:Array [Array [Array [Array [Array [Array [String ,6],6],0B1_0],0xA0],72],0B1];S,_F5r_:_){} }Class _{Var $s:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(XB3),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__)),NullLiteral()))]),ClassDecl(Id(V8_3),Id(_Z_2),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_c),Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(w3),ClassType(Id(_))),param(Id(S_),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType)),param(Id(R1),ArrayType(1,ArrayType(72,ArrayType(160,ArrayType(2,ArrayType(6,ArrayType(6,StringType))))))),param(Id(_3tV),ArrayType(1,ArrayType(72,ArrayType(160,ArrayType(2,ArrayType(6,ArrayType(6,StringType))))))),param(Id(S),ClassType(Id(_))),param(Id(_F5r_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($s),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 92))

    def test_93(self):
        line = '''Class _:_{Val $____:Boolean ;Destructor (){}Constructor (_vf_j_p:String ;Jk,_,_,_:Array [Array [String ,94],0X8]){}Var $_6VEO0e93:Array [Array [Boolean ,9_0],0x11];}Class _4x:__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($____),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_vf_j_p),StringType),param(Id(Jk),ArrayType(8,ArrayType(94,StringType))),param(Id(_),ArrayType(8,ArrayType(94,StringType))),param(Id(_),ArrayType(8,ArrayType(94,StringType))),param(Id(_),ArrayType(8,ArrayType(94,StringType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_6VEO0e93),ArrayType(17,ArrayType(90,BoolType))))]),ClassDecl(Id(_4x),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 93))

    def test_94(self):
        line = '''Class F{XvI(Z,F0:Boolean ;CV:_16;o_:Array [Array [Array [Array [Array [Int ,6],0b1_0_0],0x60],6],0x60];_:Array [Array [String ,0B1_0],6];_2,Y,_z,P_r,U1,_2_:Int ;s_:Array [Array [Array [Int ,05],6],0b1000011];YL,f3:Array [Array [String ,6],5];_35,_,_:Int ){} }Class n2:_Z{Constructor (){} }Class _:F{}'''
        expect = '''Program([ClassDecl(Id(F),[MethodDecl(Id(XvI),Instance,[param(Id(Z),BoolType),param(Id(F0),BoolType),param(Id(CV),ClassType(Id(_16))),param(Id(o_),ArrayType(96,ArrayType(6,ArrayType(96,ArrayType(4,ArrayType(6,IntType)))))),param(Id(_),ArrayType(6,ArrayType(2,StringType))),param(Id(_2),IntType),param(Id(Y),IntType),param(Id(_z),IntType),param(Id(P_r),IntType),param(Id(U1),IntType),param(Id(_2_),IntType),param(Id(s_),ArrayType(67,ArrayType(6,ArrayType(5,IntType)))),param(Id(YL),ArrayType(5,ArrayType(6,StringType))),param(Id(f3),ArrayType(5,ArrayType(6,StringType))),param(Id(_35),IntType),param(Id(_),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(n2),Id(_Z),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(F),[])])'''
        self.assertTrue(TestAST.test(line, expect, 94))

    def test_95(self):
        line = '''Class g{Constructor (_:q;___5U,_9:_){Continue ;}Val _,$c:Array [Float ,06_7];}Class U{Val U,$o_:W;f1(){Return ;Continue ;} }Class __{Z4J(){} }Class _{}Class j:a__{Constructor (){Break ;Var __,L,A2,_,_:W;Val _1__,_:String ;} }Class W{}Class _{}'''
        expect = '''Program([ClassDecl(Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(q))),param(Id(___5U),ClassType(Id(_))),param(Id(_9),ClassType(Id(_)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(55,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(55,FloatType),None))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(U),ClassType(Id(W)),None)),AttributeDecl(Static,ConstDecl(Id($o_),ClassType(Id(W)),None)),MethodDecl(Id(f1),Instance,[],Block([Return(),Continue]))]),ClassDecl(Id(__),[MethodDecl(Id(Z4J),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(j),Id(a__),[MethodDecl(Id(Constructor),Instance,[],Block([Break,VarDecl(Id(__),ClassType(Id(W)),NullLiteral()),VarDecl(Id(L),ClassType(Id(W)),NullLiteral()),VarDecl(Id(A2),ClassType(Id(W)),NullLiteral()),VarDecl(Id(_),ClassType(Id(W)),NullLiteral()),VarDecl(Id(_),ClassType(Id(W)),NullLiteral()),ConstDecl(Id(_1__),StringType,None),ConstDecl(Id(_),StringType,None)]))]),ClassDecl(Id(W),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 95))

    def test_96(self):
        line = '''Class M27:_B5{$_q_5_(q3:_;G:Array [Array [Array [Array [Array [Array [Boolean ,0b110010],0b110010],0X7_7],0x78],0b110010],0X7]){} }Class _:_6{}Class _:O{}Class L:w__I{}Class l{Var $__,$I:o;Val _2,$Y,$q:l;}'''
        expect = '''Program([ClassDecl(Id(M27),Id(_B5),[MethodDecl(Id($_q_5_),Static,[param(Id(q3),ClassType(Id(_))),param(Id(G),ArrayType(7,ArrayType(50,ArrayType(120,ArrayType(119,ArrayType(50,ArrayType(50,BoolType)))))))],Block([]))]),ClassDecl(Id(_),Id(_6),[]),ClassDecl(Id(_),Id(O),[]),ClassDecl(Id(L),Id(w__I),[]),ClassDecl(Id(l),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(o)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($I),ClassType(Id(o)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_2),ClassType(Id(l)),None)),AttributeDecl(Static,ConstDecl(Id($Y),ClassType(Id(l)),None)),AttributeDecl(Static,ConstDecl(Id($q),ClassType(Id(l)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 96))

    def test_97(self):
        line = '''Class _8_:r1W{Constructor (V,___23:Array [Array [Boolean ,53],0B1010011];_:Array [Boolean ,0x1A]){}_m4(){}Var $_6:Array [Int ,02];Destructor (){} }Class _2_7:i{}Class _:_5{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8_),Id(r1W),[MethodDecl(Id(Constructor),Instance,[param(Id(V),ArrayType(83,ArrayType(53,BoolType))),param(Id(___23),ArrayType(83,ArrayType(53,BoolType))),param(Id(_),ArrayType(26,BoolType))],Block([])),MethodDecl(Id(_m4),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_6),ArrayType(2,IntType))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_2_7),Id(i),[]),ClassDecl(Id(_),Id(_5),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 97))

    def test_98(self):
        line = '''Class Z:Z{_(){}K8q(j_:Int ;c:Array [Array [Int ,8],0b1];_:Float ;Gh,P_,_,_,_,o:Array [Array [Int ,0X46],0b1_1_1];__:Array [Array [Array [Float ,0B1001000],077_7],91];Y_:Array [Int ,04];d_d3,_1,_n988,N,Q:Array [Int ,0X46]){fWl::$4();}E(o,__,_:_;K,MX,e:Array [Array [Array [Array [Boolean ,0B11_111],066],0X46],0XA];_4:Array [String ,0x5C];_,_:F79v){}$_(){ {}Continue ;} }Class X{KS(_8,__:e_){} }'''
        expect = '''Program([ClassDecl(Id(Z),Id(Z),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(K8q),Instance,[param(Id(j_),IntType),param(Id(c),ArrayType(1,ArrayType(8,IntType))),param(Id(_),FloatType),param(Id(Gh),ArrayType(7,ArrayType(70,IntType))),param(Id(P_),ArrayType(7,ArrayType(70,IntType))),param(Id(_),ArrayType(7,ArrayType(70,IntType))),param(Id(_),ArrayType(7,ArrayType(70,IntType))),param(Id(_),ArrayType(7,ArrayType(70,IntType))),param(Id(o),ArrayType(7,ArrayType(70,IntType))),param(Id(__),ArrayType(91,ArrayType(511,ArrayType(72,FloatType)))),param(Id(Y_),ArrayType(4,IntType)),param(Id(d_d3),ArrayType(70,IntType)),param(Id(_1),ArrayType(70,IntType)),param(Id(_n988),ArrayType(70,IntType)),param(Id(N),ArrayType(70,IntType)),param(Id(Q),ArrayType(70,IntType))],Block([Call(Id(fWl),Id($4),[])])),MethodDecl(Id(E),Instance,[param(Id(o),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(K),ArrayType(10,ArrayType(70,ArrayType(54,ArrayType(31,BoolType))))),param(Id(MX),ArrayType(10,ArrayType(70,ArrayType(54,ArrayType(31,BoolType))))),param(Id(e),ArrayType(10,ArrayType(70,ArrayType(54,ArrayType(31,BoolType))))),param(Id(_4),ArrayType(92,StringType)),param(Id(_),ClassType(Id(F79v))),param(Id(_),ClassType(Id(F79v)))],Block([])),MethodDecl(Id($_),Static,[],Block([Block([]),Continue]))]),ClassDecl(Id(X),[MethodDecl(Id(KS),Instance,[param(Id(_8),ClassType(Id(e_))),param(Id(__),ClassType(Id(e_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 98))

    def test_99(self):
        line = '''Class z:d{Var j:Array [Float ,0x1];}Class N:__{Constructor (_:Array [Float ,072];Q,_:String ;_,Pf,Fv:_43){}Val V7_F,$_,k6:_;Var _9_,$3:Boolean ;}Class j:y{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(z),Id(d),[AttributeDecl(Instance,VarDecl(Id(j),ArrayType(1,FloatType)))]),ClassDecl(Id(N),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(58,FloatType)),param(Id(Q),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_43))),param(Id(Pf),ClassType(Id(_43))),param(Id(Fv),ClassType(Id(_43)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(V7_F),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(k6),ClassType(Id(_)),None)),AttributeDecl(Instance,VarDecl(Id(_9_),BoolType)),AttributeDecl(Static,VarDecl(Id($3),BoolType))]),ClassDecl(Id(j),Id(y),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 99))

    def test_100(self):
        line = '''Class _{}Class _{Val f:String ;$_P(){} }Class u{}Class h3{Destructor (){} }Class _y{Val $_,__:Array [Array [Array [Array [Array [Boolean ,56],56],9],0B1],0XFF7];}Class _1_C8:E{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(f),StringType,None)),MethodDecl(Id($_P),Static,[],Block([]))]),ClassDecl(Id(u),[]),ClassDecl(Id(h3),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_y),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(4087,ArrayType(1,ArrayType(9,ArrayType(56,ArrayType(56,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(4087,ArrayType(1,ArrayType(9,ArrayType(56,ArrayType(56,BoolType))))),None))]),ClassDecl(Id(_1_C8),Id(E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 100))

    def test_101(self):
        line = '''Class _5EBR:Mp{Constructor (){Val _B,_:Array [Array [Array [Array [Array [Float ,97_05],0B1000101],0xC],79],79];} }Class p0{Var $_,$5:Boolean ;}Class Rs_4__:_0_qq_n_{}Class Gr4qv:A{$_(_:Boolean ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_5EBR),Id(Mp),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_B),ArrayType(79,ArrayType(79,ArrayType(12,ArrayType(69,ArrayType(9705,FloatType))))),None),ConstDecl(Id(_),ArrayType(79,ArrayType(79,ArrayType(12,ArrayType(69,ArrayType(9705,FloatType))))),None)]))]),ClassDecl(Id(p0),[AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($5),BoolType))]),ClassDecl(Id(Rs_4__),Id(_0_qq_n_),[]),ClassDecl(Id(Gr4qv),Id(A),[MethodDecl(Id($_),Static,[param(Id(_),BoolType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 101))

    def test_102(self):
        line = '''Class __g45_P_{Constructor (_f,_:Array [Array [Array [Float ,03],03_6],0x8_0]){} }Class m:i{$6(X__:Array [Array [Array [Array [Array [Boolean ,0b1000010],0x5],06_731],148],79];_:z;__0_2:Array [String ,0b1]){} }'''
        expect = '''Program([ClassDecl(Id(__g45_P_),[MethodDecl(Id(Constructor),Instance,[param(Id(_f),ArrayType(128,ArrayType(30,ArrayType(3,FloatType)))),param(Id(_),ArrayType(128,ArrayType(30,ArrayType(3,FloatType))))],Block([]))]),ClassDecl(Id(m),Id(i),[MethodDecl(Id($6),Static,[param(Id(X__),ArrayType(79,ArrayType(148,ArrayType(3545,ArrayType(5,ArrayType(66,BoolType)))))),param(Id(_),ClassType(Id(z))),param(Id(__0_2),ArrayType(1,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 102))

    def test_103(self):
        line = '''Class u{Constructor (Y_4,q:Array [Array [Int ,061],04_7];_0T,_,___f86,_:Float ;Y_,_,_:String ){}Val $ET8:Array [Array [Array [Boolean ,0X3D],020],0xC_C];Constructor (_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[param(Id(Y_4),ArrayType(39,ArrayType(49,IntType))),param(Id(q),ArrayType(39,ArrayType(49,IntType))),param(Id(_0T),FloatType),param(Id(_),FloatType),param(Id(___f86),FloatType),param(Id(_),FloatType),param(Id(Y_),StringType),param(Id(_),StringType),param(Id(_),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($ET8),ArrayType(204,ArrayType(16,ArrayType(61,BoolType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 103))

    def test_104(self):
        line = '''Class _{_(l,_:Array [Array [Array [Int ,0106_0_66_31],3_1],4]){} }Class C:_u{Constructor (bN_,__f,_0,_,N_o:Array [Array [Int ,01_41_4_10],0B1]){}$_7(){} }Class _{}Class _T{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(l),ArrayType(4,ArrayType(31,ArrayType(2297241,IntType)))),param(Id(_),ArrayType(4,ArrayType(31,ArrayType(2297241,IntType))))],Block([]))]),ClassDecl(Id(C),Id(_u),[MethodDecl(Id(Constructor),Instance,[param(Id(bN_),ArrayType(1,ArrayType(49928,IntType))),param(Id(__f),ArrayType(1,ArrayType(49928,IntType))),param(Id(_0),ArrayType(1,ArrayType(49928,IntType))),param(Id(_),ArrayType(1,ArrayType(49928,IntType))),param(Id(N_o),ArrayType(1,ArrayType(49928,IntType)))],Block([])),MethodDecl(Id($_7),Static,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 104))

    def test_105(self):
        line = '''Class _60{k__(Fy:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0XA],0XA],0112],47],0X2F_75_5],6_8],47],3],47];_:Array [Float ,0B11];N,J,_B:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_60),[MethodDecl(Id(k__),Instance,[param(Id(Fy),ArrayType(47,ArrayType(3,ArrayType(47,ArrayType(68,ArrayType(194389,ArrayType(47,ArrayType(74,ArrayType(10,ArrayType(10,BoolType)))))))))),param(Id(_),ArrayType(3,FloatType)),param(Id(N),IntType),param(Id(J),IntType),param(Id(_B),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 105))

    def test_106(self):
        line = '''Class F{Constructor (p:Array [Array [Array [Array [Boolean ,0B11101],0B11101],0X3],57];_o2:String ;_,X,_4:__7;UK_:i;_:__;_,df:Array [Array [Float ,0xF],0x55]){} }Class _8:F6{}'''
        expect = '''Program([ClassDecl(Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(p),ArrayType(57,ArrayType(3,ArrayType(29,ArrayType(29,BoolType))))),param(Id(_o2),StringType),param(Id(_),ClassType(Id(__7))),param(Id(X),ClassType(Id(__7))),param(Id(_4),ClassType(Id(__7))),param(Id(UK_),ClassType(Id(i))),param(Id(_),ClassType(Id(__))),param(Id(_),ArrayType(85,ArrayType(15,FloatType))),param(Id(df),ArrayType(85,ArrayType(15,FloatType)))],Block([]))]),ClassDecl(Id(_8),Id(F6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 106))

    def test_107(self):
        line = '''Class Y35{_(_k_1CrY:Array [Float ,14]){} }Class V0pG{Var _8_,iy,$7:String ;Val m_B,$2Lc:_;}Class _d{Val g7:Array [Array [Array [Array [Array [Float ,075],0X2],071],1],01];}Class J{}Class _t:pk_O{Constructor (__:_6){} }'''
        expect = '''Program([ClassDecl(Id(Y35),[MethodDecl(Id(_),Instance,[param(Id(_k_1CrY),ArrayType(14,FloatType))],Block([]))]),ClassDecl(Id(V0pG),[AttributeDecl(Instance,VarDecl(Id(_8_),StringType)),AttributeDecl(Instance,VarDecl(Id(iy),StringType)),AttributeDecl(Static,VarDecl(Id($7),StringType)),AttributeDecl(Instance,ConstDecl(Id(m_B),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($2Lc),ClassType(Id(_)),None))]),ClassDecl(Id(_d),[AttributeDecl(Instance,ConstDecl(Id(g7),ArrayType(1,ArrayType(1,ArrayType(57,ArrayType(2,ArrayType(61,FloatType))))),None))]),ClassDecl(Id(J),[]),ClassDecl(Id(_t),Id(pk_O),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_6)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 107))

    def test_108(self):
        line = '''Class _{__(_0_,_,s_7,_4:Array [Int ,0101];e,Q4,I8,_:Array [Array [Array [Array [Array [Boolean ,2_3],0b1011010],58],58],0B110100];_,_3:M){Val z:Array [Array [Array [Array [Array [Float ,0101],0b10],0B111],0b1],58];} }Class Z{Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(__),Instance,[param(Id(_0_),ArrayType(65,IntType)),param(Id(_),ArrayType(65,IntType)),param(Id(s_7),ArrayType(65,IntType)),param(Id(_4),ArrayType(65,IntType)),param(Id(e),ArrayType(52,ArrayType(58,ArrayType(58,ArrayType(90,ArrayType(23,BoolType)))))),param(Id(Q4),ArrayType(52,ArrayType(58,ArrayType(58,ArrayType(90,ArrayType(23,BoolType)))))),param(Id(I8),ArrayType(52,ArrayType(58,ArrayType(58,ArrayType(90,ArrayType(23,BoolType)))))),param(Id(_),ArrayType(52,ArrayType(58,ArrayType(58,ArrayType(90,ArrayType(23,BoolType)))))),param(Id(_),ClassType(Id(M))),param(Id(_3),ClassType(Id(M)))],Block([ConstDecl(Id(z),ArrayType(58,ArrayType(1,ArrayType(7,ArrayType(2,ArrayType(65,FloatType))))),None)]))]),ClassDecl(Id(Z),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 108))

    def test_109(self):
        line = '''Class __:IT_{Var K,$_l,$N1f_,_,_:Array [Array [Array [Array [Int ,030_5],071],0x46],6];Constructor (_:Array [Float ,0X4E];C:String ){Var ___,X:Array [Float ,0xD];}$_s(){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(IT_),[AttributeDecl(Instance,VarDecl(Id(K),ArrayType(6,ArrayType(70,ArrayType(57,ArrayType(197,IntType)))))),AttributeDecl(Static,VarDecl(Id($_l),ArrayType(6,ArrayType(70,ArrayType(57,ArrayType(197,IntType)))))),AttributeDecl(Static,VarDecl(Id($N1f_),ArrayType(6,ArrayType(70,ArrayType(57,ArrayType(197,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6,ArrayType(70,ArrayType(57,ArrayType(197,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6,ArrayType(70,ArrayType(57,ArrayType(197,IntType)))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(78,FloatType)),param(Id(C),StringType)],Block([VarDecl(Id(___),ArrayType(13,FloatType)),VarDecl(Id(X),ArrayType(13,FloatType))])),MethodDecl(Id($_s),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 109))

    def test_110(self):
        line = '''Class N:_{}Class _{}Class _64:H{Val __:Array [Array [Array [Array [Array [Array [Float ,0XE51_2],68],0X34],0x11],0x5_6],7_66];_(){}Var _v9,$_:String ;Val __,N_,$u4X:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(N),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_64),Id(H),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(766,ArrayType(86,ArrayType(17,ArrayType(52,ArrayType(68,ArrayType(58642,FloatType)))))),None)),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_v9),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,ConstDecl(Id(__),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(N_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($u4X),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 110))

    def test_111(self):
        line = '''Class _:E{}Class D:_{Destructor (){Continue ;}Val $5dgO,$9,P,$5:Array [Int ,0X46];}Class _{E(_:_;g:Int ;_5:_;_,F_6:_T;_I,g_:Array [Int ,4];_O:m;___:j_hb;_:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(E),[]),ClassDecl(Id(D),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($5dgO),ArrayType(70,IntType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(70,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(70,IntType),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(70,IntType),None))]),ClassDecl(Id(_),[MethodDecl(Id(E),Instance,[param(Id(_),ClassType(Id(_))),param(Id(g),IntType),param(Id(_5),ClassType(Id(_))),param(Id(_),ClassType(Id(_T))),param(Id(F_6),ClassType(Id(_T))),param(Id(_I),ArrayType(4,IntType)),param(Id(g_),ArrayType(4,IntType)),param(Id(_O),ClassType(Id(m))),param(Id(___),ClassType(Id(j_hb))),param(Id(_),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 111))

    def test_112(self):
        line = '''Class _p{}Class _:_{Constructor (cI:Array [Array [Array [Boolean ,06_0],0x3A],0130];_:Array [Array [Array [Array [Array [Int ,0B1],0B1011010],0X62],2],2]){}Var f:Array [Array [Float ,2],01];}'''
        expect = '''Program([ClassDecl(Id(_p),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(cI),ArrayType(88,ArrayType(58,ArrayType(48,BoolType)))),param(Id(_),ArrayType(2,ArrayType(2,ArrayType(98,ArrayType(90,ArrayType(1,IntType))))))],Block([])),AttributeDecl(Instance,VarDecl(Id(f),ArrayType(1,ArrayType(2,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 112))

    def test_113(self):
        line = '''Class zV:___O{IH3(D_:String ;_,__:Array [Array [String ,0b1],0B1_1];_,_s:Boolean ;_tr,_,_,g:String ;_,G9,_1d:oL;_:P){}$_(){}Constructor (_,d_,___,C:Array [Array [Array [Array [Array [Array [Float ,05],0B111010],8],052],0B111010],2_5_099];_,_,_72,_:Array [Float ,0x2A]){} }Class p2{}Class _m{}'''
        expect = '''Program([ClassDecl(Id(zV),Id(___O),[MethodDecl(Id(IH3),Instance,[param(Id(D_),StringType),param(Id(_),ArrayType(3,ArrayType(1,StringType))),param(Id(__),ArrayType(3,ArrayType(1,StringType))),param(Id(_),BoolType),param(Id(_s),BoolType),param(Id(_tr),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(g),StringType),param(Id(_),ClassType(Id(oL))),param(Id(G9),ClassType(Id(oL))),param(Id(_1d),ClassType(Id(oL))),param(Id(_),ClassType(Id(P)))],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(25099,ArrayType(58,ArrayType(42,ArrayType(8,ArrayType(58,ArrayType(5,FloatType))))))),param(Id(d_),ArrayType(25099,ArrayType(58,ArrayType(42,ArrayType(8,ArrayType(58,ArrayType(5,FloatType))))))),param(Id(___),ArrayType(25099,ArrayType(58,ArrayType(42,ArrayType(8,ArrayType(58,ArrayType(5,FloatType))))))),param(Id(C),ArrayType(25099,ArrayType(58,ArrayType(42,ArrayType(8,ArrayType(58,ArrayType(5,FloatType))))))),param(Id(_),ArrayType(42,FloatType)),param(Id(_),ArrayType(42,FloatType)),param(Id(_72),ArrayType(42,FloatType)),param(Id(_),ArrayType(42,FloatType))],Block([]))]),ClassDecl(Id(p2),[]),ClassDecl(Id(_m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 113))

    def test_114(self):
        line = '''Class _cD{}Class _:__{}Class C:_J4{p5_3I(_:String ;Q5,_,ins,d,_7_3,W,_0:Int ){} }Class Y:kd9{Val $0,$V:W;}Class _:_y_{Var $6,__:Array [Float ,06_7];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_cD),[]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(C),Id(_J4),[MethodDecl(Id(p5_3I),Instance,[param(Id(_),StringType),param(Id(Q5),IntType),param(Id(_),IntType),param(Id(ins),IntType),param(Id(d),IntType),param(Id(_7_3),IntType),param(Id(W),IntType),param(Id(_0),IntType)],Block([]))]),ClassDecl(Id(Y),Id(kd9),[AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(W)),None)),AttributeDecl(Static,ConstDecl(Id($V),ClassType(Id(W)),None))]),ClassDecl(Id(_),Id(_y_),[AttributeDecl(Static,VarDecl(Id($6),ArrayType(55,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(55,FloatType))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 114))

    def test_115(self):
        line = '''Class _u:_g{Val $_:S3_;}Class u2{}Class B{Constructor (_7990,__0,_8:Array [Float ,0xB_3];r18_Y,s:Array [String ,0B110];bA6,F_,_,N,D:qI){}Var $O__,q,I:Int ;Val $uDH_C:Int ;q_(){ {} }}'''
        expect = '''Program([ClassDecl(Id(_u),Id(_g),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(S3_)),None))]),ClassDecl(Id(u2),[]),ClassDecl(Id(B),[MethodDecl(Id(Constructor),Instance,[param(Id(_7990),ArrayType(179,FloatType)),param(Id(__0),ArrayType(179,FloatType)),param(Id(_8),ArrayType(179,FloatType)),param(Id(r18_Y),ArrayType(6,StringType)),param(Id(s),ArrayType(6,StringType)),param(Id(bA6),ClassType(Id(qI))),param(Id(F_),ClassType(Id(qI))),param(Id(_),ClassType(Id(qI))),param(Id(N),ClassType(Id(qI))),param(Id(D),ClassType(Id(qI)))],Block([])),AttributeDecl(Static,VarDecl(Id($O__),IntType)),AttributeDecl(Instance,VarDecl(Id(q),IntType)),AttributeDecl(Instance,VarDecl(Id(I),IntType)),AttributeDecl(Static,ConstDecl(Id($uDH_C),IntType,None)),MethodDecl(Id(q_),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 115))

    def test_116(self):
        line = '''Class _O1{Var Xi:Array [Int ,0b1];Var $4:Array [Array [Array [Array [Float ,025],5],02],0X40];}Class _8{Val c,_,_,_,_,_4__ew,__o:Array [Float ,02];}Class _:__{Val a:_;Constructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_O1),[AttributeDecl(Instance,VarDecl(Id(Xi),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(64,ArrayType(2,ArrayType(5,ArrayType(21,FloatType))))))]),ClassDecl(Id(_8),[AttributeDecl(Instance,ConstDecl(Id(c),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_4__ew),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__o),ArrayType(2,FloatType),None))]),ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(a),ClassType(Id(_)),None)),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 116))

    def test_117(self):
        line = '''Class xJ{Constructor (_:Int ){}Var g7T:Array [Float ,011];$Z(){} }Class _6i_{Constructor (v8RV,_u:Array [Array [Int ,6],0b1];QX:Array [Array [Float ,01],58_7]){}Destructor (){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(xJ),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(g7T),ArrayType(9,FloatType))),MethodDecl(Id($Z),Static,[],Block([]))]),ClassDecl(Id(_6i_),[MethodDecl(Id(Constructor),Instance,[param(Id(v8RV),ArrayType(1,ArrayType(6,IntType))),param(Id(_u),ArrayType(1,ArrayType(6,IntType))),param(Id(QX),ArrayType(587,ArrayType(1,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 117))

    def test_118(self):
        line = '''Class B:_{Constructor (_:Array [Array [Array [Array [Array [Array [Array [String ,0XF_CB3_2],1],0XC],0x41],0x93_6],073],0B1100001];_,O,_,_y:Boolean ;__,z,_L:String ;u:__){} }Class S9:tDu{}'''
        expect = '''Program([ClassDecl(Id(B),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(97,ArrayType(59,ArrayType(2358,ArrayType(65,ArrayType(12,ArrayType(1,ArrayType(1035058,StringType)))))))),param(Id(_),BoolType),param(Id(O),BoolType),param(Id(_),BoolType),param(Id(_y),BoolType),param(Id(__),StringType),param(Id(z),StringType),param(Id(_L),StringType),param(Id(u),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(S9),Id(tDu),[])])'''
        self.assertTrue(TestAST.test(line, expect, 118))

    def test_119(self):
        line = '''Class __9:_{Destructor (){}Var $CI2,w,$___27,$j:Float ;Val _G__13_:Int ;}Class _VV0:_0{}Class _{$3(_8w,_:G;mL:Array [Array [Array [Array [Array [Boolean ,05_7],03],033],0xD_E],6]){} }'''
        expect = '''Program([ClassDecl(Id(__9),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($CI2),FloatType)),AttributeDecl(Instance,VarDecl(Id(w),FloatType)),AttributeDecl(Static,VarDecl(Id($___27),FloatType)),AttributeDecl(Static,VarDecl(Id($j),FloatType)),AttributeDecl(Instance,ConstDecl(Id(_G__13_),IntType,None))]),ClassDecl(Id(_VV0),Id(_0),[]),ClassDecl(Id(_),[MethodDecl(Id($3),Static,[param(Id(_8w),ClassType(Id(G))),param(Id(_),ClassType(Id(G))),param(Id(mL),ArrayType(6,ArrayType(222,ArrayType(27,ArrayType(3,ArrayType(47,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 119))

    def test_120(self):
        line = '''Class _{$r(t:Float ;d6,_,F,___T,gn:Boolean ){}u(){}Constructor (W,K,k,v_,_0:Int ){} }Class e{}Class _ik{Destructor (){ {Continue ;E_::$1_();Break ;} }Constructor (){} }Class _:OxF_L_{Destructor (){}Var E9,$5,$45,$2I:Array [Array [Array [Int ,0b1001000],9],9_0];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($r),Static,[param(Id(t),FloatType),param(Id(d6),BoolType),param(Id(_),BoolType),param(Id(F),BoolType),param(Id(___T),BoolType),param(Id(gn),BoolType)],Block([])),MethodDecl(Id(u),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(W),IntType),param(Id(K),IntType),param(Id(k),IntType),param(Id(v_),IntType),param(Id(_0),IntType)],Block([]))]),ClassDecl(Id(e),[]),ClassDecl(Id(_ik),[MethodDecl(Id(Destructor),Instance,[],Block([Block([Continue,Call(Id(E_),Id($1_),[]),Break])])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(OxF_L_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(E9),ArrayType(90,ArrayType(9,ArrayType(72,IntType))))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(90,ArrayType(9,ArrayType(72,IntType))))),AttributeDecl(Static,VarDecl(Id($45),ArrayType(90,ArrayType(9,ArrayType(72,IntType))))),AttributeDecl(Static,VarDecl(Id($2I),ArrayType(90,ArrayType(9,ArrayType(72,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 120))

    def test_121(self):
        line = '''Class hM5yy:_{Val _,$3,$_,$Sr_p5,$n_k_A,_7fdw_:_c;Constructor (){} }Class b{}Class _Z{Var _,$_451__,$7,$5_04_T,$5746fN:Array [Float ,0b100_1];}Class q_{}Class k{}Class OW:_68b{Constructor (Q:Float ){}Destructor (){Continue ;_6_v6::$_.b.H_();}L6(i:String ){} }'''
        expect = '''Program([ClassDecl(Id(hM5yy),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_c)),None)),AttributeDecl(Static,ConstDecl(Id($3),ClassType(Id(_c)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_c)),None)),AttributeDecl(Static,ConstDecl(Id($Sr_p5),ClassType(Id(_c)),None)),AttributeDecl(Static,ConstDecl(Id($n_k_A),ClassType(Id(_c)),None)),AttributeDecl(Instance,ConstDecl(Id(_7fdw_),ClassType(Id(_c)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(b),[]),ClassDecl(Id(_Z),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(9,FloatType))),AttributeDecl(Static,VarDecl(Id($_451__),ArrayType(9,FloatType))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(9,FloatType))),AttributeDecl(Static,VarDecl(Id($5_04_T),ArrayType(9,FloatType))),AttributeDecl(Static,VarDecl(Id($5746fN),ArrayType(9,FloatType)))]),ClassDecl(Id(q_),[]),ClassDecl(Id(k),[]),ClassDecl(Id(OW),Id(_68b),[MethodDecl(Id(Constructor),Instance,[param(Id(Q),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Call(FieldAccess(FieldAccess(Id(_6_v6),Id($_)),Id(b)),Id(H_),[])])),MethodDecl(Id(L6),Instance,[param(Id(i),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 121))

    def test_122(self):
        line = '''Class g{Var _ED:Array [Array [Array [Array [Array [Array [Array [Array [String ,071],0b11_0],0242],0xF8],0103],0B10001],0xB3],0b100010];}Class _:u3{Var $7y:Array [Float ,0x13];Constructor (_07:String ){Val U,jz:N;} }Class k:G{}Class V{}Class _C:___5{}'''
        expect = '''Program([ClassDecl(Id(g),[AttributeDecl(Instance,VarDecl(Id(_ED),ArrayType(34,ArrayType(179,ArrayType(17,ArrayType(67,ArrayType(248,ArrayType(162,ArrayType(6,ArrayType(57,StringType))))))))))]),ClassDecl(Id(_),Id(u3),[AttributeDecl(Static,VarDecl(Id($7y),ArrayType(19,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_07),StringType)],Block([ConstDecl(Id(U),ClassType(Id(N)),None),ConstDecl(Id(jz),ClassType(Id(N)),None)]))]),ClassDecl(Id(k),Id(G),[]),ClassDecl(Id(V),[]),ClassDecl(Id(_C),Id(___5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 122))

    def test_123(self):
        line = '''Class wl{}Class v:g77_d{Val $3_8:__;Constructor (Z4r,L1_k0,B,M,_1:Float ){} }Class w:_{}Class s:_R_9{Constructor (fu0,_:Int ;Oc,__,X_,s7_:Array [Array [Float ,11],065]){} }'''
        expect = '''Program([ClassDecl(Id(wl),[]),ClassDecl(Id(v),Id(g77_d),[AttributeDecl(Static,ConstDecl(Id($3_8),ClassType(Id(__)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(Z4r),FloatType),param(Id(L1_k0),FloatType),param(Id(B),FloatType),param(Id(M),FloatType),param(Id(_1),FloatType)],Block([]))]),ClassDecl(Id(w),Id(_),[]),ClassDecl(Id(s),Id(_R_9),[MethodDecl(Id(Constructor),Instance,[param(Id(fu0),IntType),param(Id(_),IntType),param(Id(Oc),ArrayType(53,ArrayType(11,FloatType))),param(Id(__),ArrayType(53,ArrayType(11,FloatType))),param(Id(X_),ArrayType(53,ArrayType(11,FloatType))),param(Id(s7_),ArrayType(53,ArrayType(11,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 123))

    def test_124(self):
        line = '''Class _:_6_2__{Destructor (){Break ;} }Class Y_:T_{$2(J2_p0X,_,Z:Array [Array [Array [Int ,030],0b1],0B10111]){ {{} }}Var $q5,U:Array [Array [Array [Array [Float ,0x27],1_1],01],054];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_6_2__),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(Y_),Id(T_),[MethodDecl(Id($2),Static,[param(Id(J2_p0X),ArrayType(23,ArrayType(1,ArrayType(24,IntType)))),param(Id(_),ArrayType(23,ArrayType(1,ArrayType(24,IntType)))),param(Id(Z),ArrayType(23,ArrayType(1,ArrayType(24,IntType))))],Block([Block([Block([])])])),AttributeDecl(Static,VarDecl(Id($q5),ArrayType(44,ArrayType(1,ArrayType(11,ArrayType(39,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(U),ArrayType(44,ArrayType(1,ArrayType(11,ArrayType(39,FloatType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 124))

    def test_125(self):
        line = '''Class __:_{}Class _Il:n{Constructor (b_QW:String ){} }Class _{g0(){}Var CC,c,h_3_:Array [String ,0XD];Val $_l:Array [Array [Int ,29],05];Val $_Co11F,_:_C_S;Val $7:Array [Array [Boolean ,0b101101],29];}Class d_3_{Constructor (_,_2,_2_,_:Array [Array [Array [Int ,06],0X12],29];d_:Boolean ;_,_:_7_;__:Array [Float ,04_4]){} }Class _7:Kc_{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_Il),Id(n),[MethodDecl(Id(Constructor),Instance,[param(Id(b_QW),StringType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(g0),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(CC),ArrayType(13,StringType))),AttributeDecl(Instance,VarDecl(Id(c),ArrayType(13,StringType))),AttributeDecl(Instance,VarDecl(Id(h_3_),ArrayType(13,StringType))),AttributeDecl(Static,ConstDecl(Id($_l),ArrayType(5,ArrayType(29,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_Co11F),ClassType(Id(_C_S)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_C_S)),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(29,ArrayType(45,BoolType)),None))]),ClassDecl(Id(d_3_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(29,ArrayType(18,ArrayType(6,IntType)))),param(Id(_2),ArrayType(29,ArrayType(18,ArrayType(6,IntType)))),param(Id(_2_),ArrayType(29,ArrayType(18,ArrayType(6,IntType)))),param(Id(_),ArrayType(29,ArrayType(18,ArrayType(6,IntType)))),param(Id(d_),BoolType),param(Id(_),ClassType(Id(_7_))),param(Id(_),ClassType(Id(_7_))),param(Id(__),ArrayType(36,FloatType))],Block([]))]),ClassDecl(Id(_7),Id(Kc_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 125))

    def test_126(self):
        line = '''Class _{Var _N2p:Array [String ,0b1110];Constructor (e_:String ){}I(){} }Class __C{Constructor (W:Array [Array [Float ,0x5],68]){Break ;}_2(R3,_,_,z,_:Int ;_:Array [Boolean ,07_47_7];t,_:String ){Val eP:Array [Float ,0B1];Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_N2p),ArrayType(14,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(e_),StringType)],Block([])),MethodDecl(Id(I),Instance,[],Block([]))]),ClassDecl(Id(__C),[MethodDecl(Id(Constructor),Instance,[param(Id(W),ArrayType(68,ArrayType(5,FloatType)))],Block([Break])),MethodDecl(Id(_2),Instance,[param(Id(R3),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(z),IntType),param(Id(_),IntType),param(Id(_),ArrayType(3903,BoolType)),param(Id(t),StringType),param(Id(_),StringType)],Block([ConstDecl(Id(eP),ArrayType(1,FloatType),None),Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 126))

    def test_127(self):
        line = '''Class _0N:_{Constructor (){Val Ug2x,n,_:Array [Array [Array [Array [String ,38],38],025],0b10011];}Constructor (){}Constructor (T12,y12,_,__:G;l,th,_,i:Float ){} }Class _7C9{}'''
        expect = '''Program([ClassDecl(Id(_0N),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(Ug2x),ArrayType(19,ArrayType(21,ArrayType(38,ArrayType(38,StringType)))),None),ConstDecl(Id(n),ArrayType(19,ArrayType(21,ArrayType(38,ArrayType(38,StringType)))),None),ConstDecl(Id(_),ArrayType(19,ArrayType(21,ArrayType(38,ArrayType(38,StringType)))),None)])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(T12),ClassType(Id(G))),param(Id(y12),ClassType(Id(G))),param(Id(_),ClassType(Id(G))),param(Id(__),ClassType(Id(G))),param(Id(l),FloatType),param(Id(th),FloatType),param(Id(_),FloatType),param(Id(i),FloatType)],Block([]))]),ClassDecl(Id(_7C9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 127))

    def test_128(self):
        line = '''Class _14{Destructor (){Val WC:_DV;Break ;}j(Z:_0;dFD,__4:String ;C:Array [Array [Int ,066],0X2D];L7__:Array [Array [Int ,22],066];_:Array [Array [Array [Int ,0X6],22],4]){} }'''
        expect = '''Program([ClassDecl(Id(_14),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(WC),ClassType(Id(_DV)),None),Break])),MethodDecl(Id(j),Instance,[param(Id(Z),ClassType(Id(_0))),param(Id(dFD),StringType),param(Id(__4),StringType),param(Id(C),ArrayType(45,ArrayType(54,IntType))),param(Id(L7__),ArrayType(54,ArrayType(22,IntType))),param(Id(_),ArrayType(4,ArrayType(22,ArrayType(6,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 128))

    def test_129(self):
        line = '''Class _ZT0{}Class __1:R1{}Class _:_{Var _,PH:Array [String ,07];Constructor (_S:Array [Array [Array [String ,013],0B1000000],0101];y:_){a57::$_();}Constructor (){} }Class D{}Class iY{}Class _{}Class W556:U3{}Class Mu:_i{}'''
        expect = '''Program([ClassDecl(Id(_ZT0),[]),ClassDecl(Id(__1),Id(R1),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,StringType))),AttributeDecl(Instance,VarDecl(Id(PH),ArrayType(7,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(_S),ArrayType(65,ArrayType(64,ArrayType(11,StringType)))),param(Id(y),ClassType(Id(_)))],Block([Call(Id(a57),Id($_),[])])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(D),[]),ClassDecl(Id(iY),[]),ClassDecl(Id(_),[]),ClassDecl(Id(W556),Id(U3),[]),ClassDecl(Id(Mu),Id(_i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 129))

    def test_130(self):
        line = '''Class _:b{A984(_:Float ;__2b:Boolean ;_,__,Gn1V7:F5u1;_1,Os,_,j:Boolean ;V,a,k,i,_,_q,R_5,_,_:___;_2_J__,_:Array [Array [Array [Boolean ,027],027],027];c:_;Z:Array [Array [Array [String ,0x3F],465_9],010]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(b),[MethodDecl(Id(A984),Instance,[param(Id(_),FloatType),param(Id(__2b),BoolType),param(Id(_),ClassType(Id(F5u1))),param(Id(__),ClassType(Id(F5u1))),param(Id(Gn1V7),ClassType(Id(F5u1))),param(Id(_1),BoolType),param(Id(Os),BoolType),param(Id(_),BoolType),param(Id(j),BoolType),param(Id(V),ClassType(Id(___))),param(Id(a),ClassType(Id(___))),param(Id(k),ClassType(Id(___))),param(Id(i),ClassType(Id(___))),param(Id(_),ClassType(Id(___))),param(Id(_q),ClassType(Id(___))),param(Id(R_5),ClassType(Id(___))),param(Id(_),ClassType(Id(___))),param(Id(_),ClassType(Id(___))),param(Id(_2_J__),ArrayType(23,ArrayType(23,ArrayType(23,BoolType)))),param(Id(_),ArrayType(23,ArrayType(23,ArrayType(23,BoolType)))),param(Id(c),ClassType(Id(_))),param(Id(Z),ArrayType(8,ArrayType(4659,ArrayType(63,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 130))

    def test_131(self):
        line = '''Class B:V3{$r(){}Var $IM,_,$_1Y:Array [Int ,26];}Class p2_T_:_2{Constructor (_:_Y){} }Class _:_{Constructor (d,_:K){}Var _:_f_;}Class B:_{_g_(_,_6,__:Pf){New _()._();} }'''
        expect = '''Program([ClassDecl(Id(B),Id(V3),[MethodDecl(Id($r),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($IM),ArrayType(26,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(26,IntType))),AttributeDecl(Static,VarDecl(Id($_1Y),ArrayType(26,IntType)))]),ClassDecl(Id(p2_T_),Id(_2),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_Y)))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(K))),param(Id(_),ClassType(Id(K)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_f_)),NullLiteral()))]),ClassDecl(Id(B),Id(_),[MethodDecl(Id(_g_),Instance,[param(Id(_),ClassType(Id(Pf))),param(Id(_6),ClassType(Id(Pf))),param(Id(__),ClassType(Id(Pf)))],Block([Call(NewExpr(Id(_),[]),Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 131))

    def test_132(self):
        line = '''Class YB:__5{Destructor (){} }Class _6s{Constructor (){}Val o:Int =!--_C::$1_1().___;Constructor (_,Q_:String ;N:Array [Array [Float ,0XF],0x44];_:_){Val U_:Boolean ;}Constructor (){Var _e,o:Array [Boolean ,0740];}Var $7_:String =_::$_()*--_2G9::$6;Val $B1q,___5v:Float ;}'''
        expect = '''Program([ClassDecl(Id(YB),Id(__5),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_6s),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(o),IntType,UnaryOp(!,UnaryOp(-,UnaryOp(-,FieldAccess(CallExpr(Id(_C),Id($1_1),[]),Id(___))))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(Q_),StringType),param(Id(N),ArrayType(68,ArrayType(15,FloatType))),param(Id(_),ClassType(Id(_)))],Block([ConstDecl(Id(U_),BoolType,None)])),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_e),ArrayType(480,BoolType)),VarDecl(Id(o),ArrayType(480,BoolType))])),AttributeDecl(Static,VarDecl(Id($7_),StringType,BinaryOp(*,CallExpr(Id(_),Id($_),[]),UnaryOp(-,UnaryOp(-,FieldAccess(Id(_2G9),Id($6))))))),AttributeDecl(Static,ConstDecl(Id($B1q),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(___5v),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 132))

    def test_133(self):
        line = '''Class i7T:ML{Constructor (){}Constructor (_:G;r,_r40:Array [Array [Boolean ,86],07_3_2];_Q,s__A:Array [Int ,0b1100100];_:Boolean ){}Var Y:x;Val $08J7Rb,C,___2,r_,$9hp:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(i7T),Id(ML),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(G))),param(Id(r),ArrayType(474,ArrayType(86,BoolType))),param(Id(_r40),ArrayType(474,ArrayType(86,BoolType))),param(Id(_Q),ArrayType(100,IntType)),param(Id(s__A),ArrayType(100,IntType)),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(Y),ClassType(Id(x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($08J7Rb),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(C),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(___2),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(r_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($9hp),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 133))

    def test_134(self):
        line = '''Class V1{}Class _{}Class _C{Destructor (){Continue ;}Destructor (){Val _85,e___,d,_2_7_,f:Array [Array [Array [Array [Array [Float ,05],87],87],0X28],0B11];Continue ;} }Class __:v22{}'''
        expect = '''Program([ClassDecl(Id(V1),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_C),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_85),ArrayType(3,ArrayType(40,ArrayType(87,ArrayType(87,ArrayType(5,FloatType))))),None),ConstDecl(Id(e___),ArrayType(3,ArrayType(40,ArrayType(87,ArrayType(87,ArrayType(5,FloatType))))),None),ConstDecl(Id(d),ArrayType(3,ArrayType(40,ArrayType(87,ArrayType(87,ArrayType(5,FloatType))))),None),ConstDecl(Id(_2_7_),ArrayType(3,ArrayType(40,ArrayType(87,ArrayType(87,ArrayType(5,FloatType))))),None),ConstDecl(Id(f),ArrayType(3,ArrayType(40,ArrayType(87,ArrayType(87,ArrayType(5,FloatType))))),None),Continue]))]),ClassDecl(Id(__),Id(v22),[])])'''
        self.assertTrue(TestAST.test(line, expect, 134))

    def test_135(self):
        line = '''Class _3_{$j_6O_4_C4(){}Var $_,$Q_5rQOb_,$_:Boolean ;Val U:Boolean ;}Class __{Val $K:Array [Array [String ,9],0X4];}Class _{Destructor (){Return ;} }Class __Q{Val $_,__,m_:String ;Var R,$_0:Array [Float ,0X3B];}'''
        expect = '''Program([ClassDecl(Id(_3_),[MethodDecl(Id($j_6O_4_C4),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($Q_5rQOb_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,ConstDecl(Id(U),BoolType,None))]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($K),ArrayType(4,ArrayType(9,StringType)),None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(__Q),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(m_),StringType,None)),AttributeDecl(Instance,VarDecl(Id(R),ArrayType(59,FloatType))),AttributeDecl(Static,VarDecl(Id($_0),ArrayType(59,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 135))

    def test_136(self):
        line = '''Class _85{Var __1_,$r,$4:Array [Array [Boolean ,0B1111],93];Constructor (_:Array [Int ,0XFA];_:Boolean ;r:Array [String ,0b11];_6,r_0c:Array [Boolean ,0B10000_0];a__lO,_xR,_,_,V,R9,_:Array [Array [Array [Array [Int ,47],06],93],47]){}Var $_6,_D6,$bE_:Array [Boolean ,0B1];}'''
        expect = '''Program([ClassDecl(Id(_85),[AttributeDecl(Instance,VarDecl(Id(__1_),ArrayType(93,ArrayType(15,BoolType)))),AttributeDecl(Static,VarDecl(Id($r),ArrayType(93,ArrayType(15,BoolType)))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(93,ArrayType(15,BoolType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(250,IntType)),param(Id(_),BoolType),param(Id(r),ArrayType(3,StringType)),param(Id(_6),ArrayType(32,BoolType)),param(Id(r_0c),ArrayType(32,BoolType)),param(Id(a__lO),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType))))),param(Id(_xR),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType))))),param(Id(_),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType))))),param(Id(_),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType))))),param(Id(V),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType))))),param(Id(R9),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType))))),param(Id(_),ArrayType(47,ArrayType(93,ArrayType(6,ArrayType(47,IntType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($_6),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(_D6),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($bE_),ArrayType(1,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 136))

    def test_137(self):
        line = '''Class E:M{_6(B,_8E_,_:Array [String ,0x60];V:Array [Array [Array [Array [String ,0b110],0b10101],4],0X2_3];z442:Array [Array [Array [Float ,36],0B1],48];m1,_:Array [String ,02_7_47]){}Constructor (){}$D(){} }'''
        expect = '''Program([ClassDecl(Id(E),Id(M),[MethodDecl(Id(_6),Instance,[param(Id(B),ArrayType(96,StringType)),param(Id(_8E_),ArrayType(96,StringType)),param(Id(_),ArrayType(96,StringType)),param(Id(V),ArrayType(35,ArrayType(4,ArrayType(21,ArrayType(6,StringType))))),param(Id(z442),ArrayType(48,ArrayType(1,ArrayType(36,FloatType)))),param(Id(m1),ArrayType(1511,StringType)),param(Id(_),ArrayType(1511,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($D),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 137))

    def test_138(self):
        line = '''Class W:o_{Constructor (V8,F13K,_8:Array [Array [Array [Array [Array [Array [Boolean ,0B100011],0xD_0_C],0b1],0B100011],85],0127];E_,u0x3qA,_:Array [Boolean ,85]){_::$Q.O5();}Var N,$G_:String ;Var O,VJE,$30,$_,$Hd:Array [Int ,85];Val M,_v:y;Constructor (){}_(w7pl_:Boolean ){} }Class _:B{}'''
        expect = '''Program([ClassDecl(Id(W),Id(o_),[MethodDecl(Id(Constructor),Instance,[param(Id(V8),ArrayType(87,ArrayType(85,ArrayType(35,ArrayType(1,ArrayType(3340,ArrayType(35,BoolType))))))),param(Id(F13K),ArrayType(87,ArrayType(85,ArrayType(35,ArrayType(1,ArrayType(3340,ArrayType(35,BoolType))))))),param(Id(_8),ArrayType(87,ArrayType(85,ArrayType(35,ArrayType(1,ArrayType(3340,ArrayType(35,BoolType))))))),param(Id(E_),ArrayType(85,BoolType)),param(Id(u0x3qA),ArrayType(85,BoolType)),param(Id(_),ArrayType(85,BoolType))],Block([Call(FieldAccess(Id(_),Id($Q)),Id(O5),[])])),AttributeDecl(Instance,VarDecl(Id(N),StringType)),AttributeDecl(Static,VarDecl(Id($G_),StringType)),AttributeDecl(Instance,VarDecl(Id(O),ArrayType(85,IntType))),AttributeDecl(Instance,VarDecl(Id(VJE),ArrayType(85,IntType))),AttributeDecl(Static,VarDecl(Id($30),ArrayType(85,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(85,IntType))),AttributeDecl(Static,VarDecl(Id($Hd),ArrayType(85,IntType))),AttributeDecl(Instance,ConstDecl(Id(M),ClassType(Id(y)),None)),AttributeDecl(Instance,ConstDecl(Id(_v),ClassType(Id(y)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(w7pl_),BoolType)],Block([]))]),ClassDecl(Id(_),Id(B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 138))

    def test_139(self):
        line = '''Class djm_P:T_{Val i,$8m,_,n5,$L__:_;Destructor (){}Var g,_er:Float ;Destructor (){Return ;}Val $_,v:U__;Constructor (_,_,_:H){} }Class _{Val $__F,$7_:tq8;Val $6:String ;}'''
        expect = '''Program([ClassDecl(Id(djm_P),Id(T_),[AttributeDecl(Instance,ConstDecl(Id(i),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($8m),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(n5),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($L__),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(g),FloatType)),AttributeDecl(Instance,VarDecl(Id(_er),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(U__)),None)),AttributeDecl(Instance,ConstDecl(Id(v),ClassType(Id(U__)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(H))),param(Id(_),ClassType(Id(H))),param(Id(_),ClassType(Id(H)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($__F),ClassType(Id(tq8)),None)),AttributeDecl(Static,ConstDecl(Id($7_),ClassType(Id(tq8)),None)),AttributeDecl(Static,ConstDecl(Id($6),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 139))

    def test_140(self):
        line = '''Class _1:J8___{$_6_1(t_0_b9:Array [Array [Boolean ,037],02_4602];_,j7:Array [Array [Array [Int ,0B110110],037],0b1001111];J8,_,l_,Qc,__,T_h:Array [Array [Array [Array [Float ,0B1],0b1001111],037],0B1];__X:Array [Int ,0x1];_o2o:String ){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(J8___),[MethodDecl(Id($_6_1),Static,[param(Id(t_0_b9),ArrayType(10626,ArrayType(31,BoolType))),param(Id(_),ArrayType(79,ArrayType(31,ArrayType(54,IntType)))),param(Id(j7),ArrayType(79,ArrayType(31,ArrayType(54,IntType)))),param(Id(J8),ArrayType(1,ArrayType(31,ArrayType(79,ArrayType(1,FloatType))))),param(Id(_),ArrayType(1,ArrayType(31,ArrayType(79,ArrayType(1,FloatType))))),param(Id(l_),ArrayType(1,ArrayType(31,ArrayType(79,ArrayType(1,FloatType))))),param(Id(Qc),ArrayType(1,ArrayType(31,ArrayType(79,ArrayType(1,FloatType))))),param(Id(__),ArrayType(1,ArrayType(31,ArrayType(79,ArrayType(1,FloatType))))),param(Id(T_h),ArrayType(1,ArrayType(31,ArrayType(79,ArrayType(1,FloatType))))),param(Id(__X),ArrayType(1,IntType)),param(Id(_o2o),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 140))

    def test_141(self):
        line = '''Class O:_U{Constructor (n,_:Boolean ;d,__76:Array [Array [String ,8],0b1011000];_,D,P,_33,iR,m__8:Array [Array [Boolean ,01_27],0b10_0_1];_x4:Float ){}Val $0t__,$Rx,_:Float ;}'''
        expect = '''Program([ClassDecl(Id(O),Id(_U),[MethodDecl(Id(Constructor),Instance,[param(Id(n),BoolType),param(Id(_),BoolType),param(Id(d),ArrayType(88,ArrayType(8,StringType))),param(Id(__76),ArrayType(88,ArrayType(8,StringType))),param(Id(_),ArrayType(9,ArrayType(87,BoolType))),param(Id(D),ArrayType(9,ArrayType(87,BoolType))),param(Id(P),ArrayType(9,ArrayType(87,BoolType))),param(Id(_33),ArrayType(9,ArrayType(87,BoolType))),param(Id(iR),ArrayType(9,ArrayType(87,BoolType))),param(Id(m__8),ArrayType(9,ArrayType(87,BoolType))),param(Id(_x4),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($0t__),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($Rx),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 141))

    def test_142(self):
        line = '''Class r:_Iwg{}Class c{}Class b{Val _,_:vNf;}Class _3:_15x3{Constructor (_e,_5:Array [Array [Float ,0x4],32];_:Boolean ;V7,nR,i,yx:u_y){} }Class O{Val $N:Array [Array [Float ,0B110],5_6_4];}Class YR3pk_2_:bK3_{Val $L,$_l:Array [Array [Array [Boolean ,54],0121],043];}'''
        expect = '''Program([ClassDecl(Id(r),Id(_Iwg),[]),ClassDecl(Id(c),[]),ClassDecl(Id(b),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(vNf)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(vNf)),None))]),ClassDecl(Id(_3),Id(_15x3),[MethodDecl(Id(Constructor),Instance,[param(Id(_e),ArrayType(32,ArrayType(4,FloatType))),param(Id(_5),ArrayType(32,ArrayType(4,FloatType))),param(Id(_),BoolType),param(Id(V7),ClassType(Id(u_y))),param(Id(nR),ClassType(Id(u_y))),param(Id(i),ClassType(Id(u_y))),param(Id(yx),ClassType(Id(u_y)))],Block([]))]),ClassDecl(Id(O),[AttributeDecl(Static,ConstDecl(Id($N),ArrayType(564,ArrayType(6,FloatType)),None))]),ClassDecl(Id(YR3pk_2_),Id(bK3_),[AttributeDecl(Static,ConstDecl(Id($L),ArrayType(35,ArrayType(81,ArrayType(54,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_l),ArrayType(35,ArrayType(81,ArrayType(54,BoolType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 142))

    def test_143(self):
        line = '''Class g{Val oa:Float ;Var $R5,$q,q,T_7E:h;Val G6:Array [Boolean ,0x4];Constructor (r_2__,rB2__,k,Fn,s,_,L91:Array [String ,29];_9g,Qd:Array [Int ,0X1]){} }Class k:n{Val O,$6oG_:kr_7;}'''
        expect = '''Program([ClassDecl(Id(g),[AttributeDecl(Instance,ConstDecl(Id(oa),FloatType,None)),AttributeDecl(Static,VarDecl(Id($R5),ClassType(Id(h)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($q),ClassType(Id(h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(q),ClassType(Id(h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(T_7E),ClassType(Id(h)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(G6),ArrayType(4,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(r_2__),ArrayType(29,StringType)),param(Id(rB2__),ArrayType(29,StringType)),param(Id(k),ArrayType(29,StringType)),param(Id(Fn),ArrayType(29,StringType)),param(Id(s),ArrayType(29,StringType)),param(Id(_),ArrayType(29,StringType)),param(Id(L91),ArrayType(29,StringType)),param(Id(_9g),ArrayType(1,IntType)),param(Id(Qd),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(k),Id(n),[AttributeDecl(Instance,ConstDecl(Id(O),ClassType(Id(kr_7)),None)),AttributeDecl(Static,ConstDecl(Id($6oG_),ClassType(Id(kr_7)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 143))

    def test_144(self):
        line = '''Class _t_{Constructor (s:Array [Array [Float ,0B111011],03_7];t2,O:Array [Array [Boolean ,0b1_0],0x5F];_,Z:Int ;P_6__,_:uA__5;__Q_:Array [Array [Boolean ,1_5246],0x5F]){Return ;Continue ;}$v(__Q2,_:Array [Int ,0X69_4]){} }'''
        expect = '''Program([ClassDecl(Id(_t_),[MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(31,ArrayType(59,FloatType))),param(Id(t2),ArrayType(95,ArrayType(2,BoolType))),param(Id(O),ArrayType(95,ArrayType(2,BoolType))),param(Id(_),IntType),param(Id(Z),IntType),param(Id(P_6__),ClassType(Id(uA__5))),param(Id(_),ClassType(Id(uA__5))),param(Id(__Q_),ArrayType(95,ArrayType(15246,BoolType)))],Block([Return(),Continue])),MethodDecl(Id($v),Static,[param(Id(__Q2),ArrayType(1684,IntType)),param(Id(_),ArrayType(1684,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 144))

    def test_145(self):
        line = '''Class _:_{Destructor (){}Constructor (){Continue ;{} }Var _,$_v,$w2,a:_;}Class p:o__{Constructor (){} }Class d:_{Val Kh,_:Array [Array [Array [Array [Float ,0B1000000],042],0B1000000],0XAA];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Block([])])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_v),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($w2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(a),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(p),Id(o__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(d),Id(_),[AttributeDecl(Instance,ConstDecl(Id(Kh),ArrayType(170,ArrayType(64,ArrayType(34,ArrayType(64,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(170,ArrayType(64,ArrayType(34,ArrayType(64,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 145))

    def test_146(self):
        line = '''Class l:_ob6{}Class J{}Class _l_:v0{Destructor (){Continue ;Return ;}Destructor (){}_(){Continue ;Continue ;}Destructor (){Var O,F:_;} }Class _:_{Var _,_a85:_T;}Class w6{}Class _H7M:n_49{}Class _{g(_:Array [Float ,0x12];___u_,t:_;_,HE_Uk7,G2_:_b_a_;w_,_B6_:Array [Int ,05_6]){Break ;Break ;} }Class U:_{Val $7_4:Array [Array [Array [Array [Array [Array [Boolean ,022],0B1011010],6],0B1011010],0X8],0B1011010];}Class wuE7:c_lF{Val w_:Array [Float ,0B1011010];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(l),Id(_ob6),[]),ClassDecl(Id(J),[]),ClassDecl(Id(_l_),Id(v0),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([Continue,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(O),ClassType(Id(_)),NullLiteral()),VarDecl(Id(F),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_T)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_a85),ClassType(Id(_T)),NullLiteral()))]),ClassDecl(Id(w6),[]),ClassDecl(Id(_H7M),Id(n_49),[]),ClassDecl(Id(_),[MethodDecl(Id(g),Instance,[param(Id(_),ArrayType(18,FloatType)),param(Id(___u_),ClassType(Id(_))),param(Id(t),ClassType(Id(_))),param(Id(_),ClassType(Id(_b_a_))),param(Id(HE_Uk7),ClassType(Id(_b_a_))),param(Id(G2_),ClassType(Id(_b_a_))),param(Id(w_),ArrayType(46,IntType)),param(Id(_B6_),ArrayType(46,IntType))],Block([Break,Break]))]),ClassDecl(Id(U),Id(_),[AttributeDecl(Static,ConstDecl(Id($7_4),ArrayType(90,ArrayType(8,ArrayType(90,ArrayType(6,ArrayType(90,ArrayType(18,BoolType)))))),None))]),ClassDecl(Id(wuE7),Id(c_lF),[AttributeDecl(Instance,ConstDecl(Id(w_),ArrayType(90,FloatType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 146))

    def test_147(self):
        line = '''Class _1:t{}Class l8__:_0_g{}Class Q:_{Constructor (){}Var $e____,_7,$_:I_;}Class z913p_:b{}Class _2n6:A4{Constructor (_,_,B_,r2:Array [Array [Array [Int ,03_0],73],01];_n,__I3:_v;c,X,J3_:_74E2){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(t),[]),ClassDecl(Id(l8__),Id(_0_g),[]),ClassDecl(Id(Q),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($e____),ClassType(Id(I_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_7),ClassType(Id(I_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(I_)),NullLiteral()))]),ClassDecl(Id(z913p_),Id(b),[]),ClassDecl(Id(_2n6),Id(A4),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(73,ArrayType(24,IntType)))),param(Id(_),ArrayType(1,ArrayType(73,ArrayType(24,IntType)))),param(Id(B_),ArrayType(1,ArrayType(73,ArrayType(24,IntType)))),param(Id(r2),ArrayType(1,ArrayType(73,ArrayType(24,IntType)))),param(Id(_n),ClassType(Id(_v))),param(Id(__I3),ClassType(Id(_v))),param(Id(c),ClassType(Id(_74E2))),param(Id(X),ClassType(Id(_74E2))),param(Id(J3_),ClassType(Id(_74E2)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 147))

    def test_148(self):
        line = '''Class L:_{Constructor (v_h,_2_:K){}Constructor (_93:String ;O:_;_,_m:Array [Array [Array [Boolean ,0xB],0b101_000_1],0105];_W:Boolean ;p,m_,Gmd,_Q,__,H_,K:_){_7::$_();} }Class ____7:_G{}'''
        expect = '''Program([ClassDecl(Id(L),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(v_h),ClassType(Id(K))),param(Id(_2_),ClassType(Id(K)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_93),StringType),param(Id(O),ClassType(Id(_))),param(Id(_),ArrayType(69,ArrayType(81,ArrayType(11,BoolType)))),param(Id(_m),ArrayType(69,ArrayType(81,ArrayType(11,BoolType)))),param(Id(_W),BoolType),param(Id(p),ClassType(Id(_))),param(Id(m_),ClassType(Id(_))),param(Id(Gmd),ClassType(Id(_))),param(Id(_Q),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(H_),ClassType(Id(_))),param(Id(K),ClassType(Id(_)))],Block([Call(Id(_7),Id($_),[])]))]),ClassDecl(Id(____7),Id(_G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 148))

    def test_149(self):
        line = '''Class __3:BO_{Constructor (H,_1thK:Int ;_,A_,u8:Float ;aZ:S;_d:Int ;u_,h_2:Array [String ,0b1];__0__:Float ;T2:Array [String ,40];_Olq__R6,X:Array [String ,6];B:String ;a3,_,__2r:Float ;Lg2,_6v,SO5,Fx_V9_K322:N_;Q:grC;Y:Int ;_8:Array [Float ,0xD5_D]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(__3),Id(BO_),[MethodDecl(Id(Constructor),Instance,[param(Id(H),IntType),param(Id(_1thK),IntType),param(Id(_),FloatType),param(Id(A_),FloatType),param(Id(u8),FloatType),param(Id(aZ),ClassType(Id(S))),param(Id(_d),IntType),param(Id(u_),ArrayType(1,StringType)),param(Id(h_2),ArrayType(1,StringType)),param(Id(__0__),FloatType),param(Id(T2),ArrayType(40,StringType)),param(Id(_Olq__R6),ArrayType(6,StringType)),param(Id(X),ArrayType(6,StringType)),param(Id(B),StringType),param(Id(a3),FloatType),param(Id(_),FloatType),param(Id(__2r),FloatType),param(Id(Lg2),ClassType(Id(N_))),param(Id(_6v),ClassType(Id(N_))),param(Id(SO5),ClassType(Id(N_))),param(Id(Fx_V9_K322),ClassType(Id(N_))),param(Id(Q),ClassType(Id(grC))),param(Id(Y),IntType),param(Id(_8),ArrayType(3421,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 149))

    def test_150(self):
        line = '''Class w86___3:M_6_N{Destructor (){}Constructor (t7_d,_j_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,35],0B1001],053],0112],0b110101],0B1],06],4508],79],0b110101]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(w86___3),Id(M_6_N),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(t7_d),ArrayType(53,ArrayType(79,ArrayType(4508,ArrayType(6,ArrayType(1,ArrayType(53,ArrayType(74,ArrayType(43,ArrayType(9,ArrayType(35,FloatType))))))))))),param(Id(_j_),ArrayType(53,ArrayType(79,ArrayType(4508,ArrayType(6,ArrayType(1,ArrayType(53,ArrayType(74,ArrayType(43,ArrayType(9,ArrayType(35,FloatType)))))))))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 150))

    def test_151(self):
        line = '''Class _9{Constructor (_7_,__,OI:_4H;V,_R,_,_,_,Ja7_0j:Float ;Q563:Int ){}Destructor (){Return ;}$q27(_e,O15_1lP3hxG_B0:h;__j_:Array [Array [Boolean ,027],0B1100];_Z:Array [Float ,027];K,_6Nx_c:Int ){} }Class _V0:U71{}Class _{Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(_7_),ClassType(Id(_4H))),param(Id(__),ClassType(Id(_4H))),param(Id(OI),ClassType(Id(_4H))),param(Id(V),FloatType),param(Id(_R),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(Ja7_0j),FloatType),param(Id(Q563),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id($q27),Static,[param(Id(_e),ClassType(Id(h))),param(Id(O15_1lP3hxG_B0),ClassType(Id(h))),param(Id(__j_),ArrayType(12,ArrayType(23,BoolType))),param(Id(_Z),ArrayType(23,FloatType)),param(Id(K),IntType),param(Id(_6Nx_c),IntType)],Block([]))]),ClassDecl(Id(_V0),Id(U71),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 151))

    def test_152(self):
        line = '''Class l7r:__{Val $O_:Int ;}Class F:__{}Class M{Val $9_gG,_:Array [Array [Array [Boolean ,6],2],0b1];}Class D2_:U{Constructor (){}Var __Z_U:V;Destructor (){} }Class u{}'''
        expect = '''Program([ClassDecl(Id(l7r),Id(__),[AttributeDecl(Static,ConstDecl(Id($O_),IntType,None))]),ClassDecl(Id(F),Id(__),[]),ClassDecl(Id(M),[AttributeDecl(Static,ConstDecl(Id($9_gG),ArrayType(1,ArrayType(2,ArrayType(6,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(2,ArrayType(6,BoolType))),None))]),ClassDecl(Id(D2_),Id(U),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__Z_U),ClassType(Id(V)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(u),[])])'''
        self.assertTrue(TestAST.test(line, expect, 152))

    def test_153(self):
        line = '''Class _6L{}Class gV3{Val a_:String ;Var $0,$3xL,W_:Array [Float ,04_7];Val $6_b:Int ;Constructor (_2E_5hU,_:hI;OU,Y_:Array [Array [Array [Array [String ,060],12],0XD],060]){} }Class _9R1z{}Class I:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_6L),[]),ClassDecl(Id(gV3),[AttributeDecl(Instance,ConstDecl(Id(a_),StringType,None)),AttributeDecl(Static,VarDecl(Id($0),ArrayType(39,FloatType))),AttributeDecl(Static,VarDecl(Id($3xL),ArrayType(39,FloatType))),AttributeDecl(Instance,VarDecl(Id(W_),ArrayType(39,FloatType))),AttributeDecl(Static,ConstDecl(Id($6_b),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_2E_5hU),ClassType(Id(hI))),param(Id(_),ClassType(Id(hI))),param(Id(OU),ArrayType(48,ArrayType(13,ArrayType(12,ArrayType(48,StringType))))),param(Id(Y_),ArrayType(48,ArrayType(13,ArrayType(12,ArrayType(48,StringType)))))],Block([]))]),ClassDecl(Id(_9R1z),[]),ClassDecl(Id(I),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 153))

    def test_154(self):
        line = '''Class _:_{Destructor (){}Constructor (J:Array [Array [Float ,0X14],0X14];N_01_,_:_;Yl7,t6:String ;H7Y4N_J,__:_){} }Class _:qa8____u{Constructor (_:Int ){}Val $_7__w:_p;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(20,ArrayType(20,FloatType))),param(Id(N_01_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Yl7),StringType),param(Id(t6),StringType),param(Id(H7Y4N_J),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(qa8____u),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_7__w),ClassType(Id(_p)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 154))

    def test_155(self):
        line = '''Class j:Hn{Val $_,$v_x:Float ;Val _B5,_o_,_:Float ;Destructor (){Continue ;}Constructor (){} }Class K5_:_7_9{}Class T7S:J{$__5(I,_,_7V_,_3__:Float ;F,_Z1:_YUAt){} }Class __:eh{Constructor (_,F5,_T5_:_J4_;oS_4_,w3:Array [Float ,0b11];v_,Z:String ;_50,O3:Boolean ){} }Class _:W{}Class _q4:_{}'''
        expect = '''Program([ClassDecl(Id(j),Id(Hn),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($v_x),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_B5),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_o_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(K5_),Id(_7_9),[]),ClassDecl(Id(T7S),Id(J),[MethodDecl(Id($__5),Static,[param(Id(I),FloatType),param(Id(_),FloatType),param(Id(_7V_),FloatType),param(Id(_3__),FloatType),param(Id(F),ClassType(Id(_YUAt))),param(Id(_Z1),ClassType(Id(_YUAt)))],Block([]))]),ClassDecl(Id(__),Id(eh),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_J4_))),param(Id(F5),ClassType(Id(_J4_))),param(Id(_T5_),ClassType(Id(_J4_))),param(Id(oS_4_),ArrayType(3,FloatType)),param(Id(w3),ArrayType(3,FloatType)),param(Id(v_),StringType),param(Id(Z),StringType),param(Id(_50),BoolType),param(Id(O3),BoolType)],Block([]))]),ClassDecl(Id(_),Id(W),[]),ClassDecl(Id(_q4),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 155))

    def test_156(self):
        line = '''Class m:___{Var _,$S,$_q:Array [String ,0X64];Destructor (){}Val O:Array [Array [Int ,0x3],04];Var __,$5,$1:String ;}Class _{Constructor (fU,I_9,Y3,__,_2,_,_:_9_8){_::$6();} }Class A11nyI4:H89G{}'''
        expect = '''Program([ClassDecl(Id(m),Id(___),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(100,StringType))),AttributeDecl(Static,VarDecl(Id($S),ArrayType(100,StringType))),AttributeDecl(Static,VarDecl(Id($_q),ArrayType(100,StringType))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(O),ArrayType(4,ArrayType(3,IntType)),None)),AttributeDecl(Instance,VarDecl(Id(__),StringType)),AttributeDecl(Static,VarDecl(Id($5),StringType)),AttributeDecl(Static,VarDecl(Id($1),StringType))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(fU),ClassType(Id(_9_8))),param(Id(I_9),ClassType(Id(_9_8))),param(Id(Y3),ClassType(Id(_9_8))),param(Id(__),ClassType(Id(_9_8))),param(Id(_2),ClassType(Id(_9_8))),param(Id(_),ClassType(Id(_9_8))),param(Id(_),ClassType(Id(_9_8)))],Block([Call(Id(_),Id($6),[])]))]),ClassDecl(Id(A11nyI4),Id(H89G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 156))

    def test_157(self):
        line = '''Class KZo:_{Val _:Array [Array [Boolean ,0x8],0b110110];}Class _:_{$7(C:Boolean ;O:Array [Float ,0137]){} }Class _:I_735_5S{Var $O,_2_:Array [Boolean ,0B1_0];}Class h:___4C{}'''
        expect = '''Program([ClassDecl(Id(KZo),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(54,ArrayType(8,BoolType)),None))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($7),Static,[param(Id(C),BoolType),param(Id(O),ArrayType(95,FloatType))],Block([]))]),ClassDecl(Id(_),Id(I_735_5S),[AttributeDecl(Static,VarDecl(Id($O),ArrayType(2,BoolType))),AttributeDecl(Instance,VarDecl(Id(_2_),ArrayType(2,BoolType)))]),ClassDecl(Id(h),Id(___4C),[])])'''
        self.assertTrue(TestAST.test(line, expect, 157))

    def test_158(self):
        line = '''Class c5__0__{}Class A{Var $Rl:ZE_8s;Constructor (){Continue ;}Val $_88,$89,$_1B,$_,n,$3,$6,$D:__;Val $97_B,$y:Array [Boolean ,0XC_6];Destructor (){Continue ;} }Class O{Constructor (){}Destructor (){} }Class q:_{$X(_,L,_J0_,gU_f,_,_bZ,_V:Array [String ,02];_,E7u:_;e5__,_h3_,_78_,__:Float ;O5__I,mX_,h:String ){Break ;Var _:Array [Int ,0B10];}Var $_3,C:_;Constructor (){} }Class W:FS{}'''
        expect = '''Program([ClassDecl(Id(c5__0__),[]),ClassDecl(Id(A),[AttributeDecl(Static,VarDecl(Id($Rl),ClassType(Id(ZE_8s)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_88),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($89),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_1B),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($3),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($D),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($97_B),ArrayType(198,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($y),ArrayType(198,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(O),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(q),Id(_),[MethodDecl(Id($X),Static,[param(Id(_),ArrayType(2,StringType)),param(Id(L),ArrayType(2,StringType)),param(Id(_J0_),ArrayType(2,StringType)),param(Id(gU_f),ArrayType(2,StringType)),param(Id(_),ArrayType(2,StringType)),param(Id(_bZ),ArrayType(2,StringType)),param(Id(_V),ArrayType(2,StringType)),param(Id(_),ClassType(Id(_))),param(Id(E7u),ClassType(Id(_))),param(Id(e5__),FloatType),param(Id(_h3_),FloatType),param(Id(_78_),FloatType),param(Id(__),FloatType),param(Id(O5__I),StringType),param(Id(mX_),StringType),param(Id(h),StringType)],Block([Break,VarDecl(Id(_),ArrayType(2,IntType))])),AttributeDecl(Static,VarDecl(Id($_3),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(C),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(W),Id(FS),[])])'''
        self.assertTrue(TestAST.test(line, expect, 158))

    def test_159(self):
        line = '''Class _W:_g{Var V,_1,_,$s,P,_:Array [Boolean ,0x12];}Class _{_(XSz:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0XF],0X59],0X59],035],0x2],0124],06_6_1],0b1100010],33]){} }'''
        expect = '''Program([ClassDecl(Id(_W),Id(_g),[AttributeDecl(Instance,VarDecl(Id(V),ArrayType(18,BoolType))),AttributeDecl(Instance,VarDecl(Id(_1),ArrayType(18,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(18,BoolType))),AttributeDecl(Static,VarDecl(Id($s),ArrayType(18,BoolType))),AttributeDecl(Instance,VarDecl(Id(P),ArrayType(18,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(18,BoolType)))]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(XSz),ArrayType(33,ArrayType(98,ArrayType(433,ArrayType(84,ArrayType(2,ArrayType(29,ArrayType(89,ArrayType(89,ArrayType(15,IntType))))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 159))

    def test_160(self):
        line = '''Class _{$L4(__,_,_:M0;_,_:Array [Float ,7_0_76];N_:Array [Boolean ,70];W,___,j,i,XD,_g,a:_5721;y:W){}Destructor (){} }Class ____:_{}Class a1:_{}Class T:_x{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($L4),Static,[param(Id(__),ClassType(Id(M0))),param(Id(_),ClassType(Id(M0))),param(Id(_),ClassType(Id(M0))),param(Id(_),ArrayType(7076,FloatType)),param(Id(_),ArrayType(7076,FloatType)),param(Id(N_),ArrayType(70,BoolType)),param(Id(W),ClassType(Id(_5721))),param(Id(___),ClassType(Id(_5721))),param(Id(j),ClassType(Id(_5721))),param(Id(i),ClassType(Id(_5721))),param(Id(XD),ClassType(Id(_5721))),param(Id(_g),ClassType(Id(_5721))),param(Id(a),ClassType(Id(_5721))),param(Id(y),ClassType(Id(W)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(____),Id(_),[]),ClassDecl(Id(a1),Id(_),[]),ClassDecl(Id(T),Id(_x),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 160))

    def test_161(self):
        line = '''Class _6666HDE8:w{Val _,Y,$e_,$p,$F_,_,$4:Array [Array [Int ,071],06];Destructor (){Return ;} }Class P:_k8{Constructor (_,_p,R:String ;__,Y_:B5;__,_:Array [Array [Array [Boolean ,06],0X17],1]){}_(){} }'''
        expect = '''Program([ClassDecl(Id(_6666HDE8),Id(w),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,ArrayType(57,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(6,ArrayType(57,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($e_),ArrayType(6,ArrayType(57,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($p),ArrayType(6,ArrayType(57,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($F_),ArrayType(6,ArrayType(57,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,ArrayType(57,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(6,ArrayType(57,IntType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(P),Id(_k8),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_p),StringType),param(Id(R),StringType),param(Id(__),ClassType(Id(B5))),param(Id(Y_),ClassType(Id(B5))),param(Id(__),ArrayType(1,ArrayType(23,ArrayType(6,BoolType)))),param(Id(_),ArrayType(1,ArrayType(23,ArrayType(6,BoolType))))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 161))

    def test_162(self):
        line = '''Class Zp:_j6{Var $yC:_;Destructor (){} }Class Fuc4{Var K6,B:Array [Array [Boolean ,82],82];Constructor (){}Destructor (){} }Class _{}Class __:v{Var $4_:Float ;$_3(O0:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(Zp),Id(_j6),[AttributeDecl(Static,VarDecl(Id($yC),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Fuc4),[AttributeDecl(Instance,VarDecl(Id(K6),ArrayType(82,ArrayType(82,BoolType)))),AttributeDecl(Instance,VarDecl(Id(B),ArrayType(82,ArrayType(82,BoolType)))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(__),Id(v),[AttributeDecl(Static,VarDecl(Id($4_),FloatType)),MethodDecl(Id($_3),Static,[param(Id(O0),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 162))

    def test_163(self):
        line = '''Class _:_{Constructor (_4:Boolean ;_2,T,_k_97_,s_:Array [Array [Array [Boolean ,01],01],0B1];U:j;_g,t,l:lUc;_G:Array [Array [Array [Int ,0X12],0XA],07_41];___:Float ){} }Class _n:_7M__{$6_(_D6:Boolean ){Break ;Break ;} }Class yB:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_4),BoolType),param(Id(_2),ArrayType(1,ArrayType(1,ArrayType(1,BoolType)))),param(Id(T),ArrayType(1,ArrayType(1,ArrayType(1,BoolType)))),param(Id(_k_97_),ArrayType(1,ArrayType(1,ArrayType(1,BoolType)))),param(Id(s_),ArrayType(1,ArrayType(1,ArrayType(1,BoolType)))),param(Id(U),ClassType(Id(j))),param(Id(_g),ClassType(Id(lUc))),param(Id(t),ClassType(Id(lUc))),param(Id(l),ClassType(Id(lUc))),param(Id(_G),ArrayType(481,ArrayType(10,ArrayType(18,IntType)))),param(Id(___),FloatType)],Block([]))]),ClassDecl(Id(_n),Id(_7M__),[MethodDecl(Id($6_),Static,[param(Id(_D6),BoolType)],Block([Break,Break]))]),ClassDecl(Id(yB),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 163))

    def test_164(self):
        line = '''Class _j_4:t__{Destructor (){} }Class d:_{Destructor (){} }Class e{}Class __4{$p(_3,_8,_Q_4_,_:String ;_:Int ;q1:Float ;_:Float ){}__(a:Array [Array [Float ,3],0b10]){} }Class _:Q_{Constructor (){}nA(){} }'''
        expect = '''Program([ClassDecl(Id(_j_4),Id(t__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(d),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(e),[]),ClassDecl(Id(__4),[MethodDecl(Id($p),Static,[param(Id(_3),StringType),param(Id(_8),StringType),param(Id(_Q_4_),StringType),param(Id(_),StringType),param(Id(_),IntType),param(Id(q1),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(__),Instance,[param(Id(a),ArrayType(2,ArrayType(3,FloatType)))],Block([]))]),ClassDecl(Id(_),Id(Q_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(nA),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 164))

    def test_165(self):
        line = '''Class _{g_6(e3n_:r_5_){} }Class __N{Destructor (){f4::$4_();Var z,q_:Array [Array [Int ,03],0B1_1_0_0_0];}Constructor (_3:_){} }Class _:J{_E(_,_:Array [Boolean ,17]){} }Class M_o{Constructor (){} }Class _1:Jz{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(g_6),Instance,[param(Id(e3n_),ClassType(Id(r_5_)))],Block([]))]),ClassDecl(Id(__N),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(f4),Id($4_),[]),VarDecl(Id(z),ArrayType(24,ArrayType(3,IntType))),VarDecl(Id(q_),ArrayType(24,ArrayType(3,IntType)))])),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(J),[MethodDecl(Id(_E),Instance,[param(Id(_),ArrayType(17,BoolType)),param(Id(_),ArrayType(17,BoolType))],Block([]))]),ClassDecl(Id(M_o),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_1),Id(Jz),[])])'''
        self.assertTrue(TestAST.test(line, expect, 165))

    def test_166(self):
        line = '''Class __3:__9{Constructor (_7,__,b_10,y__w6h,_ye,M,n,I1j,bm,__3w,__:Boolean ;I:_7;Y_:Array [Boolean ,0XD];r,TM:Int ;_2:Array [Array [Float ,0xD],0X5E];g,___,J_o8_,_:Array [Boolean ,0B111101]){} }'''
        expect = '''Program([ClassDecl(Id(__3),Id(__9),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),BoolType),param(Id(__),BoolType),param(Id(b_10),BoolType),param(Id(y__w6h),BoolType),param(Id(_ye),BoolType),param(Id(M),BoolType),param(Id(n),BoolType),param(Id(I1j),BoolType),param(Id(bm),BoolType),param(Id(__3w),BoolType),param(Id(__),BoolType),param(Id(I),ClassType(Id(_7))),param(Id(Y_),ArrayType(13,BoolType)),param(Id(r),IntType),param(Id(TM),IntType),param(Id(_2),ArrayType(94,ArrayType(13,FloatType))),param(Id(g),ArrayType(61,BoolType)),param(Id(___),ArrayType(61,BoolType)),param(Id(J_o8_),ArrayType(61,BoolType)),param(Id(_),ArrayType(61,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 166))

    def test_167(self):
        line = '''Class I:_{}Class ig:__{Destructor (){New _().e();Continue ;{Continue ;} }$93(_,J,_:Array [Array [Float ,81],0x39F];__,G:l1;_4j__g,_e3vB__:Int ){} }Class _{}Class _:E{}Class _3Q{}'''
        expect = '''Program([ClassDecl(Id(I),Id(_),[]),ClassDecl(Id(ig),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Call(NewExpr(Id(_),[]),Id(e),[]),Continue,Block([Continue])])),MethodDecl(Id($93),Static,[param(Id(_),ArrayType(927,ArrayType(81,FloatType))),param(Id(J),ArrayType(927,ArrayType(81,FloatType))),param(Id(_),ArrayType(927,ArrayType(81,FloatType))),param(Id(__),ClassType(Id(l1))),param(Id(G),ClassType(Id(l1))),param(Id(_4j__g),IntType),param(Id(_e3vB__),IntType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(E),[]),ClassDecl(Id(_3Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 167))

    def test_168(self):
        line = '''Class _:p{Destructor (){}Destructor (){}Destructor (){}g_X7(){Continue ;}Val S,$_,$H:Array [Array [Array [Array [Array [Boolean ,0b10_0],60],0x56],60],0b11_1_0];}Class _UD{$3_ac3(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(g_X7),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(S),ArrayType(14,ArrayType(60,ArrayType(86,ArrayType(60,ArrayType(4,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(14,ArrayType(60,ArrayType(86,ArrayType(60,ArrayType(4,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($H),ArrayType(14,ArrayType(60,ArrayType(86,ArrayType(60,ArrayType(4,BoolType))))),None))]),ClassDecl(Id(_UD),[MethodDecl(Id($3_ac3),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 168))

    def test_169(self):
        line = '''Class v_:_{$_(Z___:Array [Array [Array [Array [Array [Array [Float ,0x7],0x2_7_D_5],0b1101],59],0b1101],0136];i:E){Continue ;Val T7_v,____,U,b,H8,q:dd;Var _,Zm:String ;} }Class a_33_Q{}Class _z8_{}Class I:___{}'''
        expect = '''Program([ClassDecl(Id(v_),Id(_),[MethodDecl(Id($_),Static,[param(Id(Z___),ArrayType(94,ArrayType(13,ArrayType(59,ArrayType(13,ArrayType(10197,ArrayType(7,FloatType))))))),param(Id(i),ClassType(Id(E)))],Block([Continue,ConstDecl(Id(T7_v),ClassType(Id(dd)),None),ConstDecl(Id(____),ClassType(Id(dd)),None),ConstDecl(Id(U),ClassType(Id(dd)),None),ConstDecl(Id(b),ClassType(Id(dd)),None),ConstDecl(Id(H8),ClassType(Id(dd)),None),ConstDecl(Id(q),ClassType(Id(dd)),None),VarDecl(Id(_),StringType),VarDecl(Id(Zm),StringType)]))]),ClassDecl(Id(a_33_Q),[]),ClassDecl(Id(_z8_),[]),ClassDecl(Id(I),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 169))

    def test_170(self):
        line = '''Class _:t{$44H(e:Int ;_GZ22:Float ;e:Array [String ,0b1];_R:_;_:Float ;iB,_,_,p,c,a4,ZF,I,E:Array [Int ,0x6C0];G,_,___,__:Array [Array [Array [Array [Array [Array [Float ,0XCA],02],040],0X4C],0X9],0b1100];_2:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(t),[MethodDecl(Id($44H),Static,[param(Id(e),IntType),param(Id(_GZ22),FloatType),param(Id(e),ArrayType(1,StringType)),param(Id(_R),ClassType(Id(_))),param(Id(_),FloatType),param(Id(iB),ArrayType(1728,IntType)),param(Id(_),ArrayType(1728,IntType)),param(Id(_),ArrayType(1728,IntType)),param(Id(p),ArrayType(1728,IntType)),param(Id(c),ArrayType(1728,IntType)),param(Id(a4),ArrayType(1728,IntType)),param(Id(ZF),ArrayType(1728,IntType)),param(Id(I),ArrayType(1728,IntType)),param(Id(E),ArrayType(1728,IntType)),param(Id(G),ArrayType(12,ArrayType(9,ArrayType(76,ArrayType(32,ArrayType(2,ArrayType(202,FloatType))))))),param(Id(_),ArrayType(12,ArrayType(9,ArrayType(76,ArrayType(32,ArrayType(2,ArrayType(202,FloatType))))))),param(Id(___),ArrayType(12,ArrayType(9,ArrayType(76,ArrayType(32,ArrayType(2,ArrayType(202,FloatType))))))),param(Id(__),ArrayType(12,ArrayType(9,ArrayType(76,ArrayType(32,ArrayType(2,ArrayType(202,FloatType))))))),param(Id(_2),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 170))

    def test_171(self):
        line = '''Class _:_RH_{Val $_:__;Val ctb:Boolean ;Val i___:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1],0XC],0x20],5],0X6],035],93];Constructor (_,__,_85:Float ){Continue ;}Val $x,$8_,aKZ,_,j229_,$8b_:Boolean ;Constructor (){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_RH_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(ctb),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(i___),ArrayType(93,ArrayType(29,ArrayType(6,ArrayType(5,ArrayType(32,ArrayType(12,ArrayType(1,BoolType))))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(__),FloatType),param(Id(_85),FloatType)],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($x),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($8_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(aKZ),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(j229_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($8b_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 171))

    def test_172(self):
        line = '''Class k2E3rD:b{}Class _59:_{Var $4,$f,vPn:Int ;}Class __{}Class _{Var _:Boolean ;Val $L3,Ol1:WgR;}Class A_8:z_{}Class S1:K{Constructor (){}Destructor (){Return ;} }Class a{}'''
        expect = '''Program([ClassDecl(Id(k2E3rD),Id(b),[]),ClassDecl(Id(_59),Id(_),[AttributeDecl(Static,VarDecl(Id($4),IntType)),AttributeDecl(Static,VarDecl(Id($f),IntType)),AttributeDecl(Instance,VarDecl(Id(vPn),IntType))]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,ConstDecl(Id($L3),ClassType(Id(WgR)),None)),AttributeDecl(Instance,ConstDecl(Id(Ol1),ClassType(Id(WgR)),None))]),ClassDecl(Id(A_8),Id(z_),[]),ClassDecl(Id(S1),Id(K),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 172))

    def test_173(self):
        line = '''Class _:V41n{Constructor (_9Pc:Float ;y8:_){Return ;}Val K_:Array [Array [Int ,6],0x5];Constructor (o_,f_2l,v:d85){Var _:Array [Boolean ,024];Return ;}Val _3,N_,m8,$2,__:d_;Val $_q1,k,$29,t8_,$K:String ;}Class _8:__{Var $5,___N8,_,B:_Cl;Var _:Int ;Destructor (){Continue ;Break ;}Val __:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(V41n),[MethodDecl(Id(Constructor),Instance,[param(Id(_9Pc),FloatType),param(Id(y8),ClassType(Id(_)))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(K_),ArrayType(5,ArrayType(6,IntType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(o_),ClassType(Id(d85))),param(Id(f_2l),ClassType(Id(d85))),param(Id(v),ClassType(Id(d85)))],Block([VarDecl(Id(_),ArrayType(20,BoolType)),Return()])),AttributeDecl(Instance,ConstDecl(Id(_3),ClassType(Id(d_)),None)),AttributeDecl(Instance,ConstDecl(Id(N_),ClassType(Id(d_)),None)),AttributeDecl(Instance,ConstDecl(Id(m8),ClassType(Id(d_)),None)),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(d_)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(d_)),None)),AttributeDecl(Static,ConstDecl(Id($_q1),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(k),StringType,None)),AttributeDecl(Static,ConstDecl(Id($29),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(t8_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($K),StringType,None))]),ClassDecl(Id(_8),Id(__),[AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_Cl)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___N8),ClassType(Id(_Cl)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_Cl)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(B),ClassType(Id(_Cl)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Break])),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 173))

    def test_174(self):
        line = '''Class g{_(j:Array [String ,06];__:Float ;_:Array [Array [Array [Array [Float ,0X53],05],0b1_0_10_1],0X53];r,f1JxPM_cL,___3_:Int ){}Val ___9:Float ;Constructor (__4:_){} }'''
        expect = '''Program([ClassDecl(Id(g),[MethodDecl(Id(_),Instance,[param(Id(j),ArrayType(6,StringType)),param(Id(__),FloatType),param(Id(_),ArrayType(83,ArrayType(21,ArrayType(5,ArrayType(83,FloatType))))),param(Id(r),IntType),param(Id(f1JxPM_cL),IntType),param(Id(___3_),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(___9),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__4),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 174))

    def test_175(self):
        line = '''Class _v{Destructor (){} }Class f:Z{}Class _9H_{Destructor (){} }Class w:r8{Constructor (a:_;N,O,_m,D,J_:__1m;____:Boolean ;p5_Y,_:Array [Float ,0130];s06_53,_x:String ){Continue ;Break ;Continue ;}Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_v),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(f),Id(Z),[]),ClassDecl(Id(_9H_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w),Id(r8),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ClassType(Id(_))),param(Id(N),ClassType(Id(__1m))),param(Id(O),ClassType(Id(__1m))),param(Id(_m),ClassType(Id(__1m))),param(Id(D),ClassType(Id(__1m))),param(Id(J_),ClassType(Id(__1m))),param(Id(____),BoolType),param(Id(p5_Y),ArrayType(88,FloatType)),param(Id(_),ArrayType(88,FloatType)),param(Id(s06_53),StringType),param(Id(_x),StringType)],Block([Continue,Break,Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 175))

    def test_176(self):
        line = '''Class t:d{Var M,DQe_F,_:Boolean ;$p_f(){}Val _,$R2_:Array [Array [Array [Int ,01_63],0x52],0x8];Constructor (H_Nfj:Array [Boolean ,01_5_5];_5,a9,Y:NB_){} }Class _h{Val $b,$_,_v,b,xh,D:Int ;}Class __r:i_yg{}'''
        expect = '''Program([ClassDecl(Id(t),Id(d),[AttributeDecl(Instance,VarDecl(Id(M),BoolType)),AttributeDecl(Instance,VarDecl(Id(DQe_F),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id($p_f),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,ArrayType(82,ArrayType(115,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($R2_),ArrayType(8,ArrayType(82,ArrayType(115,IntType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(H_Nfj),ArrayType(109,BoolType)),param(Id(_5),ClassType(Id(NB_))),param(Id(a9),ClassType(Id(NB_))),param(Id(Y),ClassType(Id(NB_)))],Block([]))]),ClassDecl(Id(_h),[AttributeDecl(Static,ConstDecl(Id($b),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_v),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(b),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(xh),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(D),IntType,None))]),ClassDecl(Id(__r),Id(i_yg),[])])'''
        self.assertTrue(TestAST.test(line, expect, 176))

    def test_177(self):
        line = '''Class Mh:___7{Constructor (__,j:_0_b_;_,_Y,___:Array [String ,0b1];_68,w_F:q;__x_:Float ;X4:_1;_,_,__2,_,Rk8,_:Float ){}Constructor (){}Var $9,$_:Int ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(Mh),Id(___7),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_0_b_))),param(Id(j),ClassType(Id(_0_b_))),param(Id(_),ArrayType(1,StringType)),param(Id(_Y),ArrayType(1,StringType)),param(Id(___),ArrayType(1,StringType)),param(Id(_68),ClassType(Id(q))),param(Id(w_F),ClassType(Id(q))),param(Id(__x_),FloatType),param(Id(X4),ClassType(Id(_1))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(__2),FloatType),param(Id(_),FloatType),param(Id(Rk8),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($9),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 177))

    def test_178(self):
        line = '''Class _4{}Class or__u{Destructor (){Val _K__:U;} }Class l{Var g,J:__;Var $T,$_:Array [Array [Array [Array [String ,5],0x49],06],34];}Class Ch:_{$_UY(_,__,V:_;_4_,o,_3,ib__df__:Array [Array [Int ,054],206]){} }Class G__U6{}'''
        expect = '''Program([ClassDecl(Id(_4),[]),ClassDecl(Id(or__u),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_K__),ClassType(Id(U)),None)]))]),ClassDecl(Id(l),[AttributeDecl(Instance,VarDecl(Id(g),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(J),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($T),ArrayType(34,ArrayType(6,ArrayType(73,ArrayType(5,StringType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(34,ArrayType(6,ArrayType(73,ArrayType(5,StringType))))))]),ClassDecl(Id(Ch),Id(_),[MethodDecl(Id($_UY),Static,[param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(V),ClassType(Id(_))),param(Id(_4_),ArrayType(206,ArrayType(44,IntType))),param(Id(o),ArrayType(206,ArrayType(44,IntType))),param(Id(_3),ArrayType(206,ArrayType(44,IntType))),param(Id(ib__df__),ArrayType(206,ArrayType(44,IntType)))],Block([]))]),ClassDecl(Id(G__U6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 178))

    def test_179(self):
        line = '''Class _{Constructor (__2,__:A;S4:String ;v_,_H,_,_:Array [Array [Float ,0x36],0b11011]){}Constructor (e,gl:Sj2___){}_9(_:String ;z:Array [String ,0B101];_G8:__X;p0w:k0;b:Int ;fu_:Array [Array [Array [String ,4],0B111],6]){Break ;Continue ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__2),ClassType(Id(A))),param(Id(__),ClassType(Id(A))),param(Id(S4),StringType),param(Id(v_),ArrayType(27,ArrayType(54,FloatType))),param(Id(_H),ArrayType(27,ArrayType(54,FloatType))),param(Id(_),ArrayType(27,ArrayType(54,FloatType))),param(Id(_),ArrayType(27,ArrayType(54,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(e),ClassType(Id(Sj2___))),param(Id(gl),ClassType(Id(Sj2___)))],Block([])),MethodDecl(Id(_9),Instance,[param(Id(_),StringType),param(Id(z),ArrayType(5,StringType)),param(Id(_G8),ClassType(Id(__X))),param(Id(p0w),ClassType(Id(k0))),param(Id(b),IntType),param(Id(fu_),ArrayType(6,ArrayType(7,ArrayType(4,StringType))))],Block([Break,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 179))

    def test_180(self):
        line = '''Class _{}Class p_b_:_{$_(j_6Q:Array [Array [Array [Array [Array [Array [Boolean ,0B10001],0b1],65],075],075],65];_,_:Array [Array [Int ,65],0B10]){Break ;{} }Destructor (){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(p_b_),Id(_),[MethodDecl(Id($_),Static,[param(Id(j_6Q),ArrayType(65,ArrayType(61,ArrayType(61,ArrayType(65,ArrayType(1,ArrayType(17,BoolType))))))),param(Id(_),ArrayType(2,ArrayType(65,IntType))),param(Id(_),ArrayType(2,ArrayType(65,IntType)))],Block([Break,Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 180))

    def test_181(self):
        line = '''Class z{}Class _{}Class F{}Class L2:d8{Destructor (){Break ;}_(){} }Class W:U{Destructor (){}Var I_,g,__,s_r:Array [Float ,0120];Constructor (){Break ;Return ;Break ;}Destructor (){} }Class C_{}'''
        expect = '''Program([ClassDecl(Id(z),[]),ClassDecl(Id(_),[]),ClassDecl(Id(F),[]),ClassDecl(Id(L2),Id(d8),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(W),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(I_),ArrayType(80,FloatType))),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(80,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(80,FloatType))),AttributeDecl(Instance,VarDecl(Id(s_r),ArrayType(80,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([Break,Return(),Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(C_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 181))

    def test_182(self):
        line = '''Class _:K{Var $9c_:Array [Array [Array [Int ,80],0B1],0X354A_9];Constructor (u:Array [Array [String ,9],0xE2];_b,_kU:R5;_8s,Pd,_5,uW:Array [Array [Boolean ,0X2],013]){Val _,_T3:String ;Break ;Break ;}Var $G,_6:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(K),[AttributeDecl(Static,VarDecl(Id($9c_),ArrayType(218281,ArrayType(1,ArrayType(80,IntType))))),MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(226,ArrayType(9,StringType))),param(Id(_b),ClassType(Id(R5))),param(Id(_kU),ClassType(Id(R5))),param(Id(_8s),ArrayType(11,ArrayType(2,BoolType))),param(Id(Pd),ArrayType(11,ArrayType(2,BoolType))),param(Id(_5),ArrayType(11,ArrayType(2,BoolType))),param(Id(uW),ArrayType(11,ArrayType(2,BoolType)))],Block([ConstDecl(Id(_),StringType,None),ConstDecl(Id(_T3),StringType,None),Break,Break])),AttributeDecl(Static,VarDecl(Id($G),StringType)),AttributeDecl(Instance,VarDecl(Id(_6),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 182))

    def test_183(self):
        line = '''Class l2_:_70{Var $__,$42q2:y__j5;$2____9ds(__j,_:Array [Array [Array [Array [Array [Float ,9],77],0XDA],0X6_6],0b1001001];x_:Array [Boolean ,0B1];Q:Array [Array [Float ,3],0xC];H0r2:__){}Var $4J_2_52,$_:Array [Boolean ,032];}'''
        expect = '''Program([ClassDecl(Id(l2_),Id(_70),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(y__j5)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($42q2),ClassType(Id(y__j5)),NullLiteral())),MethodDecl(Id($2____9ds),Static,[param(Id(__j),ArrayType(73,ArrayType(102,ArrayType(218,ArrayType(77,ArrayType(9,FloatType)))))),param(Id(_),ArrayType(73,ArrayType(102,ArrayType(218,ArrayType(77,ArrayType(9,FloatType)))))),param(Id(x_),ArrayType(1,BoolType)),param(Id(Q),ArrayType(12,ArrayType(3,FloatType))),param(Id(H0r2),ClassType(Id(__)))],Block([])),AttributeDecl(Static,VarDecl(Id($4J_2_52),ArrayType(26,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(26,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 183))

    def test_184(self):
        line = '''Class JF:_{Constructor (_:Int ){}Var $b,$1:Array [Array [Array [Boolean ,0b10],69],0B10011];Constructor (_G,r:Array [Array [Int ,056],0b111101]){}Constructor (_,B1,_y:Array [String ,056]){Return ;}Var _:Array [String ,69];$q(){} }Class Oaw:_lyk{}Class _{}Class _:__{Val $730:m;}'''
        expect = '''Program([ClassDecl(Id(JF),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($b),ArrayType(19,ArrayType(69,ArrayType(2,BoolType))))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(19,ArrayType(69,ArrayType(2,BoolType))))),MethodDecl(Id(Constructor),Instance,[param(Id(_G),ArrayType(61,ArrayType(46,IntType))),param(Id(r),ArrayType(61,ArrayType(46,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(46,StringType)),param(Id(B1),ArrayType(46,StringType)),param(Id(_y),ArrayType(46,StringType))],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(69,StringType))),MethodDecl(Id($q),Static,[],Block([]))]),ClassDecl(Id(Oaw),Id(_lyk),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($730),ClassType(Id(m)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 184))

    def test_185(self):
        line = '''Class s:_{}Class _{}Class _H{Val v_:P;Constructor (_,_:Array [Boolean ,3_2]){}Constructor (_:Array [Int ,9];_8:Array [Float ,8_4]){Continue ;Continue ;Break ;} }Class _Y2{}Class _{}'''
        expect = '''Program([ClassDecl(Id(s),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_H),[AttributeDecl(Instance,ConstDecl(Id(v_),ClassType(Id(P)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(32,BoolType)),param(Id(_),ArrayType(32,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(9,IntType)),param(Id(_8),ArrayType(84,FloatType))],Block([Continue,Continue,Break]))]),ClassDecl(Id(_Y2),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 185))

    def test_186(self):
        line = '''Class q{Destructor (){} }Class _:J{}Class _:_7{Constructor (){}Destructor (){}Var L:Float ;Var _:Array [String ,0X34];Val $___BT,_W,N:Array [Array [Array [String ,0X34],0x4],0135];}'''
        expect = '''Program([ClassDecl(Id(q),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(J),[]),ClassDecl(Id(_),Id(_7),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(L),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,StringType))),AttributeDecl(Static,ConstDecl(Id($___BT),ArrayType(93,ArrayType(4,ArrayType(52,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_W),ArrayType(93,ArrayType(4,ArrayType(52,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(N),ArrayType(93,ArrayType(4,ArrayType(52,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 186))

    def test_187(self):
        line = '''Class t{Destructor (){}Val $_qhP7:j;Destructor (){}Constructor (r:Array [Array [Boolean ,062],0103]){} }Class S:g_a9E8l{}Class R7_:K_Z{_6(_J,__1,j,p:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_qhP7),ClassType(Id(j)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(r),ArrayType(67,ArrayType(50,BoolType)))],Block([]))]),ClassDecl(Id(S),Id(g_a9E8l),[]),ClassDecl(Id(R7_),Id(K_Z),[MethodDecl(Id(_6),Instance,[param(Id(_J),BoolType),param(Id(__1),BoolType),param(Id(j),BoolType),param(Id(p),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 187))

    def test_188(self):
        line = '''Class J537:_{Destructor (){}$_(_r,n2,_:Array [Array [Array [Float ,01_7],16],402_4];_5,E:Float ;___,E:Array [Int ,0X22];_:String ;d,_d_0,_:Int ;_5_:D;L,T,_o,I__21,A,_d_29,_:zj;_,j:Array [String ,4_9];A,k:Array [Array [Array [Array [Array [String ,07_2_3],0xC],7],01],0X22]){} }'''
        expect = '''Program([ClassDecl(Id(J537),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(_r),ArrayType(4024,ArrayType(16,ArrayType(15,FloatType)))),param(Id(n2),ArrayType(4024,ArrayType(16,ArrayType(15,FloatType)))),param(Id(_),ArrayType(4024,ArrayType(16,ArrayType(15,FloatType)))),param(Id(_5),FloatType),param(Id(E),FloatType),param(Id(___),ArrayType(34,IntType)),param(Id(E),ArrayType(34,IntType)),param(Id(_),StringType),param(Id(d),IntType),param(Id(_d_0),IntType),param(Id(_),IntType),param(Id(_5_),ClassType(Id(D))),param(Id(L),ClassType(Id(zj))),param(Id(T),ClassType(Id(zj))),param(Id(_o),ClassType(Id(zj))),param(Id(I__21),ClassType(Id(zj))),param(Id(A),ClassType(Id(zj))),param(Id(_d_29),ClassType(Id(zj))),param(Id(_),ClassType(Id(zj))),param(Id(_),ArrayType(49,StringType)),param(Id(j),ArrayType(49,StringType)),param(Id(A),ArrayType(34,ArrayType(1,ArrayType(7,ArrayType(12,ArrayType(467,StringType)))))),param(Id(k),ArrayType(34,ArrayType(1,ArrayType(7,ArrayType(12,ArrayType(467,StringType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 188))

    def test_189(self):
        line = '''Class H:s{}Class DeI:d{$2_(t0U,r1Q0Gn,U_2,_:Array [Array [Boolean ,027],027]){} }Class _43_:an5{_6(__:wc7M;_B:Array [Array [Array [Boolean ,31],5],04];i,_t__72:_;__2G9,t:Array [Float ,31];T_2_,s5:cX;vG3L:Array [Array [Array [Array [Array [Int ,0XE],01],0B11011],31],25];_,S:Array [Array [Int ,027],1]){Var _,Gl:String ;} }Class Ej_{}'''
        expect = '''Program([ClassDecl(Id(H),Id(s),[]),ClassDecl(Id(DeI),Id(d),[MethodDecl(Id($2_),Static,[param(Id(t0U),ArrayType(23,ArrayType(23,BoolType))),param(Id(r1Q0Gn),ArrayType(23,ArrayType(23,BoolType))),param(Id(U_2),ArrayType(23,ArrayType(23,BoolType))),param(Id(_),ArrayType(23,ArrayType(23,BoolType)))],Block([]))]),ClassDecl(Id(_43_),Id(an5),[MethodDecl(Id(_6),Instance,[param(Id(__),ClassType(Id(wc7M))),param(Id(_B),ArrayType(4,ArrayType(5,ArrayType(31,BoolType)))),param(Id(i),ClassType(Id(_))),param(Id(_t__72),ClassType(Id(_))),param(Id(__2G9),ArrayType(31,FloatType)),param(Id(t),ArrayType(31,FloatType)),param(Id(T_2_),ClassType(Id(cX))),param(Id(s5),ClassType(Id(cX))),param(Id(vG3L),ArrayType(25,ArrayType(31,ArrayType(27,ArrayType(1,ArrayType(14,IntType)))))),param(Id(_),ArrayType(1,ArrayType(23,IntType))),param(Id(S),ArrayType(1,ArrayType(23,IntType)))],Block([VarDecl(Id(_),StringType),VarDecl(Id(Gl),StringType)]))]),ClassDecl(Id(Ej_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 189))

    def test_190(self):
        line = '''Class _4_:h38{}Class __:W{Constructor (GT:String ;_:Int ;H:Array [String ,0X1_9];k4:Array [Array [Int ,67],024];_UI:GZ){}Val _7_7:Array [Array [Array [Float ,024],4],02_7];}Class r_{}Class __k{}'''
        expect = '''Program([ClassDecl(Id(_4_),Id(h38),[]),ClassDecl(Id(__),Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(GT),StringType),param(Id(_),IntType),param(Id(H),ArrayType(25,StringType)),param(Id(k4),ArrayType(20,ArrayType(67,IntType))),param(Id(_UI),ClassType(Id(GZ)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_7_7),ArrayType(23,ArrayType(4,ArrayType(20,FloatType))),None))]),ClassDecl(Id(r_),[]),ClassDecl(Id(__k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 190))

    def test_191(self):
        line = '''Class _z{Constructor (M:Array [Float ,0B1_1];_3:Array [Array [Array [Array [Array [Array [String ,3_10],0b1],0XA_4_A_E],0121],0x43],9];H_,_v,f_,f75_,D__:Int ;_,_V7:w;_,F:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_z),[MethodDecl(Id(Constructor),Instance,[param(Id(M),ArrayType(3,FloatType)),param(Id(_3),ArrayType(9,ArrayType(67,ArrayType(81,ArrayType(42158,ArrayType(1,ArrayType(310,StringType))))))),param(Id(H_),IntType),param(Id(_v),IntType),param(Id(f_),IntType),param(Id(f75_),IntType),param(Id(D__),IntType),param(Id(_),ClassType(Id(w))),param(Id(_V7),ClassType(Id(w))),param(Id(_),FloatType),param(Id(F),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 191))

    def test_192(self):
        line = '''Class _47_:___{Destructor (){}Constructor (_,_,_r__:Array [Float ,8];f78_,_,_:Array [String ,040];v,_g6,W_,___,_:Array [Boolean ,0B1]){}Val Y,$T7:Array [Array [Boolean ,0B1011],0X1D];}'''
        expect = '''Program([ClassDecl(Id(_47_),Id(___),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType)),param(Id(_r__),ArrayType(8,FloatType)),param(Id(f78_),ArrayType(32,StringType)),param(Id(_),ArrayType(32,StringType)),param(Id(_),ArrayType(32,StringType)),param(Id(v),ArrayType(1,BoolType)),param(Id(_g6),ArrayType(1,BoolType)),param(Id(W_),ArrayType(1,BoolType)),param(Id(___),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(29,ArrayType(11,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($T7),ArrayType(29,ArrayType(11,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 192))

    def test_193(self):
        line = '''Class _y{}Class _H:_8{$3_(_1,_0_,K_,z:x9){}Constructor (c:_6i;x80:Int ;k:Array [Array [String ,0b1_1_0],0x60];J,n:Array [Array [Array [Boolean ,0X1_B],0123],0xC]){Val _75V:Int ;} }Class P_:__{}Class _:_{Var $8,$1,$2:Float ;}'''
        expect = '''Program([ClassDecl(Id(_y),[]),ClassDecl(Id(_H),Id(_8),[MethodDecl(Id($3_),Static,[param(Id(_1),ClassType(Id(x9))),param(Id(_0_),ClassType(Id(x9))),param(Id(K_),ClassType(Id(x9))),param(Id(z),ClassType(Id(x9)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(c),ClassType(Id(_6i))),param(Id(x80),IntType),param(Id(k),ArrayType(96,ArrayType(6,StringType))),param(Id(J),ArrayType(12,ArrayType(83,ArrayType(27,BoolType)))),param(Id(n),ArrayType(12,ArrayType(83,ArrayType(27,BoolType))))],Block([ConstDecl(Id(_75V),IntType,None)]))]),ClassDecl(Id(P_),Id(__),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($8),FloatType)),AttributeDecl(Static,VarDecl(Id($1),FloatType)),AttributeDecl(Static,VarDecl(Id($2),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 193))

    def test_194(self):
        line = '''Class _{}Class E_1:_{Constructor (_,_:Array [Boolean ,77]){}Constructor (c,r_,_:Boolean ;do:Int ;w,_,_:Array [Array [Array [String ,0134],77],77];Sa,X_0:Array [Array [Boolean ,0X31],1]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(E_1),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(77,BoolType)),param(Id(_),ArrayType(77,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(c),BoolType),param(Id(r_),BoolType),param(Id(_),BoolType),param(Id(do),IntType),param(Id(w),ArrayType(77,ArrayType(77,ArrayType(92,StringType)))),param(Id(_),ArrayType(77,ArrayType(77,ArrayType(92,StringType)))),param(Id(_),ArrayType(77,ArrayType(77,ArrayType(92,StringType)))),param(Id(Sa),ArrayType(1,ArrayType(49,BoolType))),param(Id(X_0),ArrayType(1,ArrayType(49,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 194))

    def test_195(self):
        line = '''Class E:f__{Destructor (){} }Class Nw:_7{Constructor (__:Array [Float ,0B1001111]){Continue ;}Val Y,$9,$_:_3;Val __e0:__;}Class P{Var $O,yk9X_,$S,__,_,_:y;Val $_5_:Array [Array [Boolean ,06_1],04];_(){} }Class _:_{Var $s,Yfn9,$bu:f;Val J,L,_9_Jn:i;Destructor (){Continue ;}Var j_8:String ;$_(){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(E),Id(f__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Nw),Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(79,FloatType))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(Y),ClassType(Id(_3)),None)),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_3)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_3)),None)),AttributeDecl(Instance,ConstDecl(Id(__e0),ClassType(Id(__)),None))]),ClassDecl(Id(P),[AttributeDecl(Static,VarDecl(Id($O),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(yk9X_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($S),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_5_),ArrayType(4,ArrayType(49,BoolType)),None)),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($s),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Yfn9),ClassType(Id(f)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($bu),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(i)),None)),AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(i)),None)),AttributeDecl(Instance,ConstDecl(Id(_9_Jn),ClassType(Id(i)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(j_8),StringType)),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 195))

    def test_196(self):
        line = '''Class T7{Destructor (){}Constructor (){} }Class _{Val __U1,_n,$3f:_;Constructor (){}Constructor (_,_:Array [Array [Int ,02],43];E,_,b,_,NB_0h:_){} }Class _{_(zh28:bB;N:T){0.979308._g();Break ;} }Class _9__S_{}'''
        expect = '''Program([ClassDecl(Id(T7),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__U1),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_n),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($3f),ClassType(Id(_)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43,ArrayType(2,IntType))),param(Id(_),ArrayType(43,ArrayType(2,IntType))),param(Id(E),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(NB_0h),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(zh28),ClassType(Id(bB))),param(Id(N),ClassType(Id(T)))],Block([Call(FloatLit(0.979308),Id(_g),[]),Break]))]),ClassDecl(Id(_9__S_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 196))

    def test_197(self):
        line = '''Class _:K_45{Constructor (U,__,X_,QCm_,FxA:Array [Float ,01_230];_:uz){}Constructor (__:Int ;P_g,_:Array [Array [Array [Boolean ,2],060],0xD];HLZb:Array [Array [String ,0b10010],0B1_1_0]){}Val $3K,$x9__,$5:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(K_45),[MethodDecl(Id(Constructor),Instance,[param(Id(U),ArrayType(664,FloatType)),param(Id(__),ArrayType(664,FloatType)),param(Id(X_),ArrayType(664,FloatType)),param(Id(QCm_),ArrayType(664,FloatType)),param(Id(FxA),ArrayType(664,FloatType)),param(Id(_),ClassType(Id(uz)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(P_g),ArrayType(13,ArrayType(48,ArrayType(2,BoolType)))),param(Id(_),ArrayType(13,ArrayType(48,ArrayType(2,BoolType)))),param(Id(HLZb),ArrayType(6,ArrayType(18,StringType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($3K),IntType,None)),AttributeDecl(Static,ConstDecl(Id($x9__),IntType,None)),AttributeDecl(Static,ConstDecl(Id($5),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 197))

    def test_198(self):
        line = '''Class _:J{Constructor (h,_,_,g8,_m:String ;__,_0B:Boolean ;BF,fyH,_:Array [Array [Array [Float ,0X7_D],87],0x41];_,u,B_:Array [Array [String ,0b100110],8_53];_,_,_:Array [Boolean ,0x3_A6C];W,_:Array [Array [String ,071],0x41];E5,z9,__:_5O9){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(J),[MethodDecl(Id(Constructor),Instance,[param(Id(h),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(g8),StringType),param(Id(_m),StringType),param(Id(__),BoolType),param(Id(_0B),BoolType),param(Id(BF),ArrayType(65,ArrayType(87,ArrayType(125,FloatType)))),param(Id(fyH),ArrayType(65,ArrayType(87,ArrayType(125,FloatType)))),param(Id(_),ArrayType(65,ArrayType(87,ArrayType(125,FloatType)))),param(Id(_),ArrayType(853,ArrayType(38,StringType))),param(Id(u),ArrayType(853,ArrayType(38,StringType))),param(Id(B_),ArrayType(853,ArrayType(38,StringType))),param(Id(_),ArrayType(14956,BoolType)),param(Id(_),ArrayType(14956,BoolType)),param(Id(_),ArrayType(14956,BoolType)),param(Id(W),ArrayType(65,ArrayType(57,StringType))),param(Id(_),ArrayType(65,ArrayType(57,StringType))),param(Id(E5),ClassType(Id(_5O9))),param(Id(z9),ClassType(Id(_5O9))),param(Id(__),ClassType(Id(_5O9)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 198))

    def test_199(self):
        line = '''Class _z6:_{$3N_5(_,Nn,J,U__5,_,_,T,_,J_7:Array [Array [Int ,86],6];_93c__8,z,_c,H_,_:_8;_:Array [Array [String ,03_0],021]){}Constructor (i1l,v:Array [Array [Float ,0B1],45];_P,o:Array [Array [String ,021],021];pg93A:Array [Int ,021]){} }'''
        expect = '''Program([ClassDecl(Id(_z6),Id(_),[MethodDecl(Id($3N_5),Static,[param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(Nn),ArrayType(6,ArrayType(86,IntType))),param(Id(J),ArrayType(6,ArrayType(86,IntType))),param(Id(U__5),ArrayType(6,ArrayType(86,IntType))),param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(T),ArrayType(6,ArrayType(86,IntType))),param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(J_7),ArrayType(6,ArrayType(86,IntType))),param(Id(_93c__8),ClassType(Id(_8))),param(Id(z),ClassType(Id(_8))),param(Id(_c),ClassType(Id(_8))),param(Id(H_),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(_),ArrayType(17,ArrayType(24,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i1l),ArrayType(45,ArrayType(1,FloatType))),param(Id(v),ArrayType(45,ArrayType(1,FloatType))),param(Id(_P),ArrayType(17,ArrayType(17,StringType))),param(Id(o),ArrayType(17,ArrayType(17,StringType))),param(Id(pg93A),ArrayType(17,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 199))

    def test_200(self):
        line = '''Class G___1:Z_1{}Class B___:v_{Var h:Array [Array [Array [String ,75],0b11],75];Constructor (g:_;j:Int ;_,e_qv_,V,_P,_7:Array [Int ,0b1100100];_W,_:a;j:Array [Array [Int ,06],0x60]){s_R::$___();} }Class _1_Q{}'''
        expect = '''Program([ClassDecl(Id(G___1),Id(Z_1),[]),ClassDecl(Id(B___),Id(v_),[AttributeDecl(Instance,VarDecl(Id(h),ArrayType(75,ArrayType(3,ArrayType(75,StringType))))),MethodDecl(Id(Constructor),Instance,[param(Id(g),ClassType(Id(_))),param(Id(j),IntType),param(Id(_),ArrayType(100,IntType)),param(Id(e_qv_),ArrayType(100,IntType)),param(Id(V),ArrayType(100,IntType)),param(Id(_P),ArrayType(100,IntType)),param(Id(_7),ArrayType(100,IntType)),param(Id(_W),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(j),ArrayType(96,ArrayType(6,IntType)))],Block([Call(Id(s_R),Id($___),[])]))]),ClassDecl(Id(_1_Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 200))

    def test_201(self):
        line = '''Class A{}Class __:_{Var _:_;Val $_,$C98__,__:Int ;Val _,_P7,$j:Array [Array [Array [Boolean ,5],0b1],8_6];Constructor (_:_oAJ9d;_R7An,_0,w:Array [Array [Array [Int ,0B1],1_2],03];__4Q:Float ){}Destructor (){} }Class w:W{}Class __66{}'''
        expect = '''Program([ClassDecl(Id(A),[]),ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($C98__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(86,ArrayType(1,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_P7),ArrayType(86,ArrayType(1,ArrayType(5,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($j),ArrayType(86,ArrayType(1,ArrayType(5,BoolType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_oAJ9d))),param(Id(_R7An),ArrayType(3,ArrayType(12,ArrayType(1,IntType)))),param(Id(_0),ArrayType(3,ArrayType(12,ArrayType(1,IntType)))),param(Id(w),ArrayType(3,ArrayType(12,ArrayType(1,IntType)))),param(Id(__4Q),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w),Id(W),[]),ClassDecl(Id(__66),[])])'''
        self.assertTrue(TestAST.test(line, expect, 201))

    def test_202(self):
        line = '''Class _1{}Class g:_X2{}Class A__{}Class f{}Class E{Constructor (){Continue ;}Constructor (_,_:Boolean ;To,c:Array [Float ,02_5];fK35:Array [Boolean ,4_5];q6Z:Array [String ,04]){} }'''
        expect = '''Program([ClassDecl(Id(_1),[]),ClassDecl(Id(g),Id(_X2),[]),ClassDecl(Id(A__),[]),ClassDecl(Id(f),[]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(To),ArrayType(21,FloatType)),param(Id(c),ArrayType(21,FloatType)),param(Id(fK35),ArrayType(45,BoolType)),param(Id(q6Z),ArrayType(4,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 202))

    def test_203(self):
        line = '''Class _{$1(_:Boolean ;_,y_F__:Array [Array [Array [Array [Array [Array [Array [Int ,0B1001010],95],07],0B10_000_1_0_1],95],2],01];m:Array [Float ,3_9]){}Val _:Array [Array [Float ,95],0X5E];J(Z_:Array [Boolean ,95]){}Var C,_n,__,$3v8Y_a:Float ;}Class _9h4_e_2z:b{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($1),Static,[param(Id(_),BoolType),param(Id(_),ArrayType(1,ArrayType(2,ArrayType(95,ArrayType(133,ArrayType(7,ArrayType(95,ArrayType(74,IntType)))))))),param(Id(y_F__),ArrayType(1,ArrayType(2,ArrayType(95,ArrayType(133,ArrayType(7,ArrayType(95,ArrayType(74,IntType)))))))),param(Id(m),ArrayType(39,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(94,ArrayType(95,FloatType)),None)),MethodDecl(Id(J),Instance,[param(Id(Z_),ArrayType(95,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(C),FloatType)),AttributeDecl(Instance,VarDecl(Id(_n),FloatType)),AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Static,VarDecl(Id($3v8Y_a),FloatType))]),ClassDecl(Id(_9h4_e_2z),Id(b),[])])'''
        self.assertTrue(TestAST.test(line, expect, 203))

    def test_204(self):
        line = '''Class _{}Class _{}Class H{Var $3P0,$g:Array [Array [Array [Array [Int ,0X3D],0B1_1_1],0X2_B],44];Constructor (){}Constructor (){Break ;}sb_(_s_96,A_,_c9W__,_,_,mR,__7_,X_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(H),[AttributeDecl(Static,VarDecl(Id($3P0),ArrayType(44,ArrayType(43,ArrayType(7,ArrayType(61,IntType)))))),AttributeDecl(Static,VarDecl(Id($g),ArrayType(44,ArrayType(43,ArrayType(7,ArrayType(61,IntType)))))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(sb_),Instance,[param(Id(_s_96),IntType),param(Id(A_),IntType),param(Id(_c9W__),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(mR),IntType),param(Id(__7_),IntType),param(Id(X_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 204))

    def test_205(self):
        line = '''Class _:x_2o0{}Class N7{Constructor (S:String ;b:i;__,_n,_,__,__,S:Float ;Q,_:_;M:P3;tb_:_){Return ;}Constructor (b_2,l,T_:String ;_7:Float ){} }Class C:_{Constructor (g:t_){} }Class C_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(x_2o0),[]),ClassDecl(Id(N7),[MethodDecl(Id(Constructor),Instance,[param(Id(S),StringType),param(Id(b),ClassType(Id(i))),param(Id(__),FloatType),param(Id(_n),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(__),FloatType),param(Id(S),FloatType),param(Id(Q),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(M),ClassType(Id(P3))),param(Id(tb_),ClassType(Id(_)))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(b_2),StringType),param(Id(l),StringType),param(Id(T_),StringType),param(Id(_7),FloatType)],Block([]))]),ClassDecl(Id(C),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(g),ClassType(Id(t_)))],Block([]))]),ClassDecl(Id(C_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 205))

    def test_206(self):
        line = '''Class _X{}Class IE{}Class _h:J4{Destructor (){}Destructor (){}Var $7M__,$_:Int ;Destructor (){} }Class x:p{w(f:Array [Int ,92]){}Val _0:Array [Float ,0X5];Val Q,m8,_,_:Array [Array [String ,0x36],3];}Class S:_1{Var _,r:Float ;Constructor (){Break ;}Var R,$5:__A6_w;}'''
        expect = '''Program([ClassDecl(Id(_X),[]),ClassDecl(Id(IE),[]),ClassDecl(Id(_h),Id(J4),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7M__),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(p),[MethodDecl(Id(w),Instance,[param(Id(f),ArrayType(92,IntType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0),ArrayType(5,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Q),ArrayType(3,ArrayType(54,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(m8),ArrayType(3,ArrayType(54,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(54,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(54,StringType)),None))]),ClassDecl(Id(S),Id(_1),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(r),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(R),ClassType(Id(__A6_w)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(__A6_w)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 206))

    def test_207(self):
        line = '''Class _{Destructor (){}Var _F:s;Destructor (){}Constructor (){}Constructor (___,b,_:H){} }Class _:l7{Val _,$_o8_6_6BW,$9i_Y2:Array [String ,0x2];}Class b:G_0wU{}Class __:_{}Class D{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_F),ClassType(Id(s)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(___),ClassType(Id(H))),param(Id(b),ClassType(Id(H))),param(Id(_),ClassType(Id(H)))],Block([]))]),ClassDecl(Id(_),Id(l7),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_o8_6_6BW),ArrayType(2,StringType),None)),AttributeDecl(Static,ConstDecl(Id($9i_Y2),ArrayType(2,StringType),None))]),ClassDecl(Id(b),Id(G_0wU),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(D),[])])'''
        self.assertTrue(TestAST.test(line, expect, 207))

    def test_208(self):
        line = '''Class X_Q{}Class k:K{$so(_,_5_:__4;_8,_,_Z:Int ;Xs4__,_:_7;_:Array [Int ,054];yD:Float ;_,__:Boolean ){} }Class __a:S_{Constructor (){} }Class __:_{}Class _98{}Class S_:Od{}Class J__:_{}'''
        expect = '''Program([ClassDecl(Id(X_Q),[]),ClassDecl(Id(k),Id(K),[MethodDecl(Id($so),Static,[param(Id(_),ClassType(Id(__4))),param(Id(_5_),ClassType(Id(__4))),param(Id(_8),IntType),param(Id(_),IntType),param(Id(_Z),IntType),param(Id(Xs4__),ClassType(Id(_7))),param(Id(_),ClassType(Id(_7))),param(Id(_),ArrayType(44,IntType)),param(Id(yD),FloatType),param(Id(_),BoolType),param(Id(__),BoolType)],Block([]))]),ClassDecl(Id(__a),Id(S_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_98),[]),ClassDecl(Id(S_),Id(Od),[]),ClassDecl(Id(J__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 208))

    def test_209(self):
        line = '''Class A5Iv{Destructor (){Return ;} }Class _7{Var _236_:Boolean ;Destructor (){}$3IJ_(X:_6){}Constructor (){}_lR46(G_y,O_L,_,s1_:Array [Array [String ,0X60D],680]){} }'''
        expect = '''Program([ClassDecl(Id(A5Iv),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_7),[AttributeDecl(Instance,VarDecl(Id(_236_),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($3IJ_),Static,[param(Id(X),ClassType(Id(_6)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_lR46),Instance,[param(Id(G_y),ArrayType(680,ArrayType(1549,StringType))),param(Id(O_L),ArrayType(680,ArrayType(1549,StringType))),param(Id(_),ArrayType(680,ArrayType(1549,StringType))),param(Id(s1_),ArrayType(680,ArrayType(1549,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 209))

    def test_210(self):
        line = '''Class _J{$fG__0_(e:Boolean ;_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,022],67],0XD_C],0X32],0B10],0X32],0446],05],67],0B1000111];s_,vO:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_J),[MethodDecl(Id($fG__0_),Static,[param(Id(e),BoolType),param(Id(_),ArrayType(71,ArrayType(67,ArrayType(5,ArrayType(294,ArrayType(50,ArrayType(2,ArrayType(50,ArrayType(220,ArrayType(67,ArrayType(18,BoolType))))))))))),param(Id(s_),BoolType),param(Id(vO),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 210))

    def test_211(self):
        line = '''Class _p_97:_8j___3V_9_094{}Class Kgp{}Class FK6_:_j{Constructor (){}Var $7:A;}Class f_65fA2_{$2ji(X__:Array [Int ,9];d,_54:Y;___:Array [Float ,0X2_9];Ob395,__1:Array [Int ,0144];_:t;_,_,_:Array [String ,0XE];_:Array [Boolean ,0b1000111]){} }'''
        expect = '''Program([ClassDecl(Id(_p_97),Id(_8j___3V_9_094),[]),ClassDecl(Id(Kgp),[]),ClassDecl(Id(FK6_),Id(_j),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(A)),NullLiteral()))]),ClassDecl(Id(f_65fA2_),[MethodDecl(Id($2ji),Static,[param(Id(X__),ArrayType(9,IntType)),param(Id(d),ClassType(Id(Y))),param(Id(_54),ClassType(Id(Y))),param(Id(___),ArrayType(41,FloatType)),param(Id(Ob395),ArrayType(100,IntType)),param(Id(__1),ArrayType(100,IntType)),param(Id(_),ClassType(Id(t))),param(Id(_),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(_),ArrayType(71,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 211))

    def test_212(self):
        line = '''Class _{}Class T:_{Val $_,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],0b10110],0B1],16],05],03],031],0b1_00_011_0],0x11];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(T),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(17,ArrayType(70,ArrayType(25,ArrayType(3,ArrayType(5,ArrayType(16,ArrayType(1,ArrayType(22,ArrayType(1,BoolType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(17,ArrayType(70,ArrayType(25,ArrayType(3,ArrayType(5,ArrayType(16,ArrayType(1,ArrayType(22,ArrayType(1,BoolType))))))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 212))

    def test_213(self):
        line = '''Class p{Constructor (__,x:String ;z9:Array [Array [Array [Float ,07],0B11010],042];_Ay:BN2C;_,_,_556_:i_f;___4:_;_a4_,P__,_w:Array [Array [Array [Array [Float ,0776],0X23],5],042];_i__,_7_:Array [Array [String ,0X23],037_43];_,D_,C,_:Q){}Constructor (){} }Class w:_{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(__),StringType),param(Id(x),StringType),param(Id(z9),ArrayType(34,ArrayType(26,ArrayType(7,FloatType)))),param(Id(_Ay),ClassType(Id(BN2C))),param(Id(_),ClassType(Id(i_f))),param(Id(_),ClassType(Id(i_f))),param(Id(_556_),ClassType(Id(i_f))),param(Id(___4),ClassType(Id(_))),param(Id(_a4_),ArrayType(34,ArrayType(5,ArrayType(35,ArrayType(510,FloatType))))),param(Id(P__),ArrayType(34,ArrayType(5,ArrayType(35,ArrayType(510,FloatType))))),param(Id(_w),ArrayType(34,ArrayType(5,ArrayType(35,ArrayType(510,FloatType))))),param(Id(_i__),ArrayType(2019,ArrayType(35,StringType))),param(Id(_7_),ArrayType(2019,ArrayType(35,StringType))),param(Id(_),ClassType(Id(Q))),param(Id(D_),ClassType(Id(Q))),param(Id(C),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(w),Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 213))

    def test_214(self):
        line = '''Class z0:_7{}Class f_6o:f_3{Val z,S:Float ;_(b_,___:A__o){} }Class d_N:_{Destructor (){}q(__,_2:s;ld_f_iPK:Float ;i1,_:Int ;B8,C,F,_,_5_a:Array [String ,0X5_88_F_04]){} }Class j_s_{}Class _{}Class F7x:_{}'''
        expect = '''Program([ClassDecl(Id(z0),Id(_7),[]),ClassDecl(Id(f_6o),Id(f_3),[AttributeDecl(Instance,ConstDecl(Id(z),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(S),FloatType,None)),MethodDecl(Id(_),Instance,[param(Id(b_),ClassType(Id(A__o))),param(Id(___),ClassType(Id(A__o)))],Block([]))]),ClassDecl(Id(d_N),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(q),Instance,[param(Id(__),ClassType(Id(s))),param(Id(_2),ClassType(Id(s))),param(Id(ld_f_iPK),FloatType),param(Id(i1),IntType),param(Id(_),IntType),param(Id(B8),ArrayType(5803780,StringType)),param(Id(C),ArrayType(5803780,StringType)),param(Id(F),ArrayType(5803780,StringType)),param(Id(_),ArrayType(5803780,StringType)),param(Id(_5_a),ArrayType(5803780,StringType))],Block([]))]),ClassDecl(Id(j_s_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(F7x),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 214))

    def test_215(self):
        line = '''Class n:i{}Class p{}Class r:_V{Val _Q:Array [String ,063];___(){}_4(){}Var $XE:Boolean ;Val _0_9_4,n1,$D7V,_,$n,_,$6,$42:Array [Array [Array [Array [Float ,51],05_3],1],330_951];}'''
        expect = '''Program([ClassDecl(Id(n),Id(i),[]),ClassDecl(Id(p),[]),ClassDecl(Id(r),Id(_V),[AttributeDecl(Instance,ConstDecl(Id(_Q),ArrayType(51,StringType),None)),MethodDecl(Id(___),Instance,[],Block([])),MethodDecl(Id(_4),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($XE),BoolType)),AttributeDecl(Instance,ConstDecl(Id(_0_9_4),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(n1),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($D7V),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($n),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($42),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 215))

    def test_216(self):
        line = '''Class M:_R{_(A:Array [Array [String ,1],06_5];_,G__7:Array [Array [Boolean ,0x53],051];_,F,ziZ:Array [Float ,051];k:Boolean ){} }Class _5{Destructor (){}Constructor (){} }Class Y{Constructor (){}o(R__,_Y,g,__3:Int ){}Val _0:Float ;}'''
        expect = '''Program([ClassDecl(Id(M),Id(_R),[MethodDecl(Id(_),Instance,[param(Id(A),ArrayType(53,ArrayType(1,StringType))),param(Id(_),ArrayType(41,ArrayType(83,BoolType))),param(Id(G__7),ArrayType(41,ArrayType(83,BoolType))),param(Id(_),ArrayType(41,FloatType)),param(Id(F),ArrayType(41,FloatType)),param(Id(ziZ),ArrayType(41,FloatType)),param(Id(k),BoolType)],Block([]))]),ClassDecl(Id(_5),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Y),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(o),Instance,[param(Id(R__),IntType),param(Id(_Y),IntType),param(Id(g),IntType),param(Id(__3),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 216))

    def test_217(self):
        line = '''Class _8:R{}Class i:_f{}Class _582G{$_k7XZ_(M8,v__,s:s_;jeE,r1,_6:Array [Array [Array [Int ,0b11011],0B1],05_1_1];___Kaz:Array [Array [Float ,040],0x8];y_b_,r,m,_g:Array [Int ,0x28];_7_,k:String ;eQ:_;_,b,o:Array [Array [Array [Boolean ,0X46],062],0x28]){Continue ;} }Class _0:p{}'''
        expect = '''Program([ClassDecl(Id(_8),Id(R),[]),ClassDecl(Id(i),Id(_f),[]),ClassDecl(Id(_582G),[MethodDecl(Id($_k7XZ_),Static,[param(Id(M8),ClassType(Id(s_))),param(Id(v__),ClassType(Id(s_))),param(Id(s),ClassType(Id(s_))),param(Id(jeE),ArrayType(329,ArrayType(1,ArrayType(27,IntType)))),param(Id(r1),ArrayType(329,ArrayType(1,ArrayType(27,IntType)))),param(Id(_6),ArrayType(329,ArrayType(1,ArrayType(27,IntType)))),param(Id(___Kaz),ArrayType(8,ArrayType(32,FloatType))),param(Id(y_b_),ArrayType(40,IntType)),param(Id(r),ArrayType(40,IntType)),param(Id(m),ArrayType(40,IntType)),param(Id(_g),ArrayType(40,IntType)),param(Id(_7_),StringType),param(Id(k),StringType),param(Id(eQ),ClassType(Id(_))),param(Id(_),ArrayType(40,ArrayType(50,ArrayType(70,BoolType)))),param(Id(b),ArrayType(40,ArrayType(50,ArrayType(70,BoolType)))),param(Id(o),ArrayType(40,ArrayType(50,ArrayType(70,BoolType))))],Block([Continue]))]),ClassDecl(Id(_0),Id(p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 217))

    def test_218(self):
        line = '''Class a{_v7_(_,_7_:Array [Boolean ,04];d,_2__,_254_Q,_:Array [Array [Boolean ,0X6_B],0X4D]){} }Class _:u{}Class _{Val $___9_,_yq:MR;Constructor (M__k_2Jx:Array [Float ,0B101111];_,L:Array [String ,0x6A];s_u_7:String ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id(_v7_),Instance,[param(Id(_),ArrayType(4,BoolType)),param(Id(_7_),ArrayType(4,BoolType)),param(Id(d),ArrayType(77,ArrayType(107,BoolType))),param(Id(_2__),ArrayType(77,ArrayType(107,BoolType))),param(Id(_254_Q),ArrayType(77,ArrayType(107,BoolType))),param(Id(_),ArrayType(77,ArrayType(107,BoolType)))],Block([]))]),ClassDecl(Id(_),Id(u),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($___9_),ClassType(Id(MR)),None)),AttributeDecl(Instance,ConstDecl(Id(_yq),ClassType(Id(MR)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(M__k_2Jx),ArrayType(47,FloatType)),param(Id(_),ArrayType(106,StringType)),param(Id(L),ArrayType(106,StringType)),param(Id(s_u_7),StringType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 218))

    def test_219(self):
        line = '''Class d__VB5_7R9_{z6__(n:Array [Float ,02];_9P:Float ;_,_7U,o_:Array [Array [Array [Array [Float ,0x3],077],8],0B101000];__6F,_:Boolean ;BdY:Int ;_,_,i,_f_,_,_,_:t){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(d__VB5_7R9_),[MethodDecl(Id(z6__),Instance,[param(Id(n),ArrayType(2,FloatType)),param(Id(_9P),FloatType),param(Id(_),ArrayType(40,ArrayType(8,ArrayType(63,ArrayType(3,FloatType))))),param(Id(_7U),ArrayType(40,ArrayType(8,ArrayType(63,ArrayType(3,FloatType))))),param(Id(o_),ArrayType(40,ArrayType(8,ArrayType(63,ArrayType(3,FloatType))))),param(Id(__6F),BoolType),param(Id(_),BoolType),param(Id(BdY),IntType),param(Id(_),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(i),ClassType(Id(t))),param(Id(_f_),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(_),ClassType(Id(t)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 219))

    def test_220(self):
        line = '''Class j_{}Class t8{Constructor (Q_o_2vC,N:Array [Array [Boolean ,29_3_5],0b10];A,_0:Array [Array [String ,0X29],0XE]){} }Class _:_{Constructor (T,__L0C,W:Boolean ;__,S,B50,G:bGYz_6W;___4,e,_9:_7){} }'''
        expect = '''Program([ClassDecl(Id(j_),[]),ClassDecl(Id(t8),[MethodDecl(Id(Constructor),Instance,[param(Id(Q_o_2vC),ArrayType(2,ArrayType(2935,BoolType))),param(Id(N),ArrayType(2,ArrayType(2935,BoolType))),param(Id(A),ArrayType(14,ArrayType(41,StringType))),param(Id(_0),ArrayType(14,ArrayType(41,StringType)))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T),BoolType),param(Id(__L0C),BoolType),param(Id(W),BoolType),param(Id(__),ClassType(Id(bGYz_6W))),param(Id(S),ClassType(Id(bGYz_6W))),param(Id(B50),ClassType(Id(bGYz_6W))),param(Id(G),ClassType(Id(bGYz_6W))),param(Id(___4),ClassType(Id(_7))),param(Id(e),ClassType(Id(_7))),param(Id(_9),ClassType(Id(_7)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 220))

    def test_221(self):
        line = '''Class c:_2{Var m,_:Array [Array [Array [String ,0b1000011],0B10_0],0X4C];Val $9:Array [String ,0x9];Constructor (__,_c_:__;K,__te,_,_:q){}Destructor (){}Destructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(c),Id(_2),[AttributeDecl(Instance,VarDecl(Id(m),ArrayType(76,ArrayType(4,ArrayType(67,StringType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(76,ArrayType(4,ArrayType(67,StringType))))),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(9,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(__))),param(Id(_c_),ClassType(Id(__))),param(Id(K),ClassType(Id(q))),param(Id(__te),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(_),ClassType(Id(q)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 221))

    def test_222(self):
        line = '''Class __:T{Val $_,$1_:Boolean ;}Class ___{}Class ___{Var $q,$3T,__,f:String ;g65(_:Array [Float ,0xD]){Break ;_::$I.Z();} }Class b:Z__{$n(){}Var _:Array [Array [Array [String ,0X8_9],0B1],0XE];Var $1,$e__,_:_;}Class _:Ae{}Class _:O{}'''
        expect = '''Program([ClassDecl(Id(__),Id(T),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1_),BoolType,None))]),ClassDecl(Id(___),[]),ClassDecl(Id(___),[AttributeDecl(Static,VarDecl(Id($q),StringType)),AttributeDecl(Static,VarDecl(Id($3T),StringType)),AttributeDecl(Instance,VarDecl(Id(__),StringType)),AttributeDecl(Instance,VarDecl(Id(f),StringType)),MethodDecl(Id(g65),Instance,[param(Id(_),ArrayType(13,FloatType))],Block([Break,Call(FieldAccess(Id(_),Id($I)),Id(Z),[])]))]),ClassDecl(Id(b),Id(Z__),[MethodDecl(Id($n),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(14,ArrayType(1,ArrayType(137,StringType))))),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($e__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(Ae),[]),ClassDecl(Id(_),Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 222))

    def test_223(self):
        line = '''Class _{}Class h:_C{}Class n:uQ{}Class z_3_{Var _i_:Array [Boolean ,0X42];Var $D:Int ;Constructor (_8,c,i,_:_){} }Class _V{Var $e1r70_,$7_,cn,$0:String ;}Class AQS:E{Var $_:Float ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(h),Id(_C),[]),ClassDecl(Id(n),Id(uQ),[]),ClassDecl(Id(z_3_),[AttributeDecl(Instance,VarDecl(Id(_i_),ArrayType(66,BoolType))),AttributeDecl(Static,VarDecl(Id($D),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(_8),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_V),[AttributeDecl(Static,VarDecl(Id($e1r70_),StringType)),AttributeDecl(Static,VarDecl(Id($7_),StringType)),AttributeDecl(Instance,VarDecl(Id(cn),StringType)),AttributeDecl(Static,VarDecl(Id($0),StringType))]),ClassDecl(Id(AQS),Id(E),[AttributeDecl(Static,VarDecl(Id($_),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 223))

    def test_224(self):
        line = '''Class _0__{Constructor (h:Array [String ,8];n,n,_6k6z,t_,_,_,_E_:String ;__T,_x_:Boolean ;_,q2_,_,_42H,I___,MX:_w_90){}Val y:_9;Val $T72I,$_:Int ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_0__),[MethodDecl(Id(Constructor),Instance,[param(Id(h),ArrayType(8,StringType)),param(Id(n),StringType),param(Id(n),StringType),param(Id(_6k6z),StringType),param(Id(t_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_E_),StringType),param(Id(__T),BoolType),param(Id(_x_),BoolType),param(Id(_),ClassType(Id(_w_90))),param(Id(q2_),ClassType(Id(_w_90))),param(Id(_),ClassType(Id(_w_90))),param(Id(_42H),ClassType(Id(_w_90))),param(Id(I___),ClassType(Id(_w_90))),param(Id(MX),ClassType(Id(_w_90)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(y),ClassType(Id(_9)),None)),AttributeDecl(Static,ConstDecl(Id($T72I),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 224))

    def test_225(self):
        line = '''Class t1{Destructor (){}Val U_,_,$__I_:Array [Array [Array [Boolean ,0b1_001_1_0_00],0B1],0b1];}Class J4Q{Constructor (_r_,fBNx:Array [Int ,0X2A];_:_4_4;v,_H,M:Boolean ;lt,g__:Array [Float ,0X1_7];W__1_q,K:Int ){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(t1),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(U_),ArrayType(1,ArrayType(1,ArrayType(152,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(152,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($__I_),ArrayType(1,ArrayType(1,ArrayType(152,BoolType))),None))]),ClassDecl(Id(J4Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_r_),ArrayType(42,IntType)),param(Id(fBNx),ArrayType(42,IntType)),param(Id(_),ClassType(Id(_4_4))),param(Id(v),BoolType),param(Id(_H),BoolType),param(Id(M),BoolType),param(Id(lt),ArrayType(23,FloatType)),param(Id(g__),ArrayType(23,FloatType)),param(Id(W__1_q),IntType),param(Id(K),IntType)],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 225))

    def test_226(self):
        line = '''Class _{Destructor (){}Constructor (){Continue ;}Destructor (){Return ;Break ;}Constructor (S,BT:_g;_,SJ,D_2z_P9:String ;d_:Int ;_8_,_,__e:Array [Array [Array [Boolean ,0x2A],0B11],02]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break])),MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(_g))),param(Id(BT),ClassType(Id(_g))),param(Id(_),StringType),param(Id(SJ),StringType),param(Id(D_2z_P9),StringType),param(Id(d_),IntType),param(Id(_8_),ArrayType(2,ArrayType(3,ArrayType(42,BoolType)))),param(Id(_),ArrayType(2,ArrayType(3,ArrayType(42,BoolType)))),param(Id(__e),ArrayType(2,ArrayType(3,ArrayType(42,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 226))

    def test_227(self):
        line = '''Class _{Constructor (_:w_B;_,m,z,B:Y;_5_,A_y3:_1C;_,__3_3,_:_T;I,__,Ix,_03:String ;m,_:Array [Array [Array [Boolean ,0B1_1],0B11001],0B11001];u_x:XP;_,_:Boolean ;g:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(w_B))),param(Id(_),ClassType(Id(Y))),param(Id(m),ClassType(Id(Y))),param(Id(z),ClassType(Id(Y))),param(Id(B),ClassType(Id(Y))),param(Id(_5_),ClassType(Id(_1C))),param(Id(A_y3),ClassType(Id(_1C))),param(Id(_),ClassType(Id(_T))),param(Id(__3_3),ClassType(Id(_T))),param(Id(_),ClassType(Id(_T))),param(Id(I),StringType),param(Id(__),StringType),param(Id(Ix),StringType),param(Id(_03),StringType),param(Id(m),ArrayType(25,ArrayType(25,ArrayType(3,BoolType)))),param(Id(_),ArrayType(25,ArrayType(25,ArrayType(3,BoolType)))),param(Id(u_x),ClassType(Id(XP))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(g),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 227))

    def test_228(self):
        line = '''Class __8{}Class _I:w{Constructor (){}Var _6uT,R:Array [Float ,06];Val $_:Array [Array [Array [Array [String ,0b1],0X3A],0x62],3];}Class m8l9{$_(hH,_,r9:Array [Int ,0x62]){}Destructor (){}Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(__8),[]),ClassDecl(Id(_I),Id(w),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_6uT),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(R),ArrayType(6,FloatType))),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(98,ArrayType(58,ArrayType(1,StringType)))),None))]),ClassDecl(Id(m8l9),[MethodDecl(Id($_),Static,[param(Id(hH),ArrayType(98,IntType)),param(Id(_),ArrayType(98,IntType)),param(Id(r9),ArrayType(98,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 228))

    def test_229(self):
        line = '''Class _:j{Constructor (){Break ;} }Class E{Constructor (){}Constructor (){} }Class _c7:X{Val w,_:Boolean ;_(_Hz:_;S_,J,_L,K1__:String ;_gP:_;q0:Boolean ;J,p:String ;T,c_,_,_3:_;Uc:Boolean ;_c,h_:Array [String ,37]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_c7),Id(X),[AttributeDecl(Instance,ConstDecl(Id(w),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(_),Instance,[param(Id(_Hz),ClassType(Id(_))),param(Id(S_),StringType),param(Id(J),StringType),param(Id(_L),StringType),param(Id(K1__),StringType),param(Id(_gP),ClassType(Id(_))),param(Id(q0),BoolType),param(Id(J),StringType),param(Id(p),StringType),param(Id(T),ClassType(Id(_))),param(Id(c_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_3),ClassType(Id(_))),param(Id(Uc),BoolType),param(Id(_c),ArrayType(37,StringType)),param(Id(h_),ArrayType(37,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 229))

    def test_230(self):
        line = '''Class J:u{}Class Gr_4{_(HDD1:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x3],0B1],93],0B110110],046],046],0b1],0b1];J1:M4){}Constructor (){}Val _m4:Boolean ;___(_:Boolean ;F,_:Array [Array [Array [String ,1],0B110110],046]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(J),Id(u),[]),ClassDecl(Id(Gr_4),[MethodDecl(Id(_),Instance,[param(Id(HDD1),ArrayType(1,ArrayType(1,ArrayType(38,ArrayType(38,ArrayType(54,ArrayType(93,ArrayType(1,ArrayType(3,FloatType))))))))),param(Id(J1),ClassType(Id(M4)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_m4),BoolType,None)),MethodDecl(Id(___),Instance,[param(Id(_),BoolType),param(Id(F),ArrayType(38,ArrayType(54,ArrayType(1,StringType)))),param(Id(_),ArrayType(38,ArrayType(54,ArrayType(1,StringType))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 230))

    def test_231(self):
        line = '''Class _4s:iV{Constructor (_0__Pu,_7Vi,_2_Z,D,K:W;_X:Boolean ;_,G_:Array [Float ,0X8];__,g0_,Kc,___,_,t6_,_7:Float ;V,X_:String ;W:Array [Int ,0105]){Break ;} }Class R{}Class _r4DN{}Class _:_T{}'''
        expect = '''Program([ClassDecl(Id(_4s),Id(iV),[MethodDecl(Id(Constructor),Instance,[param(Id(_0__Pu),ClassType(Id(W))),param(Id(_7Vi),ClassType(Id(W))),param(Id(_2_Z),ClassType(Id(W))),param(Id(D),ClassType(Id(W))),param(Id(K),ClassType(Id(W))),param(Id(_X),BoolType),param(Id(_),ArrayType(8,FloatType)),param(Id(G_),ArrayType(8,FloatType)),param(Id(__),FloatType),param(Id(g0_),FloatType),param(Id(Kc),FloatType),param(Id(___),FloatType),param(Id(_),FloatType),param(Id(t6_),FloatType),param(Id(_7),FloatType),param(Id(V),StringType),param(Id(X_),StringType),param(Id(W),ArrayType(69,IntType))],Block([Break]))]),ClassDecl(Id(R),[]),ClassDecl(Id(_r4DN),[]),ClassDecl(Id(_),Id(_T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 231))

    def test_232(self):
        line = '''Class _:_{Var $2e,B:Array [Float ,0b11];Constructor (Z_,N8,_87Q0:Array [Array [String ,02],0B1]){}Constructor (_1_,_6,T_,_0,v:I;_7,VS:String ){}Destructor (){} }Class _x:N2{}Class _n67{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($2e),ArrayType(3,FloatType))),AttributeDecl(Instance,VarDecl(Id(B),ArrayType(3,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(Z_),ArrayType(1,ArrayType(2,StringType))),param(Id(N8),ArrayType(1,ArrayType(2,StringType))),param(Id(_87Q0),ArrayType(1,ArrayType(2,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_1_),ClassType(Id(I))),param(Id(_6),ClassType(Id(I))),param(Id(T_),ClassType(Id(I))),param(Id(_0),ClassType(Id(I))),param(Id(v),ClassType(Id(I))),param(Id(_7),StringType),param(Id(VS),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_x),Id(N2),[]),ClassDecl(Id(_n67),[])])'''
        self.assertTrue(TestAST.test(line, expect, 232))

    def test_233(self):
        line = '''Class i2{Constructor (_4K,_:Array [Array [Array [Array [Array [Float ,03_43],07],66],0XC],05_07_3_4]){Break ;} }Class g31Nb{Var __:_;Constructor (_bH:Int ;_,P_M:Array [Array [Boolean ,0b11110],0X3A];p_0:j;_n,P_,egj,f:i){}Val $v:E__;$9(_:String ){}Constructor (_,_3_2,_j:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(i2),[MethodDecl(Id(Constructor),Instance,[param(Id(_4K),ArrayType(20956,ArrayType(12,ArrayType(66,ArrayType(7,ArrayType(227,FloatType)))))),param(Id(_),ArrayType(20956,ArrayType(12,ArrayType(66,ArrayType(7,ArrayType(227,FloatType))))))],Block([Break]))]),ClassDecl(Id(g31Nb),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_bH),IntType),param(Id(_),ArrayType(58,ArrayType(30,BoolType))),param(Id(P_M),ArrayType(58,ArrayType(30,BoolType))),param(Id(p_0),ClassType(Id(j))),param(Id(_n),ClassType(Id(i))),param(Id(P_),ClassType(Id(i))),param(Id(egj),ClassType(Id(i))),param(Id(f),ClassType(Id(i)))],Block([])),AttributeDecl(Static,ConstDecl(Id($v),ClassType(Id(E__)),None)),MethodDecl(Id($9),Static,[param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_3_2),BoolType),param(Id(_j),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 233))

    def test_234(self):
        line = '''Class _7X_:_O_{}Class kD:R_{}Class __:e__{Val $_,_:Array [Int ,8_3];}Class I6{Var $__y:Array [Array [Array [Array [Boolean ,3],0x10],013],0b1_11_10_1];Val $__,a:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_7X_),Id(_O_),[]),ClassDecl(Id(kD),Id(R_),[]),ClassDecl(Id(__),Id(e__),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(83,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(83,IntType),None))]),ClassDecl(Id(I6),[AttributeDecl(Static,VarDecl(Id($__y),ArrayType(61,ArrayType(11,ArrayType(16,ArrayType(3,BoolType)))))),AttributeDecl(Static,ConstDecl(Id($__),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(a),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 234))

    def test_235(self):
        line = '''Class j{Var _:Array [String ,07];$_(_tY_,e:f7;_c__,__,_:_k){ {} }r(_,Z69,_8:Array [Array [Array [Int ,0b10],0b111],0b1_01_10];_,_3_,_:Boolean ){}Constructor (__J_a,_,__,P,_,_M,S0:Float ;___,B:String ){} }'''
        expect = '''Program([ClassDecl(Id(j),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,StringType))),MethodDecl(Id($_),Static,[param(Id(_tY_),ClassType(Id(f7))),param(Id(e),ClassType(Id(f7))),param(Id(_c__),ClassType(Id(_k))),param(Id(__),ClassType(Id(_k))),param(Id(_),ClassType(Id(_k)))],Block([Block([])])),MethodDecl(Id(r),Instance,[param(Id(_),ArrayType(22,ArrayType(7,ArrayType(2,IntType)))),param(Id(Z69),ArrayType(22,ArrayType(7,ArrayType(2,IntType)))),param(Id(_8),ArrayType(22,ArrayType(7,ArrayType(2,IntType)))),param(Id(_),BoolType),param(Id(_3_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__J_a),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(P),FloatType),param(Id(_),FloatType),param(Id(_M),FloatType),param(Id(S0),FloatType),param(Id(___),StringType),param(Id(B),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 235))

    def test_236(self):
        line = '''Class S:_A_e{}Class __u{Var $__9:String ;$_5(qgo:Array [Array [Array [Int ,0X1F],027],0B11_0000_0_1];r:__){} }Class _7f:_{}Class _:A{Constructor (z__k,_6_dX,e,_x8_R,__c:Array [Boolean ,54];F,EX:Boolean ;QX,u,z4,w:Array [Array [Float ,0X1F],0X1F];R_H,f,_T:Array [Int ,02_5_1_4];_,__:M7_3_;_2,C,_Zc4460,_:_;_:_v;_,_:Array [Array [Array [Array [Int ,03_5],54],0b1011010],0b11];__1_:_;E4_:Int ){}Destructor (){} }Class _:_d___u_{Val $_,$SK:_;_(___,g:Int ){} }Class _:A4{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(S),Id(_A_e),[]),ClassDecl(Id(__u),[AttributeDecl(Static,VarDecl(Id($__9),StringType)),MethodDecl(Id($_5),Static,[param(Id(qgo),ArrayType(193,ArrayType(23,ArrayType(31,IntType)))),param(Id(r),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_7f),Id(_),[]),ClassDecl(Id(_),Id(A),[MethodDecl(Id(Constructor),Instance,[param(Id(z__k),ArrayType(54,BoolType)),param(Id(_6_dX),ArrayType(54,BoolType)),param(Id(e),ArrayType(54,BoolType)),param(Id(_x8_R),ArrayType(54,BoolType)),param(Id(__c),ArrayType(54,BoolType)),param(Id(F),BoolType),param(Id(EX),BoolType),param(Id(QX),ArrayType(31,ArrayType(31,FloatType))),param(Id(u),ArrayType(31,ArrayType(31,FloatType))),param(Id(z4),ArrayType(31,ArrayType(31,FloatType))),param(Id(w),ArrayType(31,ArrayType(31,FloatType))),param(Id(R_H),ArrayType(1356,IntType)),param(Id(f),ArrayType(1356,IntType)),param(Id(_T),ArrayType(1356,IntType)),param(Id(_),ClassType(Id(M7_3_))),param(Id(__),ClassType(Id(M7_3_))),param(Id(_2),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(_Zc4460),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_v))),param(Id(_),ArrayType(3,ArrayType(90,ArrayType(54,ArrayType(29,IntType))))),param(Id(_),ArrayType(3,ArrayType(90,ArrayType(54,ArrayType(29,IntType))))),param(Id(__1_),ClassType(Id(_))),param(Id(E4_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_d___u_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($SK),ClassType(Id(_)),None)),MethodDecl(Id(_),Instance,[param(Id(___),IntType),param(Id(g),IntType)],Block([]))]),ClassDecl(Id(_),Id(A4),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 236))

    def test_237(self):
        line = '''Class _88Tz:_W{$_7(j:Boolean ;E:Array [Array [Array [Array [Int ,2_34],0b1_00],042],0B1001111];_C,tTm_,_U5,___j,p,X,_L,L,k,_3:J_9){}Var ib8:Array [Array [Array [Array [Boolean ,3],04_3_6_5],02],042];}Class _:v4{}'''
        expect = '''Program([ClassDecl(Id(_88Tz),Id(_W),[MethodDecl(Id($_7),Static,[param(Id(j),BoolType),param(Id(E),ArrayType(79,ArrayType(34,ArrayType(4,ArrayType(234,IntType))))),param(Id(_C),ClassType(Id(J_9))),param(Id(tTm_),ClassType(Id(J_9))),param(Id(_U5),ClassType(Id(J_9))),param(Id(___j),ClassType(Id(J_9))),param(Id(p),ClassType(Id(J_9))),param(Id(X),ClassType(Id(J_9))),param(Id(_L),ClassType(Id(J_9))),param(Id(L),ClassType(Id(J_9))),param(Id(k),ClassType(Id(J_9))),param(Id(_3),ClassType(Id(J_9)))],Block([])),AttributeDecl(Instance,VarDecl(Id(ib8),ArrayType(34,ArrayType(2,ArrayType(2293,ArrayType(3,BoolType))))))]),ClassDecl(Id(_),Id(v4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 237))

    def test_238(self):
        line = '''Class _{Constructor (__:_o9M4;_4:Array [Int ,0b1001110];_,_0,_O6F:Array [Array [Int ,0x6],0b110_0_0]){}Var $_,_2i,$0wZ,x_4,$1_K4P:Array [Array [Array [Float ,2],0x1],5_7_1];}Class D{Val $z,KP:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_o9M4))),param(Id(_4),ArrayType(78,IntType)),param(Id(_),ArrayType(24,ArrayType(6,IntType))),param(Id(_0),ArrayType(24,ArrayType(6,IntType))),param(Id(_O6F),ArrayType(24,ArrayType(6,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_2i),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Static,VarDecl(Id($0wZ),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Instance,VarDecl(Id(x_4),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Static,VarDecl(Id($1_K4P),ArrayType(571,ArrayType(1,ArrayType(2,FloatType)))))]),ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($z),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(KP),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 238))

    def test_239(self):
        line = '''Class A{$8(L_,__,_,_5h6,E0,_26,_M,V8_a_X,W:Boolean ;k6:kj;__:yL_;c5,_,_o_:Array [Array [Array [Array [Array [Boolean ,1_3],0B1010],0b101000],076_25_401],0X3B]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(A),[MethodDecl(Id($8),Static,[param(Id(L_),BoolType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(_5h6),BoolType),param(Id(E0),BoolType),param(Id(_26),BoolType),param(Id(_M),BoolType),param(Id(V8_a_X),BoolType),param(Id(W),BoolType),param(Id(k6),ClassType(Id(kj))),param(Id(__),ClassType(Id(yL_))),param(Id(c5),ArrayType(59,ArrayType(2042625,ArrayType(40,ArrayType(10,ArrayType(13,BoolType)))))),param(Id(_),ArrayType(59,ArrayType(2042625,ArrayType(40,ArrayType(10,ArrayType(13,BoolType)))))),param(Id(_o_),ArrayType(59,ArrayType(2042625,ArrayType(40,ArrayType(10,ArrayType(13,BoolType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 239))

    def test_240(self):
        line = '''Class __{Constructor (_,Z:Array [Array [Array [Array [Array [Array [Array [Array [String ,4],0XB],6],66],613773_1_0_6_4_04_0],66],0B100111],97];_v:_;__,n:r){Var ___,_,Y__,_,TN:Boolean ;} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(97,ArrayType(39,ArrayType(66,ArrayType(6137731064040,ArrayType(66,ArrayType(6,ArrayType(11,ArrayType(4,StringType))))))))),param(Id(Z),ArrayType(97,ArrayType(39,ArrayType(66,ArrayType(6137731064040,ArrayType(66,ArrayType(6,ArrayType(11,ArrayType(4,StringType))))))))),param(Id(_v),ClassType(Id(_))),param(Id(__),ClassType(Id(r))),param(Id(n),ClassType(Id(r)))],Block([VarDecl(Id(___),BoolType),VarDecl(Id(_),BoolType),VarDecl(Id(Y__),BoolType),VarDecl(Id(_),BoolType),VarDecl(Id(TN),BoolType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 240))

    def test_241(self):
        line = '''Class PI{}Class c8_:Y0{Constructor (){}$9(v:Int ;h0P_,a,l8o:F;__8,W,U:_d;_m,_:Int ;_4:_Fg_;_,l,_,_3_vy,C,__2y__3:Array [Array [Boolean ,0b1],0B1];_9:String ){} }Class _:_L__{}'''
        expect = '''Program([ClassDecl(Id(PI),[]),ClassDecl(Id(c8_),Id(Y0),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($9),Static,[param(Id(v),IntType),param(Id(h0P_),ClassType(Id(F))),param(Id(a),ClassType(Id(F))),param(Id(l8o),ClassType(Id(F))),param(Id(__8),ClassType(Id(_d))),param(Id(W),ClassType(Id(_d))),param(Id(U),ClassType(Id(_d))),param(Id(_m),IntType),param(Id(_),IntType),param(Id(_4),ClassType(Id(_Fg_))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(l),ArrayType(1,ArrayType(1,BoolType))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(_3_vy),ArrayType(1,ArrayType(1,BoolType))),param(Id(C),ArrayType(1,ArrayType(1,BoolType))),param(Id(__2y__3),ArrayType(1,ArrayType(1,BoolType))),param(Id(_9),StringType)],Block([]))]),ClassDecl(Id(_),Id(_L__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 241))

    def test_242(self):
        line = '''Class __G{Var _3:Int ;}Class _E4{Var $5j:Float ;Constructor (__:Array [Array [Array [Array [Array [String ,01_1_0_024_6_7_2],0b1011000],0b10_0],0X60E],0B100];_:d;__OY_w2_57:Array [Array [Float ,02],0X49];W,__:_){Continue ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__G),[AttributeDecl(Instance,VarDecl(Id(_3),IntType))]),ClassDecl(Id(_E4),[AttributeDecl(Static,VarDecl(Id($5j),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(4,ArrayType(1550,ArrayType(4,ArrayType(88,ArrayType(18885050,StringType)))))),param(Id(_),ClassType(Id(d))),param(Id(__OY_w2_57),ArrayType(73,ArrayType(2,FloatType))),param(Id(W),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 242))

    def test_243(self):
        line = '''Class __:E{Constructor (K,_D,z__zw,_:Array [Array [Boolean ,012],0b1_1];KW:Array [Array [Boolean ,99],04]){}Destructor (){} }Class _11ix_0:e1{Var _,_6:Array [Array [Array [Boolean ,0b1],012],0b1100001];}Class Hs0:k1{}'''
        expect = '''Program([ClassDecl(Id(__),Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(3,ArrayType(10,BoolType))),param(Id(_D),ArrayType(3,ArrayType(10,BoolType))),param(Id(z__zw),ArrayType(3,ArrayType(10,BoolType))),param(Id(_),ArrayType(3,ArrayType(10,BoolType))),param(Id(KW),ArrayType(4,ArrayType(99,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_11ix_0),Id(e1),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,ArrayType(10,ArrayType(1,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_6),ArrayType(97,ArrayType(10,ArrayType(1,BoolType)))))]),ClassDecl(Id(Hs0),Id(k1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 243))

    def test_244(self):
        line = '''Class a_5{}Class _:_{Constructor (_4_l:Array [String ,0b1]){}Constructor (){Return ;}$8I0az_(z:Boolean ;_____1p,__,n,R,M_o:Array [Array [Array [Float ,0b1001],073],073];_,__:Array [Array [String ,0B11110],70]){}$_(){ {Val P__,L,h:_;} }}Class _V0_:_{}'''
        expect = '''Program([ClassDecl(Id(a_5),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_4_l),ArrayType(1,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id($8I0az_),Static,[param(Id(z),BoolType),param(Id(_____1p),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(__),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(n),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(R),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(M_o),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(_),ArrayType(70,ArrayType(30,StringType))),param(Id(__),ArrayType(70,ArrayType(30,StringType)))],Block([])),MethodDecl(Id($_),Static,[],Block([Block([ConstDecl(Id(P__),ClassType(Id(_)),None),ConstDecl(Id(L),ClassType(Id(_)),None),ConstDecl(Id(h),ClassType(Id(_)),None)])]))]),ClassDecl(Id(_V0_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 244))

    def test_245(self):
        line = '''Class Z_4F:q6{Constructor (R:Array [Int ,016];_:Int ;R:Array [Array [Array [Array [Boolean ,0X7_8],0XC7],0X29],0b1010110];D9n,_0,V_:Boolean ;O__:Array [String ,2_7]){Break ;Continue ;Var g:Boolean ;Continue ;Return ;}Var __,n,$c,$esD:t;Var G_5_H:Array [Array [Float ,0X8],7];}'''
        expect = '''Program([ClassDecl(Id(Z_4F),Id(q6),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(14,IntType)),param(Id(_),IntType),param(Id(R),ArrayType(86,ArrayType(41,ArrayType(199,ArrayType(120,BoolType))))),param(Id(D9n),BoolType),param(Id(_0),BoolType),param(Id(V_),BoolType),param(Id(O__),ArrayType(27,StringType))],Block([Break,Continue,VarDecl(Id(g),BoolType),Continue,Return()])),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n),ClassType(Id(t)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($c),ClassType(Id(t)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($esD),ClassType(Id(t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(G_5_H),ArrayType(7,ArrayType(8,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 245))

    def test_246(self):
        line = '''Class R{}Class ___:q_{$_(O,y_45_,x,_Wv_:Int ){}$4(kc9:Int ;_:Float ;_A7W:Array [Array [Array [Array [Float ,0X6],011],011],0b1];_3_:String ){}Destructor (){} }Class f{}Class _4{Var v1W:I__;}'''
        expect = '''Program([ClassDecl(Id(R),[]),ClassDecl(Id(___),Id(q_),[MethodDecl(Id($_),Static,[param(Id(O),IntType),param(Id(y_45_),IntType),param(Id(x),IntType),param(Id(_Wv_),IntType)],Block([])),MethodDecl(Id($4),Static,[param(Id(kc9),IntType),param(Id(_),FloatType),param(Id(_A7W),ArrayType(1,ArrayType(9,ArrayType(9,ArrayType(6,FloatType))))),param(Id(_3_),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(f),[]),ClassDecl(Id(_4),[AttributeDecl(Instance,VarDecl(Id(v1W),ClassType(Id(I__)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 246))

    def test_247(self):
        line = '''Class N__{Constructor (_3j_:x;J_9_3TXX_0g,__3_5t_:Array [Array [Float ,0B1],0105];_,_O:Array [Array [Array [Boolean ,0x1],0XD_7E],0105];r6,Z:String ;_V,p3:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(N__),[MethodDecl(Id(Constructor),Instance,[param(Id(_3j_),ClassType(Id(x))),param(Id(J_9_3TXX_0g),ArrayType(69,ArrayType(1,FloatType))),param(Id(__3_5t_),ArrayType(69,ArrayType(1,FloatType))),param(Id(_),ArrayType(69,ArrayType(3454,ArrayType(1,BoolType)))),param(Id(_O),ArrayType(69,ArrayType(3454,ArrayType(1,BoolType)))),param(Id(r6),StringType),param(Id(Z),StringType),param(Id(_V),BoolType),param(Id(p3),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 247))

    def test_248(self):
        line = '''Class d{Destructor (){}Var $_Q3o:__7;$DC(___e__,_:_2O){ {} }Constructor (){}__(_,h:Array [Array [Array [String ,0704_0],82],0b101]){}Constructor (W_:Array [Boolean ,82];_:Float ;SXL_:Array [Array [Array [Array [Array [String ,0xE],82],0X22],2],06_1]){Continue ;} }Class W:___{}Class L_u_22{_6_(__,B,_,_:Array [String ,0xA8]){} }Class _{}Class V8PjYR:_{}Class _6m:_{}'''
        expect = '''Program([ClassDecl(Id(d),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_Q3o),ClassType(Id(__7)),NullLiteral())),MethodDecl(Id($DC),Static,[param(Id(___e__),ClassType(Id(_2O))),param(Id(_),ClassType(Id(_2O)))],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(5,ArrayType(82,ArrayType(3616,StringType)))),param(Id(h),ArrayType(5,ArrayType(82,ArrayType(3616,StringType))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(W_),ArrayType(82,BoolType)),param(Id(_),FloatType),param(Id(SXL_),ArrayType(49,ArrayType(2,ArrayType(34,ArrayType(82,ArrayType(14,StringType))))))],Block([Continue]))]),ClassDecl(Id(W),Id(___),[]),ClassDecl(Id(L_u_22),[MethodDecl(Id(_6_),Instance,[param(Id(__),ArrayType(168,StringType)),param(Id(B),ArrayType(168,StringType)),param(Id(_),ArrayType(168,StringType)),param(Id(_),ArrayType(168,StringType))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(V8PjYR),Id(_),[]),ClassDecl(Id(_6m),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 248))

    def test_249(self):
        line = '''Class __:_{Var $6eT7,uF,$8:l_;}Class _:i{Val _,__t,i3:Array [Array [Array [Array [Array [String ,75],07],295],0b1001101],1_585];Constructor (){Break ;}Var $431tY_:String ;}Class l:Ux{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Static,VarDecl(Id($6eT7),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(uF),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(l_)),NullLiteral()))]),ClassDecl(Id(_),Id(i),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1585,ArrayType(77,ArrayType(295,ArrayType(7,ArrayType(75,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(__t),ArrayType(1585,ArrayType(77,ArrayType(295,ArrayType(7,ArrayType(75,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(i3),ArrayType(1585,ArrayType(77,ArrayType(295,ArrayType(7,ArrayType(75,StringType))))),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($431tY_),StringType))]),ClassDecl(Id(l),Id(Ux),[])])'''
        self.assertTrue(TestAST.test(line, expect, 249))

    def test_250(self):
        line = '''Class _{kL(){}a9(_:_;_,_5,j7,Zhs5,_v:k214){} }Class s:T1{}Class _:akxo2XK{$6(x:Array [String ,06];_4___3q_4,_:Array [Array [Array [Array [Array [String ,2],06],043],0x35],571];_:_){} }Class _:_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(kL),Instance,[],Block([])),MethodDecl(Id(a9),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(k214))),param(Id(_5),ClassType(Id(k214))),param(Id(j7),ClassType(Id(k214))),param(Id(Zhs5),ClassType(Id(k214))),param(Id(_v),ClassType(Id(k214)))],Block([]))]),ClassDecl(Id(s),Id(T1),[]),ClassDecl(Id(_),Id(akxo2XK),[MethodDecl(Id($6),Static,[param(Id(x),ArrayType(6,StringType)),param(Id(_4___3q_4),ArrayType(571,ArrayType(53,ArrayType(35,ArrayType(6,ArrayType(2,StringType)))))),param(Id(_),ArrayType(571,ArrayType(53,ArrayType(35,ArrayType(6,ArrayType(2,StringType)))))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 250))

    def test_251(self):
        line = '''Class h{Var _65X,$y_SU_,_I0,$A:Float ;Constructor (){ {}{} }Var w8_Q:Array [Array [Array [Boolean ,03],0X12],4];Val v__:Array [Array [Int ,0B10010],056];Var _4D:Array [Array [Array [Int ,0X12],0b1011111],0X12];}'''
        expect = '''Program([ClassDecl(Id(h),[AttributeDecl(Instance,VarDecl(Id(_65X),FloatType)),AttributeDecl(Static,VarDecl(Id($y_SU_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_I0),FloatType)),AttributeDecl(Static,VarDecl(Id($A),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Block([])])),AttributeDecl(Instance,VarDecl(Id(w8_Q),ArrayType(4,ArrayType(18,ArrayType(3,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(v__),ArrayType(46,ArrayType(18,IntType)),None)),AttributeDecl(Instance,VarDecl(Id(_4D),ArrayType(18,ArrayType(95,ArrayType(18,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 251))

    def test_252(self):
        line = '''Class rI{Constructor (){Continue ;Continue ;}Destructor (){Val H_,Y:Array [Array [Array [Array [Array [Boolean ,9],0x16],50],0b1000001],0B1];}Var _,_0,_,$0_:Array [Int ,014652];}'''
        expect = '''Program([ClassDecl(Id(rI),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(H_),ArrayType(1,ArrayType(65,ArrayType(50,ArrayType(22,ArrayType(9,BoolType))))),None),ConstDecl(Id(Y),ArrayType(1,ArrayType(65,ArrayType(50,ArrayType(22,ArrayType(9,BoolType))))),None)])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6570,IntType))),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(6570,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6570,IntType))),AttributeDecl(Static,VarDecl(Id($0_),ArrayType(6570,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 252))

    def test_253(self):
        line = '''Class _{Var $7z:Float =!!!_0q132::$1._._!=-_4::$_.v._S;}Class q:R_2{Constructor (){} }Class x:M{}Class __{Constructor (X:_){} }Class _{Destructor (){}Var X_F,$_,_,_:_7;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($7z),FloatType,BinaryOp(!=,UnaryOp(!,UnaryOp(!,UnaryOp(!,FieldAccess(FieldAccess(FieldAccess(Id(_0q132),Id($1)),Id(_)),Id(_))))),UnaryOp(-,FieldAccess(FieldAccess(FieldAccess(Id(_4),Id($_)),Id(v)),Id(_S))))))]),ClassDecl(Id(q),Id(R_2),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(M),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(X_F),ClassType(Id(_7)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_7)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 253))

    def test_254(self):
        line = '''Class _:uG{}Class v0:sm{$Q(lV_4yR:Array [Boolean ,0B1010111]){}Constructor (K,E:String ;_N7:Array [String ,888_1];__,_5cu,R_:Array [Array [Array [Array [Array [Array [Int ,02],11],02],036],9],0x2_7];_2A1,kq,Aa:String ;H:_H;__U:String ;_:HO){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(uG),[]),ClassDecl(Id(v0),Id(sm),[MethodDecl(Id($Q),Static,[param(Id(lV_4yR),ArrayType(87,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(K),StringType),param(Id(E),StringType),param(Id(_N7),ArrayType(8881,StringType)),param(Id(__),ArrayType(39,ArrayType(9,ArrayType(30,ArrayType(2,ArrayType(11,ArrayType(2,IntType))))))),param(Id(_5cu),ArrayType(39,ArrayType(9,ArrayType(30,ArrayType(2,ArrayType(11,ArrayType(2,IntType))))))),param(Id(R_),ArrayType(39,ArrayType(9,ArrayType(30,ArrayType(2,ArrayType(11,ArrayType(2,IntType))))))),param(Id(_2A1),StringType),param(Id(kq),StringType),param(Id(Aa),StringType),param(Id(H),ClassType(Id(_H))),param(Id(__U),StringType),param(Id(_),ClassType(Id(HO)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 254))

    def test_255(self):
        line = '''Class Z_:m_{$_T(f,_,q__o:String ;_e:Array [Float ,07]){Break ;}Constructor (J,X:Array [String ,05];s_j053:_Tw7){} }Class s7{}Class vZ85T_1vF9:_{}Class y{Val $_62:String ;}'''
        expect = '''Program([ClassDecl(Id(Z_),Id(m_),[MethodDecl(Id($_T),Static,[param(Id(f),StringType),param(Id(_),StringType),param(Id(q__o),StringType),param(Id(_e),ArrayType(7,FloatType))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(5,StringType)),param(Id(X),ArrayType(5,StringType)),param(Id(s_j053),ClassType(Id(_Tw7)))],Block([]))]),ClassDecl(Id(s7),[]),ClassDecl(Id(vZ85T_1vF9),Id(_),[]),ClassDecl(Id(y),[AttributeDecl(Static,ConstDecl(Id($_62),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 255))

    def test_256(self):
        line = '''Class K:_{}Class d{Var _,_:Int ;Val _:Float ;Var _:Array [Boolean ,0B110000];}Class _:L74{Val $B6_,J,$_,Y,G:Array [Boolean ,0X3A];Destructor (){}Var d,w1_,$O:_;}Class _:_{Val J,$2,o_,$7_:_i;}'''
        expect = '''Program([ClassDecl(Id(K),Id(_),[]),ClassDecl(Id(d),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(48,BoolType)))]),ClassDecl(Id(_),Id(L74),[AttributeDecl(Static,ConstDecl(Id($B6_),ArrayType(58,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(J),ArrayType(58,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(58,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(58,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(G),ArrayType(58,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w1_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(_i)),None)),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(_i)),None)),AttributeDecl(Instance,ConstDecl(Id(o_),ClassType(Id(_i)),None)),AttributeDecl(Static,ConstDecl(Id($7_),ClassType(Id(_i)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 256))

    def test_257(self):
        line = '''Class q:_{}Class _0U{}Class _1{Var _:Array [Array [Array [Array [Boolean ,0b1],04],62],0B1_1];}Class _A__93:_{Constructor (){}$0___3(){}Val m,_,$y,_,i9,_:_;Var $r,$5g:Boolean ;Val $FW_,$7:Array [String ,056];}'''
        expect = '''Program([ClassDecl(Id(q),Id(_),[]),ClassDecl(Id(_0U),[]),ClassDecl(Id(_1),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(62,ArrayType(4,ArrayType(1,BoolType))))))]),ClassDecl(Id(_A__93),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($0___3),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(m),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($y),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(i9),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($r),BoolType)),AttributeDecl(Static,VarDecl(Id($5g),BoolType)),AttributeDecl(Static,ConstDecl(Id($FW_),ArrayType(46,StringType),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(46,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 257))

    def test_258(self):
        line = '''Class y3I7:__{Constructor (_,_:Float ;_:String ;_:_;j_Ra_9_R:_0;m,N,_N,i_Q_5,_i5:Float ;_,H:Int ;t,O,_68,wX,b__,O:Array [Float ,0B1010110];g0p_r,s,q,_:Array [Boolean ,0x36]){}Var __,_,_8,r,$_:Boolean ;Var pm:Array [Float ,56];}Class It1Ak36i71:_{}Class vB_:_{Var $3_w:Array [Array [String ,56],0B1010110];}'''
        expect = '''Program([ClassDecl(Id(y3I7),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),StringType),param(Id(_),ClassType(Id(_))),param(Id(j_Ra_9_R),ClassType(Id(_0))),param(Id(m),FloatType),param(Id(N),FloatType),param(Id(_N),FloatType),param(Id(i_Q_5),FloatType),param(Id(_i5),FloatType),param(Id(_),IntType),param(Id(H),IntType),param(Id(t),ArrayType(86,FloatType)),param(Id(O),ArrayType(86,FloatType)),param(Id(_68),ArrayType(86,FloatType)),param(Id(wX),ArrayType(86,FloatType)),param(Id(b__),ArrayType(86,FloatType)),param(Id(O),ArrayType(86,FloatType)),param(Id(g0p_r),ArrayType(54,BoolType)),param(Id(s),ArrayType(54,BoolType)),param(Id(q),ArrayType(54,BoolType)),param(Id(_),ArrayType(54,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(__),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_8),BoolType)),AttributeDecl(Instance,VarDecl(Id(r),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(pm),ArrayType(56,FloatType)))]),ClassDecl(Id(It1Ak36i71),Id(_),[]),ClassDecl(Id(vB_),Id(_),[AttributeDecl(Static,VarDecl(Id($3_w),ArrayType(86,ArrayType(56,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 258))

    def test_259(self):
        line = '''Class Mv_:N9{Constructor (_k:Array [Int ,0B1];B,_k:Array [String ,5];_,r6_:Boolean ){_::$_.h4_();}l_7(){Break ;} }Class k:u{Val $3,$_,$5_,$j4__,$_,$B,N_,$2:Array [Array [Boolean ,053],28];}Class _{}Class _:_{}Class _:J{}'''
        expect = '''Program([ClassDecl(Id(Mv_),Id(N9),[MethodDecl(Id(Constructor),Instance,[param(Id(_k),ArrayType(1,IntType)),param(Id(B),ArrayType(5,StringType)),param(Id(_k),ArrayType(5,StringType)),param(Id(_),BoolType),param(Id(r6_),BoolType)],Block([Call(FieldAccess(Id(_),Id($_)),Id(h4_),[])])),MethodDecl(Id(l_7),Instance,[],Block([Break]))]),ClassDecl(Id(k),Id(u),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($j4__),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($B),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(N_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(28,ArrayType(43,BoolType)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(J),[])])'''
        self.assertTrue(TestAST.test(line, expect, 259))

    def test_260(self):
        line = '''Class _:r0{Destructor (){Return ;}gU(){} }Class c_8:__{}Class __{Val k:String ;i_J____(____u6Y__:Array [Boolean ,0x2E];F5,_,A5e:Boolean ){} }Class _:_4K_Y{Val $_8_T:Array [Array [String ,05],0B11011];}Class _R{}'''
        expect = '''Program([ClassDecl(Id(_),Id(r0),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(gU),Instance,[],Block([]))]),ClassDecl(Id(c_8),Id(__),[]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(k),StringType,None)),MethodDecl(Id(i_J____),Instance,[param(Id(____u6Y__),ArrayType(46,BoolType)),param(Id(F5),BoolType),param(Id(_),BoolType),param(Id(A5e),BoolType)],Block([]))]),ClassDecl(Id(_),Id(_4K_Y),[AttributeDecl(Static,ConstDecl(Id($_8_T),ArrayType(27,ArrayType(5,StringType)),None))]),ClassDecl(Id(_R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 260))

    def test_261(self):
        line = '''Class _4K:_{}Class v_{}Class _L{}Class _:_U_4_3_6{Val Y4Q:String ;Constructor (uue:Array [Int ,061];B:h;_a43,_:Array [Array [Int ,0x52],01]){}Var $62:String ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_4K),Id(_),[]),ClassDecl(Id(v_),[]),ClassDecl(Id(_L),[]),ClassDecl(Id(_),Id(_U_4_3_6),[AttributeDecl(Instance,ConstDecl(Id(Y4Q),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(uue),ArrayType(49,IntType)),param(Id(B),ClassType(Id(h))),param(Id(_a43),ArrayType(1,ArrayType(82,IntType))),param(Id(_),ArrayType(1,ArrayType(82,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($62),StringType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 261))

    def test_262(self):
        line = '''Class z1:ED_{Var $__,$_:Array [Array [Float ,7],0X25];}Class W:_{Val V1S:Float ;}Class _{Var _,Hi_:Array [Boolean ,0B1000100];X3_(TVi4,_:Array [Array [Array [String ,06],04_3_0_5_75],7]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(z1),Id(ED_),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(37,ArrayType(7,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(37,ArrayType(7,FloatType))))]),ClassDecl(Id(W),Id(_),[AttributeDecl(Instance,ConstDecl(Id(V1S),FloatType,None))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(68,BoolType))),AttributeDecl(Instance,VarDecl(Id(Hi_),ArrayType(68,BoolType))),MethodDecl(Id(X3_),Instance,[param(Id(TVi4),ArrayType(7,ArrayType(143741,ArrayType(6,StringType)))),param(Id(_),ArrayType(7,ArrayType(143741,ArrayType(6,StringType))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 262))

    def test_263(self):
        line = '''Class _7_{}Class __eY{_(){}Constructor (){Var x,_f,Y9:Array [Array [Array [Array [Float ,01],0XF],0121],0X22];} }Class WG:MR3_1{Val _:String ;T(){}_8(U_1kQ,b,_1:Array [Boolean ,0xA]){} }'''
        expect = '''Program([ClassDecl(Id(_7_),[]),ClassDecl(Id(__eY),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(x),ArrayType(34,ArrayType(81,ArrayType(15,ArrayType(1,FloatType))))),VarDecl(Id(_f),ArrayType(34,ArrayType(81,ArrayType(15,ArrayType(1,FloatType))))),VarDecl(Id(Y9),ArrayType(34,ArrayType(81,ArrayType(15,ArrayType(1,FloatType)))))]))]),ClassDecl(Id(WG),Id(MR3_1),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),MethodDecl(Id(T),Instance,[],Block([])),MethodDecl(Id(_8),Instance,[param(Id(U_1kQ),ArrayType(10,BoolType)),param(Id(b),ArrayType(10,BoolType)),param(Id(_1),ArrayType(10,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 263))

    def test_264(self):
        line = '''Class br{C_(){_5_::$1().__7_();Break ;} }Class _0B_cPW6{Constructor (){} }Class _n:O{}Class P{Destructor (){}Var __Q_,$F:Array [Array [Array [String ,0B1],0b1],0xB];}Class t{Var _:Array [Int ,0XA7];}'''
        expect = '''Program([ClassDecl(Id(br),[MethodDecl(Id(C_),Instance,[],Block([Call(CallExpr(Id(_5_),Id($1),[]),Id(__7_),[]),Break]))]),ClassDecl(Id(_0B_cPW6),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_n),Id(O),[]),ClassDecl(Id(P),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__Q_),ArrayType(11,ArrayType(1,ArrayType(1,StringType))))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(11,ArrayType(1,ArrayType(1,StringType)))))]),ClassDecl(Id(t),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(167,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 264))

    def test_265(self):
        line = '''Class AW:_{}Class _{}Class _3:U_6{jh(){} }Class X:e__{Val $__6,$r,Y,h,__,$9:Array [Int ,0b1_1];Constructor (_0hc:Array [Array [Array [Array [Array [Array [Int ,0X49],0b100010],0X9_DA],01_3_2_61],84],0x15];S,_,__,_KD:Array [Array [Array [Float ,064_2],0B1_0],84];___00:Array [Int ,4_2_4]){} }'''
        expect = '''Program([ClassDecl(Id(AW),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_3),Id(U_6),[MethodDecl(Id(jh),Instance,[],Block([]))]),ClassDecl(Id(X),Id(e__),[AttributeDecl(Static,ConstDecl(Id($__6),ArrayType(3,IntType),None)),AttributeDecl(Static,ConstDecl(Id($r),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(3,IntType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(3,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_0hc),ArrayType(21,ArrayType(84,ArrayType(5809,ArrayType(2522,ArrayType(34,ArrayType(73,IntType))))))),param(Id(S),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(_),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(__),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(_KD),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(___00),ArrayType(424,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 265))

    def test_266(self):
        line = '''Class _{}Class _{Val $i:_32s;Constructor (S:Int ;_V_:Array [Array [String ,0x4],0B1_1];v,_:Array [Array [Int ,0x2],037_0612];_X:Array [Array [Array [Array [String ,046],69],0B1],0X36]){Break ;} }Class __{Val $I_,$K,$_8,$1,__,_,m9:Array [Array [Int ,0B1],2];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($i),ClassType(Id(_32s)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(S),IntType),param(Id(_V_),ArrayType(3,ArrayType(4,StringType))),param(Id(v),ArrayType(127370,ArrayType(2,IntType))),param(Id(_),ArrayType(127370,ArrayType(2,IntType))),param(Id(_X),ArrayType(54,ArrayType(1,ArrayType(69,ArrayType(38,StringType)))))],Block([Break]))]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($I_),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($K),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_8),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(m9),ArrayType(2,ArrayType(1,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 266))

    def test_267(self):
        line = '''Class _{Var $__c,$__34,$0,_I5Y9,_,$bE:Int ;Var zs:_;}Class U:s{}Class f:_{Constructor (tWs,_D,_,L:Array [Array [Array [Boolean ,0x2A],0X2F],83];E___4K:Array [Array [Array [Boolean ,0x2A],1],0b1_0]){}__(){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($__c),IntType)),AttributeDecl(Static,VarDecl(Id($__34),IntType)),AttributeDecl(Static,VarDecl(Id($0),IntType)),AttributeDecl(Instance,VarDecl(Id(_I5Y9),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($bE),IntType)),AttributeDecl(Instance,VarDecl(Id(zs),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(U),Id(s),[]),ClassDecl(Id(f),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(tWs),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(_D),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(_),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(L),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(E___4K),ArrayType(2,ArrayType(1,ArrayType(42,BoolType))))],Block([])),MethodDecl(Id(__),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 267))

    def test_268(self):
        line = '''Class _{$r(_:Array [Array [Array [Boolean ,0B100],70],0322];g:Float ;e:Array [Array [Int ,077],94]){}_(T:w;_P_,_0,V4:r3;WX,_J_,_,l3,F,w_v:Array [String ,077];o,g:Array [Boolean ,0B11_1];_M46:Array [Array [Boolean ,18_4_746],077];u,p003:String ;___,_E:Array [String ,0B1]){} }Class _07{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($r),Static,[param(Id(_),ArrayType(210,ArrayType(70,ArrayType(4,BoolType)))),param(Id(g),FloatType),param(Id(e),ArrayType(94,ArrayType(63,IntType)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(T),ClassType(Id(w))),param(Id(_P_),ClassType(Id(r3))),param(Id(_0),ClassType(Id(r3))),param(Id(V4),ClassType(Id(r3))),param(Id(WX),ArrayType(63,StringType)),param(Id(_J_),ArrayType(63,StringType)),param(Id(_),ArrayType(63,StringType)),param(Id(l3),ArrayType(63,StringType)),param(Id(F),ArrayType(63,StringType)),param(Id(w_v),ArrayType(63,StringType)),param(Id(o),ArrayType(7,BoolType)),param(Id(g),ArrayType(7,BoolType)),param(Id(_M46),ArrayType(63,ArrayType(184746,BoolType))),param(Id(u),StringType),param(Id(p003),StringType),param(Id(___),ArrayType(1,StringType)),param(Id(_E),ArrayType(1,StringType))],Block([]))]),ClassDecl(Id(_07),[])])'''
        self.assertTrue(TestAST.test(line, expect, 268))

    def test_269(self):
        line = '''Class W{Val _,_:Array [Array [Array [Array [Array [Boolean ,0b1001010],0X12],12_2_2],0X7],03_2];Val $Z_P:__;Destructor (){}Var $__,$__,$__JX,$U87jo,$O0,_y:a_;}Class rS_K:a{}'''
        expect = '''Program([ClassDecl(Id(W),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(7,ArrayType(1222,ArrayType(18,ArrayType(74,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(7,ArrayType(1222,ArrayType(18,ArrayType(74,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($Z_P),ClassType(Id(__)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__JX),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($U87jo),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O0),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_y),ClassType(Id(a_)),NullLiteral()))]),ClassDecl(Id(rS_K),Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 269))

    def test_270(self):
        line = '''Class __{i(Nk5:Array [Array [String ,055],03];_Mo:Float ){} }Class q:_{Val c0:p0d_;Destructor (){} }Class yc:y{}Class _:_{__(){} }Class _{Val y_:Array [Int ,055];}Class ___:t{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(i),Instance,[param(Id(Nk5),ArrayType(3,ArrayType(45,StringType))),param(Id(_Mo),FloatType)],Block([]))]),ClassDecl(Id(q),Id(_),[AttributeDecl(Instance,ConstDecl(Id(c0),ClassType(Id(p0d_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(yc),Id(y),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(__),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(y_),ArrayType(45,IntType),None))]),ClassDecl(Id(___),Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 270))

    def test_271(self):
        line = '''Class R{Var $_9t:Int ;Var q,$0_:Float ;}Class d:E{Constructor (){} }Class _N:k{Constructor (_:Array [Array [Array [String ,0XD],99],7];Cef,_,_t_:B1_01;s2,__h5:Float ;_,_7_w7:Array [Int ,02]){} }'''
        expect = '''Program([ClassDecl(Id(R),[AttributeDecl(Static,VarDecl(Id($_9t),IntType)),AttributeDecl(Instance,VarDecl(Id(q),FloatType)),AttributeDecl(Static,VarDecl(Id($0_),FloatType))]),ClassDecl(Id(d),Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_N),Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7,ArrayType(99,ArrayType(13,StringType)))),param(Id(Cef),ClassType(Id(B1_01))),param(Id(_),ClassType(Id(B1_01))),param(Id(_t_),ClassType(Id(B1_01))),param(Id(s2),FloatType),param(Id(__h5),FloatType),param(Id(_),ArrayType(2,IntType)),param(Id(_7_w7),ArrayType(2,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 271))

    def test_272(self):
        line = '''Class _:_2{Var $D5:String ;Constructor (sy9,yV_Nj,H:Array [Float ,033];__Gf9,__:Array [String ,0B1_1_11_0];b,Xv04,v0,_,YJ_6_:H9_;_1:_){}Constructor (){}Constructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_2),[AttributeDecl(Static,VarDecl(Id($D5),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(sy9),ArrayType(27,FloatType)),param(Id(yV_Nj),ArrayType(27,FloatType)),param(Id(H),ArrayType(27,FloatType)),param(Id(__Gf9),ArrayType(30,StringType)),param(Id(__),ArrayType(30,StringType)),param(Id(b),ClassType(Id(H9_))),param(Id(Xv04),ClassType(Id(H9_))),param(Id(v0),ClassType(Id(H9_))),param(Id(_),ClassType(Id(H9_))),param(Id(YJ_6_),ClassType(Id(H9_))),param(Id(_1),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 272))

    def test_273(self):
        line = '''Class __9{Constructor (_6_:Array [Int ,0B11001];_,V,j9_5,_,_:Array [Array [Boolean ,02],0B1_1];x_,T:Boolean ;__:String ;T,_,nWs,_m:Array [Array [Array [Boolean ,0b101001],0b1],0X63]){} }'''
        expect = '''Program([ClassDecl(Id(__9),[MethodDecl(Id(Constructor),Instance,[param(Id(_6_),ArrayType(25,IntType)),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(V),ArrayType(3,ArrayType(2,BoolType))),param(Id(j9_5),ArrayType(3,ArrayType(2,BoolType))),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(x_),BoolType),param(Id(T),BoolType),param(Id(__),StringType),param(Id(T),ArrayType(99,ArrayType(1,ArrayType(41,BoolType)))),param(Id(_),ArrayType(99,ArrayType(1,ArrayType(41,BoolType)))),param(Id(nWs),ArrayType(99,ArrayType(1,ArrayType(41,BoolType)))),param(Id(_m),ArrayType(99,ArrayType(1,ArrayType(41,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 273))

    def test_274(self):
        line = '''Class _{Constructor (_:Array [Float ,012];__,o,P,_,P:_0;_,_,__0:Array [Array [Int ,0B1000011],0x4F]){} }Class cu:y{}Class ulk{Val w:Array [Array [Float ,95],0x4F];}Class _:_{}Class _:_{$m_(KOG,I,e,AGWu6W:Array [Float ,0b1100000];_,qq,_,Fq8_092_:a){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(10,FloatType)),param(Id(__),ClassType(Id(_0))),param(Id(o),ClassType(Id(_0))),param(Id(P),ClassType(Id(_0))),param(Id(_),ClassType(Id(_0))),param(Id(P),ClassType(Id(_0))),param(Id(_),ArrayType(79,ArrayType(67,IntType))),param(Id(_),ArrayType(79,ArrayType(67,IntType))),param(Id(__0),ArrayType(79,ArrayType(67,IntType)))],Block([]))]),ClassDecl(Id(cu),Id(y),[]),ClassDecl(Id(ulk),[AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(79,ArrayType(95,FloatType)),None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($m_),Static,[param(Id(KOG),ArrayType(96,FloatType)),param(Id(I),ArrayType(96,FloatType)),param(Id(e),ArrayType(96,FloatType)),param(Id(AGWu6W),ArrayType(96,FloatType)),param(Id(_),ClassType(Id(a))),param(Id(qq),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(Fq8_092_),ClassType(Id(a)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 274))

    def test_275(self):
        line = '''Class e{Constructor (){} }Class _0:__Y{Constructor (_,__,__P_,X_:_){Var c:_;}$5(_:o;h5A1:Array [Boolean ,28];l,__:Array [Array [Boolean ,02_5],28];G:Array [Array [Int ,013],01_61]){Var _:Array [Array [Array [String ,013],0B1_1],0B10];}Val s_,$m,f:_;Var $4:Array [String ,06_4_1];Var $Qg:Array [Float ,7_6];Var _,$05JF,_i:String ;}Class j2B{}'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_0),Id(__Y),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(__P_),ClassType(Id(_))),param(Id(X_),ClassType(Id(_)))],Block([VarDecl(Id(c),ClassType(Id(_)),NullLiteral())])),MethodDecl(Id($5),Static,[param(Id(_),ClassType(Id(o))),param(Id(h5A1),ArrayType(28,BoolType)),param(Id(l),ArrayType(28,ArrayType(21,BoolType))),param(Id(__),ArrayType(28,ArrayType(21,BoolType))),param(Id(G),ArrayType(113,ArrayType(11,IntType)))],Block([VarDecl(Id(_),ArrayType(2,ArrayType(3,ArrayType(11,StringType))))])),AttributeDecl(Instance,ConstDecl(Id(s_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($m),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($4),ArrayType(417,StringType))),AttributeDecl(Static,VarDecl(Id($Qg),ArrayType(76,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($05JF),StringType)),AttributeDecl(Instance,VarDecl(Id(_i),StringType))]),ClassDecl(Id(j2B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 275))

    def test_276(self):
        line = '''Class e:y{Var _,$j9_,$1__3,F_,$8N2wd_E:Array [Array [Array [Boolean ,6],02_3252_6],8_3];Val _,$e1_,_k:Array [String ,0x21_C];Destructor (){}Val $Hl2__,a:Array [Int ,0x4B];Var i:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(e),Id(y),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Static,VarDecl(Id($j9_),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Static,VarDecl(Id($1__3),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Instance,VarDecl(Id(F_),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Static,VarDecl(Id($8N2wd_E),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(540,StringType),None)),AttributeDecl(Static,ConstDecl(Id($e1_),ArrayType(540,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_k),ArrayType(540,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($Hl2__),ArrayType(75,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(a),ArrayType(75,IntType),None)),AttributeDecl(Instance,VarDecl(Id(i),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 276))

    def test_277(self):
        line = '''Class ___29M5:J7{Val _:___;Var __,i1:z68;Destructor (){}_84(M:Array [Float ,61];_7t,_,m,___0_T_:w){}Var _2d__Q__,_Dg:String ;}Class t{}Class M0q{Var $_:__8;Constructor (){}Constructor (){} }Class Ih:__{}'''
        expect = '''Program([ClassDecl(Id(___29M5),Id(J7),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(___)),None)),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(z68)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(i1),ClassType(Id(z68)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_84),Instance,[param(Id(M),ArrayType(61,FloatType)),param(Id(_7t),ClassType(Id(w))),param(Id(_),ClassType(Id(w))),param(Id(m),ClassType(Id(w))),param(Id(___0_T_),ClassType(Id(w)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_2d__Q__),StringType)),AttributeDecl(Instance,VarDecl(Id(_Dg),StringType))]),ClassDecl(Id(t),[]),ClassDecl(Id(M0q),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__8)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Ih),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 277))

    def test_278(self):
        line = '''Class _{}Class h_:_{Constructor (){}Var _L:Boolean ;Constructor (){Break ;}Constructor (_,Qs_n:String ;___8,_L:Float ;b0:Array [Array [Int ,02],30];k,O:Z5;_,_:_8;_:String ;i_:R;B_5_,N,_:String ;W_,b:Array [Array [Int ,0x7],30];_0,D:Cc6_;_:mW){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(h_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_L),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(Qs_n),StringType),param(Id(___8),FloatType),param(Id(_L),FloatType),param(Id(b0),ArrayType(30,ArrayType(2,IntType))),param(Id(k),ClassType(Id(Z5))),param(Id(O),ClassType(Id(Z5))),param(Id(_),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(_),StringType),param(Id(i_),ClassType(Id(R))),param(Id(B_5_),StringType),param(Id(N),StringType),param(Id(_),StringType),param(Id(W_),ArrayType(30,ArrayType(7,IntType))),param(Id(b),ArrayType(30,ArrayType(7,IntType))),param(Id(_0),ClassType(Id(Cc6_))),param(Id(D),ClassType(Id(Cc6_))),param(Id(_),ClassType(Id(mW)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 278))

    def test_279(self):
        line = '''Class w:d{Constructor (_A2:String ){Continue ;}Constructor (){}___9C(k,_,_:String ;_:String ){} }Class _:U{Destructor (){Continue ;Q::$__n6();}Destructor (){}$T1(_,x,_6_,fkbJ,E_,_k6__:W;a3_C,X,___K:Array [Array [Boolean ,0B101100],0X3];_sA,_m,_T_,P:d){}Constructor (UfS:DI__;e:Array [Array [Array [Boolean ,0x8],9],0B101100];__j9,_,o,____:q0;A:_m;__:q){} }'''
        expect = '''Program([ClassDecl(Id(w),Id(d),[MethodDecl(Id(Constructor),Instance,[param(Id(_A2),StringType)],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(___9C),Instance,[param(Id(k),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Call(Id(Q),Id($__n6),[])])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($T1),Static,[param(Id(_),ClassType(Id(W))),param(Id(x),ClassType(Id(W))),param(Id(_6_),ClassType(Id(W))),param(Id(fkbJ),ClassType(Id(W))),param(Id(E_),ClassType(Id(W))),param(Id(_k6__),ClassType(Id(W))),param(Id(a3_C),ArrayType(3,ArrayType(44,BoolType))),param(Id(X),ArrayType(3,ArrayType(44,BoolType))),param(Id(___K),ArrayType(3,ArrayType(44,BoolType))),param(Id(_sA),ClassType(Id(d))),param(Id(_m),ClassType(Id(d))),param(Id(_T_),ClassType(Id(d))),param(Id(P),ClassType(Id(d)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(UfS),ClassType(Id(DI__))),param(Id(e),ArrayType(44,ArrayType(9,ArrayType(8,BoolType)))),param(Id(__j9),ClassType(Id(q0))),param(Id(_),ClassType(Id(q0))),param(Id(o),ClassType(Id(q0))),param(Id(____),ClassType(Id(q0))),param(Id(A),ClassType(Id(_m))),param(Id(__),ClassType(Id(q)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 279))

    def test_280(self):
        line = '''Class _:_{}Class _:_{_(_6:Array [Int ,0b1111];_r5,s:Array [Boolean ,40];_0Sy:Boolean ;_:Float ;_6__p,F66930:Array [Array [Array [Float ,0b1],0x9],055_76_5];_:Array [Array [Boolean ,030],6]){}Destructor (){} }Class Z{Var $JZX,$_:n__;Constructor (){}Var _:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_6),ArrayType(15,IntType)),param(Id(_r5),ArrayType(40,BoolType)),param(Id(s),ArrayType(40,BoolType)),param(Id(_0Sy),BoolType),param(Id(_),FloatType),param(Id(_6__p),ArrayType(23541,ArrayType(9,ArrayType(1,FloatType)))),param(Id(F66930),ArrayType(23541,ArrayType(9,ArrayType(1,FloatType)))),param(Id(_),ArrayType(6,ArrayType(24,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Z),[AttributeDecl(Static,VarDecl(Id($JZX),ClassType(Id(n__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(n__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 280))

    def test_281(self):
        line = '''Class z:_{Constructor (A:Float ;N9Ib700e78K:Array [Array [Array [Array [String ,33],0b10111],0x54_5],0X2_C];m:Float ){ {}Var __:Array [Array [Array [Float ,33],33],0B1010100];}Val $_65,$45_,$y_Y:String ;}Class Q{}'''
        expect = '''Program([ClassDecl(Id(z),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),FloatType),param(Id(N9Ib700e78K),ArrayType(44,ArrayType(1349,ArrayType(23,ArrayType(33,StringType))))),param(Id(m),FloatType)],Block([Block([]),VarDecl(Id(__),ArrayType(84,ArrayType(33,ArrayType(33,FloatType))))])),AttributeDecl(Static,ConstDecl(Id($_65),StringType,None)),AttributeDecl(Static,ConstDecl(Id($45_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($y_Y),StringType,None))]),ClassDecl(Id(Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 281))

    def test_282(self):
        line = '''Class _{Constructor (_,_68k8_,_17:L_;ru:T;_U,__:_1;_:Array [Float ,0B11]){}Constructor (s,x,T,_,_:Array [Boolean ,05];B,_:Array [Array [String ,0x2A],8];_,I:_;_Owv,l5,_2_7__Ac:Array [Array [Array [Array [Array [Int ,0x8],0b1_1_0_1],51],0x2A],7];K,_z:d){Continue ;l_::$4();} }Class g:_K{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(L_))),param(Id(_68k8_),ClassType(Id(L_))),param(Id(_17),ClassType(Id(L_))),param(Id(ru),ClassType(Id(T))),param(Id(_U),ClassType(Id(_1))),param(Id(__),ClassType(Id(_1))),param(Id(_),ArrayType(3,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(5,BoolType)),param(Id(x),ArrayType(5,BoolType)),param(Id(T),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(B),ArrayType(8,ArrayType(42,StringType))),param(Id(_),ArrayType(8,ArrayType(42,StringType))),param(Id(_),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(_Owv),ArrayType(7,ArrayType(42,ArrayType(51,ArrayType(13,ArrayType(8,IntType)))))),param(Id(l5),ArrayType(7,ArrayType(42,ArrayType(51,ArrayType(13,ArrayType(8,IntType)))))),param(Id(_2_7__Ac),ArrayType(7,ArrayType(42,ArrayType(51,ArrayType(13,ArrayType(8,IntType)))))),param(Id(K),ClassType(Id(d))),param(Id(_z),ClassType(Id(d)))],Block([Continue,Call(Id(l_),Id($4),[])]))]),ClassDecl(Id(g),Id(_K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 282))

    def test_283(self):
        line = '''Class _65_{}Class _C:_7_3u{Constructor (z:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],7],0xC8],27],0X5],0X8],0b101101],040];_,c,X6l:Array [String ,7];_:Array [Float ,040];U:Array [Boolean ,7_4]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_65_),[]),ClassDecl(Id(_C),Id(_7_3u),[MethodDecl(Id(Constructor),Instance,[param(Id(z),ArrayType(32,ArrayType(45,ArrayType(8,ArrayType(5,ArrayType(27,ArrayType(200,ArrayType(7,ArrayType(1,BoolType))))))))),param(Id(_),ArrayType(7,StringType)),param(Id(c),ArrayType(7,StringType)),param(Id(X6l),ArrayType(7,StringType)),param(Id(_),ArrayType(32,FloatType)),param(Id(U),ArrayType(74,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 283))

    def test_284(self):
        line = '''Class _:___M{Constructor (){} }Class z:_1_U{Var z:Array [Array [Boolean ,0b1],64];Destructor (){}d(_:Array [Array [Array [Boolean ,64],06_0],0B110101];k_y1:Array [Int ,043];_,B,_,c0pE:Array [String ,0x4];Ku,X,J_:Q6){Break ;} }Class J{}Class l:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(___M),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(z),Id(_1_U),[AttributeDecl(Instance,VarDecl(Id(z),ArrayType(64,ArrayType(1,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(d),Instance,[param(Id(_),ArrayType(53,ArrayType(48,ArrayType(64,BoolType)))),param(Id(k_y1),ArrayType(35,IntType)),param(Id(_),ArrayType(4,StringType)),param(Id(B),ArrayType(4,StringType)),param(Id(_),ArrayType(4,StringType)),param(Id(c0pE),ArrayType(4,StringType)),param(Id(Ku),ClassType(Id(Q6))),param(Id(X),ClassType(Id(Q6))),param(Id(J_),ClassType(Id(Q6)))],Block([Break]))]),ClassDecl(Id(J),[]),ClassDecl(Id(l),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 284))

    def test_285(self):
        line = '''Class __844:_F{Constructor (a,F_,_,x:Float ;aA,ny:Array [Float ,0x60];_89,_,F_q_0:v7L;a,_D:Array [Array [String ,76],76];wv,_70,_M:Int ){}Val $_:Array [Float ,0B11];Var _0,$3X,q:Boolean ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(__844),Id(_F),[MethodDecl(Id(Constructor),Instance,[param(Id(a),FloatType),param(Id(F_),FloatType),param(Id(_),FloatType),param(Id(x),FloatType),param(Id(aA),ArrayType(96,FloatType)),param(Id(ny),ArrayType(96,FloatType)),param(Id(_89),ClassType(Id(v7L))),param(Id(_),ClassType(Id(v7L))),param(Id(F_q_0),ClassType(Id(v7L))),param(Id(a),ArrayType(76,ArrayType(76,StringType))),param(Id(_D),ArrayType(76,ArrayType(76,StringType))),param(Id(wv),IntType),param(Id(_70),IntType),param(Id(_M),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(_0),BoolType)),AttributeDecl(Static,VarDecl(Id($3X),BoolType)),AttributeDecl(Instance,VarDecl(Id(q),BoolType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 285))

    def test_286(self):
        line = '''Class M:I{}Class O{Var $Et:Array [Float ,016];Constructor (_,_,M,m19_,__6,_:Array [Array [Array [String ,0X7_CA],0b101100],0b101100];_:Array [Array [Array [Int ,8],016],5_97];_,_,z:Array [Array [Array [Array [Int ,0B10100],0x4_5],12],12];_0,_,Dj6,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(M),Id(I),[]),ClassDecl(Id(O),[AttributeDecl(Static,VarDecl(Id($Et),ArrayType(14,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(M),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(m19_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(__6),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(_),ArrayType(597,ArrayType(14,ArrayType(8,IntType)))),param(Id(_),ArrayType(12,ArrayType(12,ArrayType(69,ArrayType(20,IntType))))),param(Id(_),ArrayType(12,ArrayType(12,ArrayType(69,ArrayType(20,IntType))))),param(Id(z),ArrayType(12,ArrayType(12,ArrayType(69,ArrayType(20,IntType))))),param(Id(_0),StringType),param(Id(_),StringType),param(Id(Dj6),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 286))

    def test_287(self):
        line = '''Class J:l{}Class _w5{$_(W6__h,_,_1:Float ;N,__,en__:gv2s43ID_;_7_:_;_:String ;F,_:Rv;D_:Array [Array [Boolean ,8_3_2_4],07];_3Re,_,a_,w24_,T_29_60:Array [String ,0b1];B_:_;L9_:Int ;_f,sUc3:Array [Int ,0X5F];_:Array [Boolean ,0X5F];_1,A,C,_:Array [Array [Boolean ,0B1],0B1]){} }'''
        expect = '''Program([ClassDecl(Id(J),Id(l),[]),ClassDecl(Id(_w5),[MethodDecl(Id($_),Static,[param(Id(W6__h),FloatType),param(Id(_),FloatType),param(Id(_1),FloatType),param(Id(N),ClassType(Id(gv2s43ID_))),param(Id(__),ClassType(Id(gv2s43ID_))),param(Id(en__),ClassType(Id(gv2s43ID_))),param(Id(_7_),ClassType(Id(_))),param(Id(_),StringType),param(Id(F),ClassType(Id(Rv))),param(Id(_),ClassType(Id(Rv))),param(Id(D_),ArrayType(7,ArrayType(8324,BoolType))),param(Id(_3Re),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(a_),ArrayType(1,StringType)),param(Id(w24_),ArrayType(1,StringType)),param(Id(T_29_60),ArrayType(1,StringType)),param(Id(B_),ClassType(Id(_))),param(Id(L9_),IntType),param(Id(_f),ArrayType(95,IntType)),param(Id(sUc3),ArrayType(95,IntType)),param(Id(_),ArrayType(95,BoolType)),param(Id(_1),ArrayType(1,ArrayType(1,BoolType))),param(Id(A),ArrayType(1,ArrayType(1,BoolType))),param(Id(C),ArrayType(1,ArrayType(1,BoolType))),param(Id(_),ArrayType(1,ArrayType(1,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 287))

    def test_288(self):
        line = '''Class e{_G__(_K,_:_;m,_,_1,ca_,N8:JDHku0_;U,i4,s_,_,_:A;__:Float ;ed:_5;_,Y,b,a:f_;_N_:Boolean ;__:Float ;_,_S_H3,C:Float ;_t:qw6;_t_,_,p:SOP){ {Continue ;Val Dz7J,_2_488_z,_,_n:_9;} }}Class v{}'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(_G__),Instance,[param(Id(_K),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(m),ClassType(Id(JDHku0_))),param(Id(_),ClassType(Id(JDHku0_))),param(Id(_1),ClassType(Id(JDHku0_))),param(Id(ca_),ClassType(Id(JDHku0_))),param(Id(N8),ClassType(Id(JDHku0_))),param(Id(U),ClassType(Id(A))),param(Id(i4),ClassType(Id(A))),param(Id(s_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(__),FloatType),param(Id(ed),ClassType(Id(_5))),param(Id(_),ClassType(Id(f_))),param(Id(Y),ClassType(Id(f_))),param(Id(b),ClassType(Id(f_))),param(Id(a),ClassType(Id(f_))),param(Id(_N_),BoolType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_S_H3),FloatType),param(Id(C),FloatType),param(Id(_t),ClassType(Id(qw6))),param(Id(_t_),ClassType(Id(SOP))),param(Id(_),ClassType(Id(SOP))),param(Id(p),ClassType(Id(SOP)))],Block([Block([Continue,ConstDecl(Id(Dz7J),ClassType(Id(_9)),None),ConstDecl(Id(_2_488_z),ClassType(Id(_9)),None),ConstDecl(Id(_),ClassType(Id(_9)),None),ConstDecl(Id(_n),ClassType(Id(_9)),None)])]))]),ClassDecl(Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 288))

    def test_289(self):
        line = '''Class I1:k{Val D,h:Int ;_1(_:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,07_6],0B1],05],070],0x9],0B10],15],2],0B1100010];_M_:_){}_(JEp4,_:Int ){} }Class __3O:i9{}'''
        expect = '''Program([ClassDecl(Id(I1),Id(k),[AttributeDecl(Instance,ConstDecl(Id(D),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(h),IntType,None)),MethodDecl(Id(_1),Instance,[param(Id(_),ArrayType(98,ArrayType(2,ArrayType(15,ArrayType(2,ArrayType(9,ArrayType(56,ArrayType(5,ArrayType(1,ArrayType(62,StringType)))))))))),param(Id(_M_),ClassType(Id(_)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(JEp4),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(__3O),Id(i9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 289))

    def test_290(self):
        line = '''Class _01004_{}Class _K__Hi_{Constructor (R:Array [Array [Array [Boolean ,24],0b1010100],047];px_o:String ;_y7_0,_Eh4,S_,_,_,F:Array [Array [Array [Array [Boolean ,0X64],0XB],0XB],047];_:dD4D;x4_j_i6I:Boolean ;B,_w:W){} }Class g_2:__{}Class _{Val _,$7_6V9,hy:Array [Array [String ,017147],03];}Class xE:eA{}'''
        expect = '''Program([ClassDecl(Id(_01004_),[]),ClassDecl(Id(_K__Hi_),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(39,ArrayType(84,ArrayType(24,BoolType)))),param(Id(px_o),StringType),param(Id(_y7_0),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_Eh4),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(S_),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(F),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_),ClassType(Id(dD4D))),param(Id(x4_j_i6I),BoolType),param(Id(B),ClassType(Id(W))),param(Id(_w),ClassType(Id(W)))],Block([]))]),ClassDecl(Id(g_2),Id(__),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(7783,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($7_6V9),ArrayType(3,ArrayType(7783,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(hy),ArrayType(3,ArrayType(7783,StringType)),None))]),ClassDecl(Id(xE),Id(eA),[])])'''
        self.assertTrue(TestAST.test(line, expect, 290))

    def test_291(self):
        line = '''Class O1:_{}Class _{}Class O57:Z{}Class _7D9_{_(){}Val $_X7I:KM52;Constructor (_F,AGX_,_:Array [Array [Array [String ,48],0B110],0b1];T,_J,EX0,_2_433:Array [Float ,16];W,_,_7_N__R_1J,c:Boolean ){}Val $Y,$4_,_,$1_,r:Float ;}'''
        expect = '''Program([ClassDecl(Id(O1),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(O57),Id(Z),[]),ClassDecl(Id(_7D9_),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_X7I),ClassType(Id(KM52)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_F),ArrayType(1,ArrayType(6,ArrayType(48,StringType)))),param(Id(AGX_),ArrayType(1,ArrayType(6,ArrayType(48,StringType)))),param(Id(_),ArrayType(1,ArrayType(6,ArrayType(48,StringType)))),param(Id(T),ArrayType(16,FloatType)),param(Id(_J),ArrayType(16,FloatType)),param(Id(EX0),ArrayType(16,FloatType)),param(Id(_2_433),ArrayType(16,FloatType)),param(Id(W),BoolType),param(Id(_),BoolType),param(Id(_7_N__R_1J),BoolType),param(Id(c),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Y),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($4_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($1_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(r),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 291))

    def test_292(self):
        line = '''Class _{_A__(K8:Array [Array [Boolean ,014_7_7],0X10];c,h_8,_6s,_,a6,j,_:Int ){U::$_Q.t_9();}Constructor (H,S,_8:Array [Array [Array [Array [Float ,0x4B],1_7],75],0112]){} }Class ___KBb__{Var $4,$NE2_f:Int ;}Class __fA{}Class a{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_A__),Instance,[param(Id(K8),ArrayType(16,ArrayType(831,BoolType))),param(Id(c),IntType),param(Id(h_8),IntType),param(Id(_6s),IntType),param(Id(_),IntType),param(Id(a6),IntType),param(Id(j),IntType),param(Id(_),IntType)],Block([Call(FieldAccess(Id(U),Id($_Q)),Id(t_9),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(H),ArrayType(74,ArrayType(75,ArrayType(17,ArrayType(75,FloatType))))),param(Id(S),ArrayType(74,ArrayType(75,ArrayType(17,ArrayType(75,FloatType))))),param(Id(_8),ArrayType(74,ArrayType(75,ArrayType(17,ArrayType(75,FloatType)))))],Block([]))]),ClassDecl(Id(___KBb__),[AttributeDecl(Static,VarDecl(Id($4),IntType)),AttributeDecl(Static,VarDecl(Id($NE2_f),IntType))]),ClassDecl(Id(__fA),[]),ClassDecl(Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 292))

    def test_293(self):
        line = '''Class _:b{Destructor (){ {} }PmB(){} }Class _{Val $7J33,$_:__;Var L:_;_(_:Boolean ){}_(F__,M4,_5,Qw9:Array [Array [Float ,0B1_1_1_1],02];H1,_:Array [Array [Float ,0B1_0_00],0B10];_:String ;_H5,__t1,__,_H:Array [Array [Array [Array [Int ,76],0x5B],0X2F],05];T:Int ;L,jm:Array [Float ,3_9_7_07]){}Constructor (_:_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(PmB),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($7J33),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(_),BoolType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(F__),ArrayType(2,ArrayType(15,FloatType))),param(Id(M4),ArrayType(2,ArrayType(15,FloatType))),param(Id(_5),ArrayType(2,ArrayType(15,FloatType))),param(Id(Qw9),ArrayType(2,ArrayType(15,FloatType))),param(Id(H1),ArrayType(2,ArrayType(8,FloatType))),param(Id(_),ArrayType(2,ArrayType(8,FloatType))),param(Id(_),StringType),param(Id(_H5),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(__t1),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(__),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(_H),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(T),IntType),param(Id(L),ArrayType(39707,FloatType)),param(Id(jm),ArrayType(39707,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 293))

    def test_294(self):
        line = '''Class D{Val $0:Float ;D(U5,A,_,N5_:e){p::$N3();}Var m3:H79;Val $_:String ;}Class _:_{Constructor (R:Int ;h,W:R;q_,_4:_;L:Boolean ){}Constructor (){}Var _,$_6,B_8:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($0),FloatType,None)),MethodDecl(Id(D),Instance,[param(Id(U5),ClassType(Id(e))),param(Id(A),ClassType(Id(e))),param(Id(_),ClassType(Id(e))),param(Id(N5_),ClassType(Id(e)))],Block([Call(Id(p),Id($N3),[])])),AttributeDecl(Instance,VarDecl(Id(m3),ClassType(Id(H79)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(R),IntType),param(Id(h),ClassType(Id(R))),param(Id(W),ClassType(Id(R))),param(Id(q_),ClassType(Id(_))),param(Id(_4),ClassType(Id(_))),param(Id(L),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($_6),BoolType)),AttributeDecl(Instance,VarDecl(Id(B_8),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 294))

    def test_295(self):
        line = '''Class M_:kTQ_{}Class i_:_w{Constructor (o:Array [Array [String ,0X64],0x6]){} }Class _:_1x{Constructor (_,t:Boolean ;__:Int ){Return ;{} }}Class G4{}Class _H9m:_0_{}Class c_{Destructor (){}Var $x:Float ;}Class L_{}Class __{}Class _0:__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(M_),Id(kTQ_),[]),ClassDecl(Id(i_),Id(_w),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(6,ArrayType(100,StringType)))],Block([]))]),ClassDecl(Id(_),Id(_1x),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(t),BoolType),param(Id(__),IntType)],Block([Return(),Block([])]))]),ClassDecl(Id(G4),[]),ClassDecl(Id(_H9m),Id(_0_),[]),ClassDecl(Id(c_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($x),FloatType))]),ClassDecl(Id(L_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_0),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 295))

    def test_296(self):
        line = '''Class y:J{Var $8_:String ;}Class _2_E{$___(_3,_MR:Array [String ,0X3B];_:Float ){} }Class _:_4{}Class _:_{Constructor (){} }Class _I:qZ{}Class _{Destructor (){}Val $x:i_;}'''
        expect = '''Program([ClassDecl(Id(y),Id(J),[AttributeDecl(Static,VarDecl(Id($8_),StringType))]),ClassDecl(Id(_2_E),[MethodDecl(Id($___),Static,[param(Id(_3),ArrayType(59,StringType)),param(Id(_MR),ArrayType(59,StringType)),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),Id(_4),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_I),Id(qZ),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($x),ClassType(Id(i_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 296))

    def test_297(self):
        line = '''Class A__z8:_{r0(_,Bk,_n:Array [Boolean ,02];dK:Array [Array [Float ,0X37],0x47]){Return ;Val _61j54h,_4,_N:String ;Return ;} }Class B3{}Class T_V_3L93b__:L28{}Class E4__5G{}Class o5533{}'''
        expect = '''Program([ClassDecl(Id(A__z8),Id(_),[MethodDecl(Id(r0),Instance,[param(Id(_),ArrayType(2,BoolType)),param(Id(Bk),ArrayType(2,BoolType)),param(Id(_n),ArrayType(2,BoolType)),param(Id(dK),ArrayType(71,ArrayType(55,FloatType)))],Block([Return(),ConstDecl(Id(_61j54h),StringType,None),ConstDecl(Id(_4),StringType,None),ConstDecl(Id(_N),StringType,None),Return()]))]),ClassDecl(Id(B3),[]),ClassDecl(Id(T_V_3L93b__),Id(L28),[]),ClassDecl(Id(E4__5G),[]),ClassDecl(Id(o5533),[])])'''
        self.assertTrue(TestAST.test(line, expect, 297))

    def test_298(self):
        line = '''Class s{Constructor (E_:Array [Array [Array [Array [Array [Array [String ,45],043],0X34],043],0B1],0B1];P:String ;_2___:t;_6:_5){} }Class _{Var $C,$b,$_K_,U:Float ;}Class A{Val V_Q:Int ;}'''
        expect = '''Program([ClassDecl(Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(E_),ArrayType(1,ArrayType(1,ArrayType(35,ArrayType(52,ArrayType(35,ArrayType(45,StringType))))))),param(Id(P),StringType),param(Id(_2___),ClassType(Id(t))),param(Id(_6),ClassType(Id(_5)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($C),FloatType)),AttributeDecl(Static,VarDecl(Id($b),FloatType)),AttributeDecl(Static,VarDecl(Id($_K_),FloatType)),AttributeDecl(Instance,VarDecl(Id(U),FloatType))]),ClassDecl(Id(A),[AttributeDecl(Instance,ConstDecl(Id(V_Q),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 298))

    def test_299(self):
        line = '''Class A:c{Val z_P:Float ;Constructor (p4S,__:Int ;_,_,d_:X2xZ2;_30__,__:Array [Array [Int ,0X4AE],0B11111]){}Destructor (){}Destructor (){}Destructor (){} }Class __{}Class h51{}Class N{}'''
        expect = '''Program([ClassDecl(Id(A),Id(c),[AttributeDecl(Instance,ConstDecl(Id(z_P),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(p4S),IntType),param(Id(__),IntType),param(Id(_),ClassType(Id(X2xZ2))),param(Id(_),ClassType(Id(X2xZ2))),param(Id(d_),ClassType(Id(X2xZ2))),param(Id(_30__),ArrayType(31,ArrayType(1198,IntType))),param(Id(__),ArrayType(31,ArrayType(1198,IntType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(h51),[]),ClassDecl(Id(N),[])])'''
        self.assertTrue(TestAST.test(line, expect, 299))

    def test_300(self):
        line = '''Class _K:M{}Class i5{Destructor (){} }Class V:t{Destructor (){Var _:Array [Boolean ,0xF_F_8];}Destructor (){} }Class u_{Constructor (_:__0){} }Class __:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_K),Id(M),[]),ClassDecl(Id(i5),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V),Id(t),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),ArrayType(4088,BoolType))])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(u_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__0)))],Block([]))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 300))

    def test_301(self):
        line = '''Class k{}Class zy_w:_13{Var Q_91ee_,N_,__:Array [Array [Array [String ,0111],0111],0x2];Val ___o,$8:Array [Array [Int ,82],82];$r(){}Destructor (){} }Class _:ri{Var $_:__3;Var $uY:Int ;}'''
        expect = '''Program([ClassDecl(Id(k),[]),ClassDecl(Id(zy_w),Id(_13),[AttributeDecl(Instance,VarDecl(Id(Q_91ee_),ArrayType(2,ArrayType(73,ArrayType(73,StringType))))),AttributeDecl(Instance,VarDecl(Id(N_),ArrayType(2,ArrayType(73,ArrayType(73,StringType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(2,ArrayType(73,ArrayType(73,StringType))))),AttributeDecl(Instance,ConstDecl(Id(___o),ArrayType(82,ArrayType(82,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(82,ArrayType(82,IntType)),None)),MethodDecl(Id($r),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(ri),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($uY),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 301))

    def test_302(self):
        line = '''Class CYX{Val g,$D4z__,$_,F_,p,$_:__;Destructor (){} }Class _:s{Destructor (){Var mH:Array [Array [Array [Boolean ,0B1],42],0b110010];Break ;nZ__N::$5f()._.R.a8();} }Class xG{}'''
        expect = '''Program([ClassDecl(Id(CYX),[AttributeDecl(Instance,ConstDecl(Id(g),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($D4z__),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(F_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(p),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(s),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(mH),ArrayType(50,ArrayType(42,ArrayType(1,BoolType)))),Break,Call(FieldAccess(FieldAccess(CallExpr(Id(nZ__N),Id($5f),[]),Id(_)),Id(R)),Id(a8),[])]))]),ClassDecl(Id(xG),[])])'''
        self.assertTrue(TestAST.test(line, expect, 302))

    def test_303(self):
        line = '''Class r:__P{Constructor (){ {} }}Class _{Constructor (I:Array [Array [Array [String ,016],3],016];_Y:p){}Destructor (){}Var $P,Z:Float ;}Class k08:_l{Val q,l,$23,X_,$q6D_,_,U0o:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(r),Id(__P),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(I),ArrayType(14,ArrayType(3,ArrayType(14,StringType)))),param(Id(_Y),ClassType(Id(p)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($P),FloatType)),AttributeDecl(Instance,VarDecl(Id(Z),FloatType))]),ClassDecl(Id(k08),Id(_l),[AttributeDecl(Instance,ConstDecl(Id(q),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(l),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($23),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(X_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($q6D_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(U0o),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 303))

    def test_304(self):
        line = '''Class _:_4{Var $2,M_:Int ;Destructor (){Var H4i,QY,_:_i9__;}$4(_IS:Int ;el:Boolean ;_:c;n:Int ;_,S:Boolean ;SU,_,__9:Float ;V_x,_:Boolean ;__:_;h,_:_;b:String ;___6,_O,P1:Y_C){}Val $_:String ;}Class Q:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_4),[AttributeDecl(Static,VarDecl(Id($2),IntType)),AttributeDecl(Instance,VarDecl(Id(M_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(H4i),ClassType(Id(_i9__)),NullLiteral()),VarDecl(Id(QY),ClassType(Id(_i9__)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_i9__)),NullLiteral())])),MethodDecl(Id($4),Static,[param(Id(_IS),IntType),param(Id(el),BoolType),param(Id(_),ClassType(Id(c))),param(Id(n),IntType),param(Id(_),BoolType),param(Id(S),BoolType),param(Id(SU),FloatType),param(Id(_),FloatType),param(Id(__9),FloatType),param(Id(V_x),BoolType),param(Id(_),BoolType),param(Id(__),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),StringType),param(Id(___6),ClassType(Id(Y_C))),param(Id(_O),ClassType(Id(Y_C))),param(Id(P1),ClassType(Id(Y_C)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(Q),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 304))

    def test_305(self):
        line = '''Class C{Val _:Int ;Var $_L,j,_:Boolean ;$_(A_,_:Boolean ;_:Array [Array [String ,4_2],0b1];D2u,_,p7:Array [Array [Array [Array [Int ,0X8_4],0b1],0X39],55];I:Boolean ){}$_(_:Array [Float ,07];J,B_vB_,L5oCh,a:Array [Array [String ,027],0x15];c7iP_3,e:Int ){} }Class v_:_{}'''
        expect = '''Program([ClassDecl(Id(C),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,VarDecl(Id($_L),BoolType)),AttributeDecl(Instance,VarDecl(Id(j),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id($_),Static,[param(Id(A_),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(1,ArrayType(42,StringType))),param(Id(D2u),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(132,IntType))))),param(Id(_),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(132,IntType))))),param(Id(p7),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(132,IntType))))),param(Id(I),BoolType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(7,FloatType)),param(Id(J),ArrayType(21,ArrayType(23,StringType))),param(Id(B_vB_),ArrayType(21,ArrayType(23,StringType))),param(Id(L5oCh),ArrayType(21,ArrayType(23,StringType))),param(Id(a),ArrayType(21,ArrayType(23,StringType))),param(Id(c7iP_3),IntType),param(Id(e),IntType)],Block([]))]),ClassDecl(Id(v_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 305))

    def test_306(self):
        line = '''Class P:W{}Class nb{Var $6b_0_:Array [Boolean ,86];Constructor (L0:String ;_F_,H6,_,z:Array [Array [Array [Boolean ,03],0b1_0_0],0B111];_,B:_;__F_fCI81t:J4){Break ;} }Class s1_8e{}'''
        expect = '''Program([ClassDecl(Id(P),Id(W),[]),ClassDecl(Id(nb),[AttributeDecl(Static,VarDecl(Id($6b_0_),ArrayType(86,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(L0),StringType),param(Id(_F_),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(H6),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(_),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(z),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(_),ClassType(Id(_))),param(Id(B),ClassType(Id(_))),param(Id(__F_fCI81t),ClassType(Id(J4)))],Block([Break]))]),ClassDecl(Id(s1_8e),[])])'''
        self.assertTrue(TestAST.test(line, expect, 306))

    def test_307(self):
        line = '''Class ii__yRs{Constructor (){} }Class b{Val W,$_,_6q:Boolean ;Var n_,_:String ;Constructor (){Return ;}Val $Z:Array [Boolean ,0XF];_(){}Var $2M,$7z2pQR__0_:Array [Array [Array [Boolean ,651_24],0X5F],0X1_FA];}'''
        expect = '''Program([ClassDecl(Id(ii__yRs),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(b),[AttributeDecl(Instance,ConstDecl(Id(W),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_6q),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(n_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($Z),ArrayType(15,BoolType),None)),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($2M),ArrayType(506,ArrayType(95,ArrayType(65124,BoolType))))),AttributeDecl(Static,VarDecl(Id($7z2pQR__0_),ArrayType(506,ArrayType(95,ArrayType(65124,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 307))

    def test_308(self):
        line = '''Class f_O:Md{}Class _:_{}Class _J:e{$w(m,_,W_54P,_,S7_,i:Array [Array [Array [Array [String ,0x3FA],72],0x6],0115];a_b:Array [Boolean ,0b1];Wr,p,__:Array [Array [Int ,0115],0x6];_:Array [String ,72];V,_:T;_,_:Array [Array [Array [Int ,0XE],0115],07_4];v,_Z_:Array [Float ,0115];_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(f_O),Id(Md),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_J),Id(e),[MethodDecl(Id($w),Static,[param(Id(m),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(_),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(W_54P),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(_),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(S7_),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(i),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(a_b),ArrayType(1,BoolType)),param(Id(Wr),ArrayType(6,ArrayType(77,IntType))),param(Id(p),ArrayType(6,ArrayType(77,IntType))),param(Id(__),ArrayType(6,ArrayType(77,IntType))),param(Id(_),ArrayType(72,StringType)),param(Id(V),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(_),ArrayType(60,ArrayType(77,ArrayType(14,IntType)))),param(Id(_),ArrayType(60,ArrayType(77,ArrayType(14,IntType)))),param(Id(v),ArrayType(77,FloatType)),param(Id(_Z_),ArrayType(77,FloatType)),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 308))

    def test_309(self):
        line = '''Class _3_1_t{Constructor (O_:Boolean ){Var z4,_,y:Array [String ,55];}Constructor (mu,S:d___ua9vA;t,_:Boolean ;FZ_,_,R3,_S,_,V_c__,_,I,_,T:Boolean ;_,p5_a_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_3_1_t),[MethodDecl(Id(Constructor),Instance,[param(Id(O_),BoolType)],Block([VarDecl(Id(z4),ArrayType(55,StringType)),VarDecl(Id(_),ArrayType(55,StringType)),VarDecl(Id(y),ArrayType(55,StringType))])),MethodDecl(Id(Constructor),Instance,[param(Id(mu),ClassType(Id(d___ua9vA))),param(Id(S),ClassType(Id(d___ua9vA))),param(Id(t),BoolType),param(Id(_),BoolType),param(Id(FZ_),BoolType),param(Id(_),BoolType),param(Id(R3),BoolType),param(Id(_S),BoolType),param(Id(_),BoolType),param(Id(V_c__),BoolType),param(Id(_),BoolType),param(Id(I),BoolType),param(Id(_),BoolType),param(Id(T),BoolType),param(Id(_),IntType),param(Id(p5_a_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 309))

    def test_310(self):
        line = '''Class _b{Val $Aur_,$_3_,$t,_,e,$1,f_:c14_m;}Class s3{$_(){}Var $6,$N_,$_:Array [Array [Array [String ,0XD],0x26],0B1000011];}Class _:H{a(X,_N8,_4k7:Array [Array [Boolean ,06],9];__u0m_,_:FF_;_,_,_802L_3_:String ){}Val _C,$61:Boolean ;}Class l:C{}'''
        expect = '''Program([ClassDecl(Id(_b),[AttributeDecl(Static,ConstDecl(Id($Aur_),ClassType(Id(c14_m)),None)),AttributeDecl(Static,ConstDecl(Id($_3_),ClassType(Id(c14_m)),None)),AttributeDecl(Static,ConstDecl(Id($t),ClassType(Id(c14_m)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(c14_m)),None)),AttributeDecl(Instance,ConstDecl(Id(e),ClassType(Id(c14_m)),None)),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(c14_m)),None)),AttributeDecl(Instance,ConstDecl(Id(f_),ClassType(Id(c14_m)),None))]),ClassDecl(Id(s3),[MethodDecl(Id($_),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($6),ArrayType(67,ArrayType(38,ArrayType(13,StringType))))),AttributeDecl(Static,VarDecl(Id($N_),ArrayType(67,ArrayType(38,ArrayType(13,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(67,ArrayType(38,ArrayType(13,StringType)))))]),ClassDecl(Id(_),Id(H),[MethodDecl(Id(a),Instance,[param(Id(X),ArrayType(9,ArrayType(6,BoolType))),param(Id(_N8),ArrayType(9,ArrayType(6,BoolType))),param(Id(_4k7),ArrayType(9,ArrayType(6,BoolType))),param(Id(__u0m_),ClassType(Id(FF_))),param(Id(_),ClassType(Id(FF_))),param(Id(_),StringType),param(Id(_),StringType),param(Id(_802L_3_),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_C),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($61),BoolType,None))]),ClassDecl(Id(l),Id(C),[])])'''
        self.assertTrue(TestAST.test(line, expect, 310))

    def test_311(self):
        line = '''Class B_{Destructor (){}Constructor (i9_:String ;r0_:Array [Boolean ,0b11100];_,__V:y;_3KMCN:Array [Array [Array [Array [Array [Int ,0B1000],0X19],0XB],21],0B1000];_S_,_,_C:Array [Array [Int ,0x31],037];q:Array [Array [Int ,02],037];p,_:Array [Array [Array [Boolean ,0b1_1],0x31],0B1_00_1_1]){} }Class s_:b{}'''
        expect = '''Program([ClassDecl(Id(B_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i9_),StringType),param(Id(r0_),ArrayType(28,BoolType)),param(Id(_),ClassType(Id(y))),param(Id(__V),ClassType(Id(y))),param(Id(_3KMCN),ArrayType(8,ArrayType(21,ArrayType(11,ArrayType(25,ArrayType(8,IntType)))))),param(Id(_S_),ArrayType(31,ArrayType(49,IntType))),param(Id(_),ArrayType(31,ArrayType(49,IntType))),param(Id(_C),ArrayType(31,ArrayType(49,IntType))),param(Id(q),ArrayType(31,ArrayType(2,IntType))),param(Id(p),ArrayType(19,ArrayType(49,ArrayType(3,BoolType)))),param(Id(_),ArrayType(19,ArrayType(49,ArrayType(3,BoolType))))],Block([]))]),ClassDecl(Id(s_),Id(b),[])])'''
        self.assertTrue(TestAST.test(line, expect, 311))

    def test_312(self):
        line = '''Class _2R{Destructor (){}A(_:_f;_:String ){}Val $Nk:__;}Class _:_{Val ___,$E:__;Val __,$689,$9_4:V;}Class A0{Destructor (){ {} }Constructor (){}$_6L6(___T,x:Array [Array [Array [String ,0B1000100],0100],0b1]){}Var _2_54_I1_,s,_,py:_P;}Class c:W{}'''
        expect = '''Program([ClassDecl(Id(_2R),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(A),Instance,[param(Id(_),ClassType(Id(_f))),param(Id(_),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Nk),ClassType(Id(__)),None))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($E),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(V)),None)),AttributeDecl(Static,ConstDecl(Id($689),ClassType(Id(V)),None)),AttributeDecl(Static,ConstDecl(Id($9_4),ClassType(Id(V)),None))]),ClassDecl(Id(A0),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_6L6),Static,[param(Id(___T),ArrayType(1,ArrayType(64,ArrayType(68,StringType)))),param(Id(x),ArrayType(1,ArrayType(64,ArrayType(68,StringType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_2_54_I1_),ClassType(Id(_P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(s),ClassType(Id(_P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(py),ClassType(Id(_P)),NullLiteral()))]),ClassDecl(Id(c),Id(W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 312))

    def test_313(self):
        line = '''Class vf:_{Val $s_s:Array [Array [Float ,0B1],02];Constructor (u:Array [Float ,1];O,_:Ch;r9:Array [Array [String ,0x50],3];JW:Array [Array [Int ,0x3],0b111000]){}$Q(_:_7){} }Class _{Var _,$B,__:J22OZ;}'''
        expect = '''Program([ClassDecl(Id(vf),Id(_),[AttributeDecl(Static,ConstDecl(Id($s_s),ArrayType(2,ArrayType(1,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(1,FloatType)),param(Id(O),ClassType(Id(Ch))),param(Id(_),ClassType(Id(Ch))),param(Id(r9),ArrayType(3,ArrayType(80,StringType))),param(Id(JW),ArrayType(56,ArrayType(3,IntType)))],Block([])),MethodDecl(Id($Q),Static,[param(Id(_),ClassType(Id(_7)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(J22OZ)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($B),ClassType(Id(J22OZ)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(J22OZ)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 313))

    def test_314(self):
        line = '''Class i{Constructor (_,v:Array [Array [Array [Int ,0X5_7_49],0117],0X43];_71,V_,_:_;_,__,u,_,_or,k,_B_,ri,_,__:Array [Array [Array [Float ,0x52],0X1_1],07_3]){}Val H,_,e__8S,$_Oy_,$___:K_;}'''
        expect = '''Program([ClassDecl(Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(67,ArrayType(79,ArrayType(22345,IntType)))),param(Id(v),ArrayType(67,ArrayType(79,ArrayType(22345,IntType)))),param(Id(_71),ClassType(Id(_))),param(Id(V_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(__),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(u),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_or),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(k),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_B_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(ri),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(__),ArrayType(59,ArrayType(17,ArrayType(82,FloatType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(H),ClassType(Id(K_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(K_)),None)),AttributeDecl(Instance,ConstDecl(Id(e__8S),ClassType(Id(K_)),None)),AttributeDecl(Static,ConstDecl(Id($_Oy_),ClassType(Id(K_)),None)),AttributeDecl(Static,ConstDecl(Id($___),ClassType(Id(K_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 314))

    def test_315(self):
        line = '''Class _E:r{Val R,_X:Array [Array [Boolean ,020_6],035];Var s7,$_K:String ;$9_(M4:Array [Array [Array [Array [Array [Array [Float ,0B1],0xF],035],06623_63],6],0x9];_,_,O:Array [Boolean ,035];_:String ;b:Float ;N:Array [Int ,0X16];_,_,__W_4:Array [Int ,04_7]){} }'''
        expect = '''Program([ClassDecl(Id(_E),Id(r),[AttributeDecl(Instance,ConstDecl(Id(R),ArrayType(29,ArrayType(134,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_X),ArrayType(29,ArrayType(134,BoolType)),None)),AttributeDecl(Instance,VarDecl(Id(s7),StringType)),AttributeDecl(Static,VarDecl(Id($_K),StringType)),MethodDecl(Id($9_),Static,[param(Id(M4),ArrayType(9,ArrayType(6,ArrayType(222451,ArrayType(29,ArrayType(15,ArrayType(1,FloatType))))))),param(Id(_),ArrayType(29,BoolType)),param(Id(_),ArrayType(29,BoolType)),param(Id(O),ArrayType(29,BoolType)),param(Id(_),StringType),param(Id(b),FloatType),param(Id(N),ArrayType(22,IntType)),param(Id(_),ArrayType(39,IntType)),param(Id(_),ArrayType(39,IntType)),param(Id(__W_4),ArrayType(39,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 315))

    def test_316(self):
        line = '''Class _{$W5(_:Float ;_,_,_QK,_:_;_:Int ;f_,_o8u3,Vh7y:Int ;jb,k_be,z,k6:Float ;b0_:Array [Array [Int ,3_2],71];b94_:String ;L6:String ;__0:Int ;_:Int ){Return ;}Val _,$O:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($W5),Static,[param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_QK),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),IntType),param(Id(f_),IntType),param(Id(_o8u3),IntType),param(Id(Vh7y),IntType),param(Id(jb),FloatType),param(Id(k_be),FloatType),param(Id(z),FloatType),param(Id(k6),FloatType),param(Id(b0_),ArrayType(71,ArrayType(32,IntType))),param(Id(b94_),StringType),param(Id(L6),StringType),param(Id(__0),IntType),param(Id(_),IntType)],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($O),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 316))

    def test_317(self):
        line = '''Class M:_l_{}Class Wo43g_{$_(q,CP,E:e4){} }Class _f5x:r{Constructor (iI1b_l__:Ri_;o77,O,j,_5:String ;_:Float ;y,u1_r:Int ;___:Array [Array [String ,0B1],07]){}Var $6_P,oG:e;}'''
        expect = '''Program([ClassDecl(Id(M),Id(_l_),[]),ClassDecl(Id(Wo43g_),[MethodDecl(Id($_),Static,[param(Id(q),ClassType(Id(e4))),param(Id(CP),ClassType(Id(e4))),param(Id(E),ClassType(Id(e4)))],Block([]))]),ClassDecl(Id(_f5x),Id(r),[MethodDecl(Id(Constructor),Instance,[param(Id(iI1b_l__),ClassType(Id(Ri_))),param(Id(o77),StringType),param(Id(O),StringType),param(Id(j),StringType),param(Id(_5),StringType),param(Id(_),FloatType),param(Id(y),IntType),param(Id(u1_r),IntType),param(Id(___),ArrayType(7,ArrayType(1,StringType)))],Block([])),AttributeDecl(Static,VarDecl(Id($6_P),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(oG),ClassType(Id(e)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 317))

    def test_318(self):
        line = '''Class _2{}Class n__3:r{Destructor (){}Var $Bp6_W58,$Hb,$s,$683,$Y_:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1],052],06],79],057],0b1_0101],79],79];}'''
        expect = '''Program([ClassDecl(Id(_2),[]),ClassDecl(Id(n__3),Id(r),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($Bp6_W58),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($Hb),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($s),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($683),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($Y_),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 318))

    def test_319(self):
        line = '''Class st{}Class w{}Class _34:I{}Class y:_{}Class _{}Class _{$S383(i,__4_M:Array [Array [Array [Float ,0B1_1],0X7],0xF];Wu35__8GdJ:P9;__,c,B,_8_:Boolean ;o,X:g;_1,I_:Boolean ;c,b,__:Int ;_t,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(st),[]),ClassDecl(Id(w),[]),ClassDecl(Id(_34),Id(I),[]),ClassDecl(Id(y),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id($S383),Static,[param(Id(i),ArrayType(15,ArrayType(7,ArrayType(3,FloatType)))),param(Id(__4_M),ArrayType(15,ArrayType(7,ArrayType(3,FloatType)))),param(Id(Wu35__8GdJ),ClassType(Id(P9))),param(Id(__),BoolType),param(Id(c),BoolType),param(Id(B),BoolType),param(Id(_8_),BoolType),param(Id(o),ClassType(Id(g))),param(Id(X),ClassType(Id(g))),param(Id(_1),BoolType),param(Id(I_),BoolType),param(Id(c),IntType),param(Id(b),IntType),param(Id(__),IntType),param(Id(_t),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 319))

    def test_320(self):
        line = '''Class _Q5{Val $L:Boolean ;Constructor (I_,_W,q84:Float ){} }Class s{_(tc18T_,z,w,_,_,_:Array [String ,0b1];__,U:Array [Array [Array [Array [Int ,1_6],7],0b110],0xD]){} }'''
        expect = '''Program([ClassDecl(Id(_Q5),[AttributeDecl(Static,ConstDecl(Id($L),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(I_),FloatType),param(Id(_W),FloatType),param(Id(q84),FloatType)],Block([]))]),ClassDecl(Id(s),[MethodDecl(Id(_),Instance,[param(Id(tc18T_),ArrayType(1,StringType)),param(Id(z),ArrayType(1,StringType)),param(Id(w),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(__),ArrayType(13,ArrayType(6,ArrayType(7,ArrayType(16,IntType))))),param(Id(U),ArrayType(13,ArrayType(6,ArrayType(7,ArrayType(16,IntType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 320))

    def test_321(self):
        line = '''Class _{Constructor (k:_;cl,N,b,_a3,cS8:Array [Int ,0X56]){Continue ;} }Class t:J{}Class ___{Val $_:Array [Array [Array [Array [Array [String ,0b10111],0B110],0b1],2],0X4_E];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(_))),param(Id(cl),ArrayType(86,IntType)),param(Id(N),ArrayType(86,IntType)),param(Id(b),ArrayType(86,IntType)),param(Id(_a3),ArrayType(86,IntType)),param(Id(cS8),ArrayType(86,IntType))],Block([Continue]))]),ClassDecl(Id(t),Id(J),[]),ClassDecl(Id(___),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(78,ArrayType(2,ArrayType(1,ArrayType(6,ArrayType(23,StringType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 321))

    def test_322(self):
        line = '''Class _:_{}Class _:i_{Constructor (_:E8;_:Boolean ){}Val $p:Array [Array [Array [Boolean ,4396_650_7_5],0b1_0],0b101011];$___g(T__:Array [Array [Boolean ,0B1000110],06];_,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(i_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(E8))),param(Id(_),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($p),ArrayType(43,ArrayType(2,ArrayType(439665075,BoolType))),None)),MethodDecl(Id($___g),Static,[param(Id(T__),ArrayType(6,ArrayType(70,BoolType))),param(Id(_),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 322))

    def test_323(self):
        line = '''Class Z_8{}Class _:_RG{Destructor (){}J(_:Array [Int ,79]){} }Class _:_{Var _Q_:Float ;Constructor (){ {} }}Class B:_m11{$9J7E648R(_PE1e,__:Array [Array [Array [Array [Boolean ,0X5A],79],0B100_0],79];__56_297m,_,s,Y,_:Array [Array [Float ,0105],605]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(Z_8),[]),ClassDecl(Id(_),Id(_RG),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(J),Instance,[param(Id(_),ArrayType(79,IntType))],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_Q_),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(B),Id(_m11),[MethodDecl(Id($9J7E648R),Static,[param(Id(_PE1e),ArrayType(79,ArrayType(8,ArrayType(79,ArrayType(90,BoolType))))),param(Id(__),ArrayType(79,ArrayType(8,ArrayType(79,ArrayType(90,BoolType))))),param(Id(__56_297m),ArrayType(605,ArrayType(69,FloatType))),param(Id(_),ArrayType(605,ArrayType(69,FloatType))),param(Id(s),ArrayType(605,ArrayType(69,FloatType))),param(Id(Y),ArrayType(605,ArrayType(69,FloatType))),param(Id(_),ArrayType(605,ArrayType(69,FloatType)))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 323))

    def test_324(self):
        line = '''Class eG4_:_{j_(z,_:Boolean ;P:Array [Array [Array [Array [Array [Float ,31],0x7_2],0xDE6_2],0x1],0B1]){} }Class w:_{Var $f:do_;}Class U5:_{Destructor (){}_(Q8_:M){} }'''
        expect = '''Program([ClassDecl(Id(eG4_),Id(_),[MethodDecl(Id(j_),Instance,[param(Id(z),BoolType),param(Id(_),BoolType),param(Id(P),ArrayType(1,ArrayType(1,ArrayType(56930,ArrayType(114,ArrayType(31,FloatType))))))],Block([]))]),ClassDecl(Id(w),Id(_),[AttributeDecl(Static,VarDecl(Id($f),ClassType(Id(do_)),NullLiteral()))]),ClassDecl(Id(U5),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(Q8_),ClassType(Id(M)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 324))

    def test_325(self):
        line = '''Class n6{Val $_,O_:Array [Array [String ,69],0B11];}Class _13{$0_(){Continue ;Continue ;}Constructor (_,p_:Array [Array [Array [Int ,06],04_5],0X22];ASS:Int ;y,_,K:___){ {} }Val pZ,_:I6;}'''
        expect = '''Program([ClassDecl(Id(n6),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(69,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(O_),ArrayType(3,ArrayType(69,StringType)),None))]),ClassDecl(Id(_13),[MethodDecl(Id($0_),Static,[],Block([Continue,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(34,ArrayType(37,ArrayType(6,IntType)))),param(Id(p_),ArrayType(34,ArrayType(37,ArrayType(6,IntType)))),param(Id(ASS),IntType),param(Id(y),ClassType(Id(___))),param(Id(_),ClassType(Id(___))),param(Id(K),ClassType(Id(___)))],Block([Block([])])),AttributeDecl(Instance,ConstDecl(Id(pZ),ClassType(Id(I6)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(I6)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 325))

    def test_326(self):
        line = '''Class _:_3{}Class _{$0w4_(){Var P:Boolean ;} }Class h0{}Class s:I7_{Constructor (O2:o;_:Array [Array [Float ,0X1],0B1_0];__9:Boolean ;_sb,n_:Array [Array [Array [Array [Array [Boolean ,07],075],92],0B100010],0x36];_0:Float ;S7_4P,U:Array [Array [Float ,0B100010],0B100010]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(_3),[]),ClassDecl(Id(_),[MethodDecl(Id($0w4_),Static,[],Block([VarDecl(Id(P),BoolType)]))]),ClassDecl(Id(h0),[]),ClassDecl(Id(s),Id(I7_),[MethodDecl(Id(Constructor),Instance,[param(Id(O2),ClassType(Id(o))),param(Id(_),ArrayType(2,ArrayType(1,FloatType))),param(Id(__9),BoolType),param(Id(_sb),ArrayType(54,ArrayType(34,ArrayType(92,ArrayType(61,ArrayType(7,BoolType)))))),param(Id(n_),ArrayType(54,ArrayType(34,ArrayType(92,ArrayType(61,ArrayType(7,BoolType)))))),param(Id(_0),FloatType),param(Id(S7_4P),ArrayType(34,ArrayType(34,FloatType))),param(Id(U),ArrayType(34,ArrayType(34,FloatType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 326))

    def test_327(self):
        line = '''Class _Ka_55:_{Var $VJ1,$q8,_:Array [Array [String ,0X76_2],8];}Class C{Destructor (){}Val e:Array [Array [Array [Float ,0x1_A_B],82],066];Destructor (){}Val $d,_:Array [Float ,6];Destructor (){}Destructor (){} }Class _:_M__{}'''
        expect = '''Program([ClassDecl(Id(_Ka_55),Id(_),[AttributeDecl(Static,VarDecl(Id($VJ1),ArrayType(8,ArrayType(1890,StringType)))),AttributeDecl(Static,VarDecl(Id($q8),ArrayType(8,ArrayType(1890,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(8,ArrayType(1890,StringType))))]),ClassDecl(Id(C),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(54,ArrayType(82,ArrayType(427,FloatType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($d),ArrayType(6,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,FloatType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_M__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 327))

    def test_328(self):
        line = '''Class _{}Class _{Var Y,_,_,$_10_AX,X_,_,$8:Array [String ,02_122];}Class Jx:F_{$_(_o1,_,O_9,M__5_W:String ){}Var _:Array [Float ,0B1001101];$_(G6_:Array [String ,0x1_4E];o7,F:Array [Boolean ,0x5F]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(1106,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1106,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1106,StringType))),AttributeDecl(Static,VarDecl(Id($_10_AX),ArrayType(1106,StringType))),AttributeDecl(Instance,VarDecl(Id(X_),ArrayType(1106,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1106,StringType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(1106,StringType)))]),ClassDecl(Id(Jx),Id(F_),[MethodDecl(Id($_),Static,[param(Id(_o1),StringType),param(Id(_),StringType),param(Id(O_9),StringType),param(Id(M__5_W),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(77,FloatType))),MethodDecl(Id($_),Static,[param(Id(G6_),ArrayType(334,StringType)),param(Id(o7),ArrayType(95,BoolType)),param(Id(F),ArrayType(95,BoolType))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 328))

    def test_329(self):
        line = '''Class _i{Var _,_:Boolean ;}Class u_:_{$p5(W,K_,__:Array [Array [Array [Array [Boolean ,0X1_404],0xB_76],0x54],03_27];GP,w5_Y,W:Array [Int ,85];L,C:Array [Int ,7];U8:Array [Float ,0x4E];_1:Float ;_:_;_5__:Array [String ,0x54]){} }'''
        expect = '''Program([ClassDecl(Id(_i),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType))]),ClassDecl(Id(u_),Id(_),[MethodDecl(Id($p5),Static,[param(Id(W),ArrayType(215,ArrayType(84,ArrayType(2934,ArrayType(5124,BoolType))))),param(Id(K_),ArrayType(215,ArrayType(84,ArrayType(2934,ArrayType(5124,BoolType))))),param(Id(__),ArrayType(215,ArrayType(84,ArrayType(2934,ArrayType(5124,BoolType))))),param(Id(GP),ArrayType(85,IntType)),param(Id(w5_Y),ArrayType(85,IntType)),param(Id(W),ArrayType(85,IntType)),param(Id(L),ArrayType(7,IntType)),param(Id(C),ArrayType(7,IntType)),param(Id(U8),ArrayType(78,FloatType)),param(Id(_1),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_5__),ArrayType(84,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 329))

    def test_330(self):
        line = '''Class w:n{}Class _:IV{Constructor (){}i(_5E,_8_,V,_1O,l7:U5GQ;_:String ;_K:Array [Array [Array [Array [Array [Array [Float ,05],07_3],0x24],0xA_2BB],0x45_5],3]){} }Class t:___{}'''
        expect = '''Program([ClassDecl(Id(w),Id(n),[]),ClassDecl(Id(_),Id(IV),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(i),Instance,[param(Id(_5E),ClassType(Id(U5GQ))),param(Id(_8_),ClassType(Id(U5GQ))),param(Id(V),ClassType(Id(U5GQ))),param(Id(_1O),ClassType(Id(U5GQ))),param(Id(l7),ClassType(Id(U5GQ))),param(Id(_),StringType),param(Id(_K),ArrayType(3,ArrayType(1109,ArrayType(41659,ArrayType(36,ArrayType(59,ArrayType(5,FloatType)))))))],Block([]))]),ClassDecl(Id(t),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 330))

    def test_331(self):
        line = '''Class _6C:_1{$e(Z6,Qc1__,__,_6,__a,U,j:Array [Array [Array [Array [Array [Boolean ,0x4],60_6_5],03],0XB78],0XA9];O,_:Boolean ;N,f_,Q:Array [String ,417]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_6C),Id(_1),[MethodDecl(Id($e),Static,[param(Id(Z6),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(Qc1__),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(__),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(_6),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(__a),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(U),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(j),ArrayType(169,ArrayType(2936,ArrayType(3,ArrayType(6065,ArrayType(4,BoolType)))))),param(Id(O),BoolType),param(Id(_),BoolType),param(Id(N),ArrayType(417,StringType)),param(Id(f_),ArrayType(417,StringType)),param(Id(Q),ArrayType(417,StringType))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 331))

    def test_332(self):
        line = '''Class Y:R{}Class _9UV:___{O(f_a,F_1__38,K,_9_,_:l_z;f_:_F){} }Class _:Lr{}Class q:p8{}Class _4{Val $2_,l_,P,_0:x723QV;}Class _{Constructor (A,l_m_,N:J;_:Boolean ){} }Class _R3:AM{Var $6,_K,$_v,$5,_:_39_S_V6r;}'''
        expect = '''Program([ClassDecl(Id(Y),Id(R),[]),ClassDecl(Id(_9UV),Id(___),[MethodDecl(Id(O),Instance,[param(Id(f_a),ClassType(Id(l_z))),param(Id(F_1__38),ClassType(Id(l_z))),param(Id(K),ClassType(Id(l_z))),param(Id(_9_),ClassType(Id(l_z))),param(Id(_),ClassType(Id(l_z))),param(Id(f_),ClassType(Id(_F)))],Block([]))]),ClassDecl(Id(_),Id(Lr),[]),ClassDecl(Id(q),Id(p8),[]),ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($2_),ClassType(Id(x723QV)),None)),AttributeDecl(Instance,ConstDecl(Id(l_),ClassType(Id(x723QV)),None)),AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(x723QV)),None)),AttributeDecl(Instance,ConstDecl(Id(_0),ClassType(Id(x723QV)),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),ClassType(Id(J))),param(Id(l_m_),ClassType(Id(J))),param(Id(N),ClassType(Id(J))),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_R3),Id(AM),[AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_39_S_V6r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_K),ClassType(Id(_39_S_V6r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_v),ClassType(Id(_39_S_V6r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_39_S_V6r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_39_S_V6r)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 332))

    def test_333(self):
        line = '''Class a:_{}Class T{Constructor (_Y_,hb4_,_,__:Array [Array [Int ,05],0B110110];T:_;N,_,T:_;_:Int ;__D:Array [Boolean ,0x8]){Continue ;}Var _,_Q:Array [Array [String ,051],0X33];}'''
        expect = '''Program([ClassDecl(Id(a),Id(_),[]),ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(_Y_),ArrayType(54,ArrayType(5,IntType))),param(Id(hb4_),ArrayType(54,ArrayType(5,IntType))),param(Id(_),ArrayType(54,ArrayType(5,IntType))),param(Id(__),ArrayType(54,ArrayType(5,IntType))),param(Id(T),ClassType(Id(_))),param(Id(N),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(T),ClassType(Id(_))),param(Id(_),IntType),param(Id(__D),ArrayType(8,BoolType))],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(51,ArrayType(41,StringType)))),AttributeDecl(Instance,VarDecl(Id(_Q),ArrayType(51,ArrayType(41,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 333))

    def test_334(self):
        line = '''Class _Gz:_6W{Z_Q(T1g,___:Array [Boolean ,0B1010001]){}_3(t__8,d:Array [Int ,0B10];_,K:_6_2){} }Class yf3{Var _Zd____:Y;Var ZB_,___,$7:Float ;Var J,$3_,_r_,$dv:gu;Constructor (_9t,____:String ;_,__,_o,j,W,__3_5,_,_7,_,__2,g,c_:_){}Val $68___,$r0_,V,___,$1,t,_:Boolean ;}Class _1W{}Class B:_{Var _kK5:Array [Int ,0x2D];Var fu:Array [Int ,0B1010001];}'''
        expect = '''Program([ClassDecl(Id(_Gz),Id(_6W),[MethodDecl(Id(Z_Q),Instance,[param(Id(T1g),ArrayType(81,BoolType)),param(Id(___),ArrayType(81,BoolType))],Block([])),MethodDecl(Id(_3),Instance,[param(Id(t__8),ArrayType(2,IntType)),param(Id(d),ArrayType(2,IntType)),param(Id(_),ClassType(Id(_6_2))),param(Id(K),ClassType(Id(_6_2)))],Block([]))]),ClassDecl(Id(yf3),[AttributeDecl(Instance,VarDecl(Id(_Zd____),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(ZB_),FloatType)),AttributeDecl(Instance,VarDecl(Id(___),FloatType)),AttributeDecl(Static,VarDecl(Id($7),FloatType)),AttributeDecl(Instance,VarDecl(Id(J),ClassType(Id(gu)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3_),ClassType(Id(gu)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_r_),ClassType(Id(gu)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($dv),ClassType(Id(gu)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_9t),StringType),param(Id(____),StringType),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_o),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(W),ClassType(Id(_))),param(Id(__3_5),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_7),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__2),ClassType(Id(_))),param(Id(g),ClassType(Id(_))),param(Id(c_),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($68___),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($r0_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(V),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(___),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(t),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(_1W),[]),ClassDecl(Id(B),Id(_),[AttributeDecl(Instance,VarDecl(Id(_kK5),ArrayType(45,IntType))),AttributeDecl(Instance,VarDecl(Id(fu),ArrayType(81,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 334))

    def test_335(self):
        line = '''Class _3:P{Val $_,$5,$_:Array [Array [Array [Array [Int ,03],03],0XA_0F],07];Var _,_,D7:_W_;Var E:Int ;$9(){ {} }$at(G:Array [Array [String ,02_2_0_3],0132];_,_,_4,D,_:Array [String ,0X10];c2kR,_:_){} }'''
        expect = '''Program([ClassDecl(Id(_3),Id(P),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(2575,ArrayType(3,ArrayType(3,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(7,ArrayType(2575,ArrayType(3,ArrayType(3,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(2575,ArrayType(3,ArrayType(3,IntType)))),None)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_W_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_W_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(D7),ClassType(Id(_W_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(E),IntType)),MethodDecl(Id($9),Static,[],Block([Block([])])),MethodDecl(Id($at),Static,[param(Id(G),ArrayType(90,ArrayType(1155,StringType))),param(Id(_),ArrayType(16,StringType)),param(Id(_),ArrayType(16,StringType)),param(Id(_4),ArrayType(16,StringType)),param(Id(D),ArrayType(16,StringType)),param(Id(_),ArrayType(16,StringType)),param(Id(c2kR),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 335))

    def test_336(self):
        line = '''Class f:_j__rm{}Class F{Constructor (H5p,_n,r:Float ;_,_,h:Array [Array [Boolean ,0x4A],0B101];_,_g__,M6,__,C:_3;_Y,_,tz,gf,M:Array [Array [Int ,34],0B10]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(_j__rm),[]),ClassDecl(Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(H5p),FloatType),param(Id(_n),FloatType),param(Id(r),FloatType),param(Id(_),ArrayType(5,ArrayType(74,BoolType))),param(Id(_),ArrayType(5,ArrayType(74,BoolType))),param(Id(h),ArrayType(5,ArrayType(74,BoolType))),param(Id(_),ClassType(Id(_3))),param(Id(_g__),ClassType(Id(_3))),param(Id(M6),ClassType(Id(_3))),param(Id(__),ClassType(Id(_3))),param(Id(C),ClassType(Id(_3))),param(Id(_Y),ArrayType(2,ArrayType(34,IntType))),param(Id(_),ArrayType(2,ArrayType(34,IntType))),param(Id(tz),ArrayType(2,ArrayType(34,IntType))),param(Id(gf),ArrayType(2,ArrayType(34,IntType))),param(Id(M),ArrayType(2,ArrayType(34,IntType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 336))

    def test_337(self):
        line = '''Class avS{Constructor (){} }Class _{$42u(_:u2;_9k_,_:Lv5Y;_,t9L:_){Continue ;}Destructor (){}Destructor (){}Constructor (_O_:k;Q9m:Float ;_4,y:Cn){} }Class _{}Class v:_B{}Class f_:m{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(avS),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($42u),Static,[param(Id(_),ClassType(Id(u2))),param(Id(_9k_),ClassType(Id(Lv5Y))),param(Id(_),ClassType(Id(Lv5Y))),param(Id(_),ClassType(Id(_))),param(Id(t9L),ClassType(Id(_)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_O_),ClassType(Id(k))),param(Id(Q9m),FloatType),param(Id(_4),ClassType(Id(Cn))),param(Id(y),ClassType(Id(Cn)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(v),Id(_B),[]),ClassDecl(Id(f_),Id(m),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 337))

    def test_338(self):
        line = '''Class _T{Constructor (_:String ;c,kQG:Int ;__:Int ;_:Boolean ;F,_1,_tc2_9B:Array [Array [Array [Boolean ,0x2_6],0b1],7_0_8];H,_e,_3__,_ev77:Array [Array [Float ,0B1_1],01];_,F__,_Z:Int ){}Val $K:Boolean ;Val o:Int ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_T),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(c),IntType),param(Id(kQG),IntType),param(Id(__),IntType),param(Id(_),BoolType),param(Id(F),ArrayType(708,ArrayType(1,ArrayType(38,BoolType)))),param(Id(_1),ArrayType(708,ArrayType(1,ArrayType(38,BoolType)))),param(Id(_tc2_9B),ArrayType(708,ArrayType(1,ArrayType(38,BoolType)))),param(Id(H),ArrayType(1,ArrayType(3,FloatType))),param(Id(_e),ArrayType(1,ArrayType(3,FloatType))),param(Id(_3__),ArrayType(1,ArrayType(3,FloatType))),param(Id(_ev77),ArrayType(1,ArrayType(3,FloatType))),param(Id(_),IntType),param(Id(F__),IntType),param(Id(_Z),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($K),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(o),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 338))

    def test_339(self):
        line = '''Class _T{Val o,$6_x0:_5_5O_;}Class A{Val rh:_;}Class Y{Destructor (){}_(b_,_,_3,_,_:s9Ze_6;J:L;f,_:String ;_:Array [Array [Array [String ,0X9],0B1],94];wi,_9c:Float ;_,_,_G9,___3,_,K:Boolean ;q_:Array [String ,0x8]){}Destructor (){ {} }Var $K,$23:Array [Int ,0B1];}'''
        expect = '''Program([ClassDecl(Id(_T),[AttributeDecl(Instance,ConstDecl(Id(o),ClassType(Id(_5_5O_)),None)),AttributeDecl(Static,ConstDecl(Id($6_x0),ClassType(Id(_5_5O_)),None))]),ClassDecl(Id(A),[AttributeDecl(Instance,ConstDecl(Id(rh),ClassType(Id(_)),None))]),ClassDecl(Id(Y),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(b_),ClassType(Id(s9Ze_6))),param(Id(_),ClassType(Id(s9Ze_6))),param(Id(_3),ClassType(Id(s9Ze_6))),param(Id(_),ClassType(Id(s9Ze_6))),param(Id(_),ClassType(Id(s9Ze_6))),param(Id(J),ClassType(Id(L))),param(Id(f),StringType),param(Id(_),StringType),param(Id(_),ArrayType(94,ArrayType(1,ArrayType(9,StringType)))),param(Id(wi),FloatType),param(Id(_9c),FloatType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_G9),BoolType),param(Id(___3),BoolType),param(Id(_),BoolType),param(Id(K),BoolType),param(Id(q_),ArrayType(8,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($K),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($23),ArrayType(1,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 339))

    def test_340(self):
        line = '''Class ___:O__{$_G__m_(___x2p,S_8,_2,t_:_;R9,w:J;_,S_:R;C,_:Float ;g6_,_:Array [Array [Array [Boolean ,0xD8],65],021];_,n,n3,X:Array [Array [Int ,3_4],07]){} }Class _:p_{}'''
        expect = '''Program([ClassDecl(Id(___),Id(O__),[MethodDecl(Id($_G__m_),Static,[param(Id(___x2p),ClassType(Id(_))),param(Id(S_8),ClassType(Id(_))),param(Id(_2),ClassType(Id(_))),param(Id(t_),ClassType(Id(_))),param(Id(R9),ClassType(Id(J))),param(Id(w),ClassType(Id(J))),param(Id(_),ClassType(Id(R))),param(Id(S_),ClassType(Id(R))),param(Id(C),FloatType),param(Id(_),FloatType),param(Id(g6_),ArrayType(17,ArrayType(65,ArrayType(216,BoolType)))),param(Id(_),ArrayType(17,ArrayType(65,ArrayType(216,BoolType)))),param(Id(_),ArrayType(7,ArrayType(34,IntType))),param(Id(n),ArrayType(7,ArrayType(34,IntType))),param(Id(n3),ArrayType(7,ArrayType(34,IntType))),param(Id(X),ArrayType(7,ArrayType(34,IntType)))],Block([]))]),ClassDecl(Id(_),Id(p_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 340))

    def test_341(self):
        line = '''Class _:_{}Class dc_2{Constructor (d:Array [Float ,39]){}$P(e_,qD,L,D2v3p:Float ){}Var $5:Boolean ;_(ge:Array [Array [Array [Float ,3927],0X6],9]){}Var $f_,$_,_:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(dc_2),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ArrayType(39,FloatType))],Block([])),MethodDecl(Id($P),Static,[param(Id(e_),FloatType),param(Id(qD),FloatType),param(Id(L),FloatType),param(Id(D2v3p),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($5),BoolType)),MethodDecl(Id(_),Instance,[param(Id(ge),ArrayType(9,ArrayType(6,ArrayType(3927,FloatType))))],Block([])),AttributeDecl(Static,VarDecl(Id($f_),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 341))

    def test_342(self):
        line = '''Class _Z79N{Constructor (m,k,AT,Iy6,b5,_,m5_1g_,z_,_V:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1_0],0b101110],0b101110],0b101],3_6],0x4_3],0x2F],040],0b1];_0d_:Array [String ,0X13];_:Array [Array [Array [Int ,0XC4],0B11],2];A___8v_,F__:Array [Int ,0b1];q:Array [Int ,30]){} }'''
        expect = '''Program([ClassDecl(Id(_Z79N),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(k),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(AT),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(Iy6),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(b5),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(_),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(m5_1g_),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(z_),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(_V),ArrayType(1,ArrayType(32,ArrayType(47,ArrayType(67,ArrayType(36,ArrayType(5,ArrayType(46,ArrayType(46,ArrayType(2,StringType)))))))))),param(Id(_0d_),ArrayType(19,StringType)),param(Id(_),ArrayType(2,ArrayType(3,ArrayType(196,IntType)))),param(Id(A___8v_),ArrayType(1,IntType)),param(Id(F__),ArrayType(1,IntType)),param(Id(q),ArrayType(30,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 342))

    def test_343(self):
        line = '''Class e_8_6:t{}Class __4:b{}Class S:V{Constructor (l4_,C:Boolean ;p_:Boolean ;_jd:Int ;_,L,_:Array [Array [Array [Array [Array [Array [Array [Array [String ,0374],0X2_A],1_9_43],3],0B1],015],62],0B1];O,P:Int ;m,_:Array [Int ,97]){}Constructor (){Val _:Array [Array [Int ,015],0B1];} }'''
        expect = '''Program([ClassDecl(Id(e_8_6),Id(t),[]),ClassDecl(Id(__4),Id(b),[]),ClassDecl(Id(S),Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(l4_),BoolType),param(Id(C),BoolType),param(Id(p_),BoolType),param(Id(_jd),IntType),param(Id(_),ArrayType(1,ArrayType(62,ArrayType(13,ArrayType(1,ArrayType(3,ArrayType(1943,ArrayType(42,ArrayType(252,StringType))))))))),param(Id(L),ArrayType(1,ArrayType(62,ArrayType(13,ArrayType(1,ArrayType(3,ArrayType(1943,ArrayType(42,ArrayType(252,StringType))))))))),param(Id(_),ArrayType(1,ArrayType(62,ArrayType(13,ArrayType(1,ArrayType(3,ArrayType(1943,ArrayType(42,ArrayType(252,StringType))))))))),param(Id(O),IntType),param(Id(P),IntType),param(Id(m),ArrayType(97,IntType)),param(Id(_),ArrayType(97,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(1,ArrayType(13,IntType)),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 343))

    def test_344(self):
        line = '''Class OK:_{}Class _:_{}Class _xU{Var $_N28l,$_3,$_:Array [Array [Array [Boolean ,0b1010110],6],0XF];Var _:Array [Array [Array [Array [String ,0XF7],0x5D],0x1],0B1];}Class ___CO0{}'''
        expect = '''Program([ClassDecl(Id(OK),Id(_),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_xU),[AttributeDecl(Static,VarDecl(Id($_N28l),ArrayType(15,ArrayType(6,ArrayType(86,BoolType))))),AttributeDecl(Static,VarDecl(Id($_3),ArrayType(15,ArrayType(6,ArrayType(86,BoolType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15,ArrayType(6,ArrayType(86,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(93,ArrayType(247,StringType))))))]),ClassDecl(Id(___CO0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 344))

    def test_345(self):
        line = '''Class _{Constructor (N_:Boolean ;_3:Array [Array [Float ,0X3],0x4B];__,_1_,Z:Array [Array [Array [Array [Int ,0X6],0xD_7_8_6],32],5]){_::$Y.D3w();} }Class oa_:__y{}Class ij{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(N_),BoolType),param(Id(_3),ArrayType(75,ArrayType(3,FloatType))),param(Id(__),ArrayType(5,ArrayType(32,ArrayType(55174,ArrayType(6,IntType))))),param(Id(_1_),ArrayType(5,ArrayType(32,ArrayType(55174,ArrayType(6,IntType))))),param(Id(Z),ArrayType(5,ArrayType(32,ArrayType(55174,ArrayType(6,IntType)))))],Block([Call(FieldAccess(Id(_),Id($Y)),Id(D3w),[])]))]),ClassDecl(Id(oa_),Id(__y),[]),ClassDecl(Id(ij),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 345))

    def test_346(self):
        line = '''Class _:_E{}Class m{Destructor (){}Var _:Boolean ;$_(O:Boolean ;_k0A:Array [String ,5];_,u,_,z_:Array [Float ,5]){Break ;}_(r_,_4D:Array [Boolean ,0x69]){Continue ;} }Class _2{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_E),[]),ClassDecl(Id(m),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id($_),Static,[param(Id(O),BoolType),param(Id(_k0A),ArrayType(5,StringType)),param(Id(_),ArrayType(5,FloatType)),param(Id(u),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(z_),ArrayType(5,FloatType))],Block([Break])),MethodDecl(Id(_),Instance,[param(Id(r_),ArrayType(105,BoolType)),param(Id(_4D),ArrayType(105,BoolType))],Block([Continue]))]),ClassDecl(Id(_2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 346))

    def test_347(self):
        line = '''Class S_:uy{Destructor (){}Constructor (___w:Boolean ;k7,C_,_Q3:Boolean ;__,_:String ;__6MJ8_k:_;s93,R:Boolean ){} }Class _:__{}Class n:F{}Class mv:_{}Class _:N{Val $M9f,I5:Array [Int ,0B1];}'''
        expect = '''Program([ClassDecl(Id(S_),Id(uy),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(___w),BoolType),param(Id(k7),BoolType),param(Id(C_),BoolType),param(Id(_Q3),BoolType),param(Id(__),StringType),param(Id(_),StringType),param(Id(__6MJ8_k),ClassType(Id(_))),param(Id(s93),BoolType),param(Id(R),BoolType)],Block([]))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(n),Id(F),[]),ClassDecl(Id(mv),Id(_),[]),ClassDecl(Id(_),Id(N),[AttributeDecl(Static,ConstDecl(Id($M9f),ArrayType(1,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(I5),ArrayType(1,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 347))

    def test_348(self):
        line = '''Class _{}Class K:_9S{Val $G,$5,$9_,$__:Array [Int ,0X5A];Constructor (_:Array [Float ,5];r3:_;__:Array [Array [String ,0x6],0x49];_1,_B,F_:Boolean ;_Z,_:___;__:c){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(K),Id(_9S),[AttributeDecl(Static,ConstDecl(Id($G),ArrayType(90,IntType),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(90,IntType),None)),AttributeDecl(Static,ConstDecl(Id($9_),ArrayType(90,IntType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(90,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,FloatType)),param(Id(r3),ClassType(Id(_))),param(Id(__),ArrayType(73,ArrayType(6,StringType))),param(Id(_1),BoolType),param(Id(_B),BoolType),param(Id(F_),BoolType),param(Id(_Z),ClassType(Id(___))),param(Id(_),ClassType(Id(___))),param(Id(__),ClassType(Id(c)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 348))

    def test_349(self):
        line = '''Class _6:i{Var $b_,$V5_K4m2:i_;Val _:Array [Boolean ,0b1];Constructor (C,p1,S_,_,_:Array [Float ,01];H,r___:Array [Float ,26]){}Destructor (){}Var _,S:String ;Var _13:Array [Int ,067];Val $e,$_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_6),Id(i),[AttributeDecl(Static,VarDecl(Id($b_),ClassType(Id(i_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($V5_K4m2),ClassType(Id(i_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(C),ArrayType(1,FloatType)),param(Id(p1),ArrayType(1,FloatType)),param(Id(S_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(H),ArrayType(26,FloatType)),param(Id(r___),ArrayType(26,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(S),StringType)),AttributeDecl(Instance,VarDecl(Id(_13),ArrayType(55,IntType))),AttributeDecl(Static,ConstDecl(Id($e),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 349))

    def test_350(self):
        line = '''Class p{}Class g:_Y__{Destructor (){}Destructor (){Continue ;} }Class s{Val $c4__,$_,$1:Array [Array [Array [Boolean ,07],0X7],0X64];}Class pl__{Constructor (){} }Class _vs_:_9{}'''
        expect = '''Program([ClassDecl(Id(p),[]),ClassDecl(Id(g),Id(_Y__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(s),[AttributeDecl(Static,ConstDecl(Id($c4__),ArrayType(100,ArrayType(7,ArrayType(7,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(100,ArrayType(7,ArrayType(7,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(100,ArrayType(7,ArrayType(7,BoolType))),None))]),ClassDecl(Id(pl__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_vs_),Id(_9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 350))

    def test_351(self):
        line = '''Class j{Destructor (){}fe3_(_9:F){}_(_20:Array [Array [Array [Array [Float ,0x5F],0X22],053],0B1];j__:Array [Array [Array [Float ,0xF_4C_C],1],0b10];_6,w,h_,_5,f_,P1:Array [Array [String ,0b1],0x608]){} }'''
        expect = '''Program([ClassDecl(Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(fe3_),Instance,[param(Id(_9),ClassType(Id(F)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_20),ArrayType(1,ArrayType(43,ArrayType(34,ArrayType(95,FloatType))))),param(Id(j__),ArrayType(2,ArrayType(1,ArrayType(62668,FloatType)))),param(Id(_6),ArrayType(1544,ArrayType(1,StringType))),param(Id(w),ArrayType(1544,ArrayType(1,StringType))),param(Id(h_),ArrayType(1544,ArrayType(1,StringType))),param(Id(_5),ArrayType(1544,ArrayType(1,StringType))),param(Id(f_),ArrayType(1544,ArrayType(1,StringType))),param(Id(P1),ArrayType(1544,ArrayType(1,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 351))

    def test_352(self):
        line = '''Class A:_{Var $c_n,$_,bsb,$F,b5:Array [Array [Array [Array [Int ,0X38],05],35],0143];I(){} }Class _6:_0{Var $b_,$75_:Array [Array [Boolean ,0xC],0xA_C3_D];Var $6,$4:Array [Array [Int ,0b1010110],0B1_1_0_1];}Class Q:_{}Class _:IE{}'''
        expect = '''Program([ClassDecl(Id(A),Id(_),[AttributeDecl(Static,VarDecl(Id($c_n),ArrayType(99,ArrayType(35,ArrayType(5,ArrayType(56,IntType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(99,ArrayType(35,ArrayType(5,ArrayType(56,IntType)))))),AttributeDecl(Instance,VarDecl(Id(bsb),ArrayType(99,ArrayType(35,ArrayType(5,ArrayType(56,IntType)))))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(99,ArrayType(35,ArrayType(5,ArrayType(56,IntType)))))),AttributeDecl(Instance,VarDecl(Id(b5),ArrayType(99,ArrayType(35,ArrayType(5,ArrayType(56,IntType)))))),MethodDecl(Id(I),Instance,[],Block([]))]),ClassDecl(Id(_6),Id(_0),[AttributeDecl(Static,VarDecl(Id($b_),ArrayType(44093,ArrayType(12,BoolType)))),AttributeDecl(Static,VarDecl(Id($75_),ArrayType(44093,ArrayType(12,BoolType)))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(13,ArrayType(86,IntType)))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(13,ArrayType(86,IntType))))]),ClassDecl(Id(Q),Id(_),[]),ClassDecl(Id(_),Id(IE),[])])'''
        self.assertTrue(TestAST.test(line, expect, 352))

    def test_353(self):
        line = '''Class _xls{Var j,_:Array [Array [Array [Array [Boolean ,0XF_9_1],0X2E],0b1],4];}Class cfQ_:i{}Class __{}Class R:N{Constructor (G,_:Array [Array [String ,072_1_3],9];_:Array [Int ,0B1];__77:Array [Array [Array [Array [Float ,0xA],041],0xC],0x64]){}Var _w_V:Array [String ,0X2E];}Class _:_M_{}'''
        expect = '''Program([ClassDecl(Id(_xls),[AttributeDecl(Instance,VarDecl(Id(j),ArrayType(4,ArrayType(1,ArrayType(46,ArrayType(3985,BoolType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,ArrayType(1,ArrayType(46,ArrayType(3985,BoolType))))))]),ClassDecl(Id(cfQ_),Id(i),[]),ClassDecl(Id(__),[]),ClassDecl(Id(R),Id(N),[MethodDecl(Id(Constructor),Instance,[param(Id(G),ArrayType(9,ArrayType(3723,StringType))),param(Id(_),ArrayType(9,ArrayType(3723,StringType))),param(Id(_),ArrayType(1,IntType)),param(Id(__77),ArrayType(100,ArrayType(12,ArrayType(33,ArrayType(10,FloatType)))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_w_V),ArrayType(46,StringType)))]),ClassDecl(Id(_),Id(_M_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 353))

    def test_354(self):
        line = '''Class F2_:A_{Constructor (_,J:String ;B3,S,_0,J:_23_;_8,C,_:Array [Array [Array [Array [String ,7_9_9],0X25],0X25],0X1_9_6_B];_q:Int ){}$s8Y_(t:Boolean ;_:Array [Float ,60]){}Constructor (){Continue ;Val ___:Array [String ,05_4];}Var o1,_0,$90:_;}'''
        expect = '''Program([ClassDecl(Id(F2_),Id(A_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(J),StringType),param(Id(B3),ClassType(Id(_23_))),param(Id(S),ClassType(Id(_23_))),param(Id(_0),ClassType(Id(_23_))),param(Id(J),ClassType(Id(_23_))),param(Id(_8),ArrayType(6507,ArrayType(37,ArrayType(37,ArrayType(799,StringType))))),param(Id(C),ArrayType(6507,ArrayType(37,ArrayType(37,ArrayType(799,StringType))))),param(Id(_),ArrayType(6507,ArrayType(37,ArrayType(37,ArrayType(799,StringType))))),param(Id(_q),IntType)],Block([])),MethodDecl(Id($s8Y_),Static,[param(Id(t),BoolType),param(Id(_),ArrayType(60,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,ConstDecl(Id(___),ArrayType(44,StringType),None)])),AttributeDecl(Instance,VarDecl(Id(o1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($90),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 354))

    def test_355(self):
        line = '''Class hf0_{}Class _{Val $P0,$__:String ;Val $_:Boolean ;_R__(F,_5,_,_:_){}Val _VatN,$P,u:Array [Array [Array [Array [Int ,4],0b111000],055_07],0X6];Val lDC,$yXg,$LKP:Int ;Constructor (u,p,_kO9:String ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(hf0_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($P0),StringType,None)),AttributeDecl(Static,ConstDecl(Id($__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),MethodDecl(Id(_R__),Instance,[param(Id(F),ClassType(Id(_))),param(Id(_5),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_VatN),ArrayType(6,ArrayType(2887,ArrayType(56,ArrayType(4,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($P),ArrayType(6,ArrayType(2887,ArrayType(56,ArrayType(4,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(6,ArrayType(2887,ArrayType(56,ArrayType(4,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(lDC),IntType,None)),AttributeDecl(Static,ConstDecl(Id($yXg),IntType,None)),AttributeDecl(Static,ConstDecl(Id($LKP),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(u),StringType),param(Id(p),StringType),param(Id(_kO9),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 355))

    def test_356(self):
        line = '''Class Z{Constructor (q,_:Int ;_:Array [Array [Array [Array [Array [Array [Array [Boolean ,034],0x2],0b1010011],06],03_42],04_2],0B11100]){}$0__(_P,w,_:_){ {Continue ;}Continue ;Continue ;} }Class RP:H{}Class A{}'''
        expect = '''Program([ClassDecl(Id(Z),[MethodDecl(Id(Constructor),Instance,[param(Id(q),IntType),param(Id(_),IntType),param(Id(_),ArrayType(28,ArrayType(34,ArrayType(226,ArrayType(6,ArrayType(83,ArrayType(2,ArrayType(28,BoolType))))))))],Block([])),MethodDecl(Id($0__),Static,[param(Id(_P),ClassType(Id(_))),param(Id(w),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Block([Continue]),Continue,Continue]))]),ClassDecl(Id(RP),Id(H),[]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 356))

    def test_357(self):
        line = '''Class v5:_{Var $4_:Array [Int ,05];Var _,c:Boolean ;Val $sc6:Array [Array [Array [Float ,047],036_533],0x9E99D_0];Constructor (r_:D_2_;_:Boolean ;_,y,__q_:Array [Boolean ,0x3F]){} }'''
        expect = '''Program([ClassDecl(Id(v5),Id(_),[AttributeDecl(Static,VarDecl(Id($4_),ArrayType(5,IntType))),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(c),BoolType)),AttributeDecl(Static,ConstDecl(Id($sc6),ArrayType(10394064,ArrayType(15707,ArrayType(39,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(r_),ClassType(Id(D_2_))),param(Id(_),BoolType),param(Id(_),ArrayType(63,BoolType)),param(Id(y),ArrayType(63,BoolType)),param(Id(__q_),ArrayType(63,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 357))

    def test_358(self):
        line = '''Class _____:N{$4(___m,Pye,__,__,_8,h8,_:String ;_q6__:uV;hy:Array [String ,4_3];NI,R,_3m:Array [Array [Float ,82],0b1]){}Destructor (){} }Class __{Var w3,_Tc27tT,_:x;}'''
        expect = '''Program([ClassDecl(Id(_____),Id(N),[MethodDecl(Id($4),Static,[param(Id(___m),StringType),param(Id(Pye),StringType),param(Id(__),StringType),param(Id(__),StringType),param(Id(_8),StringType),param(Id(h8),StringType),param(Id(_),StringType),param(Id(_q6__),ClassType(Id(uV))),param(Id(hy),ArrayType(43,StringType)),param(Id(NI),ArrayType(1,ArrayType(82,FloatType))),param(Id(R),ArrayType(1,ArrayType(82,FloatType))),param(Id(_3m),ArrayType(1,ArrayType(82,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(w3),ClassType(Id(x)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_Tc27tT),ClassType(Id(x)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(x)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 358))

    def test_359(self):
        line = '''Class Z{_8U(){}Val ew,i_g_:Array [Array [Array [Array [Array [Array [Float ,036],18],014],0b1011000],0b1011000],0x5_0];Var $6R1:g;}Class _:__K{Destructor (){} }Class _:x{}Class A1:KvMe{}Class _{}'''
        expect = '''Program([ClassDecl(Id(Z),[MethodDecl(Id(_8U),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(ew),ArrayType(80,ArrayType(88,ArrayType(88,ArrayType(12,ArrayType(18,ArrayType(30,FloatType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(i_g_),ArrayType(80,ArrayType(88,ArrayType(88,ArrayType(12,ArrayType(18,ArrayType(30,FloatType)))))),None)),AttributeDecl(Static,VarDecl(Id($6R1),ClassType(Id(g)),NullLiteral()))]),ClassDecl(Id(_),Id(__K),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(x),[]),ClassDecl(Id(A1),Id(KvMe),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 359))

    def test_360(self):
        line = '''Class c_G6_:_3n_{Var _:Array [Array [String ,0x30],80];$R(D:_){}Var $l7,$u,Z,l_51_:Array [Array [Array [Array [Int ,046],26],07],0xC];}Class r69{Destructor (){}Val $_:Int ;}Class d_{}Class _:Y7{}Class _{}'''
        expect = '''Program([ClassDecl(Id(c_G6_),Id(_3n_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(80,ArrayType(48,StringType)))),MethodDecl(Id($R),Static,[param(Id(D),ClassType(Id(_)))],Block([])),AttributeDecl(Static,VarDecl(Id($l7),ArrayType(12,ArrayType(7,ArrayType(26,ArrayType(38,IntType)))))),AttributeDecl(Static,VarDecl(Id($u),ArrayType(12,ArrayType(7,ArrayType(26,ArrayType(38,IntType)))))),AttributeDecl(Instance,VarDecl(Id(Z),ArrayType(12,ArrayType(7,ArrayType(26,ArrayType(38,IntType)))))),AttributeDecl(Instance,VarDecl(Id(l_51_),ArrayType(12,ArrayType(7,ArrayType(26,ArrayType(38,IntType))))))]),ClassDecl(Id(r69),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(d_),[]),ClassDecl(Id(_),Id(Y7),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 360))

    def test_361(self):
        line = '''Class d:Q{Constructor (_G_:Boolean ){} }Class _{Destructor (){Var R_:_;}Constructor (_1_O0:Array [Float ,01];_15,_j,_,_8:_4;r_,_,p,_,I,__,_,__,p:String ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(d),Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_G_),BoolType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(R_),ClassType(Id(_)),NullLiteral())])),MethodDecl(Id(Constructor),Instance,[param(Id(_1_O0),ArrayType(1,FloatType)),param(Id(_15),ClassType(Id(_4))),param(Id(_j),ClassType(Id(_4))),param(Id(_),ClassType(Id(_4))),param(Id(_8),ClassType(Id(_4))),param(Id(r_),StringType),param(Id(_),StringType),param(Id(p),StringType),param(Id(_),StringType),param(Id(I),StringType),param(Id(__),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(p),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 361))

    def test_362(self):
        line = '''Class _{Val $45_1,_26_,$3r3,B,$5,NZ,$_,$L:_;Constructor (_,_:String ;_522:Array [Int ,0b110010]){}Var $b:d;}Class f8:W{}Class __:_{}Class OGg:_{}Class P__{Val __,$__N,_6,_:Array [Array [String ,0X7F_4],02];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($45_1),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_26_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($3r3),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(B),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(NZ),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($L),ClassType(Id(_)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(_522),ArrayType(50,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($b),ClassType(Id(d)),NullLiteral()))]),ClassDecl(Id(f8),Id(W),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(OGg),Id(_),[]),ClassDecl(Id(P__),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(2,ArrayType(2036,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($__N),ArrayType(2,ArrayType(2036,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_6),ArrayType(2,ArrayType(2036,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(2036,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 362))

    def test_363(self):
        line = '''Class i:_33{$5T(HS_:Array [Array [Array [Array [Array [Int ,0B110100],0B10_0],0x9],0X47],0xB];FG1,_D6_:d;__W___,b_5,x:Float ;_,GN,__:_5;_,ZI:C;__,P:Array [Array [Boolean ,0X47],0X47];_:Int ;__9:String ;T,_,_,q,_:T;_5:Array [Float ,0b1];_p,_:String ;v,_D_:_){} }Class __:_84wJ_H_9{}'''
        expect = '''Program([ClassDecl(Id(i),Id(_33),[MethodDecl(Id($5T),Static,[param(Id(HS_),ArrayType(11,ArrayType(71,ArrayType(9,ArrayType(4,ArrayType(52,IntType)))))),param(Id(FG1),ClassType(Id(d))),param(Id(_D6_),ClassType(Id(d))),param(Id(__W___),FloatType),param(Id(b_5),FloatType),param(Id(x),FloatType),param(Id(_),ClassType(Id(_5))),param(Id(GN),ClassType(Id(_5))),param(Id(__),ClassType(Id(_5))),param(Id(_),ClassType(Id(C))),param(Id(ZI),ClassType(Id(C))),param(Id(__),ArrayType(71,ArrayType(71,BoolType))),param(Id(P),ArrayType(71,ArrayType(71,BoolType))),param(Id(_),IntType),param(Id(__9),StringType),param(Id(T),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(q),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(_5),ArrayType(1,FloatType)),param(Id(_p),StringType),param(Id(_),StringType),param(Id(v),ClassType(Id(_))),param(Id(_D_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__),Id(_84wJ_H_9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 363))

    def test_364(self):
        line = '''Class ___u0n:__4{}Class L:t4{Var $Z8,_o:Boolean ;Val _,$_,Xv,$__6,$_:Array [Array [Array [Array [Array [Array [Int ,110],040_0],0B1_1_1_0],0B1],0x29],0B11];Var $rL_:Int ;}'''
        expect = '''Program([ClassDecl(Id(___u0n),Id(__4),[]),ClassDecl(Id(L),Id(t4),[AttributeDecl(Static,VarDecl(Id($Z8),BoolType)),AttributeDecl(Instance,VarDecl(Id(_o),BoolType)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(41,ArrayType(1,ArrayType(14,ArrayType(256,ArrayType(110,IntType)))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(41,ArrayType(1,ArrayType(14,ArrayType(256,ArrayType(110,IntType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(Xv),ArrayType(3,ArrayType(41,ArrayType(1,ArrayType(14,ArrayType(256,ArrayType(110,IntType)))))),None)),AttributeDecl(Static,ConstDecl(Id($__6),ArrayType(3,ArrayType(41,ArrayType(1,ArrayType(14,ArrayType(256,ArrayType(110,IntType)))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(41,ArrayType(1,ArrayType(14,ArrayType(256,ArrayType(110,IntType)))))),None)),AttributeDecl(Static,VarDecl(Id($rL_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 364))

    def test_365(self):
        line = '''Class _:v{}Class u{}Class cV:_{}Class Q_{Val p:Float ;Constructor (_Q,_,b,u:w_3_9;w:Array [Array [Int ,3],0b1]){}Constructor (i,_,_0N_6,_:Array [Float ,3_1_8];_:_;_,_,tc1:Array [Array [String ,5_1],017];___35wK3:_A___){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(v),[]),ClassDecl(Id(u),[]),ClassDecl(Id(cV),Id(_),[]),ClassDecl(Id(Q_),[AttributeDecl(Instance,ConstDecl(Id(p),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_Q),ClassType(Id(w_3_9))),param(Id(_),ClassType(Id(w_3_9))),param(Id(b),ClassType(Id(w_3_9))),param(Id(u),ClassType(Id(w_3_9))),param(Id(w),ArrayType(1,ArrayType(3,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i),ArrayType(318,FloatType)),param(Id(_),ArrayType(318,FloatType)),param(Id(_0N_6),ArrayType(318,FloatType)),param(Id(_),ArrayType(318,FloatType)),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(15,ArrayType(51,StringType))),param(Id(_),ArrayType(15,ArrayType(51,StringType))),param(Id(tc1),ArrayType(15,ArrayType(51,StringType))),param(Id(___35wK3),ClassType(Id(_A___)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 365))

    def test_366(self):
        line = '''Class __:_1{Val C,$_,$w:Array [Array [Array [Array [Float ,0b1011010],0B1001011],0XBC],0x4F];Constructor (D8250g,t925__I2,cO_X:_10;_:Array [Int ,02_4_6];_D:Array [Float ,0b1011010]){Break ;} }Class h{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_1),[AttributeDecl(Instance,ConstDecl(Id(C),ArrayType(79,ArrayType(188,ArrayType(75,ArrayType(90,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(79,ArrayType(188,ArrayType(75,ArrayType(90,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($w),ArrayType(79,ArrayType(188,ArrayType(75,ArrayType(90,FloatType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(D8250g),ClassType(Id(_10))),param(Id(t925__I2),ClassType(Id(_10))),param(Id(cO_X),ClassType(Id(_10))),param(Id(_),ArrayType(166,IntType)),param(Id(_D),ArrayType(90,FloatType))],Block([Break]))]),ClassDecl(Id(h),[])])'''
        self.assertTrue(TestAST.test(line, expect, 366))

    def test_367(self):
        line = '''Class _{Var p_YJ,$__:Boolean ;}Class s:S_{Constructor (x_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1100000],7],61],05_3],61],0B1001111],7],61],0x59],0B1001111],0X1B]){Continue ;} }Class _9{}Class i:_5{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(p_YJ),BoolType)),AttributeDecl(Static,VarDecl(Id($__),BoolType))]),ClassDecl(Id(s),Id(S_),[MethodDecl(Id(Constructor),Instance,[param(Id(x_),ArrayType(27,ArrayType(79,ArrayType(89,ArrayType(61,ArrayType(7,ArrayType(79,ArrayType(61,ArrayType(43,ArrayType(61,ArrayType(7,ArrayType(96,FloatType))))))))))))],Block([Continue]))]),ClassDecl(Id(_9),[]),ClassDecl(Id(i),Id(_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 367))

    def test_368(self):
        line = '''Class _{Destructor (){}$_(){}Destructor (){}Constructor (){}Constructor (_:_;_2_,I:Boolean ;x4_3841_,_,_,X_,t4:Array [Int ,76]){}Constructor (_,A:Array [Float ,0x6C_8]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_2_),BoolType),param(Id(I),BoolType),param(Id(x4_3841_),ArrayType(76,IntType)),param(Id(_),ArrayType(76,IntType)),param(Id(_),ArrayType(76,IntType)),param(Id(X_),ArrayType(76,IntType)),param(Id(t4),ArrayType(76,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1736,FloatType)),param(Id(A),ArrayType(1736,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 368))

    def test_369(self):
        line = '''Class __j_2_{_6(h,U:Float ;i:Array [Array [Array [Array [Array [Int ,0X3D],85],9],0b10010],85];W:Array [Array [Array [String ,0B1011010],0X3D],0X3D]){ {Continue ;} }Destructor (){} }Class p:_{}Class _y_:_{Var E_,$_0:Array [String ,050];}'''
        expect = '''Program([ClassDecl(Id(__j_2_),[MethodDecl(Id(_6),Instance,[param(Id(h),FloatType),param(Id(U),FloatType),param(Id(i),ArrayType(85,ArrayType(18,ArrayType(9,ArrayType(85,ArrayType(61,IntType)))))),param(Id(W),ArrayType(61,ArrayType(61,ArrayType(90,StringType))))],Block([Block([Continue])])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(p),Id(_),[]),ClassDecl(Id(_y_),Id(_),[AttributeDecl(Instance,VarDecl(Id(E_),ArrayType(40,StringType))),AttributeDecl(Static,VarDecl(Id($_0),ArrayType(40,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 369))

    def test_370(self):
        line = '''Class _:_{}Class T:Xg{Var _0_F,$1,yw,m:Array [Int ,01];Destructor (){Continue ;}Destructor (){}Constructor (){}G(_4,_69:Boolean ;Nz8Fa,_,_7___,n,_sf:Float ;E:_V;W70,I,X_4:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(T),Id(Xg),[AttributeDecl(Instance,VarDecl(Id(_0_F),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(yw),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(m),ArrayType(1,IntType))),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(G),Instance,[param(Id(_4),BoolType),param(Id(_69),BoolType),param(Id(Nz8Fa),FloatType),param(Id(_),FloatType),param(Id(_7___),FloatType),param(Id(n),FloatType),param(Id(_sf),FloatType),param(Id(E),ClassType(Id(_V))),param(Id(W70),FloatType),param(Id(I),FloatType),param(Id(X_4),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 370))

    def test_371(self):
        line = '''Class _3:r{Destructor (){Val c:_NnP;}Constructor (){}Constructor (_92_41_W,_,z,__l:_){Continue ;}Constructor (_:_0;C,_,_:Float ){Var __:_;} }Class _8{ik(){Continue ;} }Class A:u{Destructor (){} }Class _g_0{}'''
        expect = '''Program([ClassDecl(Id(_3),Id(r),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(c),ClassType(Id(_NnP)),None)])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_92_41_W),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(z),ClassType(Id(_))),param(Id(__l),ClassType(Id(_)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_0))),param(Id(C),FloatType),param(Id(_),FloatType),param(Id(_),FloatType)],Block([VarDecl(Id(__),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(_8),[MethodDecl(Id(ik),Instance,[],Block([Continue]))]),ClassDecl(Id(A),Id(u),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_g_0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 371))

    def test_372(self):
        line = '''Class _:W___6c4{}Class J4:LY86{Val $9__,$_0l08_:y;E(c_:Float ;__,_Q:Float ;_6,uW,_4_64mH__:L;L:Float ;Gb:Boolean ;_,_5oE:Float ){} }Class v4{}Class _:_{}Class _{}Class __{}'''
        expect = '''Program([ClassDecl(Id(_),Id(W___6c4),[]),ClassDecl(Id(J4),Id(LY86),[AttributeDecl(Static,ConstDecl(Id($9__),ClassType(Id(y)),None)),AttributeDecl(Static,ConstDecl(Id($_0l08_),ClassType(Id(y)),None)),MethodDecl(Id(E),Instance,[param(Id(c_),FloatType),param(Id(__),FloatType),param(Id(_Q),FloatType),param(Id(_6),ClassType(Id(L))),param(Id(uW),ClassType(Id(L))),param(Id(_4_64mH__),ClassType(Id(L))),param(Id(L),FloatType),param(Id(Gb),BoolType),param(Id(_),FloatType),param(Id(_5oE),FloatType)],Block([]))]),ClassDecl(Id(v4),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 372))

    def test_373(self):
        line = '''Class _a5_e_{}Class o{Constructor (g,m,_,N:Array [Array [Int ,15],0B1];_,_7L,Q:_1){} }Class __{}Class g_e_7:X{Var g:Array [Boolean ,15];Var v:Array [Array [Array [Array [Int ,0XB],0x1E],0b10101],0x1E];}'''
        expect = '''Program([ClassDecl(Id(_a5_e_),[]),ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(g),ArrayType(1,ArrayType(15,IntType))),param(Id(m),ArrayType(1,ArrayType(15,IntType))),param(Id(_),ArrayType(1,ArrayType(15,IntType))),param(Id(N),ArrayType(1,ArrayType(15,IntType))),param(Id(_),ClassType(Id(_1))),param(Id(_7L),ClassType(Id(_1))),param(Id(Q),ClassType(Id(_1)))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(g_e_7),Id(X),[AttributeDecl(Instance,VarDecl(Id(g),ArrayType(15,BoolType))),AttributeDecl(Instance,VarDecl(Id(v),ArrayType(30,ArrayType(21,ArrayType(30,ArrayType(11,IntType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 373))

    def test_374(self):
        line = '''Class Gk:b5{}Class SF_4e:_9_{Destructor (){} }Class mi{Var B:Int ;Val M,o:__71D;}Class W{Constructor (m:Array [Boolean ,0b10110];_d:Array [Array [Array [Boolean ,0B10_0],0X6_0E],04];_,_:_i;P6MKO:String ;a3:P_;Cpi566:_){ {Return ;} }}Class y{}'''
        expect = '''Program([ClassDecl(Id(Gk),Id(b5),[]),ClassDecl(Id(SF_4e),Id(_9_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(mi),[AttributeDecl(Instance,VarDecl(Id(B),IntType)),AttributeDecl(Instance,ConstDecl(Id(M),ClassType(Id(__71D)),None)),AttributeDecl(Instance,ConstDecl(Id(o),ClassType(Id(__71D)),None))]),ClassDecl(Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ArrayType(22,BoolType)),param(Id(_d),ArrayType(4,ArrayType(1550,ArrayType(4,BoolType)))),param(Id(_),ClassType(Id(_i))),param(Id(_),ClassType(Id(_i))),param(Id(P6MKO),StringType),param(Id(a3),ClassType(Id(P_))),param(Id(Cpi566),ClassType(Id(_)))],Block([Block([Return()])]))]),ClassDecl(Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 374))

    def test_375(self):
        line = '''Class _{Destructor (){} }Class _G7H{Destructor (){} }Class _{Var $3:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,04],0XE],02],0b10101],7],0430],0B1000001],0b10101],0B1000001];}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_G7H),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($3),ArrayType(65,ArrayType(21,ArrayType(65,ArrayType(280,ArrayType(7,ArrayType(21,ArrayType(2,ArrayType(14,ArrayType(4,BoolType)))))))))))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 375))

    def test_376(self):
        line = '''Class _D8{}Class _8{}Class C:a{Constructor (a4SH,_,_T_,O,V,_,U7:_Y_w;_:String ){}Var _2,$30:Array [Array [Array [Boolean ,07],2],0B1001];Val _,_,$_,$5_,$U_,__,_,$I7_3g7,$__:_;}'''
        expect = '''Program([ClassDecl(Id(_D8),[]),ClassDecl(Id(_8),[]),ClassDecl(Id(C),Id(a),[MethodDecl(Id(Constructor),Instance,[param(Id(a4SH),ClassType(Id(_Y_w))),param(Id(_),ClassType(Id(_Y_w))),param(Id(_T_),ClassType(Id(_Y_w))),param(Id(O),ClassType(Id(_Y_w))),param(Id(V),ClassType(Id(_Y_w))),param(Id(_),ClassType(Id(_Y_w))),param(Id(U7),ClassType(Id(_Y_w))),param(Id(_),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_2),ArrayType(9,ArrayType(2,ArrayType(7,BoolType))))),AttributeDecl(Static,VarDecl(Id($30),ArrayType(9,ArrayType(2,ArrayType(7,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($5_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($U_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($I7_3g7),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 376))

    def test_377(self):
        line = '''Class _b:F{Val f,z,$f,$8__:_;}Class _7H65_5{Val m,_:u;Constructor (){Return ;}Constructor (P,_,_2,_:Boolean ){}$0(){Var _,lwzm:Array [Array [Array [Int ,0102],0X36],0xA];Break ;{} }}Class S:_{Destructor (){}Destructor (){}Constructor (){Val _Z8,H1dh5:Float ;Continue ;}Constructor (){} }Class ___:_{}'''
        expect = '''Program([ClassDecl(Id(_b),Id(F),[AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(z),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($f),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($8__),ClassType(Id(_)),None))]),ClassDecl(Id(_7H65_5),[AttributeDecl(Instance,ConstDecl(Id(m),ClassType(Id(u)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(u)),None)),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(P),BoolType),param(Id(_),BoolType),param(Id(_2),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id($0),Static,[],Block([VarDecl(Id(_),ArrayType(10,ArrayType(54,ArrayType(66,IntType)))),VarDecl(Id(lwzm),ArrayType(10,ArrayType(54,ArrayType(66,IntType)))),Break,Block([])]))]),ClassDecl(Id(S),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_Z8),FloatType,None),ConstDecl(Id(H1dh5),FloatType,None),Continue])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 377))

    def test_378(self):
        line = '''Class _v:_{$_(){}Val $1,$5,$_Bm0,$3,S:Array [String ,0b11_0];Constructor (_:Array [Array [String ,0X42],0141];S,_9,L_:Array [Boolean ,0xD]){} }Class BJ:bi{}Class __IY2:h9{dG(){Continue ;{}{} }Var $t:Array [Array [Float ,36_4_786_6],70];Var L_H6,$5,$_:Array [Boolean ,0x23_2_1];}Class __4__:_{}'''
        expect = '''Program([ClassDecl(Id(_v),Id(_),[MethodDecl(Id($_),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(6,StringType),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(6,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_Bm0),ArrayType(6,StringType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(6,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(S),ArrayType(6,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(97,ArrayType(66,StringType))),param(Id(S),ArrayType(13,BoolType)),param(Id(_9),ArrayType(13,BoolType)),param(Id(L_),ArrayType(13,BoolType))],Block([]))]),ClassDecl(Id(BJ),Id(bi),[]),ClassDecl(Id(__IY2),Id(h9),[MethodDecl(Id(dG),Instance,[],Block([Continue,Block([]),Block([])])),AttributeDecl(Static,VarDecl(Id($t),ArrayType(70,ArrayType(3647866,FloatType)))),AttributeDecl(Instance,VarDecl(Id(L_H6),ArrayType(8993,BoolType))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(8993,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(8993,BoolType)))]),ClassDecl(Id(__4__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 378))

    def test_379(self):
        line = '''Class V:_{Constructor (VS,HR:__;_,ih__6R_:Array [Array [Array [Array [Array [Array [Array [Boolean ,1],022],0B1_1_0_0_1],01],0B1],0B1],0b1];_,_:k;FS:Int ;p,_:Boolean ;O:Array [Float ,318];v,_:_){}Constructor (AJt__:Array [Array [Array [String ,0b10],0b1_1_1],0B110_0]){} }'''
        expect = '''Program([ClassDecl(Id(V),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(VS),ClassType(Id(__))),param(Id(HR),ClassType(Id(__))),param(Id(_),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(25,ArrayType(18,ArrayType(1,BoolType)))))))),param(Id(ih__6R_),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(25,ArrayType(18,ArrayType(1,BoolType)))))))),param(Id(_),ClassType(Id(k))),param(Id(_),ClassType(Id(k))),param(Id(FS),IntType),param(Id(p),BoolType),param(Id(_),BoolType),param(Id(O),ArrayType(318,FloatType)),param(Id(v),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(AJt__),ArrayType(12,ArrayType(7,ArrayType(2,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 379))

    def test_380(self):
        line = '''Class _:P_{Var $07,B__2gWu_:o_;Val m0__,$6_:Float ;___(){}Var _n:Int ;Var ___,$_a:Array [Array [Array [Array [Float ,0B1],0X3B],0X3B],0140_2_1_1_1];Val __W,$J,JY_i,$ei,g,_:Array [Float ,70];}Class ox{}'''
        expect = '''Program([ClassDecl(Id(_),Id(P_),[AttributeDecl(Static,VarDecl(Id($07),ClassType(Id(o_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(B__2gWu_),ClassType(Id(o_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(m0__),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($6_),FloatType,None)),MethodDecl(Id(___),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_n),IntType)),AttributeDecl(Instance,VarDecl(Id(___),ArrayType(394313,ArrayType(59,ArrayType(59,ArrayType(1,FloatType)))))),AttributeDecl(Static,VarDecl(Id($_a),ArrayType(394313,ArrayType(59,ArrayType(59,ArrayType(1,FloatType)))))),AttributeDecl(Instance,ConstDecl(Id(__W),ArrayType(70,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($J),ArrayType(70,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(JY_i),ArrayType(70,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($ei),ArrayType(70,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(g),ArrayType(70,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(70,FloatType),None))]),ClassDecl(Id(ox),[])])'''
        self.assertTrue(TestAST.test(line, expect, 380))

    def test_381(self):
        line = '''Class _:p{Constructor (X,T:____o;___:_E){ {Break ;} }}Class t:_{Constructor (v_,Y_,_:aT;v9,_,x:Array [Array [Array [Array [Float ,0x4],15],0b1],0B1];I,M_n8,_:Int ){} }Class e{_(_:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ClassType(Id(____o))),param(Id(T),ClassType(Id(____o))),param(Id(___),ClassType(Id(_E)))],Block([Block([Break])]))]),ClassDecl(Id(t),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(v_),ClassType(Id(aT))),param(Id(Y_),ClassType(Id(aT))),param(Id(_),ClassType(Id(aT))),param(Id(v9),ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(4,FloatType))))),param(Id(_),ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(4,FloatType))))),param(Id(x),ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(4,FloatType))))),param(Id(I),IntType),param(Id(M_n8),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(e),[MethodDecl(Id(_),Instance,[param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 381))

    def test_382(self):
        line = '''Class _:y{n(g_P_:Array [String ,5_070]){} }Class __:C{}Class _:x{Constructor (N:Array [Array [Array [Array [Array [Array [Boolean ,0x16],9],070],070],0b111111],070];__:Array [Int ,0X56]){} }Class i{}'''
        expect = '''Program([ClassDecl(Id(_),Id(y),[MethodDecl(Id(n),Instance,[param(Id(g_P_),ArrayType(5070,StringType))],Block([]))]),ClassDecl(Id(__),Id(C),[]),ClassDecl(Id(_),Id(x),[MethodDecl(Id(Constructor),Instance,[param(Id(N),ArrayType(56,ArrayType(63,ArrayType(56,ArrayType(56,ArrayType(9,ArrayType(22,BoolType))))))),param(Id(__),ArrayType(86,IntType))],Block([]))]),ClassDecl(Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 382))

    def test_383(self):
        line = '''Class __{C(i11_,mL,D:Array [Array [Array [Float ,0X8_F_4_095_83],0b1_0],0b1100010];_:Array [Float ,020];IQ:__p;g:_){Break ;}Var R3j:UDeD;Var a_G:String ;Var Ff2_1U_l:Int ;Constructor (){}Val E,s:_6;}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(C),Instance,[param(Id(i11_),ArrayType(98,ArrayType(2,ArrayType(2403374467,FloatType)))),param(Id(mL),ArrayType(98,ArrayType(2,ArrayType(2403374467,FloatType)))),param(Id(D),ArrayType(98,ArrayType(2,ArrayType(2403374467,FloatType)))),param(Id(_),ArrayType(16,FloatType)),param(Id(IQ),ClassType(Id(__p))),param(Id(g),ClassType(Id(_)))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(R3j),ClassType(Id(UDeD)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(a_G),StringType)),AttributeDecl(Instance,VarDecl(Id(Ff2_1U_l),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(E),ClassType(Id(_6)),None)),AttributeDecl(Instance,ConstDecl(Id(s),ClassType(Id(_6)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 383))

    def test_384(self):
        line = '''Class V{Destructor (){}T(_L_8:Array [Float ,033];L,___:String ){Break ;Continue ;}Val ___,$_,__4A_X:Int ;Val IIHS:Array [Array [Array [Array [Array [Array [Array [Array [String ,0B110101],0X70_4_A],0X7ED2_D],033],06],2_7],0b1011011],4];}'''
        expect = '''Program([ClassDecl(Id(V),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(T),Instance,[param(Id(_L_8),ArrayType(27,FloatType)),param(Id(L),StringType),param(Id(___),StringType)],Block([Break,Continue])),AttributeDecl(Instance,ConstDecl(Id(___),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__4A_X),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(IIHS),ArrayType(4,ArrayType(91,ArrayType(27,ArrayType(6,ArrayType(27,ArrayType(519469,ArrayType(28746,ArrayType(53,StringType)))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 384))

    def test_385(self):
        line = '''Class __Z{_f2_(TE_,_,v:Array [Array [Array [Int ,0B1],0x9_5_9_1],63];S_:Int ){}Val J1_,_,_,$_D,$4,b:i5;}Class rBe:_Z{Var v:Array [Array [Array [Array [Array [Array [Float ,07],7],1],0b10_1_0],0b10111],07];Val _:U;Val GC:bZ_;}'''
        expect = '''Program([ClassDecl(Id(__Z),[MethodDecl(Id(_f2_),Instance,[param(Id(TE_),ArrayType(63,ArrayType(38289,ArrayType(1,IntType)))),param(Id(_),ArrayType(63,ArrayType(38289,ArrayType(1,IntType)))),param(Id(v),ArrayType(63,ArrayType(38289,ArrayType(1,IntType)))),param(Id(S_),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(J1_),ClassType(Id(i5)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(i5)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(i5)),None)),AttributeDecl(Static,ConstDecl(Id($_D),ClassType(Id(i5)),None)),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(i5)),None)),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(i5)),None))]),ClassDecl(Id(rBe),Id(_Z),[AttributeDecl(Instance,VarDecl(Id(v),ArrayType(7,ArrayType(23,ArrayType(10,ArrayType(1,ArrayType(7,ArrayType(7,FloatType)))))))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(U)),None)),AttributeDecl(Instance,ConstDecl(Id(GC),ClassType(Id(bZ_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 385))

    def test_386(self):
        line = '''Class l{Val L,$_6_,T:__u;}Class A_7{Val __,$u,$Z_QYc,$_h_:Boolean ;_(){} }Class IO{$8(L:__;_K,J:Array [Int ,0X5];D__:Float ;A:Array [Array [Array [String ,0B100001],0x6],0120]){} }'''
        expect = '''Program([ClassDecl(Id(l),[AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(__u)),None)),AttributeDecl(Static,ConstDecl(Id($_6_),ClassType(Id(__u)),None)),AttributeDecl(Instance,ConstDecl(Id(T),ClassType(Id(__u)),None))]),ClassDecl(Id(A_7),[AttributeDecl(Instance,ConstDecl(Id(__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($u),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($Z_QYc),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_h_),BoolType,None)),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(IO),[MethodDecl(Id($8),Static,[param(Id(L),ClassType(Id(__))),param(Id(_K),ArrayType(5,IntType)),param(Id(J),ArrayType(5,IntType)),param(Id(D__),FloatType),param(Id(A),ArrayType(80,ArrayType(6,ArrayType(33,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 386))

    def test_387(self):
        line = '''Class mo_R_32{$7(_:Int ;s:_36U;_,_,_9,_:Array [Array [String ,0b101000],0X1];_:_o_q9;_,r5u:Array [Float ,0x7];W,_:t;BX,R0_0,y:_6_;_:Int ;x,_3K:Boolean ){Self ._._.Z_._();} }'''
        expect = '''Program([ClassDecl(Id(mo_R_32),[MethodDecl(Id($7),Static,[param(Id(_),IntType),param(Id(s),ClassType(Id(_36U))),param(Id(_),ArrayType(1,ArrayType(40,StringType))),param(Id(_),ArrayType(1,ArrayType(40,StringType))),param(Id(_9),ArrayType(1,ArrayType(40,StringType))),param(Id(_),ArrayType(1,ArrayType(40,StringType))),param(Id(_),ClassType(Id(_o_q9))),param(Id(_),ArrayType(7,FloatType)),param(Id(r5u),ArrayType(7,FloatType)),param(Id(W),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(BX),ClassType(Id(_6_))),param(Id(R0_0),ClassType(Id(_6_))),param(Id(y),ClassType(Id(_6_))),param(Id(_),IntType),param(Id(x),BoolType),param(Id(_3K),BoolType)],Block([Call(FieldAccess(FieldAccess(FieldAccess(Self(),Id(_)),Id(_)),Id(Z_)),Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 387))

    def test_388(self):
        line = '''Class C{B_(){Break ;}$__(a:Array [Array [String ,0x5_2_5],0B10_0];_3b3:Int ;_:Int ){}Val yQ7U7:_;Destructor (){}Val $k___,$Lk6vB__:_39;$____(o_:Boolean ){} }Class U_8{Val $Ec3:Array [Array [String ,0B1010111],0X6_51];}'''
        expect = '''Program([ClassDecl(Id(C),[MethodDecl(Id(B_),Instance,[],Block([Break])),MethodDecl(Id($__),Static,[param(Id(a),ArrayType(4,ArrayType(1317,StringType))),param(Id(_3b3),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(yQ7U7),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($k___),ClassType(Id(_39)),None)),AttributeDecl(Static,ConstDecl(Id($Lk6vB__),ClassType(Id(_39)),None)),MethodDecl(Id($____),Static,[param(Id(o_),BoolType)],Block([]))]),ClassDecl(Id(U_8),[AttributeDecl(Static,ConstDecl(Id($Ec3),ArrayType(1617,ArrayType(87,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 388))

    def test_389(self):
        line = '''Class _:R{Val $9d,__1,B:Int ;}Class _{Constructor (){}Constructor (){}Destructor (){Break ;{} }}Class D_{Constructor (G8,_qk,P,_:Array [Array [String ,0X45],0B1_1];lk_,_,_18:String ;C,_,P3:Float ;u,LV:Float ){}$_(o:_c;o5q26_:Array [Array [Array [Array [Array [String ,0117],0X45],0X9],03325],7]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(R),[AttributeDecl(Static,ConstDecl(Id($9d),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__1),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(B),IntType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Block([])]))]),ClassDecl(Id(D_),[MethodDecl(Id(Constructor),Instance,[param(Id(G8),ArrayType(3,ArrayType(69,StringType))),param(Id(_qk),ArrayType(3,ArrayType(69,StringType))),param(Id(P),ArrayType(3,ArrayType(69,StringType))),param(Id(_),ArrayType(3,ArrayType(69,StringType))),param(Id(lk_),StringType),param(Id(_),StringType),param(Id(_18),StringType),param(Id(C),FloatType),param(Id(_),FloatType),param(Id(P3),FloatType),param(Id(u),FloatType),param(Id(LV),FloatType)],Block([])),MethodDecl(Id($_),Static,[param(Id(o),ClassType(Id(_c))),param(Id(o5q26_),ArrayType(7,ArrayType(1749,ArrayType(9,ArrayType(69,ArrayType(79,StringType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 389))

    def test_390(self):
        line = '''Class _2{}Class Q_1_:___{}Class hA{Val q_1__s,_,$_8,$__,$_:Array [Array [Array [Int ,2],0B1],02];Var _h0___608:_;Var VwN,a92,$9Q:Array [Array [Array [Array [Array [String ,0B111000],05],0B1_0_1],22],0x61];}'''
        expect = '''Program([ClassDecl(Id(_2),[]),ClassDecl(Id(Q_1_),Id(___),[]),ClassDecl(Id(hA),[AttributeDecl(Instance,ConstDecl(Id(q_1__s),ArrayType(2,ArrayType(1,ArrayType(2,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(1,ArrayType(2,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($_8),ArrayType(2,ArrayType(1,ArrayType(2,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(2,ArrayType(1,ArrayType(2,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,ArrayType(1,ArrayType(2,IntType))),None)),AttributeDecl(Instance,VarDecl(Id(_h0___608),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(VwN),ArrayType(97,ArrayType(22,ArrayType(5,ArrayType(5,ArrayType(56,StringType))))))),AttributeDecl(Instance,VarDecl(Id(a92),ArrayType(97,ArrayType(22,ArrayType(5,ArrayType(5,ArrayType(56,StringType))))))),AttributeDecl(Static,VarDecl(Id($9Q),ArrayType(97,ArrayType(22,ArrayType(5,ArrayType(5,ArrayType(56,StringType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 390))

    def test_391(self):
        line = '''Class _C:s{Constructor (_:Array [Array [Boolean ,0x4],2]){Return ;}Constructor (){Continue ;} }Class Y_:_a_{Val $35,nT8s,$7,$b,$Y,m___,$3:Float ;$3(_,o:String ;_I,f7I8:Array [Int ,0b101001]){} }'''
        expect = '''Program([ClassDecl(Id(_C),Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2,ArrayType(4,BoolType)))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(Y_),Id(_a_),[AttributeDecl(Static,ConstDecl(Id($35),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(nT8s),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($7),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($b),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($Y),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(m___),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($3),FloatType,None)),MethodDecl(Id($3),Static,[param(Id(_),StringType),param(Id(o),StringType),param(Id(_I),ArrayType(41,IntType)),param(Id(f7I8),ArrayType(41,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 391))

    def test_392(self):
        line = '''Class T:_{}Class g:v{Val $4,tH:Array [Array [Boolean ,15],03];Constructor (T_M8:Array [Array [Array [Boolean ,044],0x2_2],0X5];_u,y:_8_;x50,_:Array [Float ,01];_:String ;P:_9R_;_,RA__6__7_:Int ;__53:S;_V:Float ;_,_1:Array [Array [Array [Int ,2],0b11_00],0B1000000];L,_:Float ;f,D__:Array [Array [Int ,0x2],70];e0,_:_;_:_){}$_7_4__4_x(ub:Array [Array [Boolean ,044],2]){Return ;}$7K(){Continue ;Break ;} }Class _{Val $u5_M2CU:String ;Var $_z_:String ;}Class E_:_2{}Class _i:_R0{}'''
        expect = '''Program([ClassDecl(Id(T),Id(_),[]),ClassDecl(Id(g),Id(v),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(3,ArrayType(15,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(tH),ArrayType(3,ArrayType(15,BoolType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(T_M8),ArrayType(5,ArrayType(34,ArrayType(36,BoolType)))),param(Id(_u),ClassType(Id(_8_))),param(Id(y),ClassType(Id(_8_))),param(Id(x50),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_),StringType),param(Id(P),ClassType(Id(_9R_))),param(Id(_),IntType),param(Id(RA__6__7_),IntType),param(Id(__53),ClassType(Id(S))),param(Id(_V),FloatType),param(Id(_),ArrayType(64,ArrayType(12,ArrayType(2,IntType)))),param(Id(_1),ArrayType(64,ArrayType(12,ArrayType(2,IntType)))),param(Id(L),FloatType),param(Id(_),FloatType),param(Id(f),ArrayType(70,ArrayType(2,IntType))),param(Id(D__),ArrayType(70,ArrayType(2,IntType))),param(Id(e0),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id($_7_4__4_x),Static,[param(Id(ub),ArrayType(2,ArrayType(36,BoolType)))],Block([Return()])),MethodDecl(Id($7K),Static,[],Block([Continue,Break]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($u5_M2CU),StringType,None)),AttributeDecl(Static,VarDecl(Id($_z_),StringType))]),ClassDecl(Id(E_),Id(_2),[]),ClassDecl(Id(_i),Id(_R0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 392))

    def test_393(self):
        line = '''Class _:_tL{Constructor (E0_b,_H1,_:_h_9){Val ___fD:Boolean ;} }Class _:_{}Class _7686:p{Destructor (){} }Class E_{Destructor (){Break ;}Var $p:String ;}Class o:E_{Destructor (){Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(_tL),[MethodDecl(Id(Constructor),Instance,[param(Id(E0_b),ClassType(Id(_h_9))),param(Id(_H1),ClassType(Id(_h_9))),param(Id(_),ClassType(Id(_h_9)))],Block([ConstDecl(Id(___fD),BoolType,None)]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_7686),Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(E_),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($p),StringType))]),ClassDecl(Id(o),Id(E_),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 393))

    def test_394(self):
        line = '''Class __:m{Constructor (_,__27_s8:__;u_999,i4,_,X:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B10000],0x4],0x5],060],03],060],0x19],0X43],0x19];_p:_;z_:Array [Array [Array [Array [String ,0B10000],3],0xF],0b10011]){}Constructor (lg_:Array [Array [Array [Array [Float ,0b10011],0xD],0b10011],0b11]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(m),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__))),param(Id(__27_s8),ClassType(Id(__))),param(Id(u_999),ArrayType(25,ArrayType(67,ArrayType(25,ArrayType(48,ArrayType(3,ArrayType(48,ArrayType(5,ArrayType(4,ArrayType(16,FloatType)))))))))),param(Id(i4),ArrayType(25,ArrayType(67,ArrayType(25,ArrayType(48,ArrayType(3,ArrayType(48,ArrayType(5,ArrayType(4,ArrayType(16,FloatType)))))))))),param(Id(_),ArrayType(25,ArrayType(67,ArrayType(25,ArrayType(48,ArrayType(3,ArrayType(48,ArrayType(5,ArrayType(4,ArrayType(16,FloatType)))))))))),param(Id(X),ArrayType(25,ArrayType(67,ArrayType(25,ArrayType(48,ArrayType(3,ArrayType(48,ArrayType(5,ArrayType(4,ArrayType(16,FloatType)))))))))),param(Id(_p),ClassType(Id(_))),param(Id(z_),ArrayType(19,ArrayType(15,ArrayType(3,ArrayType(16,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(lg_),ArrayType(3,ArrayType(19,ArrayType(13,ArrayType(19,FloatType)))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 394))

    def test_395(self):
        line = '''Class _Q8{Var G,$pt,_0z2:Array [Array [Array [Array [Int ,0X34],98],0b1],0B1];}Class __:_7{}Class Uw{_(O:Array [Array [Array [Array [Array [String ,0b11_0],8],0B1_1],0b101100],98]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_Q8),[AttributeDecl(Instance,VarDecl(Id(G),ArrayType(1,ArrayType(1,ArrayType(98,ArrayType(52,IntType)))))),AttributeDecl(Static,VarDecl(Id($pt),ArrayType(1,ArrayType(1,ArrayType(98,ArrayType(52,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_0z2),ArrayType(1,ArrayType(1,ArrayType(98,ArrayType(52,IntType))))))]),ClassDecl(Id(__),Id(_7),[]),ClassDecl(Id(Uw),[MethodDecl(Id(_),Instance,[param(Id(O),ArrayType(98,ArrayType(44,ArrayType(3,ArrayType(8,ArrayType(6,StringType))))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 395))

    def test_396(self):
        line = '''Class _{}Class u{Constructor (){}__(__i_1:Boolean ;_,_:Float ;TnB:Array [Array [Array [Array [Array [Int ,0B100010],06_57],601_9],6],6];_b,c:_q){Continue ;}Var $P___,_0:_76_X4;l0_(){} }Class y{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(__),Instance,[param(Id(__i_1),BoolType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(TnB),ArrayType(6,ArrayType(6,ArrayType(6019,ArrayType(431,ArrayType(34,IntType)))))),param(Id(_b),ClassType(Id(_q))),param(Id(c),ClassType(Id(_q)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($P___),ClassType(Id(_76_X4)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ClassType(Id(_76_X4)),NullLiteral())),MethodDecl(Id(l0_),Instance,[],Block([]))]),ClassDecl(Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 396))

    def test_397(self):
        line = '''Class _6D{Constructor (W,n_:_;_:Array [Array [Array [Array [Float ,0XA],07_3],91],0B1110];lR:String ){ {} }Var $4__:Array [Int ,5];}Class _y2{}Class RldMX{Var $Ea3:c;Var _0,$_,A,H,$_t0,d:String ;r_Q5Yv(_I:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_6D),[MethodDecl(Id(Constructor),Instance,[param(Id(W),ClassType(Id(_))),param(Id(n_),ClassType(Id(_))),param(Id(_),ArrayType(14,ArrayType(91,ArrayType(59,ArrayType(10,FloatType))))),param(Id(lR),StringType)],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($4__),ArrayType(5,IntType)))]),ClassDecl(Id(_y2),[]),ClassDecl(Id(RldMX),[AttributeDecl(Static,VarDecl(Id($Ea3),ClassType(Id(c)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(A),StringType)),AttributeDecl(Instance,VarDecl(Id(H),StringType)),AttributeDecl(Static,VarDecl(Id($_t0),StringType)),AttributeDecl(Instance,VarDecl(Id(d),StringType)),MethodDecl(Id(r_Q5Yv),Instance,[param(Id(_I),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 397))

    def test_398(self):
        line = '''Class __:_{Var _:Array [String ,2];}Class d_:M{}Class _5_{}Class B{}Class B_2:_P{Var $_,_N1:Float ;Val $__,$0,v7_:Array [Float ,0xFBA4];Var _M:Float ;Var $_:Boolean =-New __2_().i_P79._V___4Q6_f_1.j;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,StringType)))]),ClassDecl(Id(d_),Id(M),[]),ClassDecl(Id(_5_),[]),ClassDecl(Id(B),[]),ClassDecl(Id(B_2),Id(_P),[AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_N1),FloatType)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(64420,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(64420,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(v7_),ArrayType(64420,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(_M),FloatType)),AttributeDecl(Static,VarDecl(Id($_),BoolType,UnaryOp(-,FieldAccess(FieldAccess(FieldAccess(NewExpr(Id(__2_),[]),Id(i_P79)),Id(_V___4Q6_f_1)),Id(j)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 398))

    def test_399(self):
        line = '''Class _8{}Class _:V5_{Destructor (){}Val $8_,f,B,$_ng6:Float ;}Class _5_4_:G6U{Constructor (_C42yV_:Int ;_X,W_o:Array [Array [Array [Array [Float ,065],065],0b1],0x4C]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_8),[]),ClassDecl(Id(_),Id(V5_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($8_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(f),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(B),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_ng6),FloatType,None))]),ClassDecl(Id(_5_4_),Id(G6U),[MethodDecl(Id(Constructor),Instance,[param(Id(_C42yV_),IntType),param(Id(_X),ArrayType(76,ArrayType(1,ArrayType(53,ArrayType(53,FloatType))))),param(Id(W_o),ArrayType(76,ArrayType(1,ArrayType(53,ArrayType(53,FloatType)))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 399))

    def test_400(self):
        line = '''Class dskz_:_u{Var _2:_t;Val m,$oK2,_9__:Array [Array [String ,0x4F],0b1];Destructor (){} }Class i{}Class _x:o{Constructor (_:Array [Array [Float ,8],0X45];_,g_:Array [Int ,0b1];_,_:String ;VZ,j,_:n;c,_A:Array [Array [Float ,639],0b1100001];b:Float ;d4,B_:Array [String ,042];_J:Array [Array [Array [Boolean ,23],33],0B101100]){} }Class _Q2_4{}'''
        expect = '''Program([ClassDecl(Id(dskz_),Id(_u),[AttributeDecl(Instance,VarDecl(Id(_2),ClassType(Id(_t)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(m),ArrayType(1,ArrayType(79,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($oK2),ArrayType(1,ArrayType(79,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_9__),ArrayType(1,ArrayType(79,StringType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(i),[]),ClassDecl(Id(_x),Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(69,ArrayType(8,FloatType))),param(Id(_),ArrayType(1,IntType)),param(Id(g_),ArrayType(1,IntType)),param(Id(_),StringType),param(Id(_),StringType),param(Id(VZ),ClassType(Id(n))),param(Id(j),ClassType(Id(n))),param(Id(_),ClassType(Id(n))),param(Id(c),ArrayType(97,ArrayType(639,FloatType))),param(Id(_A),ArrayType(97,ArrayType(639,FloatType))),param(Id(b),FloatType),param(Id(d4),ArrayType(34,StringType)),param(Id(B_),ArrayType(34,StringType)),param(Id(_J),ArrayType(44,ArrayType(33,ArrayType(23,BoolType))))],Block([]))]),ClassDecl(Id(_Q2_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 400))

    def test_401(self):
        line = '''Class L6:a_W0{}Class _{Val _,$2:Array [Array [Array [Array [Float ,01_7],0b1],3_4_9_5],0X17];Var $_,$2,_:Array [String ,26];Val _,$b,$_:Array [Int ,0X17];Destructor (){} }Class ___FL9:_48{}Class __8{}'''
        expect = '''Program([ClassDecl(Id(L6),Id(a_W0),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(23,ArrayType(3495,ArrayType(1,ArrayType(15,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(23,ArrayType(3495,ArrayType(1,ArrayType(15,FloatType)))),None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(26,StringType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(26,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(26,StringType))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(23,IntType),None)),AttributeDecl(Static,ConstDecl(Id($b),ArrayType(23,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(23,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___FL9),Id(_48),[]),ClassDecl(Id(__8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 401))

    def test_402(self):
        line = '''Class _{Constructor (_,W:Array [String ,2_9];_,___y0_z__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,11],0b101],0b1],0X37],065],6],0X6_D],0b1_1_110],065],0b101],11];_P_,_,JEYf:Array [Array [Array [String ,0xB_E_E],11],0b101]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(29,StringType)),param(Id(W),ArrayType(29,StringType)),param(Id(_),ArrayType(11,ArrayType(5,ArrayType(53,ArrayType(30,ArrayType(109,ArrayType(6,ArrayType(53,ArrayType(55,ArrayType(1,ArrayType(5,ArrayType(11,BoolType)))))))))))),param(Id(___y0_z__),ArrayType(11,ArrayType(5,ArrayType(53,ArrayType(30,ArrayType(109,ArrayType(6,ArrayType(53,ArrayType(55,ArrayType(1,ArrayType(5,ArrayType(11,BoolType)))))))))))),param(Id(_P_),ArrayType(5,ArrayType(11,ArrayType(3054,StringType)))),param(Id(_),ArrayType(5,ArrayType(11,ArrayType(3054,StringType)))),param(Id(JEYf),ArrayType(5,ArrayType(11,ArrayType(3054,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 402))

    def test_403(self):
        line = '''Class a:M{}Class v8{Constructor (s_369_:Int ;_0:vW7_;I_,_7_,_,_,GR:Array [Int ,42];_9__cC,t,v8:Array [String ,0b1]){Break ;}Var $_,$3,$_2:Array [Array [String ,0B11],0x4];}'''
        expect = '''Program([ClassDecl(Id(a),Id(M),[]),ClassDecl(Id(v8),[MethodDecl(Id(Constructor),Instance,[param(Id(s_369_),IntType),param(Id(_0),ClassType(Id(vW7_))),param(Id(I_),ArrayType(42,IntType)),param(Id(_7_),ArrayType(42,IntType)),param(Id(_),ArrayType(42,IntType)),param(Id(_),ArrayType(42,IntType)),param(Id(GR),ArrayType(42,IntType)),param(Id(_9__cC),ArrayType(1,StringType)),param(Id(t),ArrayType(1,StringType)),param(Id(v8),ArrayType(1,StringType))],Block([Break])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($3),ArrayType(4,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($_2),ArrayType(4,ArrayType(3,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 403))

    def test_404(self):
        line = '''Class _3vgY32E{}Class _:l6L{Constructor (J,_utq:Array [Array [Array [String ,86],05],5_5_7_8_1_0_2];rI,_:Array [Int ,0X56]){}Val vc:Array [Array [Float ,0x50],0b1011101];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_3vgY32E),[]),ClassDecl(Id(_),Id(l6L),[MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(5578102,ArrayType(5,ArrayType(86,StringType)))),param(Id(_utq),ArrayType(5578102,ArrayType(5,ArrayType(86,StringType)))),param(Id(rI),ArrayType(86,IntType)),param(Id(_),ArrayType(86,IntType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(vc),ArrayType(93,ArrayType(80,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 404))

    def test_405(self):
        line = '''Class t{}Class F{}Class _:_{Constructor (){}_(_,_:Array [String ,02_0];_RE1:Hm_r7;_7_:Array [Array [Int ,0b11],0B1_00_0];a:Array [Array [Int ,0B1],0B1];r:C_;_2:Array [Array [Boolean ,0x46],82]){} }'''
        expect = '''Program([ClassDecl(Id(t),[]),ClassDecl(Id(F),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(16,StringType)),param(Id(_),ArrayType(16,StringType)),param(Id(_RE1),ClassType(Id(Hm_r7))),param(Id(_7_),ArrayType(8,ArrayType(3,IntType))),param(Id(a),ArrayType(1,ArrayType(1,IntType))),param(Id(r),ClassType(Id(C_))),param(Id(_2),ArrayType(82,ArrayType(70,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 405))

    def test_406(self):
        line = '''Class _:L_{Constructor (__7w,_7:Float ){}Val $_2:Array [Array [Float ,057],0B1_1_00];Constructor (){} }Class R9{Val _AhD_,l_:Array [Array [String ,057],0b101_0_0];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(L_),[MethodDecl(Id(Constructor),Instance,[param(Id(__7w),FloatType),param(Id(_7),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_2),ArrayType(12,ArrayType(47,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(R9),[AttributeDecl(Instance,ConstDecl(Id(_AhD_),ArrayType(20,ArrayType(47,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(l_),ArrayType(20,ArrayType(47,StringType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 406))

    def test_407(self):
        line = '''Class H{Constructor (s:Array [Float ,7_59_5800_40];A8c,e19q____,_29,i:Array [Array [Array [String ,0x2C],0b101011],0B1010111];bRaU,q:_Z){} }Class __{Var __I,$__:Array [Array [Array [Array [Float ,0XC_BB],6],96],0X29];Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(759580040,FloatType)),param(Id(A8c),ArrayType(87,ArrayType(43,ArrayType(44,StringType)))),param(Id(e19q____),ArrayType(87,ArrayType(43,ArrayType(44,StringType)))),param(Id(_29),ArrayType(87,ArrayType(43,ArrayType(44,StringType)))),param(Id(i),ArrayType(87,ArrayType(43,ArrayType(44,StringType)))),param(Id(bRaU),ClassType(Id(_Z))),param(Id(q),ClassType(Id(_Z)))],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(__I),ArrayType(41,ArrayType(96,ArrayType(6,ArrayType(3259,FloatType)))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(41,ArrayType(96,ArrayType(6,ArrayType(3259,FloatType)))))),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 407))

    def test_408(self):
        line = '''Class _:_1{Val _U:_;Destructor (){}$3_(_:Array [Array [Array [Array [Array [Boolean ,1],056],0X5],076_2],0b1];Da6:n;L_83:Array [Array [Array [Boolean ,0b111011],0B1_1_1],0b10]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_1),[AttributeDecl(Instance,ConstDecl(Id(_U),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($3_),Static,[param(Id(_),ArrayType(1,ArrayType(498,ArrayType(5,ArrayType(46,ArrayType(1,BoolType)))))),param(Id(Da6),ClassType(Id(n))),param(Id(L_83),ArrayType(2,ArrayType(7,ArrayType(59,BoolType))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 408))

    def test_409(self):
        line = '''Class _e{Constructor (){} }Class k0e5:_{YmJ(q7p__,_:Float ;_6,g57_,_,D_,_h:y;C2:Array [Array [Float ,37],0X6F];_,f_E_,Q,FJ__B:Array [Array [Float ,0305],021];_1o_:Array [Array [Array [Array [Int ,01],021],0XBD_2],0b10];pw,GZ:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_e),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(k0e5),Id(_),[MethodDecl(Id(YmJ),Instance,[param(Id(q7p__),FloatType),param(Id(_),FloatType),param(Id(_6),ClassType(Id(y))),param(Id(g57_),ClassType(Id(y))),param(Id(_),ClassType(Id(y))),param(Id(D_),ClassType(Id(y))),param(Id(_h),ClassType(Id(y))),param(Id(C2),ArrayType(111,ArrayType(37,FloatType))),param(Id(_),ArrayType(17,ArrayType(197,FloatType))),param(Id(f_E_),ArrayType(17,ArrayType(197,FloatType))),param(Id(Q),ArrayType(17,ArrayType(197,FloatType))),param(Id(FJ__B),ArrayType(17,ArrayType(197,FloatType))),param(Id(_1o_),ArrayType(2,ArrayType(3026,ArrayType(17,ArrayType(1,IntType))))),param(Id(pw),BoolType),param(Id(GZ),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 409))

    def test_410(self):
        line = '''Class U_{Constructor (X_:Array [Array [Array [Array [Int ,0xC9],0b10_00],5],0B111010];_:Array [Array [Boolean ,0b1_0],0x9];w,_,_,F_,O,_m6__,F:_){ {{Return ;Var _e,_,f6,_:o9_;Val _,l____,__:Float ;} }} }Class _{Destructor (){ {} }Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(U_),[MethodDecl(Id(Constructor),Instance,[param(Id(X_),ArrayType(58,ArrayType(5,ArrayType(8,ArrayType(201,IntType))))),param(Id(_),ArrayType(9,ArrayType(2,BoolType))),param(Id(w),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(F_),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(_m6__),ClassType(Id(_))),param(Id(F),ClassType(Id(_)))],Block([Block([Block([Return(),VarDecl(Id(_e),ClassType(Id(o9_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(o9_)),NullLiteral()),VarDecl(Id(f6),ClassType(Id(o9_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(o9_)),NullLiteral()),ConstDecl(Id(_),FloatType,None),ConstDecl(Id(l____),FloatType,None),ConstDecl(Id(__),FloatType,None)])])]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 410))

    def test_411(self):
        line = '''Class _:JU{Constructor (v,w_B:String ;e,GJ:String ;k_:Array [Array [Array [Array [Float ,0X2_F],0b1010100],042],0b1]){}Val $o:Array [Array [Array [String ,0X3F],1_33],1_9];}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(JU),[MethodDecl(Id(Constructor),Instance,[param(Id(v),StringType),param(Id(w_B),StringType),param(Id(e),StringType),param(Id(GJ),StringType),param(Id(k_),ArrayType(1,ArrayType(34,ArrayType(84,ArrayType(47,FloatType)))))],Block([])),AttributeDecl(Static,ConstDecl(Id($o),ArrayType(19,ArrayType(133,ArrayType(63,StringType))),None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 411))

    def test_412(self):
        line = '''Class _{_(b:_7;_e_,_b:Array [Int ,100];_,_,_:Array [Array [Array [Boolean ,0x6],0B1001110],014];u,b,__,X:Array [String ,0x4C];_,__,h:Array [Array [Array [Array [Array [Array [Int ,7],0B11],02_3],0x4C],05],0b101000];Mk1,_G:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(b),ClassType(Id(_7))),param(Id(_e_),ArrayType(100,IntType)),param(Id(_b),ArrayType(100,IntType)),param(Id(_),ArrayType(12,ArrayType(78,ArrayType(6,BoolType)))),param(Id(_),ArrayType(12,ArrayType(78,ArrayType(6,BoolType)))),param(Id(_),ArrayType(12,ArrayType(78,ArrayType(6,BoolType)))),param(Id(u),ArrayType(76,StringType)),param(Id(b),ArrayType(76,StringType)),param(Id(__),ArrayType(76,StringType)),param(Id(X),ArrayType(76,StringType)),param(Id(_),ArrayType(40,ArrayType(5,ArrayType(76,ArrayType(19,ArrayType(3,ArrayType(7,IntType))))))),param(Id(__),ArrayType(40,ArrayType(5,ArrayType(76,ArrayType(19,ArrayType(3,ArrayType(7,IntType))))))),param(Id(h),ArrayType(40,ArrayType(5,ArrayType(76,ArrayType(19,ArrayType(3,ArrayType(7,IntType))))))),param(Id(Mk1),IntType),param(Id(_G),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 412))

    def test_413(self):
        line = '''Class _{_(E,__,S9_32:Array [String ,0b1010100];_o:Boolean ){} }Class _8w{Destructor (){}Val $vJ_:Array [Array [Array [Array [Array [Array [Float ,0x38F_1],7_7],0b1_10],0x1],67],0b1010100];}Class _:M{Var t0n_,_M3A:_9;}Class _:_{Val $91,$g,$_C0:_;Destructor (){Break ;Continue ;}$a(_:XR9O){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(E),ArrayType(84,StringType)),param(Id(__),ArrayType(84,StringType)),param(Id(S9_32),ArrayType(84,StringType)),param(Id(_o),BoolType)],Block([]))]),ClassDecl(Id(_8w),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($vJ_),ArrayType(84,ArrayType(67,ArrayType(1,ArrayType(6,ArrayType(77,ArrayType(14577,FloatType)))))),None))]),ClassDecl(Id(_),Id(M),[AttributeDecl(Instance,VarDecl(Id(t0n_),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_M3A),ClassType(Id(_9)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($91),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($g),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_C0),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue])),MethodDecl(Id($a),Static,[param(Id(_),ClassType(Id(XR9O)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 413))

    def test_414(self):
        line = '''Class _:_{Val $__:t;k(){Var h_,_4zg,T9,__:Array [Array [Array [String ,0x59],0b10_1_11],0B1];Continue ;} }Class W_:___{Val _0_Q:Array [Float ,0X9_91_5_E1_C];Var $32:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(t)),None)),MethodDecl(Id(k),Instance,[],Block([VarDecl(Id(h_),ArrayType(1,ArrayType(23,ArrayType(89,StringType)))),VarDecl(Id(_4zg),ArrayType(1,ArrayType(23,ArrayType(89,StringType)))),VarDecl(Id(T9),ArrayType(1,ArrayType(23,ArrayType(89,StringType)))),VarDecl(Id(__),ArrayType(1,ArrayType(23,ArrayType(89,StringType)))),Continue]))]),ClassDecl(Id(W_),Id(___),[AttributeDecl(Instance,ConstDecl(Id(_0_Q),ArrayType(160521756,FloatType),None)),AttributeDecl(Static,VarDecl(Id($32),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 414))

    def test_415(self):
        line = '''Class e__{Val _,R,$__,c_9Z,_:Array [Boolean ,04];Val D_,_,$__,_,iDQ:Array [Array [Int ,6_5],0X5A];}Class T8:_{_hU(a,_rgg_:Array [Array [Array [Boolean ,0X4A],0117],9];N:Array [Array [Int ,0b110011],9];_MQ:Array [Float ,0117];_D8:C){} }'''
        expect = '''Program([ClassDecl(Id(e__),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(R),ArrayType(4,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(4,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(c_9Z),ArrayType(4,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(D_),ArrayType(90,ArrayType(65,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(90,ArrayType(65,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(90,ArrayType(65,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(90,ArrayType(65,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(iDQ),ArrayType(90,ArrayType(65,IntType)),None))]),ClassDecl(Id(T8),Id(_),[MethodDecl(Id(_hU),Instance,[param(Id(a),ArrayType(9,ArrayType(79,ArrayType(74,BoolType)))),param(Id(_rgg_),ArrayType(9,ArrayType(79,ArrayType(74,BoolType)))),param(Id(N),ArrayType(9,ArrayType(51,IntType))),param(Id(_MQ),ArrayType(79,FloatType)),param(Id(_D8),ClassType(Id(C)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 415))

    def test_416(self):
        line = '''Class Q_S:_{}Class _8:V__T{}Class i_:h{Constructor (d9,_5_9y5:Array [Array [Float ,2],0B1100100];_u,_:Array [Float ,0x28];N:Int ;_2:Array [Array [String ,2],0114];s,_29,_8,t_94,_44__:Array [Array [Array [Float ,0x28],0x6_2_7],0b100000];_:Int ;Y:Float ;t_,_:String ;__:Array [Array [Float ,0b11_1],0B10]){} }Class K{}'''
        expect = '''Program([ClassDecl(Id(Q_S),Id(_),[]),ClassDecl(Id(_8),Id(V__T),[]),ClassDecl(Id(i_),Id(h),[MethodDecl(Id(Constructor),Instance,[param(Id(d9),ArrayType(100,ArrayType(2,FloatType))),param(Id(_5_9y5),ArrayType(100,ArrayType(2,FloatType))),param(Id(_u),ArrayType(40,FloatType)),param(Id(_),ArrayType(40,FloatType)),param(Id(N),IntType),param(Id(_2),ArrayType(76,ArrayType(2,StringType))),param(Id(s),ArrayType(32,ArrayType(1575,ArrayType(40,FloatType)))),param(Id(_29),ArrayType(32,ArrayType(1575,ArrayType(40,FloatType)))),param(Id(_8),ArrayType(32,ArrayType(1575,ArrayType(40,FloatType)))),param(Id(t_94),ArrayType(32,ArrayType(1575,ArrayType(40,FloatType)))),param(Id(_44__),ArrayType(32,ArrayType(1575,ArrayType(40,FloatType)))),param(Id(_),IntType),param(Id(Y),FloatType),param(Id(t_),StringType),param(Id(_),StringType),param(Id(__),ArrayType(2,ArrayType(7,FloatType)))],Block([]))]),ClassDecl(Id(K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 416))

    def test_417(self):
        line = '''Class xI{Val $_,N,$dS56,_,n:Array [Int ,1_1_4];}Class _t84Jb{Var c,_:Array [String ,0B1];}Class H:_{Var $i,$_t:Array [Array [Array [Array [String ,07],88],88],88];}Class _{Var $1,_iK0,$Q,$_:Int ;Constructor (C5,_2:Array [Int ,07_647];_,_:Array [Int ,0b1]){} }'''
        expect = '''Program([ClassDecl(Id(xI),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(114,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(N),ArrayType(114,IntType),None)),AttributeDecl(Static,ConstDecl(Id($dS56),ArrayType(114,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(114,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(n),ArrayType(114,IntType),None))]),ClassDecl(Id(_t84Jb),[AttributeDecl(Instance,VarDecl(Id(c),ArrayType(1,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,StringType)))]),ClassDecl(Id(H),Id(_),[AttributeDecl(Static,VarDecl(Id($i),ArrayType(88,ArrayType(88,ArrayType(88,ArrayType(7,StringType)))))),AttributeDecl(Static,VarDecl(Id($_t),ArrayType(88,ArrayType(88,ArrayType(88,ArrayType(7,StringType))))))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($1),IntType)),AttributeDecl(Instance,VarDecl(Id(_iK0),IntType)),AttributeDecl(Static,VarDecl(Id($Q),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(C5),ArrayType(4007,IntType)),param(Id(_2),ArrayType(4007,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 417))

    def test_418(self):
        line = '''Class _70:_{$0(_15,L___F:Boolean ;_P9,_6t,S,P,R_y60:Array [Array [Float ,46],0B11];A,_:Boolean ;D:z;i:Float ;_:_1_H9;r,_,_,_p_:F){Break ;} }Class r6_:G_R{Constructor (H,u:Array [Boolean ,46]){} }'''
        expect = '''Program([ClassDecl(Id(_70),Id(_),[MethodDecl(Id($0),Static,[param(Id(_15),BoolType),param(Id(L___F),BoolType),param(Id(_P9),ArrayType(3,ArrayType(46,FloatType))),param(Id(_6t),ArrayType(3,ArrayType(46,FloatType))),param(Id(S),ArrayType(3,ArrayType(46,FloatType))),param(Id(P),ArrayType(3,ArrayType(46,FloatType))),param(Id(R_y60),ArrayType(3,ArrayType(46,FloatType))),param(Id(A),BoolType),param(Id(_),BoolType),param(Id(D),ClassType(Id(z))),param(Id(i),FloatType),param(Id(_),ClassType(Id(_1_H9))),param(Id(r),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(_p_),ClassType(Id(F)))],Block([Break]))]),ClassDecl(Id(r6_),Id(G_R),[MethodDecl(Id(Constructor),Instance,[param(Id(H),ArrayType(46,BoolType)),param(Id(u),ArrayType(46,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 418))

    def test_419(self):
        line = '''Class _2{Destructor (){} }Class w{}Class _:h2{XR6___B7(){}_1(o_:_;_:E1_;_8:Array [Array [Array [Array [Array [Array [Int ,0xD],07],0B1000111],0B11],0B1],05_0];Q,o:Array [Array [Float ,045],045];R:_4){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_2),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w),[]),ClassDecl(Id(_),Id(h2),[MethodDecl(Id(XR6___B7),Instance,[],Block([])),MethodDecl(Id(_1),Instance,[param(Id(o_),ClassType(Id(_))),param(Id(_),ClassType(Id(E1_))),param(Id(_8),ArrayType(40,ArrayType(1,ArrayType(3,ArrayType(71,ArrayType(7,ArrayType(13,IntType))))))),param(Id(Q),ArrayType(37,ArrayType(37,FloatType))),param(Id(o),ArrayType(37,ArrayType(37,FloatType))),param(Id(R),ClassType(Id(_4)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 419))

    def test_420(self):
        line = '''Class __2{Destructor (){Return ;} }Class a{S(){Break ;}Constructor (_:Float ;_A,P_:Array [Array [Array [Boolean ,0b1001100],0x240_06_6],05];_:Array [Float ,0x7B];E:IG6;_B,_J_:R){}Var C_,$_8x:Float ;Var $0y_,$fa,$I__,_:H;}'''
        expect = '''Program([ClassDecl(Id(__2),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(a),[MethodDecl(Id(S),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_A),ArrayType(5,ArrayType(2359398,ArrayType(76,BoolType)))),param(Id(P_),ArrayType(5,ArrayType(2359398,ArrayType(76,BoolType)))),param(Id(_),ArrayType(123,FloatType)),param(Id(E),ClassType(Id(IG6))),param(Id(_B),ClassType(Id(R))),param(Id(_J_),ClassType(Id(R)))],Block([])),AttributeDecl(Instance,VarDecl(Id(C_),FloatType)),AttributeDecl(Static,VarDecl(Id($_8x),FloatType)),AttributeDecl(Static,VarDecl(Id($0y_),ClassType(Id(H)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($fa),ClassType(Id(H)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($I__),ClassType(Id(H)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(H)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 420))

    def test_421(self):
        line = '''Class g{}Class _:s{Val _:Float ;}Class _:__{}Class g_:_{}Class U_:Y_{Constructor (j_nI,A,FN,a:Array [Array [Array [Array [Array [Boolean ,0X25],0b1011100],32],0B10],0B1];N0_:Boolean ){}Constructor (_Z_:x;_S:Array [String ,32]){ {}Break ;} }'''
        expect = '''Program([ClassDecl(Id(g),[]),ClassDecl(Id(_),Id(s),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(g_),Id(_),[]),ClassDecl(Id(U_),Id(Y_),[MethodDecl(Id(Constructor),Instance,[param(Id(j_nI),ArrayType(1,ArrayType(2,ArrayType(32,ArrayType(92,ArrayType(37,BoolType)))))),param(Id(A),ArrayType(1,ArrayType(2,ArrayType(32,ArrayType(92,ArrayType(37,BoolType)))))),param(Id(FN),ArrayType(1,ArrayType(2,ArrayType(32,ArrayType(92,ArrayType(37,BoolType)))))),param(Id(a),ArrayType(1,ArrayType(2,ArrayType(32,ArrayType(92,ArrayType(37,BoolType)))))),param(Id(N0_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_Z_),ClassType(Id(x))),param(Id(_S),ArrayType(32,StringType))],Block([Block([]),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 421))

    def test_422(self):
        line = '''Class z:_{}Class _8:m0__{}Class _l{}Class zP{Constructor (K__:Boolean ){ {} }I(_,_,u7__,_0:Array [Array [Array [Array [Array [Float ,01],0B110_1_0],042],0x4],0B1_0]){} }'''
        expect = '''Program([ClassDecl(Id(z),Id(_),[]),ClassDecl(Id(_8),Id(m0__),[]),ClassDecl(Id(_l),[]),ClassDecl(Id(zP),[MethodDecl(Id(Constructor),Instance,[param(Id(K__),BoolType)],Block([Block([])])),MethodDecl(Id(I),Instance,[param(Id(_),ArrayType(2,ArrayType(4,ArrayType(34,ArrayType(26,ArrayType(1,FloatType)))))),param(Id(_),ArrayType(2,ArrayType(4,ArrayType(34,ArrayType(26,ArrayType(1,FloatType)))))),param(Id(u7__),ArrayType(2,ArrayType(4,ArrayType(34,ArrayType(26,ArrayType(1,FloatType)))))),param(Id(_0),ArrayType(2,ArrayType(4,ArrayType(34,ArrayType(26,ArrayType(1,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 422))

    def test_423(self):
        line = '''Class _3:_YS{Constructor (){}Destructor (){}Var __E_,x_5,C_,$_,$04,_1:Array [Array [Array [Array [Array [String ,0x4E],0b100],0X47],0X43],0101];Var $m,S:v89b__H;}Class r9{Val __8,$_:Int ;}'''
        expect = '''Program([ClassDecl(Id(_3),Id(_YS),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__E_),ArrayType(65,ArrayType(67,ArrayType(71,ArrayType(4,ArrayType(78,StringType))))))),AttributeDecl(Instance,VarDecl(Id(x_5),ArrayType(65,ArrayType(67,ArrayType(71,ArrayType(4,ArrayType(78,StringType))))))),AttributeDecl(Instance,VarDecl(Id(C_),ArrayType(65,ArrayType(67,ArrayType(71,ArrayType(4,ArrayType(78,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(65,ArrayType(67,ArrayType(71,ArrayType(4,ArrayType(78,StringType))))))),AttributeDecl(Static,VarDecl(Id($04),ArrayType(65,ArrayType(67,ArrayType(71,ArrayType(4,ArrayType(78,StringType))))))),AttributeDecl(Instance,VarDecl(Id(_1),ArrayType(65,ArrayType(67,ArrayType(71,ArrayType(4,ArrayType(78,StringType))))))),AttributeDecl(Static,VarDecl(Id($m),ClassType(Id(v89b__H)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S),ClassType(Id(v89b__H)),NullLiteral()))]),ClassDecl(Id(r9),[AttributeDecl(Instance,ConstDecl(Id(__8),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 423))

    def test_424(self):
        line = '''Class _:_{Constructor (){} }Class _Xg9:_c_K{Constructor (__3:Array [Boolean ,0b10000];_y2,fc,_:_){}Val _:Int ;_4(u:_pO;_:Boolean ){} }Class H_l:_{Val $__,_,$9,_4,$9:Array [Float ,0X3_0];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_Xg9),Id(_c_K),[MethodDecl(Id(Constructor),Instance,[param(Id(__3),ArrayType(16,BoolType)),param(Id(_y2),ClassType(Id(_))),param(Id(fc),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),MethodDecl(Id(_4),Instance,[param(Id(u),ClassType(Id(_pO))),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(H_l),Id(_),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(48,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(48,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(48,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(48,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(48,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 424))

    def test_425(self):
        line = '''Class _:__{}Class Z{Destructor (){} }Class _{Constructor (){}$0(r1:A;J,p0,_J:Array [Array [Int ,0500_64],0X67C];__,_U0,_0:Array [Int ,95];_jy:_4v;Qy:Array [String ,75];_j,L,p,HpX:Float ;__Z2I,w,_2,Mp,___,C,___:_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(Z),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($0),Static,[param(Id(r1),ClassType(Id(A))),param(Id(J),ArrayType(1660,ArrayType(20532,IntType))),param(Id(p0),ArrayType(1660,ArrayType(20532,IntType))),param(Id(_J),ArrayType(1660,ArrayType(20532,IntType))),param(Id(__),ArrayType(95,IntType)),param(Id(_U0),ArrayType(95,IntType)),param(Id(_0),ArrayType(95,IntType)),param(Id(_jy),ClassType(Id(_4v))),param(Id(Qy),ArrayType(75,StringType)),param(Id(_j),FloatType),param(Id(L),FloatType),param(Id(p),FloatType),param(Id(HpX),FloatType),param(Id(__Z2I),ClassType(Id(_))),param(Id(w),ClassType(Id(_))),param(Id(_2),ClassType(Id(_))),param(Id(Mp),ClassType(Id(_))),param(Id(___),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(___),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 425))

    def test_426(self):
        line = '''Class f:y{Constructor (U1PMk,__,o:QB_){Return ;}Var $__:Array [Int ,0xD5_D];Var $__77,$v,$8:String ;$V4(){}Constructor (_,_,E,__64,g:Int ;q_,_69,_:Array [Int ,4];j_,_,_,g6:Float ;KV,f92:Int ;_6S:Float ){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(y),[MethodDecl(Id(Constructor),Instance,[param(Id(U1PMk),ClassType(Id(QB_))),param(Id(__),ClassType(Id(QB_))),param(Id(o),ClassType(Id(QB_)))],Block([Return()])),AttributeDecl(Static,VarDecl(Id($__),ArrayType(3421,IntType))),AttributeDecl(Static,VarDecl(Id($__77),StringType)),AttributeDecl(Static,VarDecl(Id($v),StringType)),AttributeDecl(Static,VarDecl(Id($8),StringType)),MethodDecl(Id($V4),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),IntType),param(Id(E),IntType),param(Id(__64),IntType),param(Id(g),IntType),param(Id(q_),ArrayType(4,IntType)),param(Id(_69),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType)),param(Id(j_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(g6),FloatType),param(Id(KV),IntType),param(Id(f92),IntType),param(Id(_6S),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 426))

    def test_427(self):
        line = '''Class _D:J_{Val u_3:r_;}Class d:_{Constructor (){}Val __,___,_:Array [Array [Boolean ,0X9],0x51];Var $9:Array [Boolean ,0614];Var $n2e:Array [Int ,0B1010010];}Class _:R14{}Class LU{}'''
        expect = '''Program([ClassDecl(Id(_D),Id(J_),[AttributeDecl(Instance,ConstDecl(Id(u_3),ClassType(Id(r_)),None))]),ClassDecl(Id(d),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(81,ArrayType(9,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(___),ArrayType(81,ArrayType(9,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(81,ArrayType(9,BoolType)),None)),AttributeDecl(Static,VarDecl(Id($9),ArrayType(396,BoolType))),AttributeDecl(Static,VarDecl(Id($n2e),ArrayType(82,IntType)))]),ClassDecl(Id(_),Id(R14),[]),ClassDecl(Id(LU),[])])'''
        self.assertTrue(TestAST.test(line, expect, 427))

    def test_428(self):
        line = '''Class _4eMI{Destructor (){} }Class _3{Var $3EPy,_Z:_;}Class _:__{Constructor (B:Boolean ;f9kR,_:Array [Array [Int ,066],0x18];_:Array [String ,0b1]){}Val $o6:Float ;}Class __W{Val $4:Array [Int ,066];}Class HyO7:_w_{Destructor (){} }Class H8_{}'''
        expect = '''Program([ClassDecl(Id(_4eMI),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_3),[AttributeDecl(Static,VarDecl(Id($3EPy),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_Z),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(B),BoolType),param(Id(f9kR),ArrayType(24,ArrayType(54,IntType))),param(Id(_),ArrayType(24,ArrayType(54,IntType))),param(Id(_),ArrayType(1,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($o6),FloatType,None))]),ClassDecl(Id(__W),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(54,IntType),None))]),ClassDecl(Id(HyO7),Id(_w_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(H8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 428))

    def test_429(self):
        line = '''Class Qf9_{$8(){Continue ;}$__(){}Val $_,$bM,C_,$y4,K5,$_9,L,e:Array [Int ,037];Val _:Int ;L_78(_:Int ;l:Int ;v,_0D,_:Array [Array [Array [Array [Boolean ,0B1],0b1],6],8]){} }'''
        expect = '''Program([ClassDecl(Id(Qf9_),[MethodDecl(Id($8),Static,[],Block([Continue])),MethodDecl(Id($__),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(31,IntType),None)),AttributeDecl(Static,ConstDecl(Id($bM),ArrayType(31,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(C_),ArrayType(31,IntType),None)),AttributeDecl(Static,ConstDecl(Id($y4),ArrayType(31,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(K5),ArrayType(31,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_9),ArrayType(31,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(L),ArrayType(31,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(31,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),MethodDecl(Id(L_78),Instance,[param(Id(_),IntType),param(Id(l),IntType),param(Id(v),ArrayType(8,ArrayType(6,ArrayType(1,ArrayType(1,BoolType))))),param(Id(_0D),ArrayType(8,ArrayType(6,ArrayType(1,ArrayType(1,BoolType))))),param(Id(_),ArrayType(8,ArrayType(6,ArrayType(1,ArrayType(1,BoolType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 429))

    def test_430(self):
        line = '''Class q:_{Var _vty,$_,$3_,$y2,$w:Array [Array [Int ,0B11],6_8_0_0_64_21];}Class _:_{}Class _:_5L_{$g(P,__,h,w,eJ_49_I,_,_:Boolean ){}Val $2:X;Val VSx2_,$__6,$6_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(q),Id(_),[AttributeDecl(Instance,VarDecl(Id(_vty),ArrayType(68006421,ArrayType(3,IntType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(68006421,ArrayType(3,IntType)))),AttributeDecl(Static,VarDecl(Id($3_),ArrayType(68006421,ArrayType(3,IntType)))),AttributeDecl(Static,VarDecl(Id($y2),ArrayType(68006421,ArrayType(3,IntType)))),AttributeDecl(Static,VarDecl(Id($w),ArrayType(68006421,ArrayType(3,IntType))))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_5L_),[MethodDecl(Id($g),Static,[param(Id(P),BoolType),param(Id(__),BoolType),param(Id(h),BoolType),param(Id(w),BoolType),param(Id(eJ_49_I),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(X)),None)),AttributeDecl(Instance,ConstDecl(Id(VSx2_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($__6),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($6_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 430))

    def test_431(self):
        line = '''Class b{Constructor (__2,A_:Boolean ;g_:Boolean ;_:Int ;_,f:Array [Array [Int ,0b10111],9_2];z:Array [Array [Int ,0b10],4_36];_,_d,x:Array [Array [Float ,0B1_1_1],0X57];Pp66__:Array [Array [Array [Float ,0B1010001],58],0x6];A,___,_C1D_t,_,VM6:Array [Array [Int ,0x39],0x39]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(b),[MethodDecl(Id(Constructor),Instance,[param(Id(__2),BoolType),param(Id(A_),BoolType),param(Id(g_),BoolType),param(Id(_),IntType),param(Id(_),ArrayType(92,ArrayType(23,IntType))),param(Id(f),ArrayType(92,ArrayType(23,IntType))),param(Id(z),ArrayType(436,ArrayType(2,IntType))),param(Id(_),ArrayType(87,ArrayType(7,FloatType))),param(Id(_d),ArrayType(87,ArrayType(7,FloatType))),param(Id(x),ArrayType(87,ArrayType(7,FloatType))),param(Id(Pp66__),ArrayType(6,ArrayType(58,ArrayType(81,FloatType)))),param(Id(A),ArrayType(57,ArrayType(57,IntType))),param(Id(___),ArrayType(57,ArrayType(57,IntType))),param(Id(_C1D_t),ArrayType(57,ArrayType(57,IntType))),param(Id(_),ArrayType(57,ArrayType(57,IntType))),param(Id(VM6),ArrayType(57,ArrayType(57,IntType)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 431))

    def test_432(self):
        line = '''Class Ty_:lp{Destructor (){Continue ;}$T(){ {} }}Class _3:__{}Class _:y{}Class ___{}Class _C{Constructor (_8,c_Y,__0:Int ){}Val $__,MEPg3:_75_;}Class I:_h{Val $v,$_,__m__1_41:Array [Array [Array [Array [Boolean ,3620],0B1],97_2_3],0XE];}'''
        expect = '''Program([ClassDecl(Id(Ty_),Id(lp),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id($T),Static,[],Block([Block([])]))]),ClassDecl(Id(_3),Id(__),[]),ClassDecl(Id(_),Id(y),[]),ClassDecl(Id(___),[]),ClassDecl(Id(_C),[MethodDecl(Id(Constructor),Instance,[param(Id(_8),IntType),param(Id(c_Y),IntType),param(Id(__0),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_75_)),None)),AttributeDecl(Instance,ConstDecl(Id(MEPg3),ClassType(Id(_75_)),None))]),ClassDecl(Id(I),Id(_h),[AttributeDecl(Static,ConstDecl(Id($v),ArrayType(14,ArrayType(9723,ArrayType(1,ArrayType(3620,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(14,ArrayType(9723,ArrayType(1,ArrayType(3620,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__m__1_41),ArrayType(14,ArrayType(9723,ArrayType(1,ArrayType(3620,BoolType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 432))

    def test_433(self):
        line = '''Class q{Val $Q:Array [Int ,0117];Constructor (__,s__,e_3:Array [Boolean ,6_65_1];f__D__:Array [Boolean ,0B11]){}Constructor (){} }Class GW_{}Class _:_I_{}Class K:_Wi7{$__(){Continue ;} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(q),[AttributeDecl(Static,ConstDecl(Id($Q),ArrayType(79,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(6651,BoolType)),param(Id(s__),ArrayType(6651,BoolType)),param(Id(e_3),ArrayType(6651,BoolType)),param(Id(f__D__),ArrayType(3,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(GW_),[]),ClassDecl(Id(_),Id(_I_),[]),ClassDecl(Id(K),Id(_Wi7),[MethodDecl(Id($__),Static,[],Block([Continue]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 433))

    def test_434(self):
        line = '''Class w{_0_KX_p(){}F(__,_,___,_,W9,t:Array [String ,12];_:Array [Array [Float ,0B1],457];J_5m,d00:String ;_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1000011],0B1_100],05],0xE_7],0535],3_87],053141],6_2_3],0xE],0122]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id(_0_KX_p),Instance,[],Block([])),MethodDecl(Id(F),Instance,[param(Id(__),ArrayType(12,StringType)),param(Id(_),ArrayType(12,StringType)),param(Id(___),ArrayType(12,StringType)),param(Id(_),ArrayType(12,StringType)),param(Id(W9),ArrayType(12,StringType)),param(Id(t),ArrayType(12,StringType)),param(Id(_),ArrayType(457,ArrayType(1,FloatType))),param(Id(J_5m),StringType),param(Id(d00),StringType),param(Id(_),ArrayType(82,ArrayType(14,ArrayType(623,ArrayType(22113,ArrayType(387,ArrayType(349,ArrayType(231,ArrayType(5,ArrayType(12,ArrayType(67,StringType)))))))))))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 434))

    def test_435(self):
        line = '''Class _B_:e{}Class _:g{}Class __:PV4Xd_{Val __,q_4_3,_,_,T_N,$L7:Array [Boolean ,0B10011];Var $9zq,w5,h_1:Int ;}Class ____:_B{}Class _:b{}Class n_{Destructor (){} }Class JA:_508{Destructor (){} }Class h:_4{Var $8_Ca:Array [Array [Boolean ,072],072];}'''
        expect = '''Program([ClassDecl(Id(_B_),Id(e),[]),ClassDecl(Id(_),Id(g),[]),ClassDecl(Id(__),Id(PV4Xd_),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(19,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(q_4_3),ArrayType(19,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(19,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(19,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(T_N),ArrayType(19,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($L7),ArrayType(19,BoolType),None)),AttributeDecl(Static,VarDecl(Id($9zq),IntType)),AttributeDecl(Instance,VarDecl(Id(w5),IntType)),AttributeDecl(Instance,VarDecl(Id(h_1),IntType))]),ClassDecl(Id(____),Id(_B),[]),ClassDecl(Id(_),Id(b),[]),ClassDecl(Id(n_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(JA),Id(_508),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(h),Id(_4),[AttributeDecl(Static,VarDecl(Id($8_Ca),ArrayType(58,ArrayType(58,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 435))

    def test_436(self):
        line = '''Class E{Constructor (_:Array [Array [Array [Array [String ,3_978],0x59_5],0B11],43];_,jh5Mr,C,i__,_,_GP:Boolean ;i,n_,_I:Array [Array [Array [Float ,0b1],0b1],02];p_:Array [Array [Array [Array [Float ,0B1],0x52],43],0xD_9_C]){Break ;{} }}Class _:lx_5{}'''
        expect = '''Program([ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43,ArrayType(3,ArrayType(1429,ArrayType(3978,StringType))))),param(Id(_),BoolType),param(Id(jh5Mr),BoolType),param(Id(C),BoolType),param(Id(i__),BoolType),param(Id(_),BoolType),param(Id(_GP),BoolType),param(Id(i),ArrayType(2,ArrayType(1,ArrayType(1,FloatType)))),param(Id(n_),ArrayType(2,ArrayType(1,ArrayType(1,FloatType)))),param(Id(_I),ArrayType(2,ArrayType(1,ArrayType(1,FloatType)))),param(Id(p_),ArrayType(3484,ArrayType(43,ArrayType(82,ArrayType(1,FloatType)))))],Block([Break,Block([])]))]),ClassDecl(Id(_),Id(lx_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 436))

    def test_437(self):
        line = '''Class G9:p{Constructor (){}Var b:String ;$Fdlu(){} }Class O_6{Var S3:_3;Val $_1q:Int ;}Class ____:_{Var _:Array [Int ,75];$_(_9_:Boolean ){ {}{} }}Class K{Destructor (){}F(_:_d7h6e;T8_p:Float ;r:__;_4,__:String ){}Constructor (w:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(G9),Id(p),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(b),StringType)),MethodDecl(Id($Fdlu),Static,[],Block([]))]),ClassDecl(Id(O_6),[AttributeDecl(Instance,VarDecl(Id(S3),ClassType(Id(_3)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_1q),IntType,None))]),ClassDecl(Id(____),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(75,IntType))),MethodDecl(Id($_),Static,[param(Id(_9_),BoolType)],Block([Block([]),Block([])]))]),ClassDecl(Id(K),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(F),Instance,[param(Id(_),ClassType(Id(_d7h6e))),param(Id(T8_p),FloatType),param(Id(r),ClassType(Id(__))),param(Id(_4),StringType),param(Id(__),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(w),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 437))

    def test_438(self):
        line = '''Class e{}Class _{}Class _{Val _6:Array [Boolean ,03_0_61];$__(h:Array [Float ,0B1001111];_8,__,_,_8_6_5,_6,r_,__6b_1_:Array [Array [String ,7],0xB];_91GM:xw_){}Destructor (){} }Class FT{Var $yy1l:Int ;Val _K:Float ;}'''
        expect = '''Program([ClassDecl(Id(e),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_6),ArrayType(1585,BoolType),None)),MethodDecl(Id($__),Static,[param(Id(h),ArrayType(79,FloatType)),param(Id(_8),ArrayType(11,ArrayType(7,StringType))),param(Id(__),ArrayType(11,ArrayType(7,StringType))),param(Id(_),ArrayType(11,ArrayType(7,StringType))),param(Id(_8_6_5),ArrayType(11,ArrayType(7,StringType))),param(Id(_6),ArrayType(11,ArrayType(7,StringType))),param(Id(r_),ArrayType(11,ArrayType(7,StringType))),param(Id(__6b_1_),ArrayType(11,ArrayType(7,StringType))),param(Id(_91GM),ClassType(Id(xw_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(FT),[AttributeDecl(Static,VarDecl(Id($yy1l),IntType)),AttributeDecl(Instance,ConstDecl(Id(_K),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 438))

    def test_439(self):
        line = '''Class G{}Class _{}Class _:_x_{Var _,_T1A89:Array [Float ,0XF];Var $9:Array [Int ,3_4];}Class _I_:x_{_(){}Val $2,$32:Array [Array [Array [Array [Array [Boolean ,177],37],07],0B1001000],0X4];}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_x_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(15,FloatType))),AttributeDecl(Instance,VarDecl(Id(_T1A89),ArrayType(15,FloatType))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(34,IntType)))]),ClassDecl(Id(_I_),Id(x_),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(4,ArrayType(72,ArrayType(7,ArrayType(37,ArrayType(177,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($32),ArrayType(4,ArrayType(72,ArrayType(7,ArrayType(37,ArrayType(177,BoolType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 439))

    def test_440(self):
        line = '''Class s:y{Val $L8r9,$7__2_3,$W,$5v4,__:Int ;Val $j:Array [Array [Float ,0XC0C5E_544],0B110101];}Class __:T{Constructor (_9_,V,i:s;eA:Array [Int ,0B110101]){Return ;}Destructor (){Break ;} }Class ___{}Class _{}'''
        expect = '''Program([ClassDecl(Id(s),Id(y),[AttributeDecl(Static,ConstDecl(Id($L8r9),IntType,None)),AttributeDecl(Static,ConstDecl(Id($7__2_3),IntType,None)),AttributeDecl(Static,ConstDecl(Id($W),IntType,None)),AttributeDecl(Static,ConstDecl(Id($5v4),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Static,ConstDecl(Id($j),ArrayType(53,ArrayType(3234194756,FloatType)),None))]),ClassDecl(Id(__),Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(_9_),ClassType(Id(s))),param(Id(V),ClassType(Id(s))),param(Id(i),ClassType(Id(s))),param(Id(eA),ArrayType(53,IntType))],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(___),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 440))

    def test_441(self):
        line = '''Class lJx:_{}Class P{Constructor (C_:Array [Array [Int ,0X14],8];_,nat:__;___,_08,Q_S:j;_:Array [Int ,0B1011010];w,r:N;_,S,___O_,_:Int ;_,JK__:Array [Float ,071]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(lJx),Id(_),[]),ClassDecl(Id(P),[MethodDecl(Id(Constructor),Instance,[param(Id(C_),ArrayType(8,ArrayType(20,IntType))),param(Id(_),ClassType(Id(__))),param(Id(nat),ClassType(Id(__))),param(Id(___),ClassType(Id(j))),param(Id(_08),ClassType(Id(j))),param(Id(Q_S),ClassType(Id(j))),param(Id(_),ArrayType(90,IntType)),param(Id(w),ClassType(Id(N))),param(Id(r),ClassType(Id(N))),param(Id(_),IntType),param(Id(S),IntType),param(Id(___O_),IntType),param(Id(_),IntType),param(Id(_),ArrayType(57,FloatType)),param(Id(JK__),ArrayType(57,FloatType))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 441))

    def test_442(self):
        line = '''Class _j:N{Destructor (){Break ;Break ;}Constructor (){} }Class _9:p{}Class d_:_6rCJt7_L{}Class KI:_{}Class i2M8{Var $cN:Array [String ,0B1_11];Constructor (){} }Class V_:_{}Class _4I_{Constructor (){Continue ;}$wJ(){} }Class _{$K(){} }'''
        expect = '''Program([ClassDecl(Id(_j),Id(N),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_9),Id(p),[]),ClassDecl(Id(d_),Id(_6rCJt7_L),[]),ClassDecl(Id(KI),Id(_),[]),ClassDecl(Id(i2M8),[AttributeDecl(Static,VarDecl(Id($cN),ArrayType(7,StringType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(V_),Id(_),[]),ClassDecl(Id(_4I_),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id($wJ),Static,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($K),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 442))

    def test_443(self):
        line = '''Class u:e{Constructor (__:_;W:N_33;__,p:Array [Array [Array [Float ,047_62_13_16_25],0x35],40];g:Array [Boolean ,06];R:Boolean ;DG,_,I,P2,d:Array [Boolean ,076];p8g,C_,h_,___19:a8_;_c4,_,_:H){} }'''
        expect = '''Program([ClassDecl(Id(u),Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_))),param(Id(W),ClassType(Id(N_33))),param(Id(__),ArrayType(40,ArrayType(53,ArrayType(667464597,FloatType)))),param(Id(p),ArrayType(40,ArrayType(53,ArrayType(667464597,FloatType)))),param(Id(g),ArrayType(6,BoolType)),param(Id(R),BoolType),param(Id(DG),ArrayType(62,BoolType)),param(Id(_),ArrayType(62,BoolType)),param(Id(I),ArrayType(62,BoolType)),param(Id(P2),ArrayType(62,BoolType)),param(Id(d),ArrayType(62,BoolType)),param(Id(p8g),ClassType(Id(a8_))),param(Id(C_),ClassType(Id(a8_))),param(Id(h_),ClassType(Id(a8_))),param(Id(___19),ClassType(Id(a8_))),param(Id(_c4),ClassType(Id(H))),param(Id(_),ClassType(Id(H))),param(Id(_),ClassType(Id(H)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 443))

    def test_444(self):
        line = '''Class o6{}Class w4_3:_{Val _jS:p9;Var $_:e3;Destructor (){} }Class e:_8a{Destructor (){} }Class __:d{Destructor (){Continue ;}$_(A:Boolean ;_B,D_,P3,__,_B,_,_:Array [Array [Boolean ,0b1001],0B11_1]){} }'''
        expect = '''Program([ClassDecl(Id(o6),[]),ClassDecl(Id(w4_3),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_jS),ClassType(Id(p9)),None)),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(e3)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(e),Id(_8a),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(d),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id($_),Static,[param(Id(A),BoolType),param(Id(_B),ArrayType(7,ArrayType(9,BoolType))),param(Id(D_),ArrayType(7,ArrayType(9,BoolType))),param(Id(P3),ArrayType(7,ArrayType(9,BoolType))),param(Id(__),ArrayType(7,ArrayType(9,BoolType))),param(Id(_B),ArrayType(7,ArrayType(9,BoolType))),param(Id(_),ArrayType(7,ArrayType(9,BoolType))),param(Id(_),ArrayType(7,ArrayType(9,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 444))

    def test_445(self):
        line = '''Class I{$6(k_z_A,l8_4:Boolean ;X:Int ;X,Q,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,1_2],0x7],0x8_3],0x7],0b10],0b11100],0b1_1],7838_4],0x76A],6]){Return ;}Var ___,f:v;}'''
        expect = '''Program([ClassDecl(Id(I),[MethodDecl(Id($6),Static,[param(Id(k_z_A),BoolType),param(Id(l8_4),BoolType),param(Id(X),IntType),param(Id(X),ArrayType(6,ArrayType(1898,ArrayType(78384,ArrayType(3,ArrayType(28,ArrayType(2,ArrayType(7,ArrayType(131,ArrayType(7,ArrayType(12,StringType))))))))))),param(Id(Q),ArrayType(6,ArrayType(1898,ArrayType(78384,ArrayType(3,ArrayType(28,ArrayType(2,ArrayType(7,ArrayType(131,ArrayType(7,ArrayType(12,StringType))))))))))),param(Id(_),ArrayType(6,ArrayType(1898,ArrayType(78384,ArrayType(3,ArrayType(28,ArrayType(2,ArrayType(7,ArrayType(131,ArrayType(7,ArrayType(12,StringType)))))))))))],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(v)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(f),ClassType(Id(v)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 445))

    def test_446(self):
        line = '''Class hZb:_7_66{Val _:Array [Array [Array [Boolean ,0X23],0x8],0B1];Destructor (){} }Class _Y{Constructor (_V6,_,_q:Float ;_,P,K_2_:Boolean ;_:Int ;_9,H:Float ){}Val K,_:String ;Val X_:o3;}Class _{Destructor (){}Val $_,$0__8:Array [Float ,03];}'''
        expect = '''Program([ClassDecl(Id(hZb),Id(_7_66),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(8,ArrayType(35,BoolType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_Y),[MethodDecl(Id(Constructor),Instance,[param(Id(_V6),FloatType),param(Id(_),FloatType),param(Id(_q),FloatType),param(Id(_),BoolType),param(Id(P),BoolType),param(Id(K_2_),BoolType),param(Id(_),IntType),param(Id(_9),FloatType),param(Id(H),FloatType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(K),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(X_),ClassType(Id(o3)),None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($0__8),ArrayType(3,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 446))

    def test_447(self):
        line = '''Class M{$738_(c__45_,u,Cz:__h5_R;_1t,qP:String ;_,p,_,V,JH,_,_m93,_tut,K,_,q:Array [Int ,0X88A9B];_0B,_,k4_C:Array [Array [Array [Float ,0b11_1_0],0B1],05_2_0];_4:Array [Boolean ,93];_2e,m,__,A_,_,_3:Float ;h:_51881V;__j,_,oj,_:Float ){}Destructor (){} }Class _:__{}'''
        expect = '''Program([ClassDecl(Id(M),[MethodDecl(Id($738_),Static,[param(Id(c__45_),ClassType(Id(__h5_R))),param(Id(u),ClassType(Id(__h5_R))),param(Id(Cz),ClassType(Id(__h5_R))),param(Id(_1t),StringType),param(Id(qP),StringType),param(Id(_),ArrayType(559771,IntType)),param(Id(p),ArrayType(559771,IntType)),param(Id(_),ArrayType(559771,IntType)),param(Id(V),ArrayType(559771,IntType)),param(Id(JH),ArrayType(559771,IntType)),param(Id(_),ArrayType(559771,IntType)),param(Id(_m93),ArrayType(559771,IntType)),param(Id(_tut),ArrayType(559771,IntType)),param(Id(K),ArrayType(559771,IntType)),param(Id(_),ArrayType(559771,IntType)),param(Id(q),ArrayType(559771,IntType)),param(Id(_0B),ArrayType(336,ArrayType(1,ArrayType(14,FloatType)))),param(Id(_),ArrayType(336,ArrayType(1,ArrayType(14,FloatType)))),param(Id(k4_C),ArrayType(336,ArrayType(1,ArrayType(14,FloatType)))),param(Id(_4),ArrayType(93,BoolType)),param(Id(_2e),FloatType),param(Id(m),FloatType),param(Id(__),FloatType),param(Id(A_),FloatType),param(Id(_),FloatType),param(Id(_3),FloatType),param(Id(h),ClassType(Id(_51881V))),param(Id(__j),FloatType),param(Id(_),FloatType),param(Id(oj),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 447))

    def test_448(self):
        line = '''Class ___:_P{$__1_693(s:_6_;a__:s;_:O_;_,_r:Float ;_:_;_:Array [Array [Array [Array [Int ,075],5],0B1],075]){}Var $__,_,$Q,aS6,$7:Array [Int ,0b1001000];_W2(){}Val _,$B_,__,$4:G;}Class r3{_(){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(_P),[MethodDecl(Id($__1_693),Static,[param(Id(s),ClassType(Id(_6_))),param(Id(a__),ClassType(Id(s))),param(Id(_),ClassType(Id(O_))),param(Id(_),FloatType),param(Id(_r),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(61,ArrayType(1,ArrayType(5,ArrayType(61,IntType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($__),ArrayType(72,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(72,IntType))),AttributeDecl(Static,VarDecl(Id($Q),ArrayType(72,IntType))),AttributeDecl(Instance,VarDecl(Id(aS6),ArrayType(72,IntType))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(72,IntType))),MethodDecl(Id(_W2),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(G)),None)),AttributeDecl(Static,ConstDecl(Id($B_),ClassType(Id(G)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(G)),None)),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(G)),None))]),ClassDecl(Id(r3),[MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 448))

    def test_449(self):
        line = '''Class _b{Constructor (__K,n_2_,B:Array [String ,0XF5_6_C_2A73]){}Constructor (J:String ;tE_pQ:Array [Array [Array [Float ,067],0XD],067];pX,_H_3,__:Array [Array [Array [Array [Array [Boolean ,0X1E],0X6],0b11],067],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_b),[MethodDecl(Id(Constructor),Instance,[param(Id(__K),ArrayType(4117506675,StringType)),param(Id(n_2_),ArrayType(4117506675,StringType)),param(Id(B),ArrayType(4117506675,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(J),StringType),param(Id(tE_pQ),ArrayType(55,ArrayType(13,ArrayType(55,FloatType)))),param(Id(pX),ArrayType(1,ArrayType(55,ArrayType(3,ArrayType(6,ArrayType(30,BoolType)))))),param(Id(_H_3),ArrayType(1,ArrayType(55,ArrayType(3,ArrayType(6,ArrayType(30,BoolType)))))),param(Id(__),ArrayType(1,ArrayType(55,ArrayType(3,ArrayType(6,ArrayType(30,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 449))

    def test_450(self):
        line = '''Class h:H{}Class _9a{Constructor (__f,_2,ml8U4_k:Boolean ;_:_1;X:Array [Float ,0b100000];_:Array [String ,5_63];R_,_6:F;_,z,__,xUM,_j:m;_1_,j,F:Int ;u_,e,_:Array [Array [Boolean ,0B1010101],052];_:__;I:_;br,Q,QGE,D,_,__H4X:Array [Float ,0x27]){} }'''
        expect = '''Program([ClassDecl(Id(h),Id(H),[]),ClassDecl(Id(_9a),[MethodDecl(Id(Constructor),Instance,[param(Id(__f),BoolType),param(Id(_2),BoolType),param(Id(ml8U4_k),BoolType),param(Id(_),ClassType(Id(_1))),param(Id(X),ArrayType(32,FloatType)),param(Id(_),ArrayType(563,StringType)),param(Id(R_),ClassType(Id(F))),param(Id(_6),ClassType(Id(F))),param(Id(_),ClassType(Id(m))),param(Id(z),ClassType(Id(m))),param(Id(__),ClassType(Id(m))),param(Id(xUM),ClassType(Id(m))),param(Id(_j),ClassType(Id(m))),param(Id(_1_),IntType),param(Id(j),IntType),param(Id(F),IntType),param(Id(u_),ArrayType(42,ArrayType(85,BoolType))),param(Id(e),ArrayType(42,ArrayType(85,BoolType))),param(Id(_),ArrayType(42,ArrayType(85,BoolType))),param(Id(_),ClassType(Id(__))),param(Id(I),ClassType(Id(_))),param(Id(br),ArrayType(39,FloatType)),param(Id(Q),ArrayType(39,FloatType)),param(Id(QGE),ArrayType(39,FloatType)),param(Id(D),ArrayType(39,FloatType)),param(Id(_),ArrayType(39,FloatType)),param(Id(__H4X),ArrayType(39,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 450))

    def test_451(self):
        line = '''Class HaF_d_{Var $H,$_20G,_,x_:_;Constructor (H,a_,l_:Array [String ,03];C,_2,L5,_J_hE:Array [Array [Array [Array [Array [Float ,0b1110],0X35],02166],0X35],9685_0]){} }'''
        expect = '''Program([ClassDecl(Id(HaF_d_),[AttributeDecl(Static,VarDecl(Id($H),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_20G),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(x_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(H),ArrayType(3,StringType)),param(Id(a_),ArrayType(3,StringType)),param(Id(l_),ArrayType(3,StringType)),param(Id(C),ArrayType(96850,ArrayType(53,ArrayType(1142,ArrayType(53,ArrayType(14,FloatType)))))),param(Id(_2),ArrayType(96850,ArrayType(53,ArrayType(1142,ArrayType(53,ArrayType(14,FloatType)))))),param(Id(L5),ArrayType(96850,ArrayType(53,ArrayType(1142,ArrayType(53,ArrayType(14,FloatType)))))),param(Id(_J_hE),ArrayType(96850,ArrayType(53,ArrayType(1142,ArrayType(53,ArrayType(14,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 451))

    def test_452(self):
        line = '''Class _{$xB(){} }Class _1:I{}Class b0_{Val V:Array [Array [Array [Float ,0X4D],0b1000011],017];}Class _hc_d{Val Z:Array [Array [Array [Boolean ,0b1],70],0b1_1_1_0_1];}Class F{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($xB),Static,[],Block([]))]),ClassDecl(Id(_1),Id(I),[]),ClassDecl(Id(b0_),[AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(15,ArrayType(67,ArrayType(77,FloatType))),None))]),ClassDecl(Id(_hc_d),[AttributeDecl(Instance,ConstDecl(Id(Z),ArrayType(29,ArrayType(70,ArrayType(1,BoolType))),None))]),ClassDecl(Id(F),[])])'''
        self.assertTrue(TestAST.test(line, expect, 452))

    def test_453(self):
        line = '''Class _:T{Val _,$h__,__,l9_vL__,F_8P_,$___PB:Array [Array [Array [Array [Array [String ,0XC2_5],6_3],0X3],0B1001011],0B1_0];G(__H_,fp3___,_:Int ;_G:Int ){} }Class _J7:_{Var $M:Boolean ;Var $C:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(T),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(75,ArrayType(3,ArrayType(63,ArrayType(3109,StringType))))),None)),AttributeDecl(Static,ConstDecl(Id($h__),ArrayType(2,ArrayType(75,ArrayType(3,ArrayType(63,ArrayType(3109,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(2,ArrayType(75,ArrayType(3,ArrayType(63,ArrayType(3109,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(l9_vL__),ArrayType(2,ArrayType(75,ArrayType(3,ArrayType(63,ArrayType(3109,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(F_8P_),ArrayType(2,ArrayType(75,ArrayType(3,ArrayType(63,ArrayType(3109,StringType))))),None)),AttributeDecl(Static,ConstDecl(Id($___PB),ArrayType(2,ArrayType(75,ArrayType(3,ArrayType(63,ArrayType(3109,StringType))))),None)),MethodDecl(Id(G),Instance,[param(Id(__H_),IntType),param(Id(fp3___),IntType),param(Id(_),IntType),param(Id(_G),IntType)],Block([]))]),ClassDecl(Id(_J7),Id(_),[AttributeDecl(Static,VarDecl(Id($M),BoolType)),AttributeDecl(Static,VarDecl(Id($C),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 453))

    def test_454(self):
        line = '''Class __9:__{}Class _4{}Class e{Var x,_,$3_:Array [String ,4];}Class _:A_{Constructor (){Continue ;} }Class p{Destructor (){} }Class _{Constructor (_,X,_18:__;_,_,z:C6X2;X7,y,__9:Q){}WX7_(){} }'''
        expect = '''Program([ClassDecl(Id(__9),Id(__),[]),ClassDecl(Id(_4),[]),ClassDecl(Id(e),[AttributeDecl(Instance,VarDecl(Id(x),ArrayType(4,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,StringType))),AttributeDecl(Static,VarDecl(Id($3_),ArrayType(4,StringType)))]),ClassDecl(Id(_),Id(A_),[MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__))),param(Id(X),ClassType(Id(__))),param(Id(_18),ClassType(Id(__))),param(Id(_),ClassType(Id(C6X2))),param(Id(_),ClassType(Id(C6X2))),param(Id(z),ClassType(Id(C6X2))),param(Id(X7),ClassType(Id(Q))),param(Id(y),ClassType(Id(Q))),param(Id(__9),ClassType(Id(Q)))],Block([])),MethodDecl(Id(WX7_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 454))

    def test_455(self):
        line = '''Class ___27_{Constructor (uHV:Boolean ;n:Array [Array [Int ,0x56],021]){}Constructor (cQ5:f;_4_:r){}Constructor (_R_:Int ;fj58Q:w;_W_,_3,J_,_,_,C:X;_:k__;Y_5,q,EyT,b:String ;_X93c,V_:Int ){}Constructor (Kb,yx_s_,A,Rq,W_,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(___27_),[MethodDecl(Id(Constructor),Instance,[param(Id(uHV),BoolType),param(Id(n),ArrayType(17,ArrayType(86,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(cQ5),ClassType(Id(f))),param(Id(_4_),ClassType(Id(r)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_R_),IntType),param(Id(fj58Q),ClassType(Id(w))),param(Id(_W_),ClassType(Id(X))),param(Id(_3),ClassType(Id(X))),param(Id(J_),ClassType(Id(X))),param(Id(_),ClassType(Id(X))),param(Id(_),ClassType(Id(X))),param(Id(C),ClassType(Id(X))),param(Id(_),ClassType(Id(k__))),param(Id(Y_5),StringType),param(Id(q),StringType),param(Id(EyT),StringType),param(Id(b),StringType),param(Id(_X93c),IntType),param(Id(V_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Kb),StringType),param(Id(yx_s_),StringType),param(Id(A),StringType),param(Id(Rq),StringType),param(Id(W_),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 455))

    def test_456(self):
        line = '''Class ___{Var $_k,_:Array [Array [Array [Float ,0X13],8_81],0b1];}Class U5_V{$w48v57u(e_:Array [Array [Array [Array [Array [Array [String ,0b101],03],1],0X13],26],26];v:V;_w,L_v__:s4){Continue ;}Destructor (){}Destructor (){}Val V,$_,$_:Oa;}Class _d{}Class _:g85{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(___),[AttributeDecl(Static,VarDecl(Id($_k),ArrayType(1,ArrayType(881,ArrayType(19,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(881,ArrayType(19,FloatType)))))]),ClassDecl(Id(U5_V),[MethodDecl(Id($w48v57u),Static,[param(Id(e_),ArrayType(26,ArrayType(26,ArrayType(19,ArrayType(1,ArrayType(3,ArrayType(5,StringType))))))),param(Id(v),ClassType(Id(V))),param(Id(_w),ClassType(Id(s4))),param(Id(L_v__),ClassType(Id(s4)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(V),ClassType(Id(Oa)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(Oa)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(Oa)),None))]),ClassDecl(Id(_d),[]),ClassDecl(Id(_),Id(g85),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 456))

    def test_457(self):
        line = '''Class b{_67(){}Var $7:Array [Array [String ,0xA],0xA];Destructor (){}Constructor (){ {} }Var $1d1i7:Float ;}Class ___{Var Hf,l:d;Val _7x:Boolean ;}Class __8{}Class P{}Class _:J6{}'''
        expect = '''Program([ClassDecl(Id(b),[MethodDecl(Id(_67),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7),ArrayType(10,ArrayType(10,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($1d1i7),FloatType))]),ClassDecl(Id(___),[AttributeDecl(Instance,VarDecl(Id(Hf),ClassType(Id(d)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l),ClassType(Id(d)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_7x),BoolType,None))]),ClassDecl(Id(__8),[]),ClassDecl(Id(P),[]),ClassDecl(Id(_),Id(J6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 457))

    def test_458(self):
        line = '''Class _6{Val t:Boolean ;}Class _C__:_Gx{}Class __9:_{Var $2_5:Array [Array [Array [Array [Array [Array [Int ,3],050],050],050],0b111101],0B100001];}Class m{}Class __{}Class __{Var wr:_f8b;Z(){O::$J_._.T().g().___._();} }'''
        expect = '''Program([ClassDecl(Id(_6),[AttributeDecl(Instance,ConstDecl(Id(t),BoolType,None))]),ClassDecl(Id(_C__),Id(_Gx),[]),ClassDecl(Id(__9),Id(_),[AttributeDecl(Static,VarDecl(Id($2_5),ArrayType(33,ArrayType(61,ArrayType(40,ArrayType(40,ArrayType(40,ArrayType(3,IntType))))))))]),ClassDecl(Id(m),[]),ClassDecl(Id(__),[]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(wr),ClassType(Id(_f8b)),NullLiteral())),MethodDecl(Id(Z),Instance,[],Block([Call(FieldAccess(CallExpr(CallExpr(FieldAccess(FieldAccess(Id(O),Id($J_)),Id(_)),Id(T),[]),Id(g),[]),Id(___)),Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 458))

    def test_459(self):
        line = '''Class Q{Var $_:_;Val $9:Array [Array [Int ,0122],96];$5(_Ce5H9:M;E,_:Float ;G0:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,96],0X1_54],0xA],0122],0b1],0xD_A_2F],0X5A],96],0B1],0x3C]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(Q),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(96,ArrayType(82,IntType)),None)),MethodDecl(Id($5),Static,[param(Id(_Ce5H9),ClassType(Id(M))),param(Id(E),FloatType),param(Id(_),FloatType),param(Id(G0),ArrayType(60,ArrayType(1,ArrayType(96,ArrayType(90,ArrayType(55855,ArrayType(1,ArrayType(82,ArrayType(10,ArrayType(340,ArrayType(96,BoolType)))))))))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 459))

    def test_460(self):
        line = '''Class _:E_G__{}Class SO:k{Val $P:Boolean ;}Class _{Val j1,_oOU__,F_:S;}Class _q{Val X,$h__5YeVB:Array [Array [Float ,0xE_3_0],41];_(l:Int ;_,W,D,w,Heo__1_:__;ZLL1R:Float ;v:Array [Int ,41];_L,z_:String ;n__c,_,i98,_,w:Array [Array [Array [String ,0b10100],0b1],0xCC]){} }Class _4X{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(E_G__),[]),ClassDecl(Id(SO),Id(k),[AttributeDecl(Static,ConstDecl(Id($P),BoolType,None))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(j1),ClassType(Id(S)),None)),AttributeDecl(Instance,ConstDecl(Id(_oOU__),ClassType(Id(S)),None)),AttributeDecl(Instance,ConstDecl(Id(F_),ClassType(Id(S)),None))]),ClassDecl(Id(_q),[AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(41,ArrayType(3632,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($h__5YeVB),ArrayType(41,ArrayType(3632,FloatType)),None)),MethodDecl(Id(_),Instance,[param(Id(l),IntType),param(Id(_),ClassType(Id(__))),param(Id(W),ClassType(Id(__))),param(Id(D),ClassType(Id(__))),param(Id(w),ClassType(Id(__))),param(Id(Heo__1_),ClassType(Id(__))),param(Id(ZLL1R),FloatType),param(Id(v),ArrayType(41,IntType)),param(Id(_L),StringType),param(Id(z_),StringType),param(Id(n__c),ArrayType(204,ArrayType(1,ArrayType(20,StringType)))),param(Id(_),ArrayType(204,ArrayType(1,ArrayType(20,StringType)))),param(Id(i98),ArrayType(204,ArrayType(1,ArrayType(20,StringType)))),param(Id(_),ArrayType(204,ArrayType(1,ArrayType(20,StringType)))),param(Id(w),ArrayType(204,ArrayType(1,ArrayType(20,StringType))))],Block([]))]),ClassDecl(Id(_4X),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 460))

    def test_461(self):
        line = '''Class _R94_c_9:_{}Class XF_{Var $1,$3k_,D,_:Int ;$0(){Return ;}Constructor (s,B_27_id:_;d3z_Y__C67_i,P:String ){}w(_:Array [Float ,0X41];r,_,_b:Array [Array [Array [Array [Array [String ,399],0123],0B110011],6],0X41];_,_z9:Array [Array [Array [Int ,84],84],9_4];O,F,U:String ;__,h,_:Array [Boolean ,5]){} }'''
        expect = '''Program([ClassDecl(Id(_R94_c_9),Id(_),[]),ClassDecl(Id(XF_),[AttributeDecl(Static,VarDecl(Id($1),IntType)),AttributeDecl(Static,VarDecl(Id($3k_),IntType)),AttributeDecl(Instance,VarDecl(Id(D),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id($0),Static,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(s),ClassType(Id(_))),param(Id(B_27_id),ClassType(Id(_))),param(Id(d3z_Y__C67_i),StringType),param(Id(P),StringType)],Block([])),MethodDecl(Id(w),Instance,[param(Id(_),ArrayType(65,FloatType)),param(Id(r),ArrayType(65,ArrayType(6,ArrayType(51,ArrayType(83,ArrayType(399,StringType)))))),param(Id(_),ArrayType(65,ArrayType(6,ArrayType(51,ArrayType(83,ArrayType(399,StringType)))))),param(Id(_b),ArrayType(65,ArrayType(6,ArrayType(51,ArrayType(83,ArrayType(399,StringType)))))),param(Id(_),ArrayType(94,ArrayType(84,ArrayType(84,IntType)))),param(Id(_z9),ArrayType(94,ArrayType(84,ArrayType(84,IntType)))),param(Id(O),StringType),param(Id(F),StringType),param(Id(U),StringType),param(Id(__),ArrayType(5,BoolType)),param(Id(h),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 461))

    def test_462(self):
        line = '''Class n:s_{}Class __:S_{}Class K1:KQ{}Class _1:__{Val $_,$Gf_7,$31,_:Array [Boolean ,39];Var $u,_:S___;Val $__:Array [Array [Array [Boolean ,0x43],66_3],0b1011101];Var $04llb_4,$o,dR:Int ;Destructor (){Break ;} }Class H_:i54{C(){} }Class W{}'''
        expect = '''Program([ClassDecl(Id(n),Id(s_),[]),ClassDecl(Id(__),Id(S_),[]),ClassDecl(Id(K1),Id(KQ),[]),ClassDecl(Id(_1),Id(__),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(39,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($Gf_7),ArrayType(39,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($31),ArrayType(39,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(39,BoolType),None)),AttributeDecl(Static,VarDecl(Id($u),ClassType(Id(S___)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(S___)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(93,ArrayType(663,ArrayType(67,BoolType))),None)),AttributeDecl(Static,VarDecl(Id($04llb_4),IntType)),AttributeDecl(Static,VarDecl(Id($o),IntType)),AttributeDecl(Instance,VarDecl(Id(dR),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(H_),Id(i54),[MethodDecl(Id(C),Instance,[],Block([]))]),ClassDecl(Id(W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 462))

    def test_463(self):
        line = '''Class K{}Class Q:_V{}Class _63{}Class _:_t2q{_7z(_,D,a_:Boolean ;_,_7q9,I_:Array [Array [Array [Array [Int ,0b101101],0B1_0],60],0b1]){}Destructor (){_::$D()._.T.n().kd().y()._();Continue ;}Var $__m___,$_,_:B6;}Class _{}'''
        expect = '''Program([ClassDecl(Id(K),[]),ClassDecl(Id(Q),Id(_V),[]),ClassDecl(Id(_63),[]),ClassDecl(Id(_),Id(_t2q),[MethodDecl(Id(_7z),Instance,[param(Id(_),BoolType),param(Id(D),BoolType),param(Id(a_),BoolType),param(Id(_),ArrayType(1,ArrayType(60,ArrayType(2,ArrayType(45,IntType))))),param(Id(_7q9),ArrayType(1,ArrayType(60,ArrayType(2,ArrayType(45,IntType))))),param(Id(I_),ArrayType(1,ArrayType(60,ArrayType(2,ArrayType(45,IntType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Call(CallExpr(CallExpr(CallExpr(FieldAccess(FieldAccess(CallExpr(Id(_),Id($D),[]),Id(_)),Id(T)),Id(n),[]),Id(kd),[]),Id(y),[]),Id(_),[]),Continue])),AttributeDecl(Static,VarDecl(Id($__m___),ClassType(Id(B6)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(B6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(B6)),NullLiteral()))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 463))

    def test_464(self):
        line = '''Class o_:_{}Class __:_{Var $G:_;Var $_:__;Constructor (Y3H,_,_B,U,H,_m:_;W_,k6:Array [String ,0B110101];_:Float ;_8E,V,b,s,_,_,_:Boolean ){}Destructor (){} }Class _{Constructor (c5:String ;_:Array [Array [Boolean ,0430_0_1],0X1B];_,_kpR:Array [Array [Array [Array [Float ,0X9_8],01],0b111011],0X1B]){} }Class _{Constructor (_,Nb:Boolean ;_,_,_,d:Array [Int ,0b111011];_:Float ;rj,o:k){ {} }Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(o_),Id(_),[]),ClassDecl(Id(__),Id(_),[AttributeDecl(Static,VarDecl(Id($G),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Y3H),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_B),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(H),ClassType(Id(_))),param(Id(_m),ClassType(Id(_))),param(Id(W_),ArrayType(53,StringType)),param(Id(k6),ArrayType(53,StringType)),param(Id(_),FloatType),param(Id(_8E),BoolType),param(Id(V),BoolType),param(Id(b),BoolType),param(Id(s),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(c5),StringType),param(Id(_),ArrayType(27,ArrayType(17921,BoolType))),param(Id(_),ArrayType(27,ArrayType(59,ArrayType(1,ArrayType(152,FloatType))))),param(Id(_kpR),ArrayType(27,ArrayType(59,ArrayType(1,ArrayType(152,FloatType)))))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(Nb),BoolType),param(Id(_),ArrayType(59,IntType)),param(Id(_),ArrayType(59,IntType)),param(Id(_),ArrayType(59,IntType)),param(Id(d),ArrayType(59,IntType)),param(Id(_),FloatType),param(Id(rj),ClassType(Id(k))),param(Id(o),ClassType(Id(k)))],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 464))

    def test_465(self):
        line = '''Class i{Destructor (){Break ;}Var $q,$v,_8:__0;Constructor (k,_8_o0U,H_,______:u;e6,_:Array [String ,02];n1:___;M5,_O_:Array [Int ,0x1]){} }Class j:q_5{}Class _{Var d_,V4:Float ;Val F,$c6,_:Array [Int ,13];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(i),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($q),ClassType(Id(__0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($v),ClassType(Id(__0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_8),ClassType(Id(__0)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(u))),param(Id(_8_o0U),ClassType(Id(u))),param(Id(H_),ClassType(Id(u))),param(Id(______),ClassType(Id(u))),param(Id(e6),ArrayType(2,StringType)),param(Id(_),ArrayType(2,StringType)),param(Id(n1),ClassType(Id(___))),param(Id(M5),ArrayType(1,IntType)),param(Id(_O_),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(j),Id(q_5),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(d_),FloatType)),AttributeDecl(Instance,VarDecl(Id(V4),FloatType)),AttributeDecl(Instance,ConstDecl(Id(F),ArrayType(13,IntType),None)),AttributeDecl(Static,ConstDecl(Id($c6),ArrayType(13,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 465))

    def test_466(self):
        line = '''Class _{}Class C_{}Class I_{_q(_6t_j_v,_8,T:Array [Float ,5];V:Boolean ;dP:Boolean ;C_2,_O:Array [Array [Array [Int ,0X5],0B1],0x3E];E:Float ){} }Class r___:c{Constructor (hI:eW;F__,s:Boolean ;_,c_,_3,_0,Q0B,j723_:_WwL;PG6_D:Array [Int ,0107];L:__;l,e_:Float ;x:Float ;_,M:_;n:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(C_),[]),ClassDecl(Id(I_),[MethodDecl(Id(_q),Instance,[param(Id(_6t_j_v),ArrayType(5,FloatType)),param(Id(_8),ArrayType(5,FloatType)),param(Id(T),ArrayType(5,FloatType)),param(Id(V),BoolType),param(Id(dP),BoolType),param(Id(C_2),ArrayType(62,ArrayType(1,ArrayType(5,IntType)))),param(Id(_O),ArrayType(62,ArrayType(1,ArrayType(5,IntType)))),param(Id(E),FloatType)],Block([]))]),ClassDecl(Id(r___),Id(c),[MethodDecl(Id(Constructor),Instance,[param(Id(hI),ClassType(Id(eW))),param(Id(F__),BoolType),param(Id(s),BoolType),param(Id(_),ClassType(Id(_WwL))),param(Id(c_),ClassType(Id(_WwL))),param(Id(_3),ClassType(Id(_WwL))),param(Id(_0),ClassType(Id(_WwL))),param(Id(Q0B),ClassType(Id(_WwL))),param(Id(j723_),ClassType(Id(_WwL))),param(Id(PG6_D),ArrayType(71,IntType)),param(Id(L),ClassType(Id(__))),param(Id(l),FloatType),param(Id(e_),FloatType),param(Id(x),FloatType),param(Id(_),ClassType(Id(_))),param(Id(M),ClassType(Id(_))),param(Id(n),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 466))

    def test_467(self):
        line = '''Class b:A{Var $B5_,$5,$A:Array [Array [Array [Array [Boolean ,0X14],025],025],51];$5r9(e,_c,_66:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1_011],0xC_6],0b110101],0B1_0],0X14],0b110101],0X14]){} }Class V_{Var _:Int ;}'''
        expect = '''Program([ClassDecl(Id(b),Id(A),[AttributeDecl(Static,VarDecl(Id($B5_),ArrayType(51,ArrayType(21,ArrayType(21,ArrayType(20,BoolType)))))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(51,ArrayType(21,ArrayType(21,ArrayType(20,BoolType)))))),AttributeDecl(Static,VarDecl(Id($A),ArrayType(51,ArrayType(21,ArrayType(21,ArrayType(20,BoolType)))))),MethodDecl(Id($5r9),Static,[param(Id(e),ArrayType(20,ArrayType(53,ArrayType(20,ArrayType(2,ArrayType(53,ArrayType(198,ArrayType(11,BoolType)))))))),param(Id(_c),ArrayType(20,ArrayType(53,ArrayType(20,ArrayType(2,ArrayType(53,ArrayType(198,ArrayType(11,BoolType)))))))),param(Id(_66),ArrayType(20,ArrayType(53,ArrayType(20,ArrayType(2,ArrayType(53,ArrayType(198,ArrayType(11,BoolType))))))))],Block([]))]),ClassDecl(Id(V_),[AttributeDecl(Instance,VarDecl(Id(_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 467))

    def test_468(self):
        line = '''Class h_:_1j7{Constructor (g,_p47o:Array [Array [Array [Array [Array [Array [Boolean ,0101],0X25],0B1100011],0b1010101],100],89];__Q2,_:_){Continue ;}Val $_:Array [Array [Array [Array [Array [Int ,100],06_1],0101],100],0b1010101];}'''
        expect = '''Program([ClassDecl(Id(h_),Id(_1j7),[MethodDecl(Id(Constructor),Instance,[param(Id(g),ArrayType(89,ArrayType(100,ArrayType(85,ArrayType(99,ArrayType(37,ArrayType(65,BoolType))))))),param(Id(_p47o),ArrayType(89,ArrayType(100,ArrayType(85,ArrayType(99,ArrayType(37,ArrayType(65,BoolType))))))),param(Id(__Q2),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(85,ArrayType(100,ArrayType(65,ArrayType(49,ArrayType(100,IntType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 468))

    def test_469(self):
        line = '''Class m{}Class R:_j{Destructor (){} }Class _m:Ta_{Var $27:Float ;Val _k5,_:Array [Array [Array [Float ,025],0b1011110],0x44];$81(){}Val _9X:Boolean ;}Class s:_jV{e2230(_w:Float ;_,__,h,U__:_){}Val _91594,$_353_Fv:Int ;}'''
        expect = '''Program([ClassDecl(Id(m),[]),ClassDecl(Id(R),Id(_j),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_m),Id(Ta_),[AttributeDecl(Static,VarDecl(Id($27),FloatType)),AttributeDecl(Instance,ConstDecl(Id(_k5),ArrayType(68,ArrayType(94,ArrayType(21,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(68,ArrayType(94,ArrayType(21,FloatType))),None)),MethodDecl(Id($81),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_9X),BoolType,None))]),ClassDecl(Id(s),Id(_jV),[MethodDecl(Id(e2230),Instance,[param(Id(_w),FloatType),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(U__),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_91594),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_353_Fv),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 469))

    def test_470(self):
        line = '''Class G5Vk{Destructor (){Continue ;} }Class _8{}Class __{Val _:Array [Int ,0B1011001];}Class o___n{Var _42,$_5,e8w69,_P,_:Array [Array [Array [Float ,0b1],0X8],7];}Class l_{}'''
        expect = '''Program([ClassDecl(Id(G5Vk),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_8),[]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(89,IntType),None))]),ClassDecl(Id(o___n),[AttributeDecl(Instance,VarDecl(Id(_42),ArrayType(7,ArrayType(8,ArrayType(1,FloatType))))),AttributeDecl(Static,VarDecl(Id($_5),ArrayType(7,ArrayType(8,ArrayType(1,FloatType))))),AttributeDecl(Instance,VarDecl(Id(e8w69),ArrayType(7,ArrayType(8,ArrayType(1,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_P),ArrayType(7,ArrayType(8,ArrayType(1,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,ArrayType(8,ArrayType(1,FloatType)))))]),ClassDecl(Id(l_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 470))

    def test_471(self):
        line = '''Class _3_6TW7m2__{Constructor (_X_,_:Array [Array [Int ,037],0x3];e987,b,__W,_:_9_){Break ;}Destructor (){ {} }Constructor (o:Array [Int ,73]){Break ;Var _Zk43,_00,_:Array [Float ,4_9];} }'''
        expect = '''Program([ClassDecl(Id(_3_6TW7m2__),[MethodDecl(Id(Constructor),Instance,[param(Id(_X_),ArrayType(3,ArrayType(31,IntType))),param(Id(_),ArrayType(3,ArrayType(31,IntType))),param(Id(e987),ClassType(Id(_9_))),param(Id(b),ClassType(Id(_9_))),param(Id(__W),ClassType(Id(_9_))),param(Id(_),ClassType(Id(_9_)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(73,IntType))],Block([Break,VarDecl(Id(_Zk43),ArrayType(49,FloatType)),VarDecl(Id(_00),ArrayType(49,FloatType)),VarDecl(Id(_),ArrayType(49,FloatType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 471))

    def test_472(self):
        line = '''Class c:_4{Val _,$_,$8_5_2t:Array [Int ,043_7];Val $_,_:Float ;Constructor (_:String ;_:Float ){} }Class I{Var _:Array [Array [Array [String ,2_6],8_4],0b1011001];__(){Var y__:String ;} }Class QZ_{$T(){} }'''
        expect = '''Program([ClassDecl(Id(c),Id(_4),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(287,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(287,IntType),None)),AttributeDecl(Static,ConstDecl(Id($8_5_2t),ArrayType(287,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(I),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(89,ArrayType(84,ArrayType(26,StringType))))),MethodDecl(Id(__),Instance,[],Block([VarDecl(Id(y__),StringType)]))]),ClassDecl(Id(QZ_),[MethodDecl(Id($T),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 472))

    def test_473(self):
        line = '''Class R_0Z_:J{Constructor (_8oSz9_,Iv,x,__,O:Array [Boolean ,020]){} }Class G:G_l3{Var $_6_v:Array [String ,05_7_6];w48_(p,f_1,_,_,_:Float ;_,S,_,_:Boolean ){Return ;} }'''
        expect = '''Program([ClassDecl(Id(R_0Z_),Id(J),[MethodDecl(Id(Constructor),Instance,[param(Id(_8oSz9_),ArrayType(16,BoolType)),param(Id(Iv),ArrayType(16,BoolType)),param(Id(x),ArrayType(16,BoolType)),param(Id(__),ArrayType(16,BoolType)),param(Id(O),ArrayType(16,BoolType))],Block([]))]),ClassDecl(Id(G),Id(G_l3),[AttributeDecl(Static,VarDecl(Id($_6_v),ArrayType(382,StringType))),MethodDecl(Id(w48_),Instance,[param(Id(p),FloatType),param(Id(f_1),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),BoolType),param(Id(S),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 473))

    def test_474(self):
        line = '''Class _:f_Bia{_Z11(_:__;_,_,_D,_3T7__wo:Array [Float ,0124];f:Array [Array [Array [Float ,07],04],0124]){}Val _:Boolean ;}Class K{Constructor (cC:String ){}$_(){} }Class v{}'''
        expect = '''Program([ClassDecl(Id(_),Id(f_Bia),[MethodDecl(Id(_Z11),Instance,[param(Id(_),ClassType(Id(__))),param(Id(_),ArrayType(84,FloatType)),param(Id(_),ArrayType(84,FloatType)),param(Id(_D),ArrayType(84,FloatType)),param(Id(_3T7__wo),ArrayType(84,FloatType)),param(Id(f),ArrayType(84,ArrayType(4,ArrayType(7,FloatType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(K),[MethodDecl(Id(Constructor),Instance,[param(Id(cC),StringType)],Block([])),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 474))

    def test_475(self):
        line = '''Class Q:_{}Class _K38{Constructor (_jdP,J:_;b,__m,G_:Array [Array [Array [Boolean ,91],0716],0X7];_,_Bg,_2:Boolean ;gNf:_;U:Array [Int ,026];_Ubm:j_P;__,i,j_7o42,f_:Boolean ;z,_:Array [Boolean ,0X7]){} }'''
        expect = '''Program([ClassDecl(Id(Q),Id(_),[]),ClassDecl(Id(_K38),[MethodDecl(Id(Constructor),Instance,[param(Id(_jdP),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(b),ArrayType(7,ArrayType(462,ArrayType(91,BoolType)))),param(Id(__m),ArrayType(7,ArrayType(462,ArrayType(91,BoolType)))),param(Id(G_),ArrayType(7,ArrayType(462,ArrayType(91,BoolType)))),param(Id(_),BoolType),param(Id(_Bg),BoolType),param(Id(_2),BoolType),param(Id(gNf),ClassType(Id(_))),param(Id(U),ArrayType(22,IntType)),param(Id(_Ubm),ClassType(Id(j_P))),param(Id(__),BoolType),param(Id(i),BoolType),param(Id(j_7o42),BoolType),param(Id(f_),BoolType),param(Id(z),ArrayType(7,BoolType)),param(Id(_),ArrayType(7,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 475))

    def test_476(self):
        line = '''Class _{Var $_L,$7,$3V,$9__,$2,$_1_8,_k,$5_:Array [Array [Array [Array [Array [String ,0204_6_1],0x4],03],18],2_1];Constructor (U8lj:Array [Array [Array [Int ,9_24],0XC],0XC];L:f;G_C,l_,_,_:Q){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_L),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Static,VarDecl(Id($3V),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Static,VarDecl(Id($9__),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Static,VarDecl(Id($_1_8),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Instance,VarDecl(Id(_k),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),AttributeDecl(Static,VarDecl(Id($5_),ArrayType(21,ArrayType(18,ArrayType(3,ArrayType(4,ArrayType(8497,StringType))))))),MethodDecl(Id(Constructor),Instance,[param(Id(U8lj),ArrayType(12,ArrayType(12,ArrayType(924,IntType)))),param(Id(L),ClassType(Id(f))),param(Id(G_C),ClassType(Id(Q))),param(Id(l_),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 476))

    def test_477(self):
        line = '''Class h:S{_p(us:Array [Array [Boolean ,0b101],0X5E];RO,_,_:Array [Array [Array [Boolean ,9],84],03];__3__,Q,_0,_:Array [Boolean ,0X8_5];_1Djg:String ;Q61_,_,b,em,_i_:Array [Float ,0X5E];__,_w3,__x_o:_k;q:String ){} }'''
        expect = '''Program([ClassDecl(Id(h),Id(S),[MethodDecl(Id(_p),Instance,[param(Id(us),ArrayType(94,ArrayType(5,BoolType))),param(Id(RO),ArrayType(3,ArrayType(84,ArrayType(9,BoolType)))),param(Id(_),ArrayType(3,ArrayType(84,ArrayType(9,BoolType)))),param(Id(_),ArrayType(3,ArrayType(84,ArrayType(9,BoolType)))),param(Id(__3__),ArrayType(133,BoolType)),param(Id(Q),ArrayType(133,BoolType)),param(Id(_0),ArrayType(133,BoolType)),param(Id(_),ArrayType(133,BoolType)),param(Id(_1Djg),StringType),param(Id(Q61_),ArrayType(94,FloatType)),param(Id(_),ArrayType(94,FloatType)),param(Id(b),ArrayType(94,FloatType)),param(Id(em),ArrayType(94,FloatType)),param(Id(_i_),ArrayType(94,FloatType)),param(Id(__),ClassType(Id(_k))),param(Id(_w3),ClassType(Id(_k))),param(Id(__x_o),ClassType(Id(_k))),param(Id(q),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 477))

    def test_478(self):
        line = '''Class X{Destructor (){} }Class S1_{Val _z,$4hA,$f:Array [Array [String ,0b1_1],0X59];Val V,_R,_I:Array [Array [Array [Array [Boolean ,15],0X59],0b1_0],3_3];}Class b{Destructor (){Break ;Continue ;Val x7_:_U___O;}____(){Continue ;}_(){} }'''
        expect = '''Program([ClassDecl(Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(S1_),[AttributeDecl(Instance,ConstDecl(Id(_z),ArrayType(89,ArrayType(3,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($4hA),ArrayType(89,ArrayType(3,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($f),ArrayType(89,ArrayType(3,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(33,ArrayType(2,ArrayType(89,ArrayType(15,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_R),ArrayType(33,ArrayType(2,ArrayType(89,ArrayType(15,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_I),ArrayType(33,ArrayType(2,ArrayType(89,ArrayType(15,BoolType)))),None))]),ClassDecl(Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue,ConstDecl(Id(x7_),ClassType(Id(_U___O)),None)])),MethodDecl(Id(____),Instance,[],Block([Continue])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 478))

    def test_479(self):
        line = '''Class P7:__2c{$_896h(z7_,ac:String ;c__,XG_6,_:Array [Array [Float ,12],01_40];o,_,d_:Int ;Z,_:_8;Hm34:Array [String ,0B1_1_11_11]){}Constructor (){} }Class _F:_{Var _W:y;}'''
        expect = '''Program([ClassDecl(Id(P7),Id(__2c),[MethodDecl(Id($_896h),Static,[param(Id(z7_),StringType),param(Id(ac),StringType),param(Id(c__),ArrayType(96,ArrayType(12,FloatType))),param(Id(XG_6),ArrayType(96,ArrayType(12,FloatType))),param(Id(_),ArrayType(96,ArrayType(12,FloatType))),param(Id(o),IntType),param(Id(_),IntType),param(Id(d_),IntType),param(Id(Z),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(Hm34),ArrayType(63,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_F),Id(_),[AttributeDecl(Instance,VarDecl(Id(_W),ClassType(Id(y)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 479))

    def test_480(self):
        line = '''Class _q:gB{}Class z6m{Constructor (_,_p:Array [Array [Float ,0XF69],0B1010100];_J,C,G5,b_,B9Y:Array [Array [Array [Array [Array [Array [Array [Int ,0x2],0XC],0b110000],0x3D],0B1],03],05]){}Val n,$_:_60x;}Class q_{}'''
        expect = '''Program([ClassDecl(Id(_q),Id(gB),[]),ClassDecl(Id(z6m),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(84,ArrayType(3945,FloatType))),param(Id(_p),ArrayType(84,ArrayType(3945,FloatType))),param(Id(_J),ArrayType(5,ArrayType(3,ArrayType(1,ArrayType(61,ArrayType(48,ArrayType(12,ArrayType(2,IntType)))))))),param(Id(C),ArrayType(5,ArrayType(3,ArrayType(1,ArrayType(61,ArrayType(48,ArrayType(12,ArrayType(2,IntType)))))))),param(Id(G5),ArrayType(5,ArrayType(3,ArrayType(1,ArrayType(61,ArrayType(48,ArrayType(12,ArrayType(2,IntType)))))))),param(Id(b_),ArrayType(5,ArrayType(3,ArrayType(1,ArrayType(61,ArrayType(48,ArrayType(12,ArrayType(2,IntType)))))))),param(Id(B9Y),ArrayType(5,ArrayType(3,ArrayType(1,ArrayType(61,ArrayType(48,ArrayType(12,ArrayType(2,IntType))))))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(_60x)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_60x)),None))]),ClassDecl(Id(q_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 480))

    def test_481(self):
        line = '''Class x_:R_197{L(){} }Class o{Constructor (){___7::$r.v__DD_();Break ;Val e,QL,F,r,k,H:Array [Array [Array [Array [Array [String ,0B100100],1_59],0B110_1_1],62],0x60];Break ;} }Class O7__X{Val $7r_4,_,$_:_s;}'''
        expect = '''Program([ClassDecl(Id(x_),Id(R_197),[MethodDecl(Id(L),Instance,[],Block([]))]),ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(Id(___7),Id($r)),Id(v__DD_),[]),Break,ConstDecl(Id(e),ArrayType(96,ArrayType(62,ArrayType(27,ArrayType(159,ArrayType(36,StringType))))),None),ConstDecl(Id(QL),ArrayType(96,ArrayType(62,ArrayType(27,ArrayType(159,ArrayType(36,StringType))))),None),ConstDecl(Id(F),ArrayType(96,ArrayType(62,ArrayType(27,ArrayType(159,ArrayType(36,StringType))))),None),ConstDecl(Id(r),ArrayType(96,ArrayType(62,ArrayType(27,ArrayType(159,ArrayType(36,StringType))))),None),ConstDecl(Id(k),ArrayType(96,ArrayType(62,ArrayType(27,ArrayType(159,ArrayType(36,StringType))))),None),ConstDecl(Id(H),ArrayType(96,ArrayType(62,ArrayType(27,ArrayType(159,ArrayType(36,StringType))))),None),Break]))]),ClassDecl(Id(O7__X),[AttributeDecl(Static,ConstDecl(Id($7r_4),ClassType(Id(_s)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_s)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_s)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 481))

    def test_482(self):
        line = '''Class z:G{Destructor (){}Destructor (){}Val OZ,_:Array [Array [Array [Array [Array [Array [Int ,0b1000000],0x40],023],457],023],0505];Val $_:Array [Array [Array [Array [Array [Int ,0b1000000],0xFD],0263],074],023];}'''
        expect = '''Program([ClassDecl(Id(z),Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(OZ),ArrayType(325,ArrayType(19,ArrayType(457,ArrayType(19,ArrayType(64,ArrayType(64,IntType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(325,ArrayType(19,ArrayType(457,ArrayType(19,ArrayType(64,ArrayType(64,IntType)))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(19,ArrayType(60,ArrayType(179,ArrayType(253,ArrayType(64,IntType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 482))

    def test_483(self):
        line = '''Class a_T0{}Class p:h{Var _,$_:Array [Array [Boolean ,0x5F],76];}Class _61{Var K:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0B100011],0x2B],76],0b110],75],0124],76],0x3],0b1];Var __9:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(a_T0),[]),ClassDecl(Id(p),Id(h),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(76,ArrayType(95,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(76,ArrayType(95,BoolType))))]),ClassDecl(Id(_61),[AttributeDecl(Instance,VarDecl(Id(K),ArrayType(1,ArrayType(3,ArrayType(76,ArrayType(84,ArrayType(75,ArrayType(6,ArrayType(76,ArrayType(43,ArrayType(35,BoolType))))))))))),AttributeDecl(Instance,VarDecl(Id(__9),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 483))

    def test_484(self):
        line = '''Class _7_3{}Class Y{Constructor (_E:Array [Array [Array [Float ,0B1011001],0b10_1],054];_,_38:Array [Boolean ,054];p,_H:Array [Array [Array [Array [Array [Array [Array [Int ,03_6],054],054],0b1000010],0x40],0b1],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_7_3),[]),ClassDecl(Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(_E),ArrayType(44,ArrayType(5,ArrayType(89,FloatType)))),param(Id(_),ArrayType(44,BoolType)),param(Id(_38),ArrayType(44,BoolType)),param(Id(p),ArrayType(1,ArrayType(1,ArrayType(64,ArrayType(66,ArrayType(44,ArrayType(44,ArrayType(30,IntType)))))))),param(Id(_H),ArrayType(1,ArrayType(1,ArrayType(64,ArrayType(66,ArrayType(44,ArrayType(44,ArrayType(30,IntType))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 484))

    def test_485(self):
        line = '''Class __c9:wq{Val $7,$Lx,__:_h;Val $_:Array [Float ,0B100_1110];}Class _:ad{Constructor (_:Float ){Var _5,__:Array [String ,01_1_3];} }Class _U:_0P{Val _:Boolean ;Destructor (){}Var $F,_r,$g:Float ;}'''
        expect = '''Program([ClassDecl(Id(__c9),Id(wq),[AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(_h)),None)),AttributeDecl(Static,ConstDecl(Id($Lx),ClassType(Id(_h)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_h)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(78,FloatType),None))]),ClassDecl(Id(_),Id(ad),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType)],Block([VarDecl(Id(_5),ArrayType(75,StringType)),VarDecl(Id(__),ArrayType(75,StringType))]))]),ClassDecl(Id(_U),Id(_0P),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($F),FloatType)),AttributeDecl(Instance,VarDecl(Id(_r),FloatType)),AttributeDecl(Static,VarDecl(Id($g),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 485))

    def test_486(self):
        line = '''Class O:m7__m2{$N_J(_,_:_;o2,H,X:Array [Boolean ,055]){} }Class q__:_7{}Class q:_{}Class _4o{Destructor (){Break ;}Var rP_:String ;}Class _{}Class __{Val T,$Z_:Array [Array [String ,0B1011000],0b101010];}'''
        expect = '''Program([ClassDecl(Id(O),Id(m7__m2),[MethodDecl(Id($N_J),Static,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(o2),ArrayType(45,BoolType)),param(Id(H),ArrayType(45,BoolType)),param(Id(X),ArrayType(45,BoolType))],Block([]))]),ClassDecl(Id(q__),Id(_7),[]),ClassDecl(Id(q),Id(_),[]),ClassDecl(Id(_4o),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(rP_),StringType))]),ClassDecl(Id(_),[]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(42,ArrayType(88,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($Z_),ArrayType(42,ArrayType(88,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 486))

    def test_487(self):
        line = '''Class qQ{Val t:_;}Class Z{}Class U:_{}Class L:_{}Class _c{Var $9:J8_;}Class GL:J{Var $L3,$51x55:_;Var _x:Int ;}Class _r{Constructor (_,F7:_;e:Array [Array [Array [Int ,0B10],07_5_4],0B1_0_1];_:M;Hz:_J){} }'''
        expect = '''Program([ClassDecl(Id(qQ),[AttributeDecl(Instance,ConstDecl(Id(t),ClassType(Id(_)),None))]),ClassDecl(Id(Z),[]),ClassDecl(Id(U),Id(_),[]),ClassDecl(Id(L),Id(_),[]),ClassDecl(Id(_c),[AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(J8_)),NullLiteral()))]),ClassDecl(Id(GL),Id(J),[AttributeDecl(Static,VarDecl(Id($L3),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($51x55),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_x),IntType))]),ClassDecl(Id(_r),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(F7),ClassType(Id(_))),param(Id(e),ArrayType(5,ArrayType(492,ArrayType(2,IntType)))),param(Id(_),ClassType(Id(M))),param(Id(Hz),ClassType(Id(_J)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 487))

    def test_488(self):
        line = '''Class u2iq{}Class v:A_{}Class _{Destructor (){}Val fr___,$6,E,rI3:zb__9s;Constructor (j:O;qnw,_,_0c9:Boolean ;__,U,C0P,__,_VK,wn81,X_5:Int ;j,W61C:Array [Array [Boolean ,04],021_1]){} }Class _T:W2_6d7{}'''
        expect = '''Program([ClassDecl(Id(u2iq),[]),ClassDecl(Id(v),Id(A_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(fr___),ClassType(Id(zb__9s)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(zb__9s)),None)),AttributeDecl(Instance,ConstDecl(Id(E),ClassType(Id(zb__9s)),None)),AttributeDecl(Instance,ConstDecl(Id(rI3),ClassType(Id(zb__9s)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(j),ClassType(Id(O))),param(Id(qnw),BoolType),param(Id(_),BoolType),param(Id(_0c9),BoolType),param(Id(__),IntType),param(Id(U),IntType),param(Id(C0P),IntType),param(Id(__),IntType),param(Id(_VK),IntType),param(Id(wn81),IntType),param(Id(X_5),IntType),param(Id(j),ArrayType(137,ArrayType(4,BoolType))),param(Id(W61C),ArrayType(137,ArrayType(4,BoolType)))],Block([]))]),ClassDecl(Id(_T),Id(W2_6d7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 488))

    def test_489(self):
        line = '''Class nd{Destructor (){}Constructor (_,U,_W_,_kw:_;w:Boolean ;V6:Array [Int ,1]){}Constructor (_O_:__;_,_:Array [Array [Array [Boolean ,0b1_11],9_4],0b1];__,_,x__0_O_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(nd),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(_W_),ClassType(Id(_))),param(Id(_kw),ClassType(Id(_))),param(Id(w),BoolType),param(Id(V6),ArrayType(1,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_O_),ClassType(Id(__))),param(Id(_),ArrayType(1,ArrayType(94,ArrayType(7,BoolType)))),param(Id(_),ArrayType(1,ArrayType(94,ArrayType(7,BoolType)))),param(Id(__),IntType),param(Id(_),IntType),param(Id(x__0_O_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 489))

    def test_490(self):
        line = '''Class __73:v_{}Class _04da:_70_0_63uq{Destructor (){Val M:_6__;{Break ;} }}Class c{}Class _:q{}Class _4{Constructor (Z:_M__7o){}$6_0(){Var _:Boolean ;} }Class _{Destructor (){} }Class t_8_:_6z_886{}Class _{}'''
        expect = '''Program([ClassDecl(Id(__73),Id(v_),[]),ClassDecl(Id(_04da),Id(_70_0_63uq),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(M),ClassType(Id(_6__)),None),Block([Break])]))]),ClassDecl(Id(c),[]),ClassDecl(Id(_),Id(q),[]),ClassDecl(Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ClassType(Id(_M__7o)))],Block([])),MethodDecl(Id($6_0),Static,[],Block([VarDecl(Id(_),BoolType)]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(t_8_),Id(_6z_886),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 490))

    def test_491(self):
        line = '''Class J_:_{Constructor (){}Var $u_:Array [Float ,03];Constructor (P:_;_,a,T:String ;X_Y_wp:Float ;_,t,_:_;_2J:Array [Float ,61]){}Constructor (hg,d,_,_,V:S;_,d__,SV:_Q){}I(){} }Class o1:_{$_(_,_06,_1_,_,_j4,__:Float ;t,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(J_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($u_),ArrayType(3,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(P),ClassType(Id(_))),param(Id(_),StringType),param(Id(a),StringType),param(Id(T),StringType),param(Id(X_Y_wp),FloatType),param(Id(_),ClassType(Id(_))),param(Id(t),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_2J),ArrayType(61,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(hg),ClassType(Id(S))),param(Id(d),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(V),ClassType(Id(S))),param(Id(_),ClassType(Id(_Q))),param(Id(d__),ClassType(Id(_Q))),param(Id(SV),ClassType(Id(_Q)))],Block([])),MethodDecl(Id(I),Instance,[],Block([]))]),ClassDecl(Id(o1),Id(_),[MethodDecl(Id($_),Static,[param(Id(_),FloatType),param(Id(_06),FloatType),param(Id(_1_),FloatType),param(Id(_),FloatType),param(Id(_j4),FloatType),param(Id(__),FloatType),param(Id(t),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 491))

    def test_492(self):
        line = '''Class i:m{}Class t:Yo_{}Class w4:__42{Var C5X,$_,$2,$_,$_5,$7F:Array [Array [Array [Array [Array [Array [Array [Array [String ,0X38],0X58],0x7],0x3D],0X4],5],0b1_00],0x3D];Destructor (){Var s_:J_;}_u(___5,__:String ;ES:C48){Val _,Or__,n2_8:_;Break ;}Var D_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(i),Id(m),[]),ClassDecl(Id(t),Id(Yo_),[]),ClassDecl(Id(w4),Id(__42),[AttributeDecl(Instance,VarDecl(Id(C5X),ArrayType(61,ArrayType(4,ArrayType(5,ArrayType(4,ArrayType(61,ArrayType(7,ArrayType(88,ArrayType(56,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(61,ArrayType(4,ArrayType(5,ArrayType(4,ArrayType(61,ArrayType(7,ArrayType(88,ArrayType(56,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(61,ArrayType(4,ArrayType(5,ArrayType(4,ArrayType(61,ArrayType(7,ArrayType(88,ArrayType(56,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(61,ArrayType(4,ArrayType(5,ArrayType(4,ArrayType(61,ArrayType(7,ArrayType(88,ArrayType(56,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($_5),ArrayType(61,ArrayType(4,ArrayType(5,ArrayType(4,ArrayType(61,ArrayType(7,ArrayType(88,ArrayType(56,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($7F),ArrayType(61,ArrayType(4,ArrayType(5,ArrayType(4,ArrayType(61,ArrayType(7,ArrayType(88,ArrayType(56,StringType)))))))))),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(s_),ClassType(Id(J_)),NullLiteral())])),MethodDecl(Id(_u),Instance,[param(Id(___5),StringType),param(Id(__),StringType),param(Id(ES),ClassType(Id(C48)))],Block([ConstDecl(Id(_),ClassType(Id(_)),None),ConstDecl(Id(Or__),ClassType(Id(_)),None),ConstDecl(Id(n2_8),ClassType(Id(_)),None),Break])),AttributeDecl(Instance,VarDecl(Id(D_),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 492))

    def test_493(self):
        line = '''Class _:j_D{$q(__,D:Int ;A:_;__,v8,_:Float ){}_2__(Fw_,_,_6,_,_nh,_,g,_:_o;_P,v,A6,U_:Array [Array [Array [Boolean ,0x45],0b1100000],0b1100000];_,_:Boolean ;_:Array [Int ,4]){}Destructor (){} }Class H7{}Class R2__9:j{_(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(j_D),[MethodDecl(Id($q),Static,[param(Id(__),IntType),param(Id(D),IntType),param(Id(A),ClassType(Id(_))),param(Id(__),FloatType),param(Id(v8),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(_2__),Instance,[param(Id(Fw_),ClassType(Id(_o))),param(Id(_),ClassType(Id(_o))),param(Id(_6),ClassType(Id(_o))),param(Id(_),ClassType(Id(_o))),param(Id(_nh),ClassType(Id(_o))),param(Id(_),ClassType(Id(_o))),param(Id(g),ClassType(Id(_o))),param(Id(_),ClassType(Id(_o))),param(Id(_P),ArrayType(96,ArrayType(96,ArrayType(69,BoolType)))),param(Id(v),ArrayType(96,ArrayType(96,ArrayType(69,BoolType)))),param(Id(A6),ArrayType(96,ArrayType(96,ArrayType(69,BoolType)))),param(Id(U_),ArrayType(96,ArrayType(96,ArrayType(69,BoolType)))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(4,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(H7),[]),ClassDecl(Id(R2__9),Id(j),[MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 493))

    def test_494(self):
        line = '''Class _:_{Destructor (){} }Class _38_:__{}Class y{}Class _:z8{_(_,l_:Array [Array [Int ,68],1];_:_75;__,_P:String ;_:Boolean ){} }Class UZ6{Constructor (P3:k_0_){Break ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_38_),Id(__),[]),ClassDecl(Id(y),[]),ClassDecl(Id(_),Id(z8),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(1,ArrayType(68,IntType))),param(Id(l_),ArrayType(1,ArrayType(68,IntType))),param(Id(_),ClassType(Id(_75))),param(Id(__),StringType),param(Id(_P),StringType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(UZ6),[MethodDecl(Id(Constructor),Instance,[param(Id(P3),ClassType(Id(k_0_)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 494))

    def test_495(self):
        line = '''Class _:_{}Class _2W98{Destructor (){Continue ;}Val _6_:o_;}Class _:_882{Val _C_,$1_c,$4Pj,B4,$P,__:GE;}Class _{Var _q,l,_,u,$_T__8x,_p:Array [Array [Array [Int ,0B111000],69],0b1000101];}Class ___{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_2W98),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_6_),ClassType(Id(o_)),None))]),ClassDecl(Id(_),Id(_882),[AttributeDecl(Instance,ConstDecl(Id(_C_),ClassType(Id(GE)),None)),AttributeDecl(Static,ConstDecl(Id($1_c),ClassType(Id(GE)),None)),AttributeDecl(Static,ConstDecl(Id($4Pj),ClassType(Id(GE)),None)),AttributeDecl(Instance,ConstDecl(Id(B4),ClassType(Id(GE)),None)),AttributeDecl(Static,ConstDecl(Id($P),ClassType(Id(GE)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(GE)),None))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_q),ArrayType(69,ArrayType(69,ArrayType(56,IntType))))),AttributeDecl(Instance,VarDecl(Id(l),ArrayType(69,ArrayType(69,ArrayType(56,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(69,ArrayType(69,ArrayType(56,IntType))))),AttributeDecl(Instance,VarDecl(Id(u),ArrayType(69,ArrayType(69,ArrayType(56,IntType))))),AttributeDecl(Static,VarDecl(Id($_T__8x),ArrayType(69,ArrayType(69,ArrayType(56,IntType))))),AttributeDecl(Instance,VarDecl(Id(_p),ArrayType(69,ArrayType(69,ArrayType(56,IntType)))))]),ClassDecl(Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 495))

    def test_496(self):
        line = '''Class D5_{Var i:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,06],07_0_14],0B11],06],0B1_1],8_2_1],14],0B110011],14],0x39],0B110011],0b1_0_1];}'''
        expect = '''Program([ClassDecl(Id(D5_),[AttributeDecl(Instance,VarDecl(Id(i),ArrayType(5,ArrayType(51,ArrayType(57,ArrayType(14,ArrayType(51,ArrayType(14,ArrayType(821,ArrayType(3,ArrayType(6,ArrayType(3,ArrayType(3596,ArrayType(6,FloatType))))))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 496))

    def test_497(self):
        line = '''Class p1___:_13I{Destructor (){Continue ;Return ;}Destructor (){ {}{}Return ;}Destructor (){}Var $u,$e:Array [Array [Array [Array [Array [String ,05],0b1],0B1],0B100],91];}'''
        expect = '''Program([ClassDecl(Id(p1___),Id(_13I),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return()])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Block([]),Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($u),ArrayType(91,ArrayType(4,ArrayType(1,ArrayType(1,ArrayType(5,StringType))))))),AttributeDecl(Static,VarDecl(Id($e),ArrayType(91,ArrayType(4,ArrayType(1,ArrayType(1,ArrayType(5,StringType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 497))

    def test_498(self):
        line = '''Class _:j{$hO_6N(_x,_:Array [String ,0B1]){}Var $UE:Boolean ;}Class _:h{Constructor (_,Oo2Eq,i,_6:_s_;p,_e:Array [Float ,0X8];_,__,b,_z9__:Int ;b,_:Float ){}__89Iv(){}Val $X:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id($hO_6N),Static,[param(Id(_x),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType))],Block([])),AttributeDecl(Static,VarDecl(Id($UE),BoolType))]),ClassDecl(Id(_),Id(h),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_s_))),param(Id(Oo2Eq),ClassType(Id(_s_))),param(Id(i),ClassType(Id(_s_))),param(Id(_6),ClassType(Id(_s_))),param(Id(p),ArrayType(8,FloatType)),param(Id(_e),ArrayType(8,FloatType)),param(Id(_),IntType),param(Id(__),IntType),param(Id(b),IntType),param(Id(_z9__),IntType),param(Id(b),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(__89Iv),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($X),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 498))

    def test_499(self):
        line = '''Class _3C:nG{}Class _{Mda455_(_7:S_6;h_v,Gqq:Int ;x,Ow,_,n:Array [Float ,0b1];n:__;Q,gvl_:Float ){}Val $cm_8:Int ;Var ___f_,$x6:Array [Int ,0X38];Constructor (xQ:Int ;e:Array [Boolean ,0X38];K:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_3C),Id(nG),[]),ClassDecl(Id(_),[MethodDecl(Id(Mda455_),Instance,[param(Id(_7),ClassType(Id(S_6))),param(Id(h_v),IntType),param(Id(Gqq),IntType),param(Id(x),ArrayType(1,FloatType)),param(Id(Ow),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(n),ArrayType(1,FloatType)),param(Id(n),ClassType(Id(__))),param(Id(Q),FloatType),param(Id(gvl_),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($cm_8),IntType,None)),AttributeDecl(Instance,VarDecl(Id(___f_),ArrayType(56,IntType))),AttributeDecl(Static,VarDecl(Id($x6),ArrayType(56,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(xQ),IntType),param(Id(e),ArrayType(56,BoolType)),param(Id(K),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 499))

    def test_500(self):
        line = '''Class J:f{___(){}Val _0U:Array [Array [Boolean ,1],0XE3];Var U:Array [Float ,0B10101];Constructor (_,v:Array [Array [Array [Int ,0X2],0B1],18];KH22:Float ;_:R__5){}Val _:Array [String ,0b11];}Class _{}'''
        expect = '''Program([ClassDecl(Id(J),Id(f),[MethodDecl(Id(___),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0U),ArrayType(227,ArrayType(1,BoolType)),None)),AttributeDecl(Instance,VarDecl(Id(U),ArrayType(21,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(18,ArrayType(1,ArrayType(2,IntType)))),param(Id(v),ArrayType(18,ArrayType(1,ArrayType(2,IntType)))),param(Id(KH22),FloatType),param(Id(_),ClassType(Id(R__5)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,StringType),None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 500))

    def test_501(self):
        line = '''Class _zu:yk{_s(A__cG,___9,F_,_5:Int ;_g_85:String ){}Destructor (){}Var $5,$so_804e,_U_b:_2;Val $_:Int ;Var $_,_e_:Array [Array [Array [Boolean ,38],01],0b111011];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_zu),Id(yk),[MethodDecl(Id(_s),Instance,[param(Id(A__cG),IntType),param(Id(___9),IntType),param(Id(F_),IntType),param(Id(_5),IntType),param(Id(_g_85),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($so_804e),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_U_b),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(59,ArrayType(1,ArrayType(38,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_e_),ArrayType(59,ArrayType(1,ArrayType(38,BoolType))))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 501))

    def test_502(self):
        line = '''Class _6U{}Class _:T_g{Destructor (){}_(){}Constructor (){} }Class C{Val $_:Array [Array [Array [Array [Boolean ,0b1100],0130],0130],8_5283];Constructor (_,H_:P_;m_6___,C__,_1,tRu:String ){} }'''
        expect = '''Program([ClassDecl(Id(_6U),[]),ClassDecl(Id(_),Id(T_g),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(C),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(85283,ArrayType(88,ArrayType(88,ArrayType(12,BoolType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(P_))),param(Id(H_),ClassType(Id(P_))),param(Id(m_6___),StringType),param(Id(C__),StringType),param(Id(_1),StringType),param(Id(tRu),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 502))

    def test_503(self):
        line = '''Class d:_z2{}Class _:O1XD{}Class n{Constructor (_K,b,_9,__,_,_,_,q__,B:Int ;w:Int ){}Var $6:Array [Array [Boolean ,0B1_10],0x60];}Class _{}Class D_:_{}Class _{Var $A3,_:Array [String ,02252];}Class _8:_{Val $_3lhN__:Float ;}'''
        expect = '''Program([ClassDecl(Id(d),Id(_z2),[]),ClassDecl(Id(_),Id(O1XD),[]),ClassDecl(Id(n),[MethodDecl(Id(Constructor),Instance,[param(Id(_K),IntType),param(Id(b),IntType),param(Id(_9),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(q__),IntType),param(Id(B),IntType),param(Id(w),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($6),ArrayType(96,ArrayType(6,BoolType))))]),ClassDecl(Id(_),[]),ClassDecl(Id(D_),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($A3),ArrayType(1194,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1194,StringType)))]),ClassDecl(Id(_8),Id(_),[AttributeDecl(Static,ConstDecl(Id($_3lhN__),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 503))

    def test_504(self):
        line = '''Class Q60_:_Fr{O(_:Array [Array [String ,070],0b1_00_0]){}Var L,_,_:_;}Class w{}Class H:z_{Destructor (){Val _4_:_A;}Val $__:Array [String ,05];}Class _Ko_{}Class r{Val $_,_:_HaL_;}Class U0_o{}'''
        expect = '''Program([ClassDecl(Id(Q60_),Id(_Fr),[MethodDecl(Id(O),Instance,[param(Id(_),ArrayType(8,ArrayType(56,StringType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(w),[]),ClassDecl(Id(H),Id(z_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_4_),ClassType(Id(_A)),None)])),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(5,StringType),None))]),ClassDecl(Id(_Ko_),[]),ClassDecl(Id(r),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_HaL_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_HaL_)),None))]),ClassDecl(Id(U0_o),[])])'''
        self.assertTrue(TestAST.test(line, expect, 504))

    def test_505(self):
        line = '''Class A:__Vq{Constructor (_r:Array [Array [Float ,7],062_6_6];p_:Array [Array [Array [Array [String ,61],01],56_6_4_8],046];_,w,g:String ){} }Class _8:t{Val a:Boolean ;}Class _:_2{Var E_z,$_0:_;}'''
        expect = '''Program([ClassDecl(Id(A),Id(__Vq),[MethodDecl(Id(Constructor),Instance,[param(Id(_r),ArrayType(3254,ArrayType(7,FloatType))),param(Id(p_),ArrayType(38,ArrayType(56648,ArrayType(1,ArrayType(61,StringType))))),param(Id(_),StringType),param(Id(w),StringType),param(Id(g),StringType)],Block([]))]),ClassDecl(Id(_8),Id(t),[AttributeDecl(Instance,ConstDecl(Id(a),BoolType,None))]),ClassDecl(Id(_),Id(_2),[AttributeDecl(Instance,VarDecl(Id(E_z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_0),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 505))

    def test_506(self):
        line = '''Class v{Destructor (){} }Class R_:v7{}Class _c:_{$3(_00_:String ;I1Z_2:r;MS_,F6,_1,V:Array [Float ,0xA];k:Y21;M5b,Pg:O_;I:Int ;q,_7,_,l,_:Array [Int ,23];_9_gy_:Float ;l1,_:Array [Boolean ,0xD_F_3_8];_,__,_:Float ){ {} }}'''
        expect = '''Program([ClassDecl(Id(v),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(R_),Id(v7),[]),ClassDecl(Id(_c),Id(_),[MethodDecl(Id($3),Static,[param(Id(_00_),StringType),param(Id(I1Z_2),ClassType(Id(r))),param(Id(MS_),ArrayType(10,FloatType)),param(Id(F6),ArrayType(10,FloatType)),param(Id(_1),ArrayType(10,FloatType)),param(Id(V),ArrayType(10,FloatType)),param(Id(k),ClassType(Id(Y21))),param(Id(M5b),ClassType(Id(O_))),param(Id(Pg),ClassType(Id(O_))),param(Id(I),IntType),param(Id(q),ArrayType(23,IntType)),param(Id(_7),ArrayType(23,IntType)),param(Id(_),ArrayType(23,IntType)),param(Id(l),ArrayType(23,IntType)),param(Id(_),ArrayType(23,IntType)),param(Id(_9_gy_),FloatType),param(Id(l1),ArrayType(57144,BoolType)),param(Id(_),ArrayType(57144,BoolType)),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(_),FloatType)],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 506))

    def test_507(self):
        line = '''Class _:_{___(_365:Array [Float ,0B1_0_0_1];L:_A9){} }Class _:nre49_{}Class __:_k5{Constructor (_d3_:__){} }Class X{}Class I_6{Constructor (qdT,O:Float ){}Var d,$X:Array [Boolean ,01_023];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(___),Instance,[param(Id(_365),ArrayType(9,FloatType)),param(Id(L),ClassType(Id(_A9)))],Block([]))]),ClassDecl(Id(_),Id(nre49_),[]),ClassDecl(Id(__),Id(_k5),[MethodDecl(Id(Constructor),Instance,[param(Id(_d3_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(X),[]),ClassDecl(Id(I_6),[MethodDecl(Id(Constructor),Instance,[param(Id(qdT),FloatType),param(Id(O),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(d),ArrayType(531,BoolType))),AttributeDecl(Static,VarDecl(Id($X),ArrayType(531,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 507))

    def test_508(self):
        line = '''Class h{$9(_:L){}x(WON7e_:_){ {}Continue ;}Val _,H,__8,_,$_,w:Boolean ;}Class _:_o89{Var __A7,f,$zB,$0_:String ;Constructor (mf,l_sJ_,_:_){}Destructor (){} }Class E_:_{}'''
        expect = '''Program([ClassDecl(Id(h),[MethodDecl(Id($9),Static,[param(Id(_),ClassType(Id(L)))],Block([])),MethodDecl(Id(x),Instance,[param(Id(WON7e_),ClassType(Id(_)))],Block([Block([]),Continue])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(H),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(__8),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(w),BoolType,None))]),ClassDecl(Id(_),Id(_o89),[AttributeDecl(Instance,VarDecl(Id(__A7),StringType)),AttributeDecl(Instance,VarDecl(Id(f),StringType)),AttributeDecl(Static,VarDecl(Id($zB),StringType)),AttributeDecl(Static,VarDecl(Id($0_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(mf),ClassType(Id(_))),param(Id(l_sJ_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(E_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 508))

    def test_509(self):
        line = '''Class g_{Var $_:Array [Float ,25];Val _RA50j:Float ;}Class k{}Class o:__{}Class i8{}Class _:Y{Constructor (m,r,__,B:_;p_,_,_u1o_,_,v,B_0:String ){Continue ;}Var _h__,Qd_:Array [Array [Array [Boolean ,0x1_E],0b1110],06];Constructor (jf_:_6_;_58:_06){} }'''
        expect = '''Program([ClassDecl(Id(g_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(25,FloatType))),AttributeDecl(Instance,ConstDecl(Id(_RA50j),FloatType,None))]),ClassDecl(Id(k),[]),ClassDecl(Id(o),Id(__),[]),ClassDecl(Id(i8),[]),ClassDecl(Id(_),Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ClassType(Id(_))),param(Id(r),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(B),ClassType(Id(_))),param(Id(p_),StringType),param(Id(_),StringType),param(Id(_u1o_),StringType),param(Id(_),StringType),param(Id(v),StringType),param(Id(B_0),StringType)],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(_h__),ArrayType(6,ArrayType(14,ArrayType(30,BoolType))))),AttributeDecl(Instance,VarDecl(Id(Qd_),ArrayType(6,ArrayType(14,ArrayType(30,BoolType))))),MethodDecl(Id(Constructor),Instance,[param(Id(jf_),ClassType(Id(_6_))),param(Id(_58),ClassType(Id(_06)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 509))

    def test_510(self):
        line = '''Class uc:r7{}Class V6__:_{Constructor (b:Boolean ;_:_6Ll_){}Val W__,_:Float ;}Class r_{Val $4:Array [Array [Int ,2_15_5_7_2],0XD1D639];}Class e0_Z{Constructor (Z:String ;G:Int ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(uc),Id(r7),[]),ClassDecl(Id(V6__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(b),BoolType),param(Id(_),ClassType(Id(_6Ll_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(W__),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(r_),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(13751865,ArrayType(215572,IntType)),None))]),ClassDecl(Id(e0_Z),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),StringType),param(Id(G),IntType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 510))

    def test_511(self):
        line = '''Class I{}Class OE:f{Constructor (_b0,v,R_,m,_:Array [String ,0B1_1];___3z,AeG,_G5,L4,_15_,r:Array [Boolean ,0x5];_Z,_2:String ;_p8:Array [String ,0144];___,_,__,_,W2:u;i,__:Array [Int ,0B1];K3:Array [String ,0b110];_,uh,F_,Z:Array [Float ,80];_Tz,f:Int ;n:_;_:Array [Array [Boolean ,0x6],0b110]){} }'''
        expect = '''Program([ClassDecl(Id(I),[]),ClassDecl(Id(OE),Id(f),[MethodDecl(Id(Constructor),Instance,[param(Id(_b0),ArrayType(3,StringType)),param(Id(v),ArrayType(3,StringType)),param(Id(R_),ArrayType(3,StringType)),param(Id(m),ArrayType(3,StringType)),param(Id(_),ArrayType(3,StringType)),param(Id(___3z),ArrayType(5,BoolType)),param(Id(AeG),ArrayType(5,BoolType)),param(Id(_G5),ArrayType(5,BoolType)),param(Id(L4),ArrayType(5,BoolType)),param(Id(_15_),ArrayType(5,BoolType)),param(Id(r),ArrayType(5,BoolType)),param(Id(_Z),StringType),param(Id(_2),StringType),param(Id(_p8),ArrayType(100,StringType)),param(Id(___),ClassType(Id(u))),param(Id(_),ClassType(Id(u))),param(Id(__),ClassType(Id(u))),param(Id(_),ClassType(Id(u))),param(Id(W2),ClassType(Id(u))),param(Id(i),ArrayType(1,IntType)),param(Id(__),ArrayType(1,IntType)),param(Id(K3),ArrayType(6,StringType)),param(Id(_),ArrayType(80,FloatType)),param(Id(uh),ArrayType(80,FloatType)),param(Id(F_),ArrayType(80,FloatType)),param(Id(Z),ArrayType(80,FloatType)),param(Id(_Tz),IntType),param(Id(f),IntType),param(Id(n),ClassType(Id(_))),param(Id(_),ArrayType(6,ArrayType(6,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 511))

    def test_512(self):
        line = '''Class re:__{Destructor (){}Val A_J:Array [Array [Array [Array [Array [String ,0x23],0b1],25],0B10],0x9];Constructor (){}Var _,$__,$_0Gw:Array [Array [String ,0X9E],02];}Class i:lz3{Var $_q9,$MKG,_,$K_,$l,_Aw,$hQ,$_fg_v:_R;}'''
        expect = '''Program([ClassDecl(Id(re),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(A_J),ArrayType(9,ArrayType(2,ArrayType(25,ArrayType(1,ArrayType(35,StringType))))),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,ArrayType(158,StringType)))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(2,ArrayType(158,StringType)))),AttributeDecl(Static,VarDecl(Id($_0Gw),ArrayType(2,ArrayType(158,StringType))))]),ClassDecl(Id(i),Id(lz3),[AttributeDecl(Static,VarDecl(Id($_q9),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($MKG),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($K_),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($l),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_Aw),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($hQ),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_fg_v),ClassType(Id(_R)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 512))

    def test_513(self):
        line = '''Class i4h{Destructor (){}m(o0I,_:Float ;_:Float ){} }Class K:_{$_2(){}E(j,_:Int ;n_:_){_U::$_u._S.T5_.E();Continue ;} }Class r2_3:_1v{Var _:Int ;Constructor (){} }Class g{}'''
        expect = '''Program([ClassDecl(Id(i4h),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(m),Instance,[param(Id(o0I),FloatType),param(Id(_),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(K),Id(_),[MethodDecl(Id($_2),Static,[],Block([])),MethodDecl(Id(E),Instance,[param(Id(j),IntType),param(Id(_),IntType),param(Id(n_),ClassType(Id(_)))],Block([Call(FieldAccess(FieldAccess(FieldAccess(Id(_U),Id($_u)),Id(_S)),Id(T5_)),Id(E),[]),Continue]))]),ClassDecl(Id(r2_3),Id(_1v),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(g),[])])'''
        self.assertTrue(TestAST.test(line, expect, 513))

    def test_514(self):
        line = '''Class _4_9{}Class n:___{Var _4_2,h,$1___K49_7,c,$_,n4:__;Val $y_sH,$__C:_;Constructor (g,j,w_91,_6_,M_:Float ;_,_r_:____;_:Boolean ){}$8(){Break ;}$z_(a_,_,_:_){} }'''
        expect = '''Program([ClassDecl(Id(_4_9),[]),ClassDecl(Id(n),Id(___),[AttributeDecl(Instance,VarDecl(Id(_4_2),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(h),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1___K49_7),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(c),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n4),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($y_sH),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($__C),ClassType(Id(_)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(g),FloatType),param(Id(j),FloatType),param(Id(w_91),FloatType),param(Id(_6_),FloatType),param(Id(M_),FloatType),param(Id(_),ClassType(Id(____))),param(Id(_r_),ClassType(Id(____))),param(Id(_),BoolType)],Block([])),MethodDecl(Id($8),Static,[],Block([Break])),MethodDecl(Id($z_),Static,[param(Id(a_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 514))

    def test_515(self):
        line = '''Class e:Wb_{Var $_:Boolean ;Val m_:Boolean ;$g_(_1,_ug,_,Ljw2n_:MG6z74RE_;_p_:Array [Array [Float ,0XD],0X9A1];l_,S_:Array [Array [Float ,0b1_1],17]){Break ;}Var R4_:l;}'''
        expect = '''Program([ClassDecl(Id(e),Id(Wb_),[AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,ConstDecl(Id(m_),BoolType,None)),MethodDecl(Id($g_),Static,[param(Id(_1),ClassType(Id(MG6z74RE_))),param(Id(_ug),ClassType(Id(MG6z74RE_))),param(Id(_),ClassType(Id(MG6z74RE_))),param(Id(Ljw2n_),ClassType(Id(MG6z74RE_))),param(Id(_p_),ArrayType(2465,ArrayType(13,FloatType))),param(Id(l_),ArrayType(17,ArrayType(3,FloatType))),param(Id(S_),ArrayType(17,ArrayType(3,FloatType)))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(R4_),ClassType(Id(l)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 515))

    def test_516(self):
        line = '''Class _{Var $5,_A:_;}Class _77:_e_{Destructor (){} }Class E:g50{Constructor (_,l,k:Float ;_,q__H_:_;j,Sl:_){Break ;}Constructor (_H0:_;__:K0){Var b,_6,_:e_4;} }Class _:uM1{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_A),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_77),Id(_e_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(E),Id(g50),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(l),FloatType),param(Id(k),FloatType),param(Id(_),ClassType(Id(_))),param(Id(q__H_),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(Sl),ClassType(Id(_)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_H0),ClassType(Id(_))),param(Id(__),ClassType(Id(K0)))],Block([VarDecl(Id(b),ClassType(Id(e_4)),NullLiteral()),VarDecl(Id(_6),ClassType(Id(e_4)),NullLiteral()),VarDecl(Id(_),ClassType(Id(e_4)),NullLiteral())]))]),ClassDecl(Id(_),Id(uM1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 516))

    def test_517(self):
        line = '''Class _7{Constructor (){}e(_:Array [Float ,0134];k_3:Array [Boolean ,100];_5,_tX__,_PT:Array [Array [Array [Array [Float ,100],0x47],0xD_A],100]){}$1(P_y,_,i:Array [Array [Float ,4_3_1],0b101110]){}Var $ZPol_,$_0_:Float ;Val $__2,_q_8:Array [Array [Boolean ,0X5C],100];}'''
        expect = '''Program([ClassDecl(Id(_7),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(e),Instance,[param(Id(_),ArrayType(92,FloatType)),param(Id(k_3),ArrayType(100,BoolType)),param(Id(_5),ArrayType(100,ArrayType(218,ArrayType(71,ArrayType(100,FloatType))))),param(Id(_tX__),ArrayType(100,ArrayType(218,ArrayType(71,ArrayType(100,FloatType))))),param(Id(_PT),ArrayType(100,ArrayType(218,ArrayType(71,ArrayType(100,FloatType)))))],Block([])),MethodDecl(Id($1),Static,[param(Id(P_y),ArrayType(46,ArrayType(431,FloatType))),param(Id(_),ArrayType(46,ArrayType(431,FloatType))),param(Id(i),ArrayType(46,ArrayType(431,FloatType)))],Block([])),AttributeDecl(Static,VarDecl(Id($ZPol_),FloatType)),AttributeDecl(Static,VarDecl(Id($_0_),FloatType)),AttributeDecl(Static,ConstDecl(Id($__2),ArrayType(100,ArrayType(92,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_q_8),ArrayType(100,ArrayType(92,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 517))

    def test_518(self):
        line = '''Class _{$_1(Uqq34:_;w1_jF:_;__:Array [Float ,34]){}Val $8,m_,F2:Array [Array [Array [Float ,39],02],05];$_2_(F,p,i:Array [Array [Int ,39],0b1_1_11];E_1:String ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($_1),Static,[param(Id(Uqq34),ClassType(Id(_))),param(Id(w1_jF),ClassType(Id(_))),param(Id(__),ArrayType(34,FloatType))],Block([])),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(5,ArrayType(2,ArrayType(39,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(m_),ArrayType(5,ArrayType(2,ArrayType(39,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(F2),ArrayType(5,ArrayType(2,ArrayType(39,FloatType))),None)),MethodDecl(Id($_2_),Static,[param(Id(F),ArrayType(15,ArrayType(39,IntType))),param(Id(p),ArrayType(15,ArrayType(39,IntType))),param(Id(i),ArrayType(15,ArrayType(39,IntType))),param(Id(E_1),StringType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 518))

    def test_519(self):
        line = '''Class u{Constructor (_4,o:Array [Float ,037];_9,i1:String ;_oe_s:Array [Array [Boolean ,73],033];S,_:Int ){}Var O0:wwUU_6O;}Class _80:w2{Constructor (N,_S,z,F,V:Array [Array [Float ,0X2_0],0x27];z:Int ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[param(Id(_4),ArrayType(31,FloatType)),param(Id(o),ArrayType(31,FloatType)),param(Id(_9),StringType),param(Id(i1),StringType),param(Id(_oe_s),ArrayType(27,ArrayType(73,BoolType))),param(Id(S),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(O0),ClassType(Id(wwUU_6O)),NullLiteral()))]),ClassDecl(Id(_80),Id(w2),[MethodDecl(Id(Constructor),Instance,[param(Id(N),ArrayType(39,ArrayType(32,FloatType))),param(Id(_S),ArrayType(39,ArrayType(32,FloatType))),param(Id(z),ArrayType(39,ArrayType(32,FloatType))),param(Id(F),ArrayType(39,ArrayType(32,FloatType))),param(Id(V),ArrayType(39,ArrayType(32,FloatType))),param(Id(z),IntType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 519))

    def test_520(self):
        line = '''Class _{Val m:Array [Array [Array [Array [Array [Array [Array [Int ,0B11_0_0],0x1F],043],0B1_0_0_1],6],0X4],07_7];}Class nE_w:_YOF{Val n:_;}Class E:_{Var _,_1_:String ;Var $w:Array [Boolean ,06];}Class _:_{}Class J{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(m),ArrayType(63,ArrayType(4,ArrayType(6,ArrayType(9,ArrayType(35,ArrayType(31,ArrayType(12,IntType))))))),None))]),ClassDecl(Id(nE_w),Id(_YOF),[AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(_)),None))]),ClassDecl(Id(E),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_1_),StringType)),AttributeDecl(Static,VarDecl(Id($w),ArrayType(6,BoolType)))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(J),[])])'''
        self.assertTrue(TestAST.test(line, expect, 520))

    def test_521(self):
        line = '''Class Ih:Y5_{Val _,B,$y,E1O,$8_2_:Array [Array [String ,0b110010],49];Val $_:Array [Array [Array [Boolean ,49],0X45],3];}Class Y6M_:N{$_KY(){}Val F0,$L,_4:Array [Array [Array [Array [Boolean ,05],0x4C],49],0b1_1];}'''
        expect = '''Program([ClassDecl(Id(Ih),Id(Y5_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(49,ArrayType(50,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(B),ArrayType(49,ArrayType(50,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($y),ArrayType(49,ArrayType(50,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(E1O),ArrayType(49,ArrayType(50,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($8_2_),ArrayType(49,ArrayType(50,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(69,ArrayType(49,BoolType))),None))]),ClassDecl(Id(Y6M_),Id(N),[MethodDecl(Id($_KY),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(F0),ArrayType(3,ArrayType(49,ArrayType(76,ArrayType(5,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(3,ArrayType(49,ArrayType(76,ArrayType(5,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(3,ArrayType(49,ArrayType(76,ArrayType(5,BoolType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 521))

    def test_522(self):
        line = '''Class b:_{Val B,$_,__,$5OT_,$_:Array [Boolean ,0b1_1];Constructor (__y,de61a_:String ;__z,so:_;J,W7CL_,d_,_:Array [String ,0b111];_n,O,__50,a_,_,_,r_3h,_:f;G92x:Array [Array [Float ,02_70],0b10];T,__:Array [Array [String ,0252_1],0X30];__8P_:Int ;_2_,_:__o;I:String ;h_,O,_,g__:_){Break ;Continue ;}Val lp_6,_:_;}'''
        expect = '''Program([ClassDecl(Id(b),Id(_),[AttributeDecl(Instance,ConstDecl(Id(B),ArrayType(3,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(3,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($5OT_),ArrayType(3,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__y),StringType),param(Id(de61a_),StringType),param(Id(__z),ClassType(Id(_))),param(Id(so),ClassType(Id(_))),param(Id(J),ArrayType(7,StringType)),param(Id(W7CL_),ArrayType(7,StringType)),param(Id(d_),ArrayType(7,StringType)),param(Id(_),ArrayType(7,StringType)),param(Id(_n),ClassType(Id(f))),param(Id(O),ClassType(Id(f))),param(Id(__50),ClassType(Id(f))),param(Id(a_),ClassType(Id(f))),param(Id(_),ClassType(Id(f))),param(Id(_),ClassType(Id(f))),param(Id(r_3h),ClassType(Id(f))),param(Id(_),ClassType(Id(f))),param(Id(G92x),ArrayType(2,ArrayType(184,FloatType))),param(Id(T),ArrayType(48,ArrayType(1361,StringType))),param(Id(__),ArrayType(48,ArrayType(1361,StringType))),param(Id(__8P_),IntType),param(Id(_2_),ClassType(Id(__o))),param(Id(_),ClassType(Id(__o))),param(Id(I),StringType),param(Id(h_),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(g__),ClassType(Id(_)))],Block([Break,Continue])),AttributeDecl(Instance,ConstDecl(Id(lp_6),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 522))

    def test_523(self):
        line = '''Class K__B{Destructor (){Continue ;}Val D0,_,$I_6:_;Var $93:Array [Array [Float ,0XC_1_4],99];V_6(_UeW2G6_,_50_,g__:Array [Array [Array [Array [Array [Array [Array [Array [String ,0x50],0b111],0b10],8],0b1],5_2],021],0x50]){}Val _b,$71:Float ;}Class F2Im0{}Class R4UQ:_{}'''
        expect = '''Program([ClassDecl(Id(K__B),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(D0),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($I_6),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($93),ArrayType(99,ArrayType(3092,FloatType)))),MethodDecl(Id(V_6),Instance,[param(Id(_UeW2G6_),ArrayType(80,ArrayType(17,ArrayType(52,ArrayType(1,ArrayType(8,ArrayType(2,ArrayType(7,ArrayType(80,StringType))))))))),param(Id(_50_),ArrayType(80,ArrayType(17,ArrayType(52,ArrayType(1,ArrayType(8,ArrayType(2,ArrayType(7,ArrayType(80,StringType))))))))),param(Id(g__),ArrayType(80,ArrayType(17,ArrayType(52,ArrayType(1,ArrayType(8,ArrayType(2,ArrayType(7,ArrayType(80,StringType)))))))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_b),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($71),FloatType,None))]),ClassDecl(Id(F2Im0),[]),ClassDecl(Id(R4UQ),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 523))

    def test_524(self):
        line = '''Class _t:_{Var L_,_:Boolean ;Constructor (){}Destructor (){} }Class jh_:_a{}Class _0{Q(k1_16:Array [Int ,06];k:Array [Array [Int ,01],15];__6l:Array [Boolean ,0x56]){Return ;}$9A0(_eGy,l_:String ){} }'''
        expect = '''Program([ClassDecl(Id(_t),Id(_),[AttributeDecl(Instance,VarDecl(Id(L_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(jh_),Id(_a),[]),ClassDecl(Id(_0),[MethodDecl(Id(Q),Instance,[param(Id(k1_16),ArrayType(6,IntType)),param(Id(k),ArrayType(15,ArrayType(1,IntType))),param(Id(__6l),ArrayType(86,BoolType))],Block([Return()])),MethodDecl(Id($9A0),Static,[param(Id(_eGy),StringType),param(Id(l_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 524))

    def test_525(self):
        line = '''Class _:Z_{__h(__,p_l,_3y9,_2:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,92],0x8],0b10101],0b1],9],7],0B110001],0x52],92],0X29];U__:String ;K7k,__,_45j:_){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(Z_),[MethodDecl(Id(__h),Instance,[param(Id(__),ArrayType(41,ArrayType(92,ArrayType(82,ArrayType(49,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(21,ArrayType(8,ArrayType(92,StringType))))))))))),param(Id(p_l),ArrayType(41,ArrayType(92,ArrayType(82,ArrayType(49,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(21,ArrayType(8,ArrayType(92,StringType))))))))))),param(Id(_3y9),ArrayType(41,ArrayType(92,ArrayType(82,ArrayType(49,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(21,ArrayType(8,ArrayType(92,StringType))))))))))),param(Id(_2),ArrayType(41,ArrayType(92,ArrayType(82,ArrayType(49,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(21,ArrayType(8,ArrayType(92,StringType))))))))))),param(Id(U__),StringType),param(Id(K7k),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_45j),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 525))

    def test_526(self):
        line = '''Class NP{}Class p:L_{Constructor (){}Val $nL,$b:_0__K1_;Constructor (_:Array [Array [Array [Array [Int ,0x2C],0x2C],0xB],1]){}Val $_z_:String ;Constructor (_:Array [Array [Int ,075],6]){Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(NP),[]),ClassDecl(Id(p),Id(L_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($nL),ClassType(Id(_0__K1_)),None)),AttributeDecl(Static,ConstDecl(Id($b),ClassType(Id(_0__K1_)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(11,ArrayType(44,ArrayType(44,IntType)))))],Block([])),AttributeDecl(Static,ConstDecl(Id($_z_),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(6,ArrayType(61,IntType)))],Block([Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 526))

    def test_527(self):
        line = '''Class _53w{}Class _:_E{Constructor (t,_RT8_t,_:Float ;_,M,_Z,CK,I:Array [Int ,1]){}Var $_,___B,t:_;}Class __Jz0:C{Destructor (){ {} }Var Ac,$25nh,g2491:Array [String ,0X16];}'''
        expect = '''Program([ClassDecl(Id(_53w),[]),ClassDecl(Id(_),Id(_E),[MethodDecl(Id(Constructor),Instance,[param(Id(t),FloatType),param(Id(_RT8_t),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(1,IntType)),param(Id(M),ArrayType(1,IntType)),param(Id(_Z),ArrayType(1,IntType)),param(Id(CK),ArrayType(1,IntType)),param(Id(I),ArrayType(1,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___B),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__Jz0),Id(C),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(Ac),ArrayType(22,StringType))),AttributeDecl(Static,VarDecl(Id($25nh),ArrayType(22,StringType))),AttributeDecl(Instance,VarDecl(Id(g2491),ArrayType(22,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 527))

    def test_528(self):
        line = '''Class T6:_lH{t(__H0:Array [Array [Array [String ,8],41],0x63];OF:Array [Array [Boolean ,41],0XB];D:v_){Break ;}p(l:Float ){} }Class q{Var _:Array [Int ,41];Var _,FM:_5;p(){Array ()._();} }'''
        expect = '''Program([ClassDecl(Id(T6),Id(_lH),[MethodDecl(Id(t),Instance,[param(Id(__H0),ArrayType(99,ArrayType(41,ArrayType(8,StringType)))),param(Id(OF),ArrayType(11,ArrayType(41,BoolType))),param(Id(D),ClassType(Id(v_)))],Block([Break])),MethodDecl(Id(p),Instance,[param(Id(l),FloatType)],Block([]))]),ClassDecl(Id(q),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(41,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_5)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(FM),ClassType(Id(_5)),NullLiteral())),MethodDecl(Id(p),Instance,[],Block([Call([],Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 528))

    def test_529(self):
        line = '''Class _{Var $1:qy_;}Class ___9a:ds{}Class U{Destructor (){}Constructor (){}Val _8,$96:Array [Array [Array [Boolean ,0B11101],0b11110],0xD];Val g__,_x82D,$_50:zW;Var $_,_F:Int ;}Class i:L{Val $_:Array [String ,023];}Class __{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(qy_)),NullLiteral()))]),ClassDecl(Id(___9a),Id(ds),[]),ClassDecl(Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_8),ArrayType(13,ArrayType(30,ArrayType(29,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($96),ArrayType(13,ArrayType(30,ArrayType(29,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(g__),ClassType(Id(zW)),None)),AttributeDecl(Instance,ConstDecl(Id(_x82D),ClassType(Id(zW)),None)),AttributeDecl(Static,ConstDecl(Id($_50),ClassType(Id(zW)),None)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,VarDecl(Id(_F),IntType))]),ClassDecl(Id(i),Id(L),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(19,StringType),None))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 529))

    def test_530(self):
        line = '''Class th8{Constructor (o:Array [Int ,04]){}Constructor (_:__;__,G:Int ;TZ:Array [Array [Float ,6],64_30];_:String ;M,C9k,_:Int ;b_:Array [Array [Float ,12],06];_I:Array [String ,0x61]){}Val _37:Boolean ;}Class x:_{}'''
        expect = '''Program([ClassDecl(Id(th8),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(4,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__))),param(Id(__),IntType),param(Id(G),IntType),param(Id(TZ),ArrayType(6430,ArrayType(6,FloatType))),param(Id(_),StringType),param(Id(M),IntType),param(Id(C9k),IntType),param(Id(_),IntType),param(Id(b_),ArrayType(6,ArrayType(12,FloatType))),param(Id(_I),ArrayType(97,StringType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_37),BoolType,None))]),ClassDecl(Id(x),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 530))

    def test_531(self):
        line = '''Class P_{_(FF3:String ;E:Array [Array [Boolean ,0b1001111],0xB];_:Array [Array [Array [Array [Array [String ,0b1],073],0b1001111],0x7],30];___7:Array [Array [Array [String ,30],0B100101],30]){} }Class ___{}'''
        expect = '''Program([ClassDecl(Id(P_),[MethodDecl(Id(_),Instance,[param(Id(FF3),StringType),param(Id(E),ArrayType(11,ArrayType(79,BoolType))),param(Id(_),ArrayType(30,ArrayType(7,ArrayType(79,ArrayType(59,ArrayType(1,StringType)))))),param(Id(___7),ArrayType(30,ArrayType(37,ArrayType(30,StringType))))],Block([]))]),ClassDecl(Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 531))

    def test_532(self):
        line = '''Class M3__3MK_m{Destructor (){}Destructor (){}_1J(q:Array [Boolean ,0X1E]){}$__r_E_(){} }Class __:d_{Destructor (){Var _tmE0,e:Array [Array [String ,0b1000000],0x7];Break ;}$_P(){} }Class vrG{}'''
        expect = '''Program([ClassDecl(Id(M3__3MK_m),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_1J),Instance,[param(Id(q),ArrayType(30,BoolType))],Block([])),MethodDecl(Id($__r_E_),Static,[],Block([]))]),ClassDecl(Id(__),Id(d_),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_tmE0),ArrayType(7,ArrayType(64,StringType))),VarDecl(Id(e),ArrayType(7,ArrayType(64,StringType))),Break])),MethodDecl(Id($_P),Static,[],Block([]))]),ClassDecl(Id(vrG),[])])'''
        self.assertTrue(TestAST.test(line, expect, 532))

    def test_533(self):
        line = '''Class _V_:_{$f1OSLv(_,__y_,_e,V_,p:Float ){}Val $C,z:Array [Boolean ,40];$e_0(){} }Class _66{$w(R:Array [Array [String ,0X37],0x4C];mY,_,_,_,R:_;E:Float ){Continue ;} }Class A{}'''
        expect = '''Program([ClassDecl(Id(_V_),Id(_),[MethodDecl(Id($f1OSLv),Static,[param(Id(_),FloatType),param(Id(__y_),FloatType),param(Id(_e),FloatType),param(Id(V_),FloatType),param(Id(p),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($C),ArrayType(40,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(40,BoolType),None)),MethodDecl(Id($e_0),Static,[],Block([]))]),ClassDecl(Id(_66),[MethodDecl(Id($w),Static,[param(Id(R),ArrayType(76,ArrayType(55,StringType))),param(Id(mY),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(R),ClassType(Id(_))),param(Id(E),FloatType)],Block([Continue]))]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 533))

    def test_534(self):
        line = '''Class m7__4{}Class _:A{}Class lo3{Constructor (AU,i,_,_I:Array [String ,0B1];_:c;v_,__,v4:Array [Array [Array [Boolean ,158_1_33_7],0B1],0b11111]){}_(__,l:_){Break ;} }'''
        expect = '''Program([ClassDecl(Id(m7__4),[]),ClassDecl(Id(_),Id(A),[]),ClassDecl(Id(lo3),[MethodDecl(Id(Constructor),Instance,[param(Id(AU),ArrayType(1,StringType)),param(Id(i),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_I),ArrayType(1,StringType)),param(Id(_),ClassType(Id(c))),param(Id(v_),ArrayType(31,ArrayType(1,ArrayType(1581337,BoolType)))),param(Id(__),ArrayType(31,ArrayType(1,ArrayType(1581337,BoolType)))),param(Id(v4),ArrayType(31,ArrayType(1,ArrayType(1581337,BoolType))))],Block([])),MethodDecl(Id(_),Instance,[param(Id(__),ClassType(Id(_))),param(Id(l),ClassType(Id(_)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 534))

    def test_535(self):
        line = '''Class _{Constructor (zPr_,o1n:Int ;T_,N_u:d;J7:Int ;_,o0_t_1:String ){}Destructor (){Continue ;Break ;Continue ;}$_M(TMA_MBlB:Float ;J,T9:Array [Array [String ,061],0B1001110]){}Var _:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(zPr_),IntType),param(Id(o1n),IntType),param(Id(T_),ClassType(Id(d))),param(Id(N_u),ClassType(Id(d))),param(Id(J7),IntType),param(Id(_),StringType),param(Id(o0_t_1),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Break,Continue])),MethodDecl(Id($_M),Static,[param(Id(TMA_MBlB),FloatType),param(Id(J),ArrayType(78,ArrayType(49,StringType))),param(Id(T9),ArrayType(78,ArrayType(49,StringType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 535))

    def test_536(self):
        line = '''Class _b:H{Constructor (__:_vi;j,_,Lg_,e__:Boolean ;uy_,v:Array [Array [Array [String ,0b1_1_0],0B1001100],0134];Q,G,_:Array [Boolean ,0X15];X_,_:Array [Array [String ,1],0B1001100];_90,LL3y_:Array [Array [Array [Array [Array [Int ,0134],0B1_11],92],0134],0XB8_D];j_,Z:M){}Constructor (){} }Class _:__z_{}'''
        expect = '''Program([ClassDecl(Id(_b),Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_vi))),param(Id(j),BoolType),param(Id(_),BoolType),param(Id(Lg_),BoolType),param(Id(e__),BoolType),param(Id(uy_),ArrayType(92,ArrayType(76,ArrayType(6,StringType)))),param(Id(v),ArrayType(92,ArrayType(76,ArrayType(6,StringType)))),param(Id(Q),ArrayType(21,BoolType)),param(Id(G),ArrayType(21,BoolType)),param(Id(_),ArrayType(21,BoolType)),param(Id(X_),ArrayType(76,ArrayType(1,StringType))),param(Id(_),ArrayType(76,ArrayType(1,StringType))),param(Id(_90),ArrayType(2957,ArrayType(92,ArrayType(92,ArrayType(7,ArrayType(92,IntType)))))),param(Id(LL3y_),ArrayType(2957,ArrayType(92,ArrayType(92,ArrayType(7,ArrayType(92,IntType)))))),param(Id(j_),ClassType(Id(M))),param(Id(Z),ClassType(Id(M)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__z_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 536))

    def test_537(self):
        line = '''Class _1:SX{}Class N_5SK:_{Val $_94:e;_(e_7:_8){}P(_:_Q;_,I2:Int ;o7,I_,t8,_04_T,_48,X,j:Boolean ;_,G_:Array [Array [Float ,4],5]){} }Class I1:__{}Class __6:__{Destructor (){}Val $E,g,$c:Array [Float ,0B1000010];}Class C{}Class _:L{}'''
        expect = '''Program([ClassDecl(Id(_1),Id(SX),[]),ClassDecl(Id(N_5SK),Id(_),[AttributeDecl(Static,ConstDecl(Id($_94),ClassType(Id(e)),None)),MethodDecl(Id(_),Instance,[param(Id(e_7),ClassType(Id(_8)))],Block([])),MethodDecl(Id(P),Instance,[param(Id(_),ClassType(Id(_Q))),param(Id(_),IntType),param(Id(I2),IntType),param(Id(o7),BoolType),param(Id(I_),BoolType),param(Id(t8),BoolType),param(Id(_04_T),BoolType),param(Id(_48),BoolType),param(Id(X),BoolType),param(Id(j),BoolType),param(Id(_),ArrayType(5,ArrayType(4,FloatType))),param(Id(G_),ArrayType(5,ArrayType(4,FloatType)))],Block([]))]),ClassDecl(Id(I1),Id(__),[]),ClassDecl(Id(__6),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($E),ArrayType(66,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(g),ArrayType(66,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(66,FloatType),None))]),ClassDecl(Id(C),[]),ClassDecl(Id(_),Id(L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 537))

    def test_538(self):
        line = '''Class K8J__i:A{Destructor (){}Var _:Array [Boolean ,1];}Class _i{}Class _{Destructor (){} }Class b:i9{}Class _y:I9{Destructor (){}Var $_L:String ;Val $77_I,b,_2:Array [Array [Array [Array [Float ,0B1010100],02],0xE],0B1010100];}'''
        expect = '''Program([ClassDecl(Id(K8J__i),Id(A),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,BoolType)))]),ClassDecl(Id(_i),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b),Id(i9),[]),ClassDecl(Id(_y),Id(I9),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_L),StringType)),AttributeDecl(Static,ConstDecl(Id($77_I),ArrayType(84,ArrayType(14,ArrayType(2,ArrayType(84,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(b),ArrayType(84,ArrayType(14,ArrayType(2,ArrayType(84,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_2),ArrayType(84,ArrayType(14,ArrayType(2,ArrayType(84,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 538))

    def test_539(self):
        line = '''Class f{}Class _{}Class U49_:___{$0(S_,c:Array [Array [Boolean ,0b110110],8];g:__K;__:Array [String ,07];l_,Y4,_:Array [Array [Boolean ,0X2_C],04_7];PS8w_x:L_){} }Class _{}Class o{}'''
        expect = '''Program([ClassDecl(Id(f),[]),ClassDecl(Id(_),[]),ClassDecl(Id(U49_),Id(___),[MethodDecl(Id($0),Static,[param(Id(S_),ArrayType(8,ArrayType(54,BoolType))),param(Id(c),ArrayType(8,ArrayType(54,BoolType))),param(Id(g),ClassType(Id(__K))),param(Id(__),ArrayType(7,StringType)),param(Id(l_),ArrayType(39,ArrayType(44,BoolType))),param(Id(Y4),ArrayType(39,ArrayType(44,BoolType))),param(Id(_),ArrayType(39,ArrayType(44,BoolType))),param(Id(PS8w_x),ClassType(Id(L_)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(o),[])])'''
        self.assertTrue(TestAST.test(line, expect, 539))

    def test_540(self):
        line = '''Class _{Var _2Q_s:f_L;Constructor (F_s:Array [Array [Int ,0105],0xE];_,h,L,hjV:A6_98;__,W3:Q_y;u,F,_:Array [Array [Boolean ,0x19],0B1];_,q2jP:w_){}Var $_,$G_917P:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_2Q_s),ClassType(Id(f_L)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(F_s),ArrayType(14,ArrayType(69,IntType))),param(Id(_),ClassType(Id(A6_98))),param(Id(h),ClassType(Id(A6_98))),param(Id(L),ClassType(Id(A6_98))),param(Id(hjV),ClassType(Id(A6_98))),param(Id(__),ClassType(Id(Q_y))),param(Id(W3),ClassType(Id(Q_y))),param(Id(u),ArrayType(1,ArrayType(25,BoolType))),param(Id(F),ArrayType(1,ArrayType(25,BoolType))),param(Id(_),ArrayType(1,ArrayType(25,BoolType))),param(Id(_),ClassType(Id(w_))),param(Id(q2jP),ClassType(Id(w_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,VarDecl(Id($G_917P),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 540))

    def test_541(self):
        line = '''Class x2Z{}Class _4:o_7{_z6(_,e50_:String ;d:Array [Array [Array [String ,0b110000],0b1],9]){Continue ;}Val I_,$L,a5,_u,_v,$_zs_:Boolean ;l(){} }Class _:_1_8_{}Class _{Var _23:c_;}'''
        expect = '''Program([ClassDecl(Id(x2Z),[]),ClassDecl(Id(_4),Id(o_7),[MethodDecl(Id(_z6),Instance,[param(Id(_),StringType),param(Id(e50_),StringType),param(Id(d),ArrayType(9,ArrayType(1,ArrayType(48,StringType))))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(I_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($L),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(a5),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_u),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_v),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_zs_),BoolType,None)),MethodDecl(Id(l),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_1_8_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_23),ClassType(Id(c_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 541))

    def test_542(self):
        line = '''Class I5{Constructor (c:Array [Float ,0113]){}Destructor (){} }Class ix_K_{j(_:Float ;gl:Array [Array [Float ,0X3],12];F9:Array [Array [Array [String ,2_8],12],2_5]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(I5),[MethodDecl(Id(Constructor),Instance,[param(Id(c),ArrayType(75,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(ix_K_),[MethodDecl(Id(j),Instance,[param(Id(_),FloatType),param(Id(gl),ArrayType(12,ArrayType(3,FloatType))),param(Id(F9),ArrayType(25,ArrayType(12,ArrayType(28,StringType))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 542))

    def test_543(self):
        line = '''Class _3_4:iZ{Constructor (_Ok:Float ;nn,A,f_,__:Array [Array [Array [Float ,04],0x38],0x7_A_9];x7F0s,_,_IBw4_:__k;t65:Array [Array [Boolean ,0x38],053]){} }Class _{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(_3_4),Id(iZ),[MethodDecl(Id(Constructor),Instance,[param(Id(_Ok),FloatType),param(Id(nn),ArrayType(1961,ArrayType(56,ArrayType(4,FloatType)))),param(Id(A),ArrayType(1961,ArrayType(56,ArrayType(4,FloatType)))),param(Id(f_),ArrayType(1961,ArrayType(56,ArrayType(4,FloatType)))),param(Id(__),ArrayType(1961,ArrayType(56,ArrayType(4,FloatType)))),param(Id(x7F0s),ClassType(Id(__k))),param(Id(_),ClassType(Id(__k))),param(Id(_IBw4_),ClassType(Id(__k))),param(Id(t65),ArrayType(43,ArrayType(56,BoolType)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 543))

    def test_544(self):
        line = '''Class hLp{}Class ___5{}Class _42_:v{Var $F:Array [Array [Float ,0XD3],7_69];}Class __{Var $_:Array [Array [Int ,0x28],0X32];Destructor (){Continue ;}Var u,_H_,w_,$z_0:Int ;}'''
        expect = '''Program([ClassDecl(Id(hLp),[]),ClassDecl(Id(___5),[]),ClassDecl(Id(_42_),Id(v),[AttributeDecl(Static,VarDecl(Id($F),ArrayType(769,ArrayType(211,FloatType))))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(50,ArrayType(40,IntType)))),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(u),IntType)),AttributeDecl(Instance,VarDecl(Id(_H_),IntType)),AttributeDecl(Instance,VarDecl(Id(w_),IntType)),AttributeDecl(Static,VarDecl(Id($z_0),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 544))

    def test_545(self):
        line = '''Class o3w:G{Constructor (__8,a__,_,_:_r5u6;S5y6_,e_5:_;W_:Array [Int ,061];QD2,__,__70_,ip,F__w_7_,j_:Array [Array [Boolean ,0B1],0x4];___x72:Float ;R,I:Float ){} }'''
        expect = '''Program([ClassDecl(Id(o3w),Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(__8),ClassType(Id(_r5u6))),param(Id(a__),ClassType(Id(_r5u6))),param(Id(_),ClassType(Id(_r5u6))),param(Id(_),ClassType(Id(_r5u6))),param(Id(S5y6_),ClassType(Id(_))),param(Id(e_5),ClassType(Id(_))),param(Id(W_),ArrayType(49,IntType)),param(Id(QD2),ArrayType(4,ArrayType(1,BoolType))),param(Id(__),ArrayType(4,ArrayType(1,BoolType))),param(Id(__70_),ArrayType(4,ArrayType(1,BoolType))),param(Id(ip),ArrayType(4,ArrayType(1,BoolType))),param(Id(F__w_7_),ArrayType(4,ArrayType(1,BoolType))),param(Id(j_),ArrayType(4,ArrayType(1,BoolType))),param(Id(___x72),FloatType),param(Id(R),FloatType),param(Id(I),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 545))

    def test_546(self):
        line = '''Class _:___{}Class _62:z_Y{Destructor (){}Constructor (_:Boolean ;J:_2;l,k:String ){}$56(_:Array [Int ,0X5F];__:Array [Array [Float ,075],0b101100];Q:C4_w;_,_,e,_N,f:Array [Float ,0X5F]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(___),[]),ClassDecl(Id(_62),Id(z_Y),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(J),ClassType(Id(_2))),param(Id(l),StringType),param(Id(k),StringType)],Block([])),MethodDecl(Id($56),Static,[param(Id(_),ArrayType(95,IntType)),param(Id(__),ArrayType(44,ArrayType(61,FloatType))),param(Id(Q),ClassType(Id(C4_w))),param(Id(_),ArrayType(95,FloatType)),param(Id(_),ArrayType(95,FloatType)),param(Id(e),ArrayType(95,FloatType)),param(Id(_N),ArrayType(95,FloatType)),param(Id(f),ArrayType(95,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 546))

    def test_547(self):
        line = '''Class I:_7{}Class O:_{$_H59(h:Array [Array [Array [Boolean ,39],053],02];W5:Array [Array [Array [Float ,0b1_0111_0],0100],01];_,_R:d;_X_,_:_q){}Var f7:Array [Array [Boolean ,0b1],0100];}Class _{}Class _Mg1:T1A2{}'''
        expect = '''Program([ClassDecl(Id(I),Id(_7),[]),ClassDecl(Id(O),Id(_),[MethodDecl(Id($_H59),Static,[param(Id(h),ArrayType(2,ArrayType(43,ArrayType(39,BoolType)))),param(Id(W5),ArrayType(1,ArrayType(64,ArrayType(46,FloatType)))),param(Id(_),ClassType(Id(d))),param(Id(_R),ClassType(Id(d))),param(Id(_X_),ClassType(Id(_q))),param(Id(_),ClassType(Id(_q)))],Block([])),AttributeDecl(Instance,VarDecl(Id(f7),ArrayType(64,ArrayType(1,BoolType))))]),ClassDecl(Id(_),[]),ClassDecl(Id(_Mg1),Id(T1A2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 547))

    def test_548(self):
        line = '''Class _:K{Destructor (){}Val $9a:Boolean ;}Class _:_{}Class __7__:_{}Class _{Constructor (T8,_6:Array [Array [Boolean ,0b1_1_0_1],0x5];_,kD1_:Array [Array [Array [Int ,0x9],0405_2],0X7];VR4l,_,v,_:Array [Int ,0xB]){} }Class _:Jc_n{}'''
        expect = '''Program([ClassDecl(Id(_),Id(K),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($9a),BoolType,None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__7__),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T8),ArrayType(5,ArrayType(13,BoolType))),param(Id(_6),ArrayType(5,ArrayType(13,BoolType))),param(Id(_),ArrayType(7,ArrayType(2090,ArrayType(9,IntType)))),param(Id(kD1_),ArrayType(7,ArrayType(2090,ArrayType(9,IntType)))),param(Id(VR4l),ArrayType(11,IntType)),param(Id(_),ArrayType(11,IntType)),param(Id(v),ArrayType(11,IntType)),param(Id(_),ArrayType(11,IntType))],Block([]))]),ClassDecl(Id(_),Id(Jc_n),[])])'''
        self.assertTrue(TestAST.test(line, expect, 548))

    def test_549(self):
        line = '''Class W{Var _,$b:Int ;Val $O:Array [Boolean ,0b110011];}Class v2{}Class _:q0{}Class O{Destructor (){Break ;Break ;}B2j_(iF:_1;f:Array [Array [Array [Array [Float ,0B101_1],0b110011],0B101],4];zh_,___,_:Array [Boolean ,034]){} }'''
        expect = '''Program([ClassDecl(Id(W),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($b),IntType)),AttributeDecl(Static,ConstDecl(Id($O),ArrayType(51,BoolType),None))]),ClassDecl(Id(v2),[]),ClassDecl(Id(_),Id(q0),[]),ClassDecl(Id(O),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Break])),MethodDecl(Id(B2j_),Instance,[param(Id(iF),ClassType(Id(_1))),param(Id(f),ArrayType(4,ArrayType(5,ArrayType(51,ArrayType(11,FloatType))))),param(Id(zh_),ArrayType(28,BoolType)),param(Id(___),ArrayType(28,BoolType)),param(Id(_),ArrayType(28,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 549))

    def test_550(self):
        line = '''Class _{}Class __{_zP_T6(){}Constructor (R:String ;_,P:String ;cH:_;_,L134,_2:_7Yp;K,_:Array [String ,0B1];v,_:Int ;R5E2_,_:Array [Array [Array [Float ,0101],0XA_4],5];_sS,_9__s,c__:Boolean ){}Var _:Array [Array [Array [String ,0101],4],0101];}Class __{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(_zP_T6),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(R),StringType),param(Id(_),StringType),param(Id(P),StringType),param(Id(cH),ClassType(Id(_))),param(Id(_),ClassType(Id(_7Yp))),param(Id(L134),ClassType(Id(_7Yp))),param(Id(_2),ClassType(Id(_7Yp))),param(Id(K),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(v),IntType),param(Id(_),IntType),param(Id(R5E2_),ArrayType(5,ArrayType(164,ArrayType(65,FloatType)))),param(Id(_),ArrayType(5,ArrayType(164,ArrayType(65,FloatType)))),param(Id(_sS),BoolType),param(Id(_9__s),BoolType),param(Id(c__),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(65,ArrayType(4,ArrayType(65,StringType)))))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 550))

    def test_551(self):
        line = '''Class A:F{Var $C1MPF_7,p,$k__0i,$4:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,5],0x49],49],05],5_3],0xE],0b1_1_0_0_10],0B1100000];Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(A),Id(F),[AttributeDecl(Static,VarDecl(Id($C1MPF_7),ArrayType(96,ArrayType(50,ArrayType(14,ArrayType(53,ArrayType(5,ArrayType(49,ArrayType(73,ArrayType(5,BoolType)))))))))),AttributeDecl(Instance,VarDecl(Id(p),ArrayType(96,ArrayType(50,ArrayType(14,ArrayType(53,ArrayType(5,ArrayType(49,ArrayType(73,ArrayType(5,BoolType)))))))))),AttributeDecl(Static,VarDecl(Id($k__0i),ArrayType(96,ArrayType(50,ArrayType(14,ArrayType(53,ArrayType(5,ArrayType(49,ArrayType(73,ArrayType(5,BoolType)))))))))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(96,ArrayType(50,ArrayType(14,ArrayType(53,ArrayType(5,ArrayType(49,ArrayType(73,ArrayType(5,BoolType)))))))))),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 551))

    def test_552(self):
        line = '''Class __m_:hq{Destructor (){} }Class pi_{Constructor (_,v_4_S_D_:a_;r,C_,_,__:Array [Array [Float ,6_2],0b1011];NM__,D_,m2,s_,Mv:Int ;_:Int ;___1:Array [Int ,0B1_0]){Break ;}_F(){}Var $6:Float ;}'''
        expect = '''Program([ClassDecl(Id(__m_),Id(hq),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(pi_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(a_))),param(Id(v_4_S_D_),ClassType(Id(a_))),param(Id(r),ArrayType(11,ArrayType(62,FloatType))),param(Id(C_),ArrayType(11,ArrayType(62,FloatType))),param(Id(_),ArrayType(11,ArrayType(62,FloatType))),param(Id(__),ArrayType(11,ArrayType(62,FloatType))),param(Id(NM__),IntType),param(Id(D_),IntType),param(Id(m2),IntType),param(Id(s_),IntType),param(Id(Mv),IntType),param(Id(_),IntType),param(Id(___1),ArrayType(2,IntType))],Block([Break])),MethodDecl(Id(_F),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($6),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 552))

    def test_553(self):
        line = '''Class _{Destructor (){Return ;Continue ;Break ;Continue ;}Var $4:Int ;Val $6:Boolean ;}Class q8__:_{Var _,J8_:Array [Boolean ,0xF4];}Class _{Var _:Array [Array [Float ,7],0B1];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Continue,Break,Continue])),AttributeDecl(Static,VarDecl(Id($4),IntType)),AttributeDecl(Static,ConstDecl(Id($6),BoolType,None))]),ClassDecl(Id(q8__),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(244,BoolType))),AttributeDecl(Instance,VarDecl(Id(J8_),ArrayType(244,BoolType)))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(7,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 553))

    def test_554(self):
        line = '''Class k:_{Constructor (_:Boolean ;y2q,_,_U49N:Float ;_:String ;_,I,Y_,_,_,Z:Array [Array [String ,9],12];__J_f:I0_;_,P_N1:Array [Array [Array [Array [Array [Int ,06],0141],0141],0141],0x55];_:_){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(y2q),FloatType),param(Id(_),FloatType),param(Id(_U49N),FloatType),param(Id(_),StringType),param(Id(_),ArrayType(12,ArrayType(9,StringType))),param(Id(I),ArrayType(12,ArrayType(9,StringType))),param(Id(Y_),ArrayType(12,ArrayType(9,StringType))),param(Id(_),ArrayType(12,ArrayType(9,StringType))),param(Id(_),ArrayType(12,ArrayType(9,StringType))),param(Id(Z),ArrayType(12,ArrayType(9,StringType))),param(Id(__J_f),ClassType(Id(I0_))),param(Id(_),ArrayType(85,ArrayType(97,ArrayType(97,ArrayType(97,ArrayType(6,IntType)))))),param(Id(P_N1),ArrayType(85,ArrayType(97,ArrayType(97,ArrayType(97,ArrayType(6,IntType)))))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 554))

    def test_555(self):
        line = '''Class Q:e{}Class h1Mr_{Constructor (HN,i:Boolean ;G_,_:Array [Int ,6];_BG0V6U7_,sw,_g9s,_:_;__:Array [Float ,9]){} }Class _5:__{}Class s{Destructor (){}u_6(w5ce:__){} }'''
        expect = '''Program([ClassDecl(Id(Q),Id(e),[]),ClassDecl(Id(h1Mr_),[MethodDecl(Id(Constructor),Instance,[param(Id(HN),BoolType),param(Id(i),BoolType),param(Id(G_),ArrayType(6,IntType)),param(Id(_),ArrayType(6,IntType)),param(Id(_BG0V6U7_),ClassType(Id(_))),param(Id(sw),ClassType(Id(_))),param(Id(_g9s),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__),ArrayType(9,FloatType))],Block([]))]),ClassDecl(Id(_5),Id(__),[]),ClassDecl(Id(s),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(u_6),Instance,[param(Id(w5ce),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 555))

    def test_556(self):
        line = '''Class Y:_{Constructor (){} }Class __6:_{Val $_7_,I:RJ;}Class F:_4{_(){Break ;}Var _:Array [Array [Array [Array [Array [String ,0x56],0B10110],041],0x2_0D_2],0X4_EA];}Class G{}'''
        expect = '''Program([ClassDecl(Id(Y),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__6),Id(_),[AttributeDecl(Static,ConstDecl(Id($_7_),ClassType(Id(RJ)),None)),AttributeDecl(Instance,ConstDecl(Id(I),ClassType(Id(RJ)),None))]),ClassDecl(Id(F),Id(_4),[MethodDecl(Id(_),Instance,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1258,ArrayType(8402,ArrayType(33,ArrayType(22,ArrayType(86,StringType)))))))]),ClassDecl(Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 556))

    def test_557(self):
        line = '''Class _:_42{Val $4a:_356;}Class V:t{$_3(mx:Array [Int ,67];m:b;W,_:__x;__,__:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X5B],0B1011],0B100],0x51],0b1],037],0x2],037];_:Int ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_42),[AttributeDecl(Static,ConstDecl(Id($4a),ClassType(Id(_356)),None))]),ClassDecl(Id(V),Id(t),[MethodDecl(Id($_3),Static,[param(Id(mx),ArrayType(67,IntType)),param(Id(m),ClassType(Id(b))),param(Id(W),ClassType(Id(__x))),param(Id(_),ClassType(Id(__x))),param(Id(__),ArrayType(31,ArrayType(2,ArrayType(31,ArrayType(1,ArrayType(81,ArrayType(4,ArrayType(11,ArrayType(91,IntType))))))))),param(Id(__),ArrayType(31,ArrayType(2,ArrayType(31,ArrayType(1,ArrayType(81,ArrayType(4,ArrayType(11,ArrayType(91,IntType))))))))),param(Id(_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 557))

    def test_558(self):
        line = '''Class __:o0{$0J10s(FN,k7,_r:String ;_7:Boolean ){}Constructor (u:xn5;y:Float ;_:Boolean ;_:Float ;B9F_S__:S;L8:_;X:_){}Var $Wp,$T__,M1,o_,w7,_,_3:W2;Constructor (_,__0___7:Array [Array [Float ,1],88_0];_,_,V:Array [Float ,6]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(o0),[MethodDecl(Id($0J10s),Static,[param(Id(FN),StringType),param(Id(k7),StringType),param(Id(_r),StringType),param(Id(_7),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(u),ClassType(Id(xn5))),param(Id(y),FloatType),param(Id(_),BoolType),param(Id(_),FloatType),param(Id(B9F_S__),ClassType(Id(S))),param(Id(L8),ClassType(Id(_))),param(Id(X),ClassType(Id(_)))],Block([])),AttributeDecl(Static,VarDecl(Id($Wp),ClassType(Id(W2)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($T__),ClassType(Id(W2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(M1),ClassType(Id(W2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(o_),ClassType(Id(W2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w7),ClassType(Id(W2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(W2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_3),ClassType(Id(W2)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(880,ArrayType(1,FloatType))),param(Id(__0___7),ArrayType(880,ArrayType(1,FloatType))),param(Id(_),ArrayType(6,FloatType)),param(Id(_),ArrayType(6,FloatType)),param(Id(V),ArrayType(6,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 558))

    def test_559(self):
        line = '''Class Q:_{Val $_,$fl:_6;Destructor (){B3_59_::$9_k();} }Class R{Constructor (_,S:Array [String ,0X3A];g__C,_:_;_i,_:Array [Array [Array [String ,0B1000110],0b1100100],0B1];_,_:String ){Return ;}Val n:Array [Array [Boolean ,014],1];}'''
        expect = '''Program([ClassDecl(Id(Q),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_6)),None)),AttributeDecl(Static,ConstDecl(Id($fl),ClassType(Id(_6)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(B3_59_),Id($9_k),[])]))]),ClassDecl(Id(R),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(58,StringType)),param(Id(S),ArrayType(58,StringType)),param(Id(g__C),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_i),ArrayType(1,ArrayType(100,ArrayType(70,StringType)))),param(Id(_),ArrayType(1,ArrayType(100,ArrayType(70,StringType)))),param(Id(_),StringType),param(Id(_),StringType)],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(n),ArrayType(1,ArrayType(12,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 559))

    def test_560(self):
        line = '''Class L:f{}Class v:_1xj{Var C9,p__i:Array [Array [Array [String ,0106],0106],64];$__3(){Return ;}$_(){} }Class b{Val $_T:Float ;}Class _{Var $_8:Array [Boolean ,0X3A];Val $615:Array [Boolean ,0b1];}'''
        expect = '''Program([ClassDecl(Id(L),Id(f),[]),ClassDecl(Id(v),Id(_1xj),[AttributeDecl(Instance,VarDecl(Id(C9),ArrayType(64,ArrayType(70,ArrayType(70,StringType))))),AttributeDecl(Instance,VarDecl(Id(p__i),ArrayType(64,ArrayType(70,ArrayType(70,StringType))))),MethodDecl(Id($__3),Static,[],Block([Return()])),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(b),[AttributeDecl(Static,ConstDecl(Id($_T),FloatType,None))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_8),ArrayType(58,BoolType))),AttributeDecl(Static,ConstDecl(Id($615),ArrayType(1,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 560))

    def test_561(self):
        line = '''Class _3_:pG{Var __,_,_:Array [Array [Array [Float ,0X2_D],0B1],0x48];_(V_:Float ;_,m0,Sz_:Array [Array [Array [Array [Float ,0b1100000],0B1_00],0124],30];t_,V1_f8_,J_,g:Float ;z:Float ;_Q8:Array [Array [Array [Float ,2],0124],0B1011010];__5W:o){} }'''
        expect = '''Program([ClassDecl(Id(_3_),Id(pG),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(72,ArrayType(1,ArrayType(45,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(72,ArrayType(1,ArrayType(45,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(72,ArrayType(1,ArrayType(45,FloatType))))),MethodDecl(Id(_),Instance,[param(Id(V_),FloatType),param(Id(_),ArrayType(30,ArrayType(84,ArrayType(4,ArrayType(96,FloatType))))),param(Id(m0),ArrayType(30,ArrayType(84,ArrayType(4,ArrayType(96,FloatType))))),param(Id(Sz_),ArrayType(30,ArrayType(84,ArrayType(4,ArrayType(96,FloatType))))),param(Id(t_),FloatType),param(Id(V1_f8_),FloatType),param(Id(J_),FloatType),param(Id(g),FloatType),param(Id(z),FloatType),param(Id(_Q8),ArrayType(90,ArrayType(84,ArrayType(2,FloatType)))),param(Id(__5W),ClassType(Id(o)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 561))

    def test_562(self):
        line = '''Class X6M4__r:__Q{Constructor (ma:Int ;_l,GF_:String ;t_:Array [Array [Array [Float ,0x4F],90],0B111110];_,J:Float ;_t,_5__,__,R:_9;B,Bp:k72;ZF_:Int ;V,L,C,r:Array [Float ,0b1];i:Boolean ;_,_:i){} }Class D:_{Val $4__:Array [Array [Array [Array [Array [Array [Float ,0X6],0141],0B110_10_01_1],0XF_C_1],0141],0b110000];}Class R:J{}Class _R7k_:G{}'''
        expect = '''Program([ClassDecl(Id(X6M4__r),Id(__Q),[MethodDecl(Id(Constructor),Instance,[param(Id(ma),IntType),param(Id(_l),StringType),param(Id(GF_),StringType),param(Id(t_),ArrayType(62,ArrayType(90,ArrayType(79,FloatType)))),param(Id(_),FloatType),param(Id(J),FloatType),param(Id(_t),ClassType(Id(_9))),param(Id(_5__),ClassType(Id(_9))),param(Id(__),ClassType(Id(_9))),param(Id(R),ClassType(Id(_9))),param(Id(B),ClassType(Id(k72))),param(Id(Bp),ClassType(Id(k72))),param(Id(ZF_),IntType),param(Id(V),ArrayType(1,FloatType)),param(Id(L),ArrayType(1,FloatType)),param(Id(C),ArrayType(1,FloatType)),param(Id(r),ArrayType(1,FloatType)),param(Id(i),BoolType),param(Id(_),ClassType(Id(i))),param(Id(_),ClassType(Id(i)))],Block([]))]),ClassDecl(Id(D),Id(_),[AttributeDecl(Static,ConstDecl(Id($4__),ArrayType(48,ArrayType(97,ArrayType(4033,ArrayType(211,ArrayType(97,ArrayType(6,FloatType)))))),None))]),ClassDecl(Id(R),Id(J),[]),ClassDecl(Id(_R7k_),Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 562))

    def test_563(self):
        line = '''Class _{}Class _:y{}Class L:_KZCI{}Class k:_{Constructor (_t,_g:A;___K_K5:String ;_:B;_,C,b,p,_:Array [Array [Array [String ,0x39],0x6],0x45];_,_5,_7:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(y),[]),ClassDecl(Id(L),Id(_KZCI),[]),ClassDecl(Id(k),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_t),ClassType(Id(A))),param(Id(_g),ClassType(Id(A))),param(Id(___K_K5),StringType),param(Id(_),ClassType(Id(B))),param(Id(_),ArrayType(69,ArrayType(6,ArrayType(57,StringType)))),param(Id(C),ArrayType(69,ArrayType(6,ArrayType(57,StringType)))),param(Id(b),ArrayType(69,ArrayType(6,ArrayType(57,StringType)))),param(Id(p),ArrayType(69,ArrayType(6,ArrayType(57,StringType)))),param(Id(_),ArrayType(69,ArrayType(6,ArrayType(57,StringType)))),param(Id(_),FloatType),param(Id(_5),FloatType),param(Id(_7),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 563))

    def test_564(self):
        line = '''Class _8{}Class _:_{Var $__,$_2_:Array [Float ,0b1];Constructor (){Break ;} }Class _{}Class DU:_0_66{}Class _:L72_{}Class _{Constructor (p7:_){}Destructor (){} }Class _R54{}'''
        expect = '''Program([ClassDecl(Id(_8),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(1,FloatType))),AttributeDecl(Static,VarDecl(Id($_2_),ArrayType(1,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(_),[]),ClassDecl(Id(DU),Id(_0_66),[]),ClassDecl(Id(_),Id(L72_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(p7),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_R54),[])])'''
        self.assertTrue(TestAST.test(line, expect, 564))

    def test_565(self):
        line = '''Class Z:c{Constructor (_,A,Y,_o,_m:Boolean ){Break ;} }Class g40Z_{Val __,__:Array [Array [Array [String ,0b10011],0xD],05];Constructor (l,_,_0:_){}Val $_,$H:Array [String ,0X45];}'''
        expect = '''Program([ClassDecl(Id(Z),Id(c),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(A),BoolType),param(Id(Y),BoolType),param(Id(_o),BoolType),param(Id(_m),BoolType)],Block([Break]))]),ClassDecl(Id(g40Z_),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(5,ArrayType(13,ArrayType(19,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(5,ArrayType(13,ArrayType(19,StringType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(l),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_0),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(69,StringType),None)),AttributeDecl(Static,ConstDecl(Id($H),ArrayType(69,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 565))

    def test_566(self):
        line = '''Class _:L{}Class A:A{$__(_G,_:Array [Array [Float ,11_0],0B10];_1_C,_D___,_rD,_,_S:Boolean ){}Val $32,__,u:Array [Array [Array [Array [Array [Array [Boolean ,0XA],0B1],0XA],3],042],94];}'''
        expect = '''Program([ClassDecl(Id(_),Id(L),[]),ClassDecl(Id(A),Id(A),[MethodDecl(Id($__),Static,[param(Id(_G),ArrayType(2,ArrayType(110,FloatType))),param(Id(_),ArrayType(2,ArrayType(110,FloatType))),param(Id(_1_C),BoolType),param(Id(_D___),BoolType),param(Id(_rD),BoolType),param(Id(_),BoolType),param(Id(_S),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($32),ArrayType(94,ArrayType(34,ArrayType(3,ArrayType(10,ArrayType(1,ArrayType(10,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(94,ArrayType(34,ArrayType(3,ArrayType(10,ArrayType(1,ArrayType(10,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(94,ArrayType(34,ArrayType(3,ArrayType(10,ArrayType(1,ArrayType(10,BoolType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 566))

    def test_567(self):
        line = '''Class _:d_X6l{Constructor (b,_h5ujv91,S,i:Array [Float ,0X28];_R,_:_;C_7,g:Array [Int ,40]){} }Class _724{_(o4_1Q:Array [Array [Array [Float ,8_7_0_3],2_9],0b100101]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(d_X6l),[MethodDecl(Id(Constructor),Instance,[param(Id(b),ArrayType(40,FloatType)),param(Id(_h5ujv91),ArrayType(40,FloatType)),param(Id(S),ArrayType(40,FloatType)),param(Id(i),ArrayType(40,FloatType)),param(Id(_R),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(C_7),ArrayType(40,IntType)),param(Id(g),ArrayType(40,IntType))],Block([]))]),ClassDecl(Id(_724),[MethodDecl(Id(_),Instance,[param(Id(o4_1Q),ArrayType(37,ArrayType(29,ArrayType(8703,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 567))

    def test_568(self):
        line = '''Class q_N_:d7_{}Class _:A__{_(_,T:Int ;P:Boolean ){Break ;}M(Dm,__:Array [Array [Array [Array [Boolean ,0b1_10],07_43351_4],0B1000011],0xC];G7_,_2_:String ;__W4c,G,D:Int ;W16,z:M;K,x9,_,_6,Y,L,_q:Q4_;_:I__){}Destructor (){}Val __,H:Int ;Var $H__1i,$8X0,$sH6o_:Array [Array [Array [Array [Array [Array [Array [Float ,9],0X25],0X5_7],85],04],04],0xD13BB_83];$Y(){}Constructor (){Continue ;Continue ;} }Class z:wd{FA(){}Val rb:_;}Class _38{}'''
        expect = '''Program([ClassDecl(Id(q_N_),Id(d7_),[]),ClassDecl(Id(_),Id(A__),[MethodDecl(Id(_),Instance,[param(Id(_),IntType),param(Id(T),IntType),param(Id(P),BoolType)],Block([Break])),MethodDecl(Id(M),Instance,[param(Id(Dm),ArrayType(12,ArrayType(67,ArrayType(1980236,ArrayType(6,BoolType))))),param(Id(__),ArrayType(12,ArrayType(67,ArrayType(1980236,ArrayType(6,BoolType))))),param(Id(G7_),StringType),param(Id(_2_),StringType),param(Id(__W4c),IntType),param(Id(G),IntType),param(Id(D),IntType),param(Id(W16),ClassType(Id(M))),param(Id(z),ClassType(Id(M))),param(Id(K),ClassType(Id(Q4_))),param(Id(x9),ClassType(Id(Q4_))),param(Id(_),ClassType(Id(Q4_))),param(Id(_6),ClassType(Id(Q4_))),param(Id(Y),ClassType(Id(Q4_))),param(Id(L),ClassType(Id(Q4_))),param(Id(_q),ClassType(Id(Q4_))),param(Id(_),ClassType(Id(I__)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(H),IntType,None)),AttributeDecl(Static,VarDecl(Id($H__1i),ArrayType(219396995,ArrayType(4,ArrayType(4,ArrayType(85,ArrayType(87,ArrayType(37,ArrayType(9,FloatType))))))))),AttributeDecl(Static,VarDecl(Id($8X0),ArrayType(219396995,ArrayType(4,ArrayType(4,ArrayType(85,ArrayType(87,ArrayType(37,ArrayType(9,FloatType))))))))),AttributeDecl(Static,VarDecl(Id($sH6o_),ArrayType(219396995,ArrayType(4,ArrayType(4,ArrayType(85,ArrayType(87,ArrayType(37,ArrayType(9,FloatType))))))))),MethodDecl(Id($Y),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue]))]),ClassDecl(Id(z),Id(wd),[MethodDecl(Id(FA),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(rb),ClassType(Id(_)),None))]),ClassDecl(Id(_38),[])])'''
        self.assertTrue(TestAST.test(line, expect, 568))

    def test_569(self):
        line = '''Class _:_{Constructor (_,_IPm,z5,J,av9,__,a,kUe,_7_,TPji,_,Xi,wg5:String ){} }Class _R:pK{Constructor (q,__9:Boolean ;_:Float ;K_3__,_d7:Boolean ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_IPm),StringType),param(Id(z5),StringType),param(Id(J),StringType),param(Id(av9),StringType),param(Id(__),StringType),param(Id(a),StringType),param(Id(kUe),StringType),param(Id(_7_),StringType),param(Id(TPji),StringType),param(Id(_),StringType),param(Id(Xi),StringType),param(Id(wg5),StringType)],Block([]))]),ClassDecl(Id(_R),Id(pK),[MethodDecl(Id(Constructor),Instance,[param(Id(q),BoolType),param(Id(__9),BoolType),param(Id(_),FloatType),param(Id(K_3__),BoolType),param(Id(_d7),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 569))

    def test_570(self):
        line = '''Class ___M1{Var $i,z,b:Boolean ;}Class _:_{Constructor (_:Array [Array [Int ,0B110111],1];_o8o__9S6,_:Array [Array [Array [Array [Boolean ,0X35],0x19],3_1],0B10]){}Constructor (KN:Float ){_::$Q_();}$_(){} }'''
        expect = '''Program([ClassDecl(Id(___M1),[AttributeDecl(Static,VarDecl(Id($i),BoolType)),AttributeDecl(Instance,VarDecl(Id(z),BoolType)),AttributeDecl(Instance,VarDecl(Id(b),BoolType))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(55,IntType))),param(Id(_o8o__9S6),ArrayType(2,ArrayType(31,ArrayType(25,ArrayType(53,BoolType))))),param(Id(_),ArrayType(2,ArrayType(31,ArrayType(25,ArrayType(53,BoolType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(KN),FloatType)],Block([Call(Id(_),Id($Q_),[])])),MethodDecl(Id($_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 570))

    def test_571(self):
        line = '''Class _:__{}Class __5:kr7{Constructor (){}Constructor (R__7_,_,Zh2:Array [Array [Array [Array [Boolean ,2_1],48],0b1],0b101000]){Break ;{} }}Class _{}Class E4{$k(){} }Class _B{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(__5),Id(kr7),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(R__7_),ArrayType(40,ArrayType(1,ArrayType(48,ArrayType(21,BoolType))))),param(Id(_),ArrayType(40,ArrayType(1,ArrayType(48,ArrayType(21,BoolType))))),param(Id(Zh2),ArrayType(40,ArrayType(1,ArrayType(48,ArrayType(21,BoolType)))))],Block([Break,Block([])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(E4),[MethodDecl(Id($k),Static,[],Block([]))]),ClassDecl(Id(_B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 571))

    def test_572(self):
        line = '''Class t:_w{Var Z,G:Array [Boolean ,0b1];}Class ___:O6{Val $D:_G;Val _B_zr,$8:Array [Boolean ,0X5D];Val N_:String ;Destructor (){}Constructor (L,k:Int ){}Val $_5_____,$W_,_M,$q,$B:Array [Float ,040];}Class J:v{}'''
        expect = '''Program([ClassDecl(Id(t),Id(_w),[AttributeDecl(Instance,VarDecl(Id(Z),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(G),ArrayType(1,BoolType)))]),ClassDecl(Id(___),Id(O6),[AttributeDecl(Static,ConstDecl(Id($D),ClassType(Id(_G)),None)),AttributeDecl(Instance,ConstDecl(Id(_B_zr),ArrayType(93,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(93,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(N_),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),IntType),param(Id(k),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_5_____),ArrayType(32,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($W_),ArrayType(32,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_M),ArrayType(32,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($q),ArrayType(32,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($B),ArrayType(32,FloatType),None))]),ClassDecl(Id(J),Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 572))

    def test_573(self):
        line = '''Class T:__{}Class t:Em_{Constructor (){} }Class uo58{}Class _4{Var z:_43h;Val __,H:Array [Boolean ,0XC2];}Class ___{}Class _{}Class _{}Class _:w88__{$e_4(c,_,p,__:Array [Boolean ,5];AI,mzcn:QR__){}Constructor (x0o:String ;K1:Array [Array [Array [Boolean ,0XD],71],0XD];_u_:Int ){Continue ;}Constructor (__D,_,k,qsB_8_:q_;H,j96_J,_0X:u_){} }'''
        expect = '''Program([ClassDecl(Id(T),Id(__),[]),ClassDecl(Id(t),Id(Em_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(uo58),[]),ClassDecl(Id(_4),[AttributeDecl(Instance,VarDecl(Id(z),ClassType(Id(_43h)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(194,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(H),ArrayType(194,BoolType),None))]),ClassDecl(Id(___),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(w88__),[MethodDecl(Id($e_4),Static,[param(Id(c),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(p),ArrayType(5,BoolType)),param(Id(__),ArrayType(5,BoolType)),param(Id(AI),ClassType(Id(QR__))),param(Id(mzcn),ClassType(Id(QR__)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(x0o),StringType),param(Id(K1),ArrayType(13,ArrayType(71,ArrayType(13,BoolType)))),param(Id(_u_),IntType)],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(__D),ClassType(Id(q_))),param(Id(_),ClassType(Id(q_))),param(Id(k),ClassType(Id(q_))),param(Id(qsB_8_),ClassType(Id(q_))),param(Id(H),ClassType(Id(u_))),param(Id(j96_J),ClassType(Id(u_))),param(Id(_0X),ClassType(Id(u_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 573))

    def test_574(self):
        line = '''Class sX_{}Class __:y{Val $0_,_,Wq,$3:Array [Float ,0B1];_(_,v,_4_:_;_9W:Array [Boolean ,4_9];W,_,_:String ;_6P_,pp2,hF_,_y,A_:Array [Array [Boolean ,01],0B1011101];A8:Float ;__9,_,_:qj){}Var $6:_R5;}'''
        expect = '''Program([ClassDecl(Id(sX_),[]),ClassDecl(Id(__),Id(y),[AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(1,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Wq),ArrayType(1,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(1,FloatType),None)),MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(_))),param(Id(v),ClassType(Id(_))),param(Id(_4_),ClassType(Id(_))),param(Id(_9W),ArrayType(49,BoolType)),param(Id(W),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_6P_),ArrayType(93,ArrayType(1,BoolType))),param(Id(pp2),ArrayType(93,ArrayType(1,BoolType))),param(Id(hF_),ArrayType(93,ArrayType(1,BoolType))),param(Id(_y),ArrayType(93,ArrayType(1,BoolType))),param(Id(A_),ArrayType(93,ArrayType(1,BoolType))),param(Id(A8),FloatType),param(Id(__9),ClassType(Id(qj))),param(Id(_),ClassType(Id(qj))),param(Id(_),ClassType(Id(qj)))],Block([])),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_R5)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 574))

    def test_575(self):
        line = '''Class m_{}Class sy:w{Val $b_:Array [Float ,0b1];Var $_B_,$075:J5;Constructor (_3,C,O,l,H:y;w:m_){X_W::$2Y();}Var $6:V;Val t_p_AM:Boolean ;}Class __{}Class _Kc6:_Cb{}'''
        expect = '''Program([ClassDecl(Id(m_),[]),ClassDecl(Id(sy),Id(w),[AttributeDecl(Static,ConstDecl(Id($b_),ArrayType(1,FloatType),None)),AttributeDecl(Static,VarDecl(Id($_B_),ClassType(Id(J5)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($075),ClassType(Id(J5)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ClassType(Id(y))),param(Id(C),ClassType(Id(y))),param(Id(O),ClassType(Id(y))),param(Id(l),ClassType(Id(y))),param(Id(H),ClassType(Id(y))),param(Id(w),ClassType(Id(m_)))],Block([Call(Id(X_W),Id($2Y),[])])),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(V)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(t_p_AM),BoolType,None))]),ClassDecl(Id(__),[]),ClassDecl(Id(_Kc6),Id(_Cb),[])])'''
        self.assertTrue(TestAST.test(line, expect, 575))

    def test_576(self):
        line = '''Class C{Constructor (u,L:_8){_9::$_._4aJ2(New _())._5();Var f5:Array [Int ,077];}Destructor (){} }Class g:_y{Var f:Array [Array [Array [String ,9_8],9],6];}Class _______4:i6{Val $5M_B:Qd;}'''
        expect = '''Program([ClassDecl(Id(C),[MethodDecl(Id(Constructor),Instance,[param(Id(u),ClassType(Id(_8))),param(Id(L),ClassType(Id(_8)))],Block([Call(CallExpr(FieldAccess(Id(_9),Id($_)),Id(_4aJ2),[NewExpr(Id(_),[])]),Id(_5),[]),VarDecl(Id(f5),ArrayType(63,IntType))])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(g),Id(_y),[AttributeDecl(Instance,VarDecl(Id(f),ArrayType(6,ArrayType(9,ArrayType(98,StringType)))))]),ClassDecl(Id(_______4),Id(i6),[AttributeDecl(Static,ConstDecl(Id($5M_B),ClassType(Id(Qd)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 576))

    def test_577(self):
        line = '''Class _:z{Constructor (){Continue ;Continue ;}Constructor (){Val Q_3_,_R:Array [Float ,011];Continue ;}Var _1_:Array [Array [Int ,44],0XF];Var V2_:Array [Array [Array [String ,0B1010011],011],0X50];}'''
        expect = '''Program([ClassDecl(Id(_),Id(z),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue])),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(Q_3_),ArrayType(9,FloatType),None),ConstDecl(Id(_R),ArrayType(9,FloatType),None),Continue])),AttributeDecl(Instance,VarDecl(Id(_1_),ArrayType(15,ArrayType(44,IntType)))),AttributeDecl(Instance,VarDecl(Id(V2_),ArrayType(80,ArrayType(9,ArrayType(83,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 577))

    def test_578(self):
        line = '''Class L_:_{}Class t_L{}Class _76CW{Val $k:Array [Int ,0xA]=-_E::$__();}Class i{Constructor (__:Array [Array [Array [Boolean ,90],0b101011],0133]){Return ;}Destructor (){}$__(){} }'''
        expect = '''Program([ClassDecl(Id(L_),Id(_),[]),ClassDecl(Id(t_L),[]),ClassDecl(Id(_76CW),[AttributeDecl(Static,ConstDecl(Id($k),ArrayType(10,IntType),UnaryOp(-,CallExpr(Id(_E),Id($__),[]))))]),ClassDecl(Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(91,ArrayType(43,ArrayType(90,BoolType))))],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($__),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 578))

    def test_579(self):
        line = '''Class _:_{}Class B_:_{w(b6,B:Int ;Q_B,_,ui,_,_:Float ;_V,_:Array [Float ,0B111110];n3_Q,R_WQ5YB:Array [Array [Boolean ,0X63],42];_,q:H;R1_p:Array [Array [String ,6],42];_S:M){} }Class P{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(B_),Id(_),[MethodDecl(Id(w),Instance,[param(Id(b6),IntType),param(Id(B),IntType),param(Id(Q_B),FloatType),param(Id(_),FloatType),param(Id(ui),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_V),ArrayType(62,FloatType)),param(Id(_),ArrayType(62,FloatType)),param(Id(n3_Q),ArrayType(42,ArrayType(99,BoolType))),param(Id(R_WQ5YB),ArrayType(42,ArrayType(99,BoolType))),param(Id(_),ClassType(Id(H))),param(Id(q),ClassType(Id(H))),param(Id(R1_p),ArrayType(42,ArrayType(6,StringType))),param(Id(_S),ClassType(Id(M)))],Block([]))]),ClassDecl(Id(P),[])])'''
        self.assertTrue(TestAST.test(line, expect, 579))

    def test_580(self):
        line = '''Class g:h{Var $_:_;Var $_F:_;}Class Z2_:s_{Val $dF,$2_N9s:h;D(l5:Array [Array [Array [Array [Int ,0X3C],22],0b110101],0X3C];_e:si_){} }Class i8_{}Class HA:u{_(_:l3_;_:_){} }'''
        expect = '''Program([ClassDecl(Id(g),Id(h),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_F),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(Z2_),Id(s_),[AttributeDecl(Static,ConstDecl(Id($dF),ClassType(Id(h)),None)),AttributeDecl(Static,ConstDecl(Id($2_N9s),ClassType(Id(h)),None)),MethodDecl(Id(D),Instance,[param(Id(l5),ArrayType(60,ArrayType(53,ArrayType(22,ArrayType(60,IntType))))),param(Id(_e),ClassType(Id(si_)))],Block([]))]),ClassDecl(Id(i8_),[]),ClassDecl(Id(HA),Id(u),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(l3_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 580))

    def test_581(self):
        line = '''Class _{}Class _I:_f{Var Vh,QR_:String ;}Class _:M{}Class _S8C1w{Var _B__,e8,_0,Vdq:Array [Array [Array [Boolean ,01],0B10],0B100110];Constructor (_:B4;a93N3G:x){} }Class D0:i{Var $Qy,$_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_I),Id(_f),[AttributeDecl(Instance,VarDecl(Id(Vh),StringType)),AttributeDecl(Instance,VarDecl(Id(QR_),StringType))]),ClassDecl(Id(_),Id(M),[]),ClassDecl(Id(_S8C1w),[AttributeDecl(Instance,VarDecl(Id(_B__),ArrayType(38,ArrayType(2,ArrayType(1,BoolType))))),AttributeDecl(Instance,VarDecl(Id(e8),ArrayType(38,ArrayType(2,ArrayType(1,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(38,ArrayType(2,ArrayType(1,BoolType))))),AttributeDecl(Instance,VarDecl(Id(Vdq),ArrayType(38,ArrayType(2,ArrayType(1,BoolType))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(B4))),param(Id(a93N3G),ClassType(Id(x)))],Block([]))]),ClassDecl(Id(D0),Id(i),[AttributeDecl(Static,VarDecl(Id($Qy),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 581))

    def test_582(self):
        line = '''Class C82{$utQ(){Var Z3,_9m:__;Return ;_::$SE();}Var $_:Int ;}Class _X6:_{Constructor (){}Var $y:Int ;Constructor (N,_0F9G:Array [String ,0x50];E,w_N9:Float ;r:Float ;_,t6_6,_,P:_;F8T5:Jo__98D;w,_,_:Array [Boolean ,0X2];Q__:C){} }'''
        expect = '''Program([ClassDecl(Id(C82),[MethodDecl(Id($utQ),Static,[],Block([VarDecl(Id(Z3),ClassType(Id(__)),NullLiteral()),VarDecl(Id(_9m),ClassType(Id(__)),NullLiteral()),Return(),Call(Id(_),Id($SE),[])])),AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(_X6),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($y),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(N),ArrayType(80,StringType)),param(Id(_0F9G),ArrayType(80,StringType)),param(Id(E),FloatType),param(Id(w_N9),FloatType),param(Id(r),FloatType),param(Id(_),ClassType(Id(_))),param(Id(t6_6),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(P),ClassType(Id(_))),param(Id(F8T5),ClassType(Id(Jo__98D))),param(Id(w),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType)),param(Id(Q__),ClassType(Id(C)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 582))

    def test_583(self):
        line = '''Class _3E{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1011111],6_6_40_6_8],0x1A],7],7],0X2F24],0135],0135];_,_,z:Array [Array [Array [Array [String ,9],0b1],0b1011111],92]){}Constructor (){ {}Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(_3E),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(93,ArrayType(93,ArrayType(12068,ArrayType(7,ArrayType(7,ArrayType(26,ArrayType(664068,ArrayType(95,BoolType))))))))),param(Id(_),ArrayType(92,ArrayType(95,ArrayType(1,ArrayType(9,StringType))))),param(Id(_),ArrayType(92,ArrayType(95,ArrayType(1,ArrayType(9,StringType))))),param(Id(z),ArrayType(92,ArrayType(95,ArrayType(1,ArrayType(9,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 583))

    def test_584(self):
        line = '''Class _O__RV:O{$_(q_:c395;E4:Array [Boolean ,88_1_8_5_9]){} }Class H_9{Constructor (_:S3_;_v:Array [Array [Boolean ,0115],0B1];_,_:H;_:Array [Array [Array [Array [Array [Boolean ,0115],0B1],0115],2_6_4_0],0115];w,_,_78M,GV:Float ;n,X54,_:n){} }'''
        expect = '''Program([ClassDecl(Id(_O__RV),Id(O),[MethodDecl(Id($_),Static,[param(Id(q_),ClassType(Id(c395))),param(Id(E4),ArrayType(881859,BoolType))],Block([]))]),ClassDecl(Id(H_9),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(S3_))),param(Id(_v),ArrayType(1,ArrayType(77,BoolType))),param(Id(_),ClassType(Id(H))),param(Id(_),ClassType(Id(H))),param(Id(_),ArrayType(77,ArrayType(2640,ArrayType(77,ArrayType(1,ArrayType(77,BoolType)))))),param(Id(w),FloatType),param(Id(_),FloatType),param(Id(_78M),FloatType),param(Id(GV),FloatType),param(Id(n),ClassType(Id(n))),param(Id(X54),ClassType(Id(n))),param(Id(_),ClassType(Id(n)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 584))

    def test_585(self):
        line = '''Class Yml{}Class __:T{}Class _:__p50{Var _,H,mj_9__:Float ;}Class _:_O{X_(_8,sv88:Float ;d,Y,X,A:_;_,_:Array [String ,0122]){Break ;}Val $_e,$_7,$_2yb,b,$c,_:I;Val $4yYJ:Array [String ,32];}'''
        expect = '''Program([ClassDecl(Id(Yml),[]),ClassDecl(Id(__),Id(T),[]),ClassDecl(Id(_),Id(__p50),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(H),FloatType)),AttributeDecl(Instance,VarDecl(Id(mj_9__),FloatType))]),ClassDecl(Id(_),Id(_O),[MethodDecl(Id(X_),Instance,[param(Id(_8),FloatType),param(Id(sv88),FloatType),param(Id(d),ClassType(Id(_))),param(Id(Y),ClassType(Id(_))),param(Id(X),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(_),ArrayType(82,StringType)),param(Id(_),ArrayType(82,StringType))],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_e),ClassType(Id(I)),None)),AttributeDecl(Static,ConstDecl(Id($_7),ClassType(Id(I)),None)),AttributeDecl(Static,ConstDecl(Id($_2yb),ClassType(Id(I)),None)),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(I)),None)),AttributeDecl(Static,ConstDecl(Id($c),ClassType(Id(I)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(I)),None)),AttributeDecl(Static,ConstDecl(Id($4yYJ),ArrayType(32,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 585))

    def test_586(self):
        line = '''Class _____Hm3{Val _0,$_:Array [String ,0x2F];Val $0,$_4,X_:Array [Array [Array [Array [Boolean ,0b1011101],0x2F],62],0x2F];Var $6:Array [String ,0B1001000];}Class _{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_____Hm3),[AttributeDecl(Instance,ConstDecl(Id(_0),ArrayType(47,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(47,StringType),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(47,ArrayType(62,ArrayType(47,ArrayType(93,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($_4),ArrayType(47,ArrayType(62,ArrayType(47,ArrayType(93,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(X_),ArrayType(47,ArrayType(62,ArrayType(47,ArrayType(93,BoolType)))),None)),AttributeDecl(Static,VarDecl(Id($6),ArrayType(72,StringType)))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 586))

    def test_587(self):
        line = '''Class _:_{Var __C3_:Array [Array [Int ,0XB],02];}Class RD:V{}Class ___a:x7{Constructor (y:Array [Array [Float ,38],020];w:__7;_3:Boolean ;b:__;_:String ;_BS:R){Continue ;}Constructor (D61_,W,Y,__x1_1o,At_0,H:String ;j,__:Array [Array [Array [Boolean ,38],0XF],0b1]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(__C3_),ArrayType(2,ArrayType(11,IntType))))]),ClassDecl(Id(RD),Id(V),[]),ClassDecl(Id(___a),Id(x7),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ArrayType(16,ArrayType(38,FloatType))),param(Id(w),ClassType(Id(__7))),param(Id(_3),BoolType),param(Id(b),ClassType(Id(__))),param(Id(_),StringType),param(Id(_BS),ClassType(Id(R)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(D61_),StringType),param(Id(W),StringType),param(Id(Y),StringType),param(Id(__x1_1o),StringType),param(Id(At_0),StringType),param(Id(H),StringType),param(Id(j),ArrayType(1,ArrayType(15,ArrayType(38,BoolType)))),param(Id(__),ArrayType(1,ArrayType(15,ArrayType(38,BoolType))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 587))

    def test_588(self):
        line = '''Class A:D{Constructor (){}Val A2_,__:Float ;}Class _{}Class f{Destructor (){} }Class D__:UK9{$44_(K:Int ;Nak6__8,_,_:d3){}Destructor (){} }Class ___Df:_0_s0{}Class Z{}'''
        expect = '''Program([ClassDecl(Id(A),Id(D),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(A2_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(f),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(D__),Id(UK9),[MethodDecl(Id($44_),Static,[param(Id(K),IntType),param(Id(Nak6__8),ClassType(Id(d3))),param(Id(_),ClassType(Id(d3))),param(Id(_),ClassType(Id(d3)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___Df),Id(_0_s0),[]),ClassDecl(Id(Z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 588))

    def test_589(self):
        line = '''Class _5:n_{}Class _:_{_(H1_:Array [Array [Array [Array [Boolean ,0b1011],0xF],90],2];_i_C_:Array [Array [Int ,0x3],07];_151,____l,p,U_:Array [Int ,04]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_5),Id(n_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(_),Instance,[param(Id(H1_),ArrayType(2,ArrayType(90,ArrayType(15,ArrayType(11,BoolType))))),param(Id(_i_C_),ArrayType(7,ArrayType(3,IntType))),param(Id(_151),ArrayType(4,IntType)),param(Id(____l),ArrayType(4,IntType)),param(Id(p),ArrayType(4,IntType)),param(Id(U_),ArrayType(4,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 589))

    def test_590(self):
        line = '''Class s5_{Var W:Float ;Constructor (J_7,_,UO:Array [Array [Boolean ,0X5ED_32],06];Q,l0_s:Array [Array [String ,0x5],023];c,N18,v5b:Boolean ;_,b_1:Int ;_,_gWI,W:Boolean ){QK::$6.__fC_()._9().K5();} }'''
        expect = '''Program([ClassDecl(Id(s5_),[AttributeDecl(Instance,VarDecl(Id(W),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(J_7),ArrayType(6,ArrayType(388402,BoolType))),param(Id(_),ArrayType(6,ArrayType(388402,BoolType))),param(Id(UO),ArrayType(6,ArrayType(388402,BoolType))),param(Id(Q),ArrayType(19,ArrayType(5,StringType))),param(Id(l0_s),ArrayType(19,ArrayType(5,StringType))),param(Id(c),BoolType),param(Id(N18),BoolType),param(Id(v5b),BoolType),param(Id(_),IntType),param(Id(b_1),IntType),param(Id(_),BoolType),param(Id(_gWI),BoolType),param(Id(W),BoolType)],Block([Call(CallExpr(CallExpr(FieldAccess(Id(QK),Id($6)),Id(__fC_),[]),Id(_9),[]),Id(K5),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 590))

    def test_591(self):
        line = '''Class B:Sh_{}Class _:__{$_(){} }Class _2:K{Val P66j,_,$8:Array [Array [Array [Array [Array [Array [Float ,0X8],05],33],063],0B101],0B101];_(__,_,_,_4:M;_bC:Int ;O:String ;_:String ){} }'''
        expect = '''Program([ClassDecl(Id(B),Id(Sh_),[]),ClassDecl(Id(_),Id(__),[MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(_2),Id(K),[AttributeDecl(Instance,ConstDecl(Id(P66j),ArrayType(5,ArrayType(5,ArrayType(51,ArrayType(33,ArrayType(5,ArrayType(8,FloatType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,ArrayType(5,ArrayType(51,ArrayType(33,ArrayType(5,ArrayType(8,FloatType)))))),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(5,ArrayType(5,ArrayType(51,ArrayType(33,ArrayType(5,ArrayType(8,FloatType)))))),None)),MethodDecl(Id(_),Instance,[param(Id(__),ClassType(Id(M))),param(Id(_),ClassType(Id(M))),param(Id(_),ClassType(Id(M))),param(Id(_4),ClassType(Id(M))),param(Id(_bC),IntType),param(Id(O),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 591))

    def test_592(self):
        line = '''Class _H_:_3_{Var Q_8:String ;i(J6,oO:Array [Array [Boolean ,3],04];u:Int ;_:_){} }Class FR:h6{Var Z,_:Array [Float ,0142];}Class P8{}Class _2{Constructor (v1_20_:Array [Array [Array [Array [Array [Array [Array [Int ,0B111101],0B111101],99],6_5],0X1],99],8_7];s:i){Val N61,H,viZ:String ;{Return ;} }Constructor (){Val ou,_:Float ;} }'''
        expect = '''Program([ClassDecl(Id(_H_),Id(_3_),[AttributeDecl(Instance,VarDecl(Id(Q_8),StringType)),MethodDecl(Id(i),Instance,[param(Id(J6),ArrayType(4,ArrayType(3,BoolType))),param(Id(oO),ArrayType(4,ArrayType(3,BoolType))),param(Id(u),IntType),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(FR),Id(h6),[AttributeDecl(Instance,VarDecl(Id(Z),ArrayType(98,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(98,FloatType)))]),ClassDecl(Id(P8),[]),ClassDecl(Id(_2),[MethodDecl(Id(Constructor),Instance,[param(Id(v1_20_),ArrayType(87,ArrayType(99,ArrayType(1,ArrayType(65,ArrayType(99,ArrayType(61,ArrayType(61,IntType)))))))),param(Id(s),ClassType(Id(i)))],Block([ConstDecl(Id(N61),StringType,None),ConstDecl(Id(H),StringType,None),ConstDecl(Id(viZ),StringType,None),Block([Return()])])),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(ou),FloatType,None),ConstDecl(Id(_),FloatType,None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 592))

    def test_593(self):
        line = '''Class _{Destructor (){Return ;Break ;}Destructor (){}Constructor (__5,_:W){}Var $1:Array [Array [Array [Array [String ,0X3_C_B5],0B1_11],0B1],0b11_00];Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__5),ClassType(Id(W))),param(Id(_),ClassType(Id(W)))],Block([])),AttributeDecl(Static,VarDecl(Id($1),ArrayType(12,ArrayType(1,ArrayType(7,ArrayType(15541,StringType)))))),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 593))

    def test_594(self):
        line = '''Class YT:i{$ES(_4:Array [Array [Array [Int ,061],8],0X45];_:Boolean ;XN:Int ){}Val $zh:Array [Array [Array [Array [Array [Array [Array [Boolean ,0xE],4_4],1],0b10000],0b10000],8],0b10000];}'''
        expect = '''Program([ClassDecl(Id(YT),Id(i),[MethodDecl(Id($ES),Static,[param(Id(_4),ArrayType(69,ArrayType(8,ArrayType(49,IntType)))),param(Id(_),BoolType),param(Id(XN),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($zh),ArrayType(16,ArrayType(8,ArrayType(16,ArrayType(16,ArrayType(1,ArrayType(44,ArrayType(14,BoolType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 594))

    def test_595(self):
        line = '''Class ____{Val VW:_;}Class __{}Class _:_t9V{Destructor (){} }Class j{$_(_a:Array [Array [Array [Array [Array [Boolean ,0117],0b1_0_111],0X6_8],0b1_1_0],0117]){} }Class gv{Constructor (i:String ;i:m){} }'''
        expect = '''Program([ClassDecl(Id(____),[AttributeDecl(Instance,ConstDecl(Id(VW),ClassType(Id(_)),None))]),ClassDecl(Id(__),[]),ClassDecl(Id(_),Id(_t9V),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(j),[MethodDecl(Id($_),Static,[param(Id(_a),ArrayType(79,ArrayType(6,ArrayType(104,ArrayType(23,ArrayType(79,BoolType))))))],Block([]))]),ClassDecl(Id(gv),[MethodDecl(Id(Constructor),Instance,[param(Id(i),StringType),param(Id(i),ClassType(Id(m)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 595))

    def test_596(self):
        line = '''Class c{Constructor (__:J;CY,XB,_4_6,ej:_0C_;cd,___5,Y_6X:_k;_:Array [Array [Array [Array [Array [Int ,0x55],3_4],06],0XD],0x1];t623,MN,k,K:Int ;_,t__:Int ;i__:____b40){} }'''
        expect = '''Program([ClassDecl(Id(c),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(J))),param(Id(CY),ClassType(Id(_0C_))),param(Id(XB),ClassType(Id(_0C_))),param(Id(_4_6),ClassType(Id(_0C_))),param(Id(ej),ClassType(Id(_0C_))),param(Id(cd),ClassType(Id(_k))),param(Id(___5),ClassType(Id(_k))),param(Id(Y_6X),ClassType(Id(_k))),param(Id(_),ArrayType(1,ArrayType(13,ArrayType(6,ArrayType(34,ArrayType(85,IntType)))))),param(Id(t623),IntType),param(Id(MN),IntType),param(Id(k),IntType),param(Id(K),IntType),param(Id(_),IntType),param(Id(t__),IntType),param(Id(i__),ClassType(Id(____b40)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 596))

    def test_597(self):
        line = '''Class y{$5_6(Pdh0:Array [Float ,0B100001];_y:Float ;_y:Array [Array [Array [Array [Float ,14],0x40],14],03];n,_:Array [Float ,06];_:Array [String ,750]){}Var $_e,_,_:String ;}'''
        expect = '''Program([ClassDecl(Id(y),[MethodDecl(Id($5_6),Static,[param(Id(Pdh0),ArrayType(33,FloatType)),param(Id(_y),FloatType),param(Id(_y),ArrayType(3,ArrayType(14,ArrayType(64,ArrayType(14,FloatType))))),param(Id(n),ArrayType(6,FloatType)),param(Id(_),ArrayType(6,FloatType)),param(Id(_),ArrayType(750,StringType))],Block([])),AttributeDecl(Static,VarDecl(Id($_e),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 597))

    def test_598(self):
        line = '''Class K:q{Var _,$_:Array [Array [Array [Array [Array [Array [Int ,0B1],0xA],04],59],0B1],61];}Class F{Var $9,L,$6:R;}Class J{Val P:zR;T(_,A_:Array [Array [Array [Int ,61],0X43],0b1000]){Continue ;}Var $48_:_yro;}'''
        expect = '''Program([ClassDecl(Id(K),Id(q),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(61,ArrayType(1,ArrayType(59,ArrayType(4,ArrayType(10,ArrayType(1,IntType)))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(61,ArrayType(1,ArrayType(59,ArrayType(4,ArrayType(10,ArrayType(1,IntType))))))))]),ClassDecl(Id(F),[AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(R)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(R)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(R)),NullLiteral()))]),ClassDecl(Id(J),[AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(zR)),None)),MethodDecl(Id(T),Instance,[param(Id(_),ArrayType(8,ArrayType(67,ArrayType(61,IntType)))),param(Id(A_),ArrayType(8,ArrayType(67,ArrayType(61,IntType))))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($48_),ClassType(Id(_yro)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 598))

    def test_599(self):
        line = '''Class _A95{}Class _{Val _R:_;U6(R_P,K6,_3__4,__F6_2:String ;_R10:_E2v7;__:Int ;_,k:Boolean ){}Val $9i_1_:Boolean ;}Class n{Var E:Array [Array [Array [Boolean ,0B111101],04_0_1_55],046];}'''
        expect = '''Program([ClassDecl(Id(_A95),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_R),ClassType(Id(_)),None)),MethodDecl(Id(U6),Instance,[param(Id(R_P),StringType),param(Id(K6),StringType),param(Id(_3__4),StringType),param(Id(__F6_2),StringType),param(Id(_R10),ClassType(Id(_E2v7))),param(Id(__),IntType),param(Id(_),BoolType),param(Id(k),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($9i_1_),BoolType,None))]),ClassDecl(Id(n),[AttributeDecl(Instance,VarDecl(Id(E),ArrayType(38,ArrayType(16493,ArrayType(61,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 599))

    def test_600(self):
        line = '''Class rp:R{}Class y_:Qp3{}Class Q{_(Cl,___,_,__53,_6:Ok;_:_9_W){} }Class d{Constructor (){}Val $4p3:Array [Int ,0xEA6];}Class I:fi0{Var $7:Int ;Val $0:Array [String ,35];}'''
        expect = '''Program([ClassDecl(Id(rp),Id(R),[]),ClassDecl(Id(y_),Id(Qp3),[]),ClassDecl(Id(Q),[MethodDecl(Id(_),Instance,[param(Id(Cl),ClassType(Id(Ok))),param(Id(___),ClassType(Id(Ok))),param(Id(_),ClassType(Id(Ok))),param(Id(__53),ClassType(Id(Ok))),param(Id(_6),ClassType(Id(Ok))),param(Id(_),ClassType(Id(_9_W)))],Block([]))]),ClassDecl(Id(d),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($4p3),ArrayType(3750,IntType),None))]),ClassDecl(Id(I),Id(fi0),[AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(35,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 600))

    def test_601(self):
        line = '''Class jh{}Class fQ:SZ_{}Class _{}Class _9U_:V{Var $el:Int ;}Class Bk_7:__{}Class Q5{}Class c_{Destructor (){} }Class ___:_4{}Class I{}Class _:_{}Class tNq:z{Constructor (__:Array [String ,14]){} }'''
        expect = '''Program([ClassDecl(Id(jh),[]),ClassDecl(Id(fQ),Id(SZ_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_9U_),Id(V),[AttributeDecl(Static,VarDecl(Id($el),IntType))]),ClassDecl(Id(Bk_7),Id(__),[]),ClassDecl(Id(Q5),[]),ClassDecl(Id(c_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(_4),[]),ClassDecl(Id(I),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(tNq),Id(z),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(14,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 601))

    def test_602(self):
        line = '''Class _{$3ei(_:Array [Array [Array [String ,01_0],0B1000110],2];S8__,u:Array [Array [String ,2],047];_,_:String ;n1,G:_;_c,_,W,t:Array [String ,0xF];_K_,_:Int ){}Val $143,$_7:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($3ei),Static,[param(Id(_),ArrayType(2,ArrayType(70,ArrayType(8,StringType)))),param(Id(S8__),ArrayType(39,ArrayType(2,StringType))),param(Id(u),ArrayType(39,ArrayType(2,StringType))),param(Id(_),StringType),param(Id(_),StringType),param(Id(n1),ClassType(Id(_))),param(Id(G),ClassType(Id(_))),param(Id(_c),ArrayType(15,StringType)),param(Id(_),ArrayType(15,StringType)),param(Id(W),ArrayType(15,StringType)),param(Id(t),ArrayType(15,StringType)),param(Id(_K_),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($143),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_7),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 602))

    def test_603(self):
        line = '''Class TJ:_{}Class p:_uS{$vE(Y,E3__,f_g,Na,t5,Y_,_:Array [Array [String ,0B11_0],74];_n,w:u9;_K,_:T;J:Array [Array [Array [Int ,024],74],0x10];nh:Array [Array [Float ,0B10],0X8];_T,_,d3,_kvp:wP4;_:Array [Array [Array [Int ,05],0x5],0B1];__5_:Boolean ;_:U;_,_:__){Break ;Continue ;{} }Val $2,_G_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(TJ),Id(_),[]),ClassDecl(Id(p),Id(_uS),[MethodDecl(Id($vE),Static,[param(Id(Y),ArrayType(74,ArrayType(6,StringType))),param(Id(E3__),ArrayType(74,ArrayType(6,StringType))),param(Id(f_g),ArrayType(74,ArrayType(6,StringType))),param(Id(Na),ArrayType(74,ArrayType(6,StringType))),param(Id(t5),ArrayType(74,ArrayType(6,StringType))),param(Id(Y_),ArrayType(74,ArrayType(6,StringType))),param(Id(_),ArrayType(74,ArrayType(6,StringType))),param(Id(_n),ClassType(Id(u9))),param(Id(w),ClassType(Id(u9))),param(Id(_K),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(J),ArrayType(16,ArrayType(74,ArrayType(20,IntType)))),param(Id(nh),ArrayType(8,ArrayType(2,FloatType))),param(Id(_T),ClassType(Id(wP4))),param(Id(_),ClassType(Id(wP4))),param(Id(d3),ClassType(Id(wP4))),param(Id(_kvp),ClassType(Id(wP4))),param(Id(_),ArrayType(1,ArrayType(5,ArrayType(5,IntType)))),param(Id(__5_),BoolType),param(Id(_),ClassType(Id(U))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__)))],Block([Break,Continue,Block([])])),AttributeDecl(Static,ConstDecl(Id($2),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_G_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 603))

    def test_604(self):
        line = '''Class _:_Q9{Constructor (){e84::$_.V1.p();{} }Constructor (_3RDs3__B:Array [Array [Array [Int ,0B1100011],0x26],0x26]){} }Class __{}Class I:h{Var m2_2Hf_:Array [Float ,61];}Class o:_3K2{}Class c{Destructor (){} }Class D:_7K{$W(jnu7_:Int ;wW_VH85_0:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B110],0B1_0],4_5],041],06_3],0x26],240],0B1];l:String ;B:Boolean ;f1U_9,o78_,a0:l){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_Q9),[MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(FieldAccess(Id(e84),Id($_)),Id(V1)),Id(p),[]),Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(_3RDs3__B),ArrayType(38,ArrayType(38,ArrayType(99,IntType))))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(I),Id(h),[AttributeDecl(Instance,VarDecl(Id(m2_2Hf_),ArrayType(61,FloatType)))]),ClassDecl(Id(o),Id(_3K2),[]),ClassDecl(Id(c),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(D),Id(_7K),[MethodDecl(Id($W),Static,[param(Id(jnu7_),IntType),param(Id(wW_VH85_0),ArrayType(1,ArrayType(240,ArrayType(38,ArrayType(51,ArrayType(33,ArrayType(45,ArrayType(2,ArrayType(6,IntType))))))))),param(Id(l),StringType),param(Id(B),BoolType),param(Id(f1U_9),ClassType(Id(l))),param(Id(o78_),ClassType(Id(l))),param(Id(a0),ClassType(Id(l)))],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 604))

    def test_605(self):
        line = '''Class f{}Class _y_{Var i,$R,$U6,$w:Array [Array [Boolean ,0B1001111],0X48];Val $FZ:Int ;}Class __:_{Constructor (E:Int ;Zp,Z:g){Break ;Val _:Array [Array [String ,0b1],0XE];} }'''
        expect = '''Program([ClassDecl(Id(f),[]),ClassDecl(Id(_y_),[AttributeDecl(Instance,VarDecl(Id(i),ArrayType(72,ArrayType(79,BoolType)))),AttributeDecl(Static,VarDecl(Id($R),ArrayType(72,ArrayType(79,BoolType)))),AttributeDecl(Static,VarDecl(Id($U6),ArrayType(72,ArrayType(79,BoolType)))),AttributeDecl(Static,VarDecl(Id($w),ArrayType(72,ArrayType(79,BoolType)))),AttributeDecl(Static,ConstDecl(Id($FZ),IntType,None))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(E),IntType),param(Id(Zp),ClassType(Id(g))),param(Id(Z),ClassType(Id(g)))],Block([Break,ConstDecl(Id(_),ArrayType(14,ArrayType(1,StringType)),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 605))

    def test_606(self):
        line = '''Class _{Constructor (_n2:L5m0;Sk1_569:Array [Boolean ,61];_:___;_f,_,_:Array [Array [Array [Boolean ,0B11100],0XB0],05_6]){}Val B,A_A2A5,$__,$j,$_3:_;Destructor (){}p(_TO_,_:Mj){ {}Val W:_;Val QLw,_,_4Z,_,__:C8;} }Class __y{}Class K0B{}Class a4:_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_n2),ClassType(Id(L5m0))),param(Id(Sk1_569),ArrayType(61,BoolType)),param(Id(_),ClassType(Id(___))),param(Id(_f),ArrayType(46,ArrayType(176,ArrayType(28,BoolType)))),param(Id(_),ArrayType(46,ArrayType(176,ArrayType(28,BoolType)))),param(Id(_),ArrayType(46,ArrayType(176,ArrayType(28,BoolType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(B),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(A_A2A5),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($j),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_3),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(p),Instance,[param(Id(_TO_),ClassType(Id(Mj))),param(Id(_),ClassType(Id(Mj)))],Block([Block([]),ConstDecl(Id(W),ClassType(Id(_)),None),ConstDecl(Id(QLw),ClassType(Id(C8)),None),ConstDecl(Id(_),ClassType(Id(C8)),None),ConstDecl(Id(_4Z),ClassType(Id(C8)),None),ConstDecl(Id(_),ClassType(Id(C8)),None),ConstDecl(Id(__),ClassType(Id(C8)),None)]))]),ClassDecl(Id(__y),[]),ClassDecl(Id(K0B),[]),ClassDecl(Id(a4),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 606))

    def test_607(self):
        line = '''Class _z:_z38J{Destructor (){}Var __3__,t,e,_,$D:Float ;O(AO_,_,_:Array [Int ,06]){}Constructor (_:String ;S,S:Array [Array [Float ,54_4],0B11011];Z:Array [Array [Int ,023],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_z),Id(_z38J),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__3__),FloatType)),AttributeDecl(Instance,VarDecl(Id(t),FloatType)),AttributeDecl(Instance,VarDecl(Id(e),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($D),FloatType)),MethodDecl(Id(O),Instance,[param(Id(AO_),ArrayType(6,IntType)),param(Id(_),ArrayType(6,IntType)),param(Id(_),ArrayType(6,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(S),ArrayType(27,ArrayType(544,FloatType))),param(Id(S),ArrayType(27,ArrayType(544,FloatType))),param(Id(Z),ArrayType(1,ArrayType(19,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 607))

    def test_608(self):
        line = '''Class k{}Class N_9d:_{}Class S{_e(){} }Class _:j{$_T_O(){}Val _,$Z_q5,I,$_2_:Array [Int ,0XD];}Class _:_{}Class UW:H{Constructor (_:Float ;_Kg8:Array [Array [Boolean ,0XD],79];_4s,_,D_5_:String ){}Var _p:Array [String ,0b1];}'''
        expect = '''Program([ClassDecl(Id(k),[]),ClassDecl(Id(N_9d),Id(_),[]),ClassDecl(Id(S),[MethodDecl(Id(_e),Instance,[],Block([]))]),ClassDecl(Id(_),Id(j),[MethodDecl(Id($_T_O),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,IntType),None)),AttributeDecl(Static,ConstDecl(Id($Z_q5),ArrayType(13,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(13,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_2_),ArrayType(13,IntType),None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(UW),Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_Kg8),ArrayType(79,ArrayType(13,BoolType))),param(Id(_4s),StringType),param(Id(_),StringType),param(Id(D_5_),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_p),ArrayType(1,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 608))

    def test_609(self):
        line = '''Class _:E{Val aI_4:Float ;}Class q:a_{}Class zSm{}Class hp{Constructor (f:Array [Float ,0XC];S_,f:r;_,_6:Array [Boolean ,47];F:Array [Array [String ,0xFC],0XC]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(E),[AttributeDecl(Instance,ConstDecl(Id(aI_4),FloatType,None))]),ClassDecl(Id(q),Id(a_),[]),ClassDecl(Id(zSm),[]),ClassDecl(Id(hp),[MethodDecl(Id(Constructor),Instance,[param(Id(f),ArrayType(12,FloatType)),param(Id(S_),ClassType(Id(r))),param(Id(f),ClassType(Id(r))),param(Id(_),ArrayType(47,BoolType)),param(Id(_6),ArrayType(47,BoolType)),param(Id(F),ArrayType(12,ArrayType(252,StringType)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 609))

    def test_610(self):
        line = '''Class _590h3_w:f80{Constructor (_7__:String ){Return ;Continue ;Continue ;}_(){} }Class _:O{Val _,X,$14_:Array [Array [Array [Array [String ,0x6],06_2],017],5_8];}Class __{}'''
        expect = '''Program([ClassDecl(Id(_590h3_w),Id(f80),[MethodDecl(Id(Constructor),Instance,[param(Id(_7__),StringType)],Block([Return(),Continue,Continue])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),Id(O),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(58,ArrayType(15,ArrayType(50,ArrayType(6,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(58,ArrayType(15,ArrayType(50,ArrayType(6,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($14_),ArrayType(58,ArrayType(15,ArrayType(50,ArrayType(6,StringType)))),None))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 610))

    def test_611(self):
        line = '''Class k:_{Val _6z:w;Var $83:Array [Array [Array [Float ,35],7],02_3_3];}Class _:_{Destructor (){}Val _0:Array [Array [Array [Array [Boolean ,35],0b1_0],01],03];Var $b2,$_:String ;Var __4w,_l,S,$6:_;}Class a_{Var $9:Array [Int ,0B1_0011100_1];}Class ____C:___{}'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_6z),ClassType(Id(w)),None)),AttributeDecl(Static,VarDecl(Id($83),ArrayType(155,ArrayType(7,ArrayType(35,FloatType)))))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0),ArrayType(3,ArrayType(1,ArrayType(2,ArrayType(35,BoolType)))),None)),AttributeDecl(Static,VarDecl(Id($b2),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(__4w),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_l),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(a_),[AttributeDecl(Static,VarDecl(Id($9),ArrayType(313,IntType)))]),ClassDecl(Id(____C),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 611))

    def test_612(self):
        line = '''Class G{Constructor (C_,g4o,_:String ){Break ;}Constructor (){}l_(O_:U_8;rA_,u3,_:Array [String ,0X4B];_,_,_e,_,_e:Array [Array [String ,0X4B],0b1]){}Val _:Boolean ;}Class _:F{}Class x_{}'''
        expect = '''Program([ClassDecl(Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(C_),StringType),param(Id(g4o),StringType),param(Id(_),StringType)],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(l_),Instance,[param(Id(O_),ClassType(Id(U_8))),param(Id(rA_),ArrayType(75,StringType)),param(Id(u3),ArrayType(75,StringType)),param(Id(_),ArrayType(75,StringType)),param(Id(_),ArrayType(1,ArrayType(75,StringType))),param(Id(_),ArrayType(1,ArrayType(75,StringType))),param(Id(_e),ArrayType(1,ArrayType(75,StringType))),param(Id(_),ArrayType(1,ArrayType(75,StringType))),param(Id(_e),ArrayType(1,ArrayType(75,StringType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(_),Id(F),[]),ClassDecl(Id(x_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 612))

    def test_613(self):
        line = '''Class __:cXj{Constructor (___:Array [Boolean ,89];__7:s__;_,e:Float ;N:Float ;s:c495;_S,R,m_,_,x3z,_9,eb,_:Float ){}_(z,L,y81g,Y:_Gw;_:Array [String ,0x5F_C]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(cXj),[MethodDecl(Id(Constructor),Instance,[param(Id(___),ArrayType(89,BoolType)),param(Id(__7),ClassType(Id(s__))),param(Id(_),FloatType),param(Id(e),FloatType),param(Id(N),FloatType),param(Id(s),ClassType(Id(c495))),param(Id(_S),FloatType),param(Id(R),FloatType),param(Id(m_),FloatType),param(Id(_),FloatType),param(Id(x3z),FloatType),param(Id(_9),FloatType),param(Id(eb),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(z),ClassType(Id(_Gw))),param(Id(L),ClassType(Id(_Gw))),param(Id(y81g),ClassType(Id(_Gw))),param(Id(Y),ClassType(Id(_Gw))),param(Id(_),ArrayType(1532,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 613))

    def test_614(self):
        line = '''Class OS{Constructor (D93W_7,_,_,__:Boolean ){ {Continue ;Continue ;}Val q,k52:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,33],0X1],33],027],33],0B1010001],5],0XA_6B];Break ;}Constructor (){_::$b();} }Class m21:_Z_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(OS),[MethodDecl(Id(Constructor),Instance,[param(Id(D93W_7),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(__),BoolType)],Block([Block([Continue,Continue]),ConstDecl(Id(q),ArrayType(2667,ArrayType(5,ArrayType(81,ArrayType(33,ArrayType(23,ArrayType(33,ArrayType(1,ArrayType(33,BoolType)))))))),None),ConstDecl(Id(k52),ArrayType(2667,ArrayType(5,ArrayType(81,ArrayType(33,ArrayType(23,ArrayType(33,ArrayType(1,ArrayType(33,BoolType)))))))),None),Break])),MethodDecl(Id(Constructor),Instance,[],Block([Call(Id(_),Id($b),[])]))]),ClassDecl(Id(m21),Id(_Z_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 614))

    def test_615(self):
        line = '''Class LIQUJ_{$_a_(){Val O_0:Array [Array [Array [String ,0x75],02_5_1],0b1];}Var $4o_Eep:Q;}Class _83{Val z__91926:Boolean ;Val _,I9f4:Array [Array [Array [Float ,0B111111],1],7_0];Val _:z_;}'''
        expect = '''Program([ClassDecl(Id(LIQUJ_),[MethodDecl(Id($_a_),Static,[],Block([ConstDecl(Id(O_0),ArrayType(1,ArrayType(169,ArrayType(117,StringType))),None)])),AttributeDecl(Static,VarDecl(Id($4o_Eep),ClassType(Id(Q)),NullLiteral()))]),ClassDecl(Id(_83),[AttributeDecl(Instance,ConstDecl(Id(z__91926),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(70,ArrayType(1,ArrayType(63,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(I9f4),ArrayType(70,ArrayType(1,ArrayType(63,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(z_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 615))

    def test_616(self):
        line = '''Class I_m_:r5{$_(_:m_;b:Float ;W:String ;_N0:Array [Array [Int ,0x30CE_2],0X34];W,qp1,_:Boolean ;__,QQ:K;_:Array [Array [String ,12_2],1]){}Val $R19S,m:String ;}Class _:L{Destructor (){Kq_::$__();} }Class _:_3{}'''
        expect = '''Program([ClassDecl(Id(I_m_),Id(r5),[MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(m_))),param(Id(b),FloatType),param(Id(W),StringType),param(Id(_N0),ArrayType(52,ArrayType(199906,IntType))),param(Id(W),BoolType),param(Id(qp1),BoolType),param(Id(_),BoolType),param(Id(__),ClassType(Id(K))),param(Id(QQ),ClassType(Id(K))),param(Id(_),ArrayType(1,ArrayType(122,StringType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($R19S),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(m),StringType,None))]),ClassDecl(Id(_),Id(L),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(Kq_),Id($__),[])]))]),ClassDecl(Id(_),Id(_3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 616))

    def test_617(self):
        line = '''Class __:C{Var _:Array [Array [Array [Array [Float ,0b1_0_1],0103],0X64],0X64];Destructor (){Continue ;}$v2T8_x(){} }Class _{Var _,$123___:nd;}Class _{Constructor (_,_m,_,_M,_0,C_5_A_:Boolean ;_:Boolean ;u,sg:Int ){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(C),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(100,ArrayType(100,ArrayType(67,ArrayType(5,FloatType)))))),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id($v2T8_x),Static,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(nd)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($123___),ClassType(Id(nd)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_m),BoolType),param(Id(_),BoolType),param(Id(_M),BoolType),param(Id(_0),BoolType),param(Id(C_5_A_),BoolType),param(Id(_),BoolType),param(Id(u),IntType),param(Id(sg),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 617))

    def test_618(self):
        line = '''Class _1:_{_(OB,__T98,N:Float ;_6,_1:Boolean ;b,W4:Im;d:String ;_T_:Array [String ,38];_,h_:Array [Boolean ,0215];QK:Int ){}Destructor (){} }Class _6_{Var D:Array [Array [String ,023],023];$_(){Break ;} }Class T5:_{Val H8y7B,$_6,$L:Array [Boolean ,023];}'''
        expect = '''Program([ClassDecl(Id(_1),Id(_),[MethodDecl(Id(_),Instance,[param(Id(OB),FloatType),param(Id(__T98),FloatType),param(Id(N),FloatType),param(Id(_6),BoolType),param(Id(_1),BoolType),param(Id(b),ClassType(Id(Im))),param(Id(W4),ClassType(Id(Im))),param(Id(d),StringType),param(Id(_T_),ArrayType(38,StringType)),param(Id(_),ArrayType(141,BoolType)),param(Id(h_),ArrayType(141,BoolType)),param(Id(QK),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_6_),[AttributeDecl(Instance,VarDecl(Id(D),ArrayType(19,ArrayType(19,StringType)))),MethodDecl(Id($_),Static,[],Block([Break]))]),ClassDecl(Id(T5),Id(_),[AttributeDecl(Instance,ConstDecl(Id(H8y7B),ArrayType(19,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_6),ArrayType(19,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(19,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 618))

    def test_619(self):
        line = '''Class P__:_{_vs7(_,C3:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X31],046],9_7_89],0B11],05],0x5A],5];P5,_:__s37_s;_:Int ;q:Array [Array [Float ,046],03]){Var _9:Boolean ;} }'''
        expect = '''Program([ClassDecl(Id(P__),Id(_),[MethodDecl(Id(_vs7),Instance,[param(Id(_),ArrayType(5,ArrayType(90,ArrayType(5,ArrayType(3,ArrayType(9789,ArrayType(38,ArrayType(49,BoolType)))))))),param(Id(C3),ArrayType(5,ArrayType(90,ArrayType(5,ArrayType(3,ArrayType(9789,ArrayType(38,ArrayType(49,BoolType)))))))),param(Id(P5),ClassType(Id(__s37_s))),param(Id(_),ClassType(Id(__s37_s))),param(Id(_),IntType),param(Id(q),ArrayType(3,ArrayType(38,FloatType)))],Block([VarDecl(Id(_9),BoolType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 619))

    def test_620(self):
        line = '''Class l9:_{}Class _:T_{}Class _d:_71392{_a_(ys,m,_3a,v:___XLf;_8:Array [Array [Array [Boolean ,0B110000],6],54];_,Q:Array [Boolean ,050];___1_,H:__18){} }Class He:_K_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(l9),Id(_),[]),ClassDecl(Id(_),Id(T_),[]),ClassDecl(Id(_d),Id(_71392),[MethodDecl(Id(_a_),Instance,[param(Id(ys),ClassType(Id(___XLf))),param(Id(m),ClassType(Id(___XLf))),param(Id(_3a),ClassType(Id(___XLf))),param(Id(v),ClassType(Id(___XLf))),param(Id(_8),ArrayType(54,ArrayType(6,ArrayType(48,BoolType)))),param(Id(_),ArrayType(40,BoolType)),param(Id(Q),ArrayType(40,BoolType)),param(Id(___1_),ClassType(Id(__18))),param(Id(H),ClassType(Id(__18)))],Block([]))]),ClassDecl(Id(He),Id(_K_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 620))

    def test_621(self):
        line = '''Class _eh:_{Val c,__,_,$d_:Array [Array [Array [Array [Array [Array [Boolean ,0B1_0],0b111],9],0b111],0x16],2];Val _m_27,P:_45;}Class J{}Class i:_{$_(){}Var B,iNJ,$U,$M8446_,$__83,$X9_:_33_041;C___(){} }'''
        expect = '''Program([ClassDecl(Id(_eh),Id(_),[AttributeDecl(Instance,ConstDecl(Id(c),ArrayType(2,ArrayType(22,ArrayType(7,ArrayType(9,ArrayType(7,ArrayType(2,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(2,ArrayType(22,ArrayType(7,ArrayType(9,ArrayType(7,ArrayType(2,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(22,ArrayType(7,ArrayType(9,ArrayType(7,ArrayType(2,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($d_),ArrayType(2,ArrayType(22,ArrayType(7,ArrayType(9,ArrayType(7,ArrayType(2,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_m_27),ClassType(Id(_45)),None)),AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(_45)),None))]),ClassDecl(Id(J),[]),ClassDecl(Id(i),Id(_),[MethodDecl(Id($_),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(B),ClassType(Id(_33_041)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(iNJ),ClassType(Id(_33_041)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($U),ClassType(Id(_33_041)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($M8446_),ClassType(Id(_33_041)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__83),ClassType(Id(_33_041)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($X9_),ClassType(Id(_33_041)),NullLiteral())),MethodDecl(Id(C___),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 621))

    def test_622(self):
        line = '''Class x{Destructor (){}Var $7t,_YT:_Cc_;}Class m:_5{Var $_b:C;Destructor (){}Val $3_:__;}Class _Y{__(c,a,_,_,w:_){}Destructor (){}Destructor (){}Constructor (p:Float ){ {} }}Class _IDc_j_Md08:_4{$1__v(){Break ;}Val $9,L:_;Val L_Z_:_;}Class _:_8_{}'''
        expect = '''Program([ClassDecl(Id(x),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7t),ClassType(Id(_Cc_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_YT),ClassType(Id(_Cc_)),NullLiteral()))]),ClassDecl(Id(m),Id(_5),[AttributeDecl(Static,VarDecl(Id($_b),ClassType(Id(C)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($3_),ClassType(Id(__)),None))]),ClassDecl(Id(_Y),[MethodDecl(Id(__),Instance,[param(Id(c),ClassType(Id(_))),param(Id(a),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(w),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(p),FloatType)],Block([Block([])]))]),ClassDecl(Id(_IDc_j_Md08),Id(_4),[MethodDecl(Id($1__v),Static,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(L_Z_),ClassType(Id(_)),None))]),ClassDecl(Id(_),Id(_8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 622))

    def test_623(self):
        line = '''Class _:p_{}Class oI1:y{Constructor (__:Array [Array [Int ,051],051];_,_,_:Array [Array [Array [Array [String ,9_38],01_5],0b10],80];w71:__;_:B9;__0,_D_W:Array [Boolean ,0x19]){}Var $G51,$_:Array [Array [String ,051],0x4];}Class __{}'''
        expect = '''Program([ClassDecl(Id(_),Id(p_),[]),ClassDecl(Id(oI1),Id(y),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(41,ArrayType(41,IntType))),param(Id(_),ArrayType(80,ArrayType(2,ArrayType(13,ArrayType(938,StringType))))),param(Id(_),ArrayType(80,ArrayType(2,ArrayType(13,ArrayType(938,StringType))))),param(Id(_),ArrayType(80,ArrayType(2,ArrayType(13,ArrayType(938,StringType))))),param(Id(w71),ClassType(Id(__))),param(Id(_),ClassType(Id(B9))),param(Id(__0),ArrayType(25,BoolType)),param(Id(_D_W),ArrayType(25,BoolType))],Block([])),AttributeDecl(Static,VarDecl(Id($G51),ArrayType(4,ArrayType(41,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,ArrayType(41,StringType))))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 623))

    def test_624(self):
        line = '''Class q{Val $7w:_;Val _3t100,$_:Array [Boolean ,0b1010100];Var $6:_z;Constructor (){Var _9_,P:Array [Array [Array [Array [String ,0xF],0xF],0X9_EC5_6],0B100];} }Class J5Y_0:_{}'''
        expect = '''Program([ClassDecl(Id(q),[AttributeDecl(Static,ConstDecl(Id($7w),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_3t100),ArrayType(84,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(84,BoolType),None)),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_z)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_9_),ArrayType(4,ArrayType(650326,ArrayType(15,ArrayType(15,StringType))))),VarDecl(Id(P),ArrayType(4,ArrayType(650326,ArrayType(15,ArrayType(15,StringType)))))]))]),ClassDecl(Id(J5Y_0),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 624))

    def test_625(self):
        line = '''Class g:A{Var $_:Array [Array [Array [Array [Array [Array [Array [String ,66],0X3F],0b110000],0xF],03],0b1],050];}Class _Q1{}Class _t:c{Var $6Cn:Array [Array [Int ,0XC_A3],064];Val i_,Qt:Float ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(g),Id(A),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(40,ArrayType(1,ArrayType(3,ArrayType(15,ArrayType(48,ArrayType(63,ArrayType(66,StringType)))))))))]),ClassDecl(Id(_Q1),[]),ClassDecl(Id(_t),Id(c),[AttributeDecl(Static,VarDecl(Id($6Cn),ArrayType(52,ArrayType(3235,IntType)))),AttributeDecl(Instance,ConstDecl(Id(i_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(Qt),FloatType,None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 625))

    def test_626(self):
        line = '''Class _:_{}Class _:_{Constructor (x,K:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1100000],7],7],0102_65],5_67_6],0B101001],0x44_0_A_9],0B11_11];__H:String ;M3:Array [Array [Int ,0xD],0x19];j_:_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(15,ArrayType(278697,ArrayType(41,ArrayType(5676,ArrayType(4277,ArrayType(7,ArrayType(7,ArrayType(96,BoolType))))))))),param(Id(K),ArrayType(15,ArrayType(278697,ArrayType(41,ArrayType(5676,ArrayType(4277,ArrayType(7,ArrayType(7,ArrayType(96,BoolType))))))))),param(Id(__H),StringType),param(Id(M3),ArrayType(25,ArrayType(13,IntType))),param(Id(j_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 626))

    def test_627(self):
        line = '''Class q{}Class k:_{Constructor (_,g8:_;g:Array [String ,0XE];d_:aI;s:Array [Array [Array [Int ,0X26],0B110111],0XBD1_4];w_,P,W:Array [Array [Array [Float ,0B1_0],030],05]){}Constructor (){Continue ;} }Class v:_{}Class _:_5q27_{}Class n{Var $_,$_2_:String ;Destructor (){}Var $6_:Array [Array [Array [Float ,0B1],0B10],0b1_0];}Class _d:_{Val $DB7_8:Array [Int ,0b101100];}'''
        expect = '''Program([ClassDecl(Id(q),[]),ClassDecl(Id(k),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(g8),ClassType(Id(_))),param(Id(g),ArrayType(14,StringType)),param(Id(d_),ClassType(Id(aI))),param(Id(s),ArrayType(48404,ArrayType(55,ArrayType(38,IntType)))),param(Id(w_),ArrayType(5,ArrayType(24,ArrayType(2,FloatType)))),param(Id(P),ArrayType(5,ArrayType(24,ArrayType(2,FloatType)))),param(Id(W),ArrayType(5,ArrayType(24,ArrayType(2,FloatType))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(v),Id(_),[]),ClassDecl(Id(_),Id(_5q27_),[]),ClassDecl(Id(n),[AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($_2_),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(2,ArrayType(2,ArrayType(1,FloatType)))))]),ClassDecl(Id(_d),Id(_),[AttributeDecl(Static,ConstDecl(Id($DB7_8),ArrayType(44,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 627))

    def test_628(self):
        line = '''Class W:W_{Val T,_,$y:Int ;Val $mt7_,$__O5R:Array [Array [Array [Boolean ,0b111011],91],0B1101];Constructor (B:Boolean ){Continue ;} }Class x_r:_Y{}Class _D{}Class _{}Class _:_i{}Class _{Var Z:Float ;}'''
        expect = '''Program([ClassDecl(Id(W),Id(W_),[AttributeDecl(Instance,ConstDecl(Id(T),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($y),IntType,None)),AttributeDecl(Static,ConstDecl(Id($mt7_),ArrayType(13,ArrayType(91,ArrayType(59,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($__O5R),ArrayType(13,ArrayType(91,ArrayType(59,BoolType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(B),BoolType)],Block([Continue]))]),ClassDecl(Id(x_r),Id(_Y),[]),ClassDecl(Id(_D),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_i),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Z),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 628))

    def test_629(self):
        line = '''Class _:_{Var $4,$8:Array [Array [Array [Boolean ,5],6],07_1];}Class _:_{Constructor (n:Array [Float ,0XD]){}Var _,$_8:Boolean ;Constructor (_Ey:Array [Float ,02]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($4),ArrayType(57,ArrayType(6,ArrayType(5,BoolType))))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(57,ArrayType(6,ArrayType(5,BoolType)))))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(n),ArrayType(13,FloatType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($_8),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_Ey),ArrayType(2,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 629))

    def test_630(self):
        line = '''Class _7S1{M4(H0,y:Int ;_,l:Array [Array [Int ,0x12],0X28];_,l_:String ;_3:q_0;af8:p;_,_,ay_:Float ;_,_j8F:eu){}S(H,_U_:_Y_){}$0(b,_:Array [Array [Array [Array [String ,0x1],2],0b110110],2]){} }'''
        expect = '''Program([ClassDecl(Id(_7S1),[MethodDecl(Id(M4),Instance,[param(Id(H0),IntType),param(Id(y),IntType),param(Id(_),ArrayType(40,ArrayType(18,IntType))),param(Id(l),ArrayType(40,ArrayType(18,IntType))),param(Id(_),StringType),param(Id(l_),StringType),param(Id(_3),ClassType(Id(q_0))),param(Id(af8),ClassType(Id(p))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(ay_),FloatType),param(Id(_),ClassType(Id(eu))),param(Id(_j8F),ClassType(Id(eu)))],Block([])),MethodDecl(Id(S),Instance,[param(Id(H),ClassType(Id(_Y_))),param(Id(_U_),ClassType(Id(_Y_)))],Block([])),MethodDecl(Id($0),Static,[param(Id(b),ArrayType(2,ArrayType(54,ArrayType(2,ArrayType(1,StringType))))),param(Id(_),ArrayType(2,ArrayType(54,ArrayType(2,ArrayType(1,StringType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 630))

    def test_631(self):
        line = '''Class _5{Constructor (_0,t,_xc:i){Var ____5,c_,_:Array [Float ,0x47_6_4B9];}Constructor (p_:String ;h,_,t:Float ;_,F:N){}Val Us:Float ;Var $4:Array [Array [Boolean ,0XC],0b11100];}'''
        expect = '''Program([ClassDecl(Id(_5),[MethodDecl(Id(Constructor),Instance,[param(Id(_0),ClassType(Id(i))),param(Id(t),ClassType(Id(i))),param(Id(_xc),ClassType(Id(i)))],Block([VarDecl(Id(____5),ArrayType(4678841,FloatType)),VarDecl(Id(c_),ArrayType(4678841,FloatType)),VarDecl(Id(_),ArrayType(4678841,FloatType))])),MethodDecl(Id(Constructor),Instance,[param(Id(p_),StringType),param(Id(h),FloatType),param(Id(_),FloatType),param(Id(t),FloatType),param(Id(_),ClassType(Id(N))),param(Id(F),ClassType(Id(N)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(Us),FloatType,None)),AttributeDecl(Static,VarDecl(Id($4),ArrayType(28,ArrayType(12,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 631))

    def test_632(self):
        line = '''Class M:K8{}Class c9:_{Val $A,$4:_;Constructor (_a,___N6,___:wB;Sy:A2092){} }Class q:_j{Destructor (){} }Class V4{Var _:Array [Array [Array [Array [Array [Array [Float ,56],0XC],0X4F],0b101],4],0X4F];}'''
        expect = '''Program([ClassDecl(Id(M),Id(K8),[]),ClassDecl(Id(c9),Id(_),[AttributeDecl(Static,ConstDecl(Id($A),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(_)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_a),ClassType(Id(wB))),param(Id(___N6),ClassType(Id(wB))),param(Id(___),ClassType(Id(wB))),param(Id(Sy),ClassType(Id(A2092)))],Block([]))]),ClassDecl(Id(q),Id(_j),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V4),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(79,ArrayType(4,ArrayType(5,ArrayType(79,ArrayType(12,ArrayType(56,FloatType))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 632))

    def test_633(self):
        line = '''Class N2_{}Class _{Destructor (){}Var $3,__,$6h_6j5,o__:Array [Array [Array [Int ,4],0127],0127];Val I,$Ns,m4,$y:Array [Int ,62];Destructor (){}BeTy(){}Var $7_9:Int ;Constructor (){} }Class _:_{Var $11S:N;}'''
        expect = '''Program([ClassDecl(Id(N2_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($3),ArrayType(87,ArrayType(87,ArrayType(4,IntType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(87,ArrayType(87,ArrayType(4,IntType))))),AttributeDecl(Static,VarDecl(Id($6h_6j5),ArrayType(87,ArrayType(87,ArrayType(4,IntType))))),AttributeDecl(Instance,VarDecl(Id(o__),ArrayType(87,ArrayType(87,ArrayType(4,IntType))))),AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(62,IntType),None)),AttributeDecl(Static,ConstDecl(Id($Ns),ArrayType(62,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(m4),ArrayType(62,IntType),None)),AttributeDecl(Static,ConstDecl(Id($y),ArrayType(62,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(BeTy),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7_9),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($11S),ClassType(Id(N)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 633))

    def test_634(self):
        line = '''Class Q0:K_{Constructor (Ndgj6_6_cG9__Z,_6:Boolean ;_,Q_:Int ;_n,J:DY8;_,_g:_;__,_:Array [String ,0B11001];h,___:Array [Array [Array [Boolean ,02],05_1],0b1100010];I59:String ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Q0),Id(K_),[MethodDecl(Id(Constructor),Instance,[param(Id(Ndgj6_6_cG9__Z),BoolType),param(Id(_6),BoolType),param(Id(_),IntType),param(Id(Q_),IntType),param(Id(_n),ClassType(Id(DY8))),param(Id(J),ClassType(Id(DY8))),param(Id(_),ClassType(Id(_))),param(Id(_g),ClassType(Id(_))),param(Id(__),ArrayType(25,StringType)),param(Id(_),ArrayType(25,StringType)),param(Id(h),ArrayType(98,ArrayType(41,ArrayType(2,BoolType)))),param(Id(___),ArrayType(98,ArrayType(41,ArrayType(2,BoolType)))),param(Id(I59),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 634))

    def test_635(self):
        line = '''Class __m{_(f,_,ub:Float ;c,z,RHo,_:v){}Var Q:Float ;Constructor (_,F:Float ;_,a4:Array [Array [Boolean ,0X1F],01];_:Array [Boolean ,057];_z4:Array [Array [Array [String ,49],06_76],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(__m),[MethodDecl(Id(_),Instance,[param(Id(f),FloatType),param(Id(_),FloatType),param(Id(ub),FloatType),param(Id(c),ClassType(Id(v))),param(Id(z),ClassType(Id(v))),param(Id(RHo),ClassType(Id(v))),param(Id(_),ClassType(Id(v)))],Block([])),AttributeDecl(Instance,VarDecl(Id(Q),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(F),FloatType),param(Id(_),ArrayType(1,ArrayType(31,BoolType))),param(Id(a4),ArrayType(1,ArrayType(31,BoolType))),param(Id(_),ArrayType(47,BoolType)),param(Id(_z4),ArrayType(1,ArrayType(446,ArrayType(49,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 635))

    def test_636(self):
        line = '''Class Vy{Var W,$88,_,_3_:Array [Array [Array [Array [Float ,0X4F],0B1011010],30],0x8_6C_C2_E];Constructor (y7_,_,_:Boolean ;f,_,A:Array [Array [Array [Boolean ,0b1],30],0xE]){} }'''
        expect = '''Program([ClassDecl(Id(Vy),[AttributeDecl(Instance,VarDecl(Id(W),ArrayType(8834094,ArrayType(30,ArrayType(90,ArrayType(79,FloatType)))))),AttributeDecl(Static,VarDecl(Id($88),ArrayType(8834094,ArrayType(30,ArrayType(90,ArrayType(79,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(8834094,ArrayType(30,ArrayType(90,ArrayType(79,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_3_),ArrayType(8834094,ArrayType(30,ArrayType(90,ArrayType(79,FloatType)))))),MethodDecl(Id(Constructor),Instance,[param(Id(y7_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(f),ArrayType(14,ArrayType(30,ArrayType(1,BoolType)))),param(Id(_),ArrayType(14,ArrayType(30,ArrayType(1,BoolType)))),param(Id(A),ArrayType(14,ArrayType(30,ArrayType(1,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 636))

    def test_637(self):
        line = '''Class U{Constructor (v7,__:f6;____,a_8,_:Array [Array [Array [Int ,2],0x4C],2]){}Var A,$__,$8,$1W:Array [Array [Array [Array [Array [Int ,0B100111],0X2E],0B100111],06],022];Val $1G,_n8y:_;}'''
        expect = '''Program([ClassDecl(Id(U),[MethodDecl(Id(Constructor),Instance,[param(Id(v7),ClassType(Id(f6))),param(Id(__),ClassType(Id(f6))),param(Id(____),ArrayType(2,ArrayType(76,ArrayType(2,IntType)))),param(Id(a_8),ArrayType(2,ArrayType(76,ArrayType(2,IntType)))),param(Id(_),ArrayType(2,ArrayType(76,ArrayType(2,IntType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(A),ArrayType(18,ArrayType(6,ArrayType(39,ArrayType(46,ArrayType(39,IntType))))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(18,ArrayType(6,ArrayType(39,ArrayType(46,ArrayType(39,IntType))))))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(18,ArrayType(6,ArrayType(39,ArrayType(46,ArrayType(39,IntType))))))),AttributeDecl(Static,VarDecl(Id($1W),ArrayType(18,ArrayType(6,ArrayType(39,ArrayType(46,ArrayType(39,IntType))))))),AttributeDecl(Static,ConstDecl(Id($1G),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_n8y),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 637))

    def test_638(self):
        line = '''Class L_5:_{}Class y_122{Val I,$67_w,$1r,$219G0,__,E:Array [Array [Array [Boolean ,0122],0x43],043];Val $_0,D:__E0;Destructor (){}Val P7o:Boolean ;}Class K{}Class T{}'''
        expect = '''Program([ClassDecl(Id(L_5),Id(_),[]),ClassDecl(Id(y_122),[AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(35,ArrayType(67,ArrayType(82,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($67_w),ArrayType(35,ArrayType(67,ArrayType(82,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($1r),ArrayType(35,ArrayType(67,ArrayType(82,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($219G0),ArrayType(35,ArrayType(67,ArrayType(82,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(35,ArrayType(67,ArrayType(82,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(35,ArrayType(67,ArrayType(82,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_0),ClassType(Id(__E0)),None)),AttributeDecl(Instance,ConstDecl(Id(D),ClassType(Id(__E0)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(P7o),BoolType,None))]),ClassDecl(Id(K),[]),ClassDecl(Id(T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 638))

    def test_639(self):
        line = '''Class KZ:_V466{}Class J2{}Class _:XI{Destructor (){}Val $___:_;Var u,$____:Array [Array [Array [Array [Array [Float ,0140],100],05_0],0140],0b101010];$_1(_:Array [Boolean ,04]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(KZ),Id(_V466),[]),ClassDecl(Id(J2),[]),ClassDecl(Id(_),Id(XI),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($___),ClassType(Id(_)),None)),AttributeDecl(Instance,VarDecl(Id(u),ArrayType(42,ArrayType(96,ArrayType(40,ArrayType(100,ArrayType(96,FloatType))))))),AttributeDecl(Static,VarDecl(Id($____),ArrayType(42,ArrayType(96,ArrayType(40,ArrayType(100,ArrayType(96,FloatType))))))),MethodDecl(Id($_1),Static,[param(Id(_),ArrayType(4,BoolType))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 639))

    def test_640(self):
        line = '''Class _{}Class _{Var z:Array [Array [Float ,0110],52];}Class ____{Destructor (){Continue ;}Var $M:Array [Array [Array [Array [Array [Int ,0X8_E_A],0b1011110],52_3_1],0b1011110],0b1];Val $_7c6c:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(z),ArrayType(52,ArrayType(72,FloatType))))]),ClassDecl(Id(____),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,VarDecl(Id($M),ArrayType(1,ArrayType(94,ArrayType(5231,ArrayType(94,ArrayType(2282,IntType))))))),AttributeDecl(Static,ConstDecl(Id($_7c6c),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 640))

    def test_641(self):
        line = '''Class _478{}Class imx{Var $_o,b:Float ;_(_,jRZ_6,N43,g:Float ;r1T__S4,_5,M_,v,_,q8,_:Array [Boolean ,0x9];u8:l_DR;V_:Array [Array [Array [Array [Array [Boolean ,07],017],06],0b11_1_1],0x9]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_478),[]),ClassDecl(Id(imx),[AttributeDecl(Static,VarDecl(Id($_o),FloatType)),AttributeDecl(Instance,VarDecl(Id(b),FloatType)),MethodDecl(Id(_),Instance,[param(Id(_),FloatType),param(Id(jRZ_6),FloatType),param(Id(N43),FloatType),param(Id(g),FloatType),param(Id(r1T__S4),ArrayType(9,BoolType)),param(Id(_5),ArrayType(9,BoolType)),param(Id(M_),ArrayType(9,BoolType)),param(Id(v),ArrayType(9,BoolType)),param(Id(_),ArrayType(9,BoolType)),param(Id(q8),ArrayType(9,BoolType)),param(Id(_),ArrayType(9,BoolType)),param(Id(u8),ClassType(Id(l_DR))),param(Id(V_),ArrayType(9,ArrayType(15,ArrayType(6,ArrayType(15,ArrayType(7,BoolType))))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 641))

    def test_642(self):
        line = '''Class _4{Destructor (){} }Class __:f_{Constructor (){}Constructor (Q,_D:U_54){} }Class _3{}Class zr{_Z(){ {} }}Class h{}Class _u_q{Destructor (){}Var $4:Array [Array [Array [Boolean ,0x20],04_2_3],0b1100_1];Constructor (_,__,__:O44T){}$B_i(CO,uK0w:_c_Qq){} }'''
        expect = '''Program([ClassDecl(Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(f_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Q),ClassType(Id(U_54))),param(Id(_D),ClassType(Id(U_54)))],Block([]))]),ClassDecl(Id(_3),[]),ClassDecl(Id(zr),[MethodDecl(Id(_Z),Instance,[],Block([Block([])]))]),ClassDecl(Id(h),[]),ClassDecl(Id(_u_q),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($4),ArrayType(25,ArrayType(275,ArrayType(32,BoolType))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(O44T))),param(Id(__),ClassType(Id(O44T))),param(Id(__),ClassType(Id(O44T)))],Block([])),MethodDecl(Id($B_i),Static,[param(Id(CO),ClassType(Id(_c_Qq))),param(Id(uK0w),ClassType(Id(_c_Qq)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 642))

    def test_643(self):
        line = '''Class __{Destructor (){Return ;Continue ;} }Class _:_{}Class _8P8{Constructor (_,GV:Float ;_2bu,i4,_t,K,o:Array [Array [String ,01],0B1000111];_w_N:Array [Array [Float ,46],0B1_0_0_1_0_0]){} }Class T5:_t{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Continue]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_8P8),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(GV),FloatType),param(Id(_2bu),ArrayType(71,ArrayType(1,StringType))),param(Id(i4),ArrayType(71,ArrayType(1,StringType))),param(Id(_t),ArrayType(71,ArrayType(1,StringType))),param(Id(K),ArrayType(71,ArrayType(1,StringType))),param(Id(o),ArrayType(71,ArrayType(1,StringType))),param(Id(_w_N),ArrayType(36,ArrayType(46,FloatType)))],Block([]))]),ClassDecl(Id(T5),Id(_t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 643))

    def test_644(self):
        line = '''Class H:_{}Class _24:_d{Destructor (){Return -W::$L.ne0L;} }Class F8E:y_4{Val ___3,$P:Array [Array [String ,01_0],0B1];Val $9,$_,$0,$F:Array [Array [Float ,064],0x1];}'''
        expect = '''Program([ClassDecl(Id(H),Id(_),[]),ClassDecl(Id(_24),Id(_d),[MethodDecl(Id(Destructor),Instance,[],Block([Return(UnaryOp(-,FieldAccess(FieldAccess(Id(W),Id($L)),Id(ne0L))))]))]),ClassDecl(Id(F8E),Id(y_4),[AttributeDecl(Instance,ConstDecl(Id(___3),ArrayType(1,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($P),ArrayType(1,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(1,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(1,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($F),ArrayType(1,ArrayType(52,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 644))

    def test_645(self):
        line = '''Class _:_{}Class _l:P7{Destructor (){}Constructor (){}Var __t:Array [Array [Array [Boolean ,0X3C],02],0xB];Val c_,$_:_a;}Class _i:l{}Class gFF:_{}Class e_{}Class l:_{Var k_E:_7k;}Class p:o__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_l),Id(P7),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__t),ArrayType(11,ArrayType(2,ArrayType(60,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(c_),ClassType(Id(_a)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_a)),None))]),ClassDecl(Id(_i),Id(l),[]),ClassDecl(Id(gFF),Id(_),[]),ClassDecl(Id(e_),[]),ClassDecl(Id(l),Id(_),[AttributeDecl(Instance,VarDecl(Id(k_E),ClassType(Id(_7k)),NullLiteral()))]),ClassDecl(Id(p),Id(o__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 645))

    def test_646(self):
        line = '''Class _5G5:__{Val $7g,h:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x6],052],052],83],02_5],03],02],0X5];Val $l,s,$9:Array [Array [Array [Int ,051_7],0X2],5];x(){} }'''
        expect = '''Program([ClassDecl(Id(_5G5),Id(__),[AttributeDecl(Static,ConstDecl(Id($7g),ArrayType(5,ArrayType(2,ArrayType(3,ArrayType(21,ArrayType(83,ArrayType(42,ArrayType(42,ArrayType(6,IntType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(5,ArrayType(2,ArrayType(3,ArrayType(21,ArrayType(83,ArrayType(42,ArrayType(42,ArrayType(6,IntType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($l),ArrayType(5,ArrayType(2,ArrayType(335,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(5,ArrayType(2,ArrayType(335,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(5,ArrayType(2,ArrayType(335,IntType))),None)),MethodDecl(Id(x),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 646))

    def test_647(self):
        line = '''Class C_{Constructor (_:Int ){}$L(M_:Array [Boolean ,0x1];A_:_3m_){} }Class _:z6l5{}Class c:v{}Class D{Constructor (Q:Int ;_:Array [Int ,0X4C];_:Array [Array [String ,0b11],0x9];X_,T5983:_j){} }'''
        expect = '''Program([ClassDecl(Id(C_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),MethodDecl(Id($L),Static,[param(Id(M_),ArrayType(1,BoolType)),param(Id(A_),ClassType(Id(_3m_)))],Block([]))]),ClassDecl(Id(_),Id(z6l5),[]),ClassDecl(Id(c),Id(v),[]),ClassDecl(Id(D),[MethodDecl(Id(Constructor),Instance,[param(Id(Q),IntType),param(Id(_),ArrayType(76,IntType)),param(Id(_),ArrayType(9,ArrayType(3,StringType))),param(Id(X_),ClassType(Id(_j))),param(Id(T5983),ClassType(Id(_j)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 647))

    def test_648(self):
        line = '''Class NF{Destructor (){Return ;} }Class A{QU(fU,Q_,_,_:Array [Int ,0B1];D:jO;_a,h:Float ;___,__a_,nS,__O,_,G7_2,_05:Array [Array [Array [String ,98],033],0X49]){} }Class b3XD__6YA2mi2:y{}Class _3{}'''
        expect = '''Program([ClassDecl(Id(NF),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(A),[MethodDecl(Id(QU),Instance,[param(Id(fU),ArrayType(1,IntType)),param(Id(Q_),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(D),ClassType(Id(jO))),param(Id(_a),FloatType),param(Id(h),FloatType),param(Id(___),ArrayType(73,ArrayType(27,ArrayType(98,StringType)))),param(Id(__a_),ArrayType(73,ArrayType(27,ArrayType(98,StringType)))),param(Id(nS),ArrayType(73,ArrayType(27,ArrayType(98,StringType)))),param(Id(__O),ArrayType(73,ArrayType(27,ArrayType(98,StringType)))),param(Id(_),ArrayType(73,ArrayType(27,ArrayType(98,StringType)))),param(Id(G7_2),ArrayType(73,ArrayType(27,ArrayType(98,StringType)))),param(Id(_05),ArrayType(73,ArrayType(27,ArrayType(98,StringType))))],Block([]))]),ClassDecl(Id(b3XD__6YA2mi2),Id(y),[]),ClassDecl(Id(_3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 648))

    def test_649(self):
        line = '''Class i3{}Class _:_{Constructor (){ {} }}Class __Oh{}Class j:_{___(C,N,GqC5S3,x,_,g_:Float ;_O_,s9,e_6_,r:Array [Array [Array [String ,9],0B1_0_00],0x46];Q:Float ;_:Boolean ;_,_:Array [Array [Int ,0xD],0X5F]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(i3),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(__Oh),[]),ClassDecl(Id(j),Id(_),[MethodDecl(Id(___),Instance,[param(Id(C),FloatType),param(Id(N),FloatType),param(Id(GqC5S3),FloatType),param(Id(x),FloatType),param(Id(_),FloatType),param(Id(g_),FloatType),param(Id(_O_),ArrayType(70,ArrayType(8,ArrayType(9,StringType)))),param(Id(s9),ArrayType(70,ArrayType(8,ArrayType(9,StringType)))),param(Id(e_6_),ArrayType(70,ArrayType(8,ArrayType(9,StringType)))),param(Id(r),ArrayType(70,ArrayType(8,ArrayType(9,StringType)))),param(Id(Q),FloatType),param(Id(_),BoolType),param(Id(_),ArrayType(95,ArrayType(13,IntType))),param(Id(_),ArrayType(95,ArrayType(13,IntType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 649))

    def test_650(self):
        line = '''Class bw_7:_0{Var _4__:_E_;$_C(){Break ;Var _51,_:Array [Float ,0x23];Continue ;}Val $5,$_b5Q:String ;Var _:Array [Array [Array [String ,014],2],0b1010111];Var $HX,_4,I:__;}'''
        expect = '''Program([ClassDecl(Id(bw_7),Id(_0),[AttributeDecl(Instance,VarDecl(Id(_4__),ClassType(Id(_E_)),NullLiteral())),MethodDecl(Id($_C),Static,[],Block([Break,VarDecl(Id(_51),ArrayType(35,FloatType)),VarDecl(Id(_),ArrayType(35,FloatType)),Continue])),AttributeDecl(Static,ConstDecl(Id($5),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_b5Q),StringType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(87,ArrayType(2,ArrayType(12,StringType))))),AttributeDecl(Static,VarDecl(Id($HX),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_4),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(I),ClassType(Id(__)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 650))

    def test_651(self):
        line = '''Class aB{E(){} }Class Z:__{}Class Jn_{}Class v_B:__{Constructor (K:Array [Int ,050];H:z7e;P_,_,w:Array [String ,05_3_4_55];_w,a,_:Float ;_9,_8_:o;r_H:Int ){Continue ;} }Class U8_{}'''
        expect = '''Program([ClassDecl(Id(aB),[MethodDecl(Id(E),Instance,[],Block([]))]),ClassDecl(Id(Z),Id(__),[]),ClassDecl(Id(Jn_),[]),ClassDecl(Id(v_B),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(40,IntType)),param(Id(H),ClassType(Id(z7e))),param(Id(P_),ArrayType(22317,StringType)),param(Id(_),ArrayType(22317,StringType)),param(Id(w),ArrayType(22317,StringType)),param(Id(_w),FloatType),param(Id(a),FloatType),param(Id(_),FloatType),param(Id(_9),ClassType(Id(o))),param(Id(_8_),ClassType(Id(o))),param(Id(r_H),IntType)],Block([Continue]))]),ClassDecl(Id(U8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 651))

    def test_652(self):
        line = '''Class _:T{}Class d:_{Val $2_,W__,b6QD0,$_,a,_:String ;$_UU_(c__,ERU,P,__2_:Array [Array [Array [String ,0b1],6_8],0B1000010]){}Var _8,_,_x2,G:_8;Constructor (K:Float ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(T),[]),ClassDecl(Id(d),Id(_),[AttributeDecl(Static,ConstDecl(Id($2_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(W__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(b6QD0),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(a),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),MethodDecl(Id($_UU_),Static,[param(Id(c__),ArrayType(66,ArrayType(68,ArrayType(1,StringType)))),param(Id(ERU),ArrayType(66,ArrayType(68,ArrayType(1,StringType)))),param(Id(P),ArrayType(66,ArrayType(68,ArrayType(1,StringType)))),param(Id(__2_),ArrayType(66,ArrayType(68,ArrayType(1,StringType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_8),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_x2),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(G),ClassType(Id(_8)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(K),FloatType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 652))

    def test_653(self):
        line = '''Class M:L{Constructor (_u,B,_3,C_:_I_;R2:Array [Float ,0XB1]){Return ;}M(_,__,g_2_,Z:_W6D;_:String ){}Constructor (t_60,_,i_4_,o,b,___,_,_,X1__,_6:_r;__M,_964__:Float ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(M),Id(L),[MethodDecl(Id(Constructor),Instance,[param(Id(_u),ClassType(Id(_I_))),param(Id(B),ClassType(Id(_I_))),param(Id(_3),ClassType(Id(_I_))),param(Id(C_),ClassType(Id(_I_))),param(Id(R2),ArrayType(177,FloatType))],Block([Return()])),MethodDecl(Id(M),Instance,[param(Id(_),ClassType(Id(_W6D))),param(Id(__),ClassType(Id(_W6D))),param(Id(g_2_),ClassType(Id(_W6D))),param(Id(Z),ClassType(Id(_W6D))),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(t_60),ClassType(Id(_r))),param(Id(_),ClassType(Id(_r))),param(Id(i_4_),ClassType(Id(_r))),param(Id(o),ClassType(Id(_r))),param(Id(b),ClassType(Id(_r))),param(Id(___),ClassType(Id(_r))),param(Id(_),ClassType(Id(_r))),param(Id(_),ClassType(Id(_r))),param(Id(X1__),ClassType(Id(_r))),param(Id(_6),ClassType(Id(_r))),param(Id(__M),FloatType),param(Id(_964__),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 653))

    def test_654(self):
        line = '''Class A{}Class _1V{}Class _:l__LV_RDp_5{Val $_x,_:Float ;Val $_,$9:Array [Array [Array [Array [Float ,0b1],0B100100],0B1],7];Var JR:_8x9;Constructor (){Return ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(A),[]),ClassDecl(Id(_1V),[]),ClassDecl(Id(_),Id(l__LV_RDp_5),[AttributeDecl(Static,ConstDecl(Id($_x),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(1,ArrayType(36,ArrayType(1,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(7,ArrayType(1,ArrayType(36,ArrayType(1,FloatType)))),None)),AttributeDecl(Instance,VarDecl(Id(JR),ClassType(Id(_8x9)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 654))

    def test_655(self):
        line = '''Class _:__{Destructor (){}Destructor (){ {} }}Class v__g{Constructor (v:Float ;__x_,S:Array [Array [String ,0B1011101],0B1011101];____,_:m7;y8x,W:Array [Float ,0b1010100]){}Var $B1,$17_6,F9_6:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(v__g),[MethodDecl(Id(Constructor),Instance,[param(Id(v),FloatType),param(Id(__x_),ArrayType(93,ArrayType(93,StringType))),param(Id(S),ArrayType(93,ArrayType(93,StringType))),param(Id(____),ClassType(Id(m7))),param(Id(_),ClassType(Id(m7))),param(Id(y8x),ArrayType(84,FloatType)),param(Id(W),ArrayType(84,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($B1),FloatType)),AttributeDecl(Static,VarDecl(Id($17_6),FloatType)),AttributeDecl(Instance,VarDecl(Id(F9_6),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 655))

    def test_656(self):
        line = '''Class h{Var $___:Array [Array [Boolean ,0xD],045];_3(MW_I,_:r;V_310:Array [Array [Float ,01],045]){} }Class __:S70{Val _,D,_Az:Int ;Destructor (){Return ;}Constructor (){}Var g:Array [Int ,0x5];}Class _:l{}Class O:__{}Class t_{}Class o_:i{}'''
        expect = '''Program([ClassDecl(Id(h),[AttributeDecl(Static,VarDecl(Id($___),ArrayType(37,ArrayType(13,BoolType)))),MethodDecl(Id(_3),Instance,[param(Id(MW_I),ClassType(Id(r))),param(Id(_),ClassType(Id(r))),param(Id(V_310),ArrayType(37,ArrayType(1,FloatType)))],Block([]))]),ClassDecl(Id(__),Id(S70),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(D),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_Az),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(5,IntType)))]),ClassDecl(Id(_),Id(l),[]),ClassDecl(Id(O),Id(__),[]),ClassDecl(Id(t_),[]),ClassDecl(Id(o_),Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 656))

    def test_657(self):
        line = '''Class _zH{}Class T31_D{Destructor (){}Var $_,$_,SO0,JJ__8W:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0XC],2_0],0b1001001],0x9],05],07_50],0b1001001],0B1000111],03];Val X_,_,$5_W_,$8,_,$v,$__,d:Float ;}'''
        expect = '''Program([ClassDecl(Id(_zH),[]),ClassDecl(Id(T31_D),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(71,ArrayType(73,ArrayType(488,ArrayType(5,ArrayType(9,ArrayType(73,ArrayType(20,ArrayType(12,StringType))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(71,ArrayType(73,ArrayType(488,ArrayType(5,ArrayType(9,ArrayType(73,ArrayType(20,ArrayType(12,StringType))))))))))),AttributeDecl(Instance,VarDecl(Id(SO0),ArrayType(3,ArrayType(71,ArrayType(73,ArrayType(488,ArrayType(5,ArrayType(9,ArrayType(73,ArrayType(20,ArrayType(12,StringType))))))))))),AttributeDecl(Instance,VarDecl(Id(JJ__8W),ArrayType(3,ArrayType(71,ArrayType(73,ArrayType(488,ArrayType(5,ArrayType(9,ArrayType(73,ArrayType(20,ArrayType(12,StringType))))))))))),AttributeDecl(Instance,ConstDecl(Id(X_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($5_W_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($8),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($v),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($__),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(d),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 657))

    def test_658(self):
        line = '''Class j:_{Val _,_,_,$c:Array [Array [Array [Array [Boolean ,05],0B111100],0133],0xA];Constructor (){Break ;Continue ;}Destructor (){} }Class _j:_9{___(J3__:_){Continue ;Var D9_,_:_;} }Class a{}'''
        expect = '''Program([ClassDecl(Id(j),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(10,ArrayType(91,ArrayType(60,ArrayType(5,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(10,ArrayType(91,ArrayType(60,ArrayType(5,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(10,ArrayType(91,ArrayType(60,ArrayType(5,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(10,ArrayType(91,ArrayType(60,ArrayType(5,BoolType)))),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_j),Id(_9),[MethodDecl(Id(___),Instance,[param(Id(J3__),ClassType(Id(_)))],Block([Continue,VarDecl(Id(D9_),ClassType(Id(_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 658))

    def test_659(self):
        line = '''Class _4__:_{Constructor (){Break ;Break ;} }Class __3{Constructor (__6:Array [Array [Array [Int ,05],12_7],0b111111]){}Var a:k9;$8t(_:oVT;_:Y;_n,__:String ;_,_,_,_o:m3_;N:Array [Boolean ,0B11_1];_,__x,H45b9:String ){} }'''
        expect = '''Program([ClassDecl(Id(_4__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Break]))]),ClassDecl(Id(__3),[MethodDecl(Id(Constructor),Instance,[param(Id(__6),ArrayType(63,ArrayType(127,ArrayType(5,IntType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(a),ClassType(Id(k9)),NullLiteral())),MethodDecl(Id($8t),Static,[param(Id(_),ClassType(Id(oVT))),param(Id(_),ClassType(Id(Y))),param(Id(_n),StringType),param(Id(__),StringType),param(Id(_),ClassType(Id(m3_))),param(Id(_),ClassType(Id(m3_))),param(Id(_),ClassType(Id(m3_))),param(Id(_o),ClassType(Id(m3_))),param(Id(N),ArrayType(7,BoolType)),param(Id(_),StringType),param(Id(__x),StringType),param(Id(H45b9),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 659))

    def test_660(self):
        line = '''Class w:_9{}Class _1{}Class mk:_{Constructor (___,__,_,YUo:String ;_,_f7_H1_,_8:_;_T58_:_R__;V6,F_2:Float ;_:Array [Array [Int ,0xC5],02];_v:Boolean ){Var w:String ;}$L(c52,__V:_;B_:Array [Float ,0X2A];T6_,s:Array [Array [String ,0B100110],0XE]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(w),Id(_9),[]),ClassDecl(Id(_1),[]),ClassDecl(Id(mk),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(___),StringType),param(Id(__),StringType),param(Id(_),StringType),param(Id(YUo),StringType),param(Id(_),ClassType(Id(_))),param(Id(_f7_H1_),ClassType(Id(_))),param(Id(_8),ClassType(Id(_))),param(Id(_T58_),ClassType(Id(_R__))),param(Id(V6),FloatType),param(Id(F_2),FloatType),param(Id(_),ArrayType(2,ArrayType(197,IntType))),param(Id(_v),BoolType)],Block([VarDecl(Id(w),StringType)])),MethodDecl(Id($L),Static,[param(Id(c52),ClassType(Id(_))),param(Id(__V),ClassType(Id(_))),param(Id(B_),ArrayType(42,FloatType)),param(Id(T6_),ArrayType(14,ArrayType(38,StringType))),param(Id(s),ArrayType(14,ArrayType(38,StringType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 660))

    def test_661(self):
        line = '''Class K{}Class __{Var E:Array [Array [Array [Array [Array [Array [Array [Array [Int ,24],0X5],0X5],0331_7],0xE4],5],0b1011],42];$7_(M:Boolean ;S4:_;_c:Array [Boolean ,053_26];_,M:Array [Int ,044];_5_62_:_;Se:Int ){} }'''
        expect = '''Program([ClassDecl(Id(K),[]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(E),ArrayType(42,ArrayType(11,ArrayType(5,ArrayType(228,ArrayType(1743,ArrayType(5,ArrayType(5,ArrayType(24,IntType)))))))))),MethodDecl(Id($7_),Static,[param(Id(M),BoolType),param(Id(S4),ClassType(Id(_))),param(Id(_c),ArrayType(2774,BoolType)),param(Id(_),ArrayType(36,IntType)),param(Id(M),ArrayType(36,IntType)),param(Id(_5_62_),ClassType(Id(_))),param(Id(Se),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 661))

    def test_662(self):
        line = '''Class b:Y{}Class e{}Class _V:m_{}Class t8_q5cu:o3{Constructor (y0,C:Array [Boolean ,0B1001_0];i2:Float ;_,_w,o_,s:Array [Array [Array [Int ,0B11110],3],3]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(b),Id(Y),[]),ClassDecl(Id(e),[]),ClassDecl(Id(_V),Id(m_),[]),ClassDecl(Id(t8_q5cu),Id(o3),[MethodDecl(Id(Constructor),Instance,[param(Id(y0),ArrayType(18,BoolType)),param(Id(C),ArrayType(18,BoolType)),param(Id(i2),FloatType),param(Id(_),ArrayType(3,ArrayType(3,ArrayType(30,IntType)))),param(Id(_w),ArrayType(3,ArrayType(3,ArrayType(30,IntType)))),param(Id(o_),ArrayType(3,ArrayType(3,ArrayType(30,IntType)))),param(Id(s),ArrayType(3,ArrayType(3,ArrayType(30,IntType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 662))

    def test_663(self):
        line = '''Class q{Val f,$M,k_:String ;Destructor (){}eH_(_m,_a,m:v_3_;_,__:y43S336_;_,H1,_,_,_I:String ;P7:Array [Boolean ,0b100110];z:_;KM,_i:_A){}Constructor (){} }Class _G_:o{}Class F_5___:M{}'''
        expect = '''Program([ClassDecl(Id(q),[AttributeDecl(Instance,ConstDecl(Id(f),StringType,None)),AttributeDecl(Static,ConstDecl(Id($M),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(k_),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(eH_),Instance,[param(Id(_m),ClassType(Id(v_3_))),param(Id(_a),ClassType(Id(v_3_))),param(Id(m),ClassType(Id(v_3_))),param(Id(_),ClassType(Id(y43S336_))),param(Id(__),ClassType(Id(y43S336_))),param(Id(_),StringType),param(Id(H1),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_I),StringType),param(Id(P7),ArrayType(38,BoolType)),param(Id(z),ClassType(Id(_))),param(Id(KM),ClassType(Id(_A))),param(Id(_i),ClassType(Id(_A)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_G_),Id(o),[]),ClassDecl(Id(F_5___),Id(M),[])])'''
        self.assertTrue(TestAST.test(line, expect, 663))

    def test_664(self):
        line = '''Class G_0_5{Val $_30,j_5O:Float ;Constructor (_PR,_,a:Array [Boolean ,0X43];_R_3:Float ;_9_0_93g2,E2l:Float ;X,__,_,G,_:_p;_G:Array [Int ,0X43];H1,_,f:Int ){Return ;}Val $5_0:v1;}Class _:k_{}'''
        expect = '''Program([ClassDecl(Id(G_0_5),[AttributeDecl(Static,ConstDecl(Id($_30),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(j_5O),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_PR),ArrayType(67,BoolType)),param(Id(_),ArrayType(67,BoolType)),param(Id(a),ArrayType(67,BoolType)),param(Id(_R_3),FloatType),param(Id(_9_0_93g2),FloatType),param(Id(E2l),FloatType),param(Id(X),ClassType(Id(_p))),param(Id(__),ClassType(Id(_p))),param(Id(_),ClassType(Id(_p))),param(Id(G),ClassType(Id(_p))),param(Id(_),ClassType(Id(_p))),param(Id(_G),ArrayType(67,IntType)),param(Id(H1),IntType),param(Id(_),IntType),param(Id(f),IntType)],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($5_0),ClassType(Id(v1)),None))]),ClassDecl(Id(_),Id(k_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 664))

    def test_665(self):
        line = '''Class _X:_{X_(_,_1:String ){}Constructor (_1,_L5U,__0G:_;IO7,_,d,_0_3_,K,lJ_,Z1:Array [Array [Int ,3],0xF]){Continue ;Var u,V,_,__v_7C,R:Array [Array [Int ,0xF],0b11111];Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_X),Id(_),[MethodDecl(Id(X_),Instance,[param(Id(_),StringType),param(Id(_1),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_1),ClassType(Id(_))),param(Id(_L5U),ClassType(Id(_))),param(Id(__0G),ClassType(Id(_))),param(Id(IO7),ArrayType(15,ArrayType(3,IntType))),param(Id(_),ArrayType(15,ArrayType(3,IntType))),param(Id(d),ArrayType(15,ArrayType(3,IntType))),param(Id(_0_3_),ArrayType(15,ArrayType(3,IntType))),param(Id(K),ArrayType(15,ArrayType(3,IntType))),param(Id(lJ_),ArrayType(15,ArrayType(3,IntType))),param(Id(Z1),ArrayType(15,ArrayType(3,IntType)))],Block([Continue,VarDecl(Id(u),ArrayType(31,ArrayType(15,IntType))),VarDecl(Id(V),ArrayType(31,ArrayType(15,IntType))),VarDecl(Id(_),ArrayType(31,ArrayType(15,IntType))),VarDecl(Id(__v_7C),ArrayType(31,ArrayType(15,IntType))),VarDecl(Id(R),ArrayType(31,ArrayType(15,IntType))),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 665))

    def test_666(self):
        line = '''Class s_9:__2{Var _:u__;}Class O{}Class d5:__{Constructor (P:Array [Array [Array [Boolean ,0XD_7],0B11],0x6];p,_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],0B1_0_1],83],0X7D],0420],0X7_6_8E],0B1];_:String ;R5xk,____:k){}Var $Z,n,$_9K:String ;}Class _:__6_{}'''
        expect = '''Program([ClassDecl(Id(s_9),Id(__2),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(u__)),NullLiteral()))]),ClassDecl(Id(O),[]),ClassDecl(Id(d5),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(6,ArrayType(3,ArrayType(215,BoolType)))),param(Id(p),ArrayType(1,ArrayType(30350,ArrayType(272,ArrayType(125,ArrayType(83,ArrayType(5,ArrayType(1,BoolType)))))))),param(Id(_),ArrayType(1,ArrayType(30350,ArrayType(272,ArrayType(125,ArrayType(83,ArrayType(5,ArrayType(1,BoolType)))))))),param(Id(_),StringType),param(Id(R5xk),ClassType(Id(k))),param(Id(____),ClassType(Id(k)))],Block([])),AttributeDecl(Static,VarDecl(Id($Z),StringType)),AttributeDecl(Instance,VarDecl(Id(n),StringType)),AttributeDecl(Static,VarDecl(Id($_9K),StringType))]),ClassDecl(Id(_),Id(__6_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 666))

    def test_667(self):
        line = '''Class M{Val $1:o;Val w,j:String ;Constructor (N_9:Array [String ,0X83_A6];_:Array [Boolean ,0x4C];__3_V:q;O:B;K_:Boolean ;_,c:Boolean ;_:_;__,_,_,_,Z:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(M),[AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(o)),None)),AttributeDecl(Instance,ConstDecl(Id(w),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(j),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(N_9),ArrayType(33702,StringType)),param(Id(_),ArrayType(76,BoolType)),param(Id(__3_V),ClassType(Id(q))),param(Id(O),ClassType(Id(B))),param(Id(K_),BoolType),param(Id(_),BoolType),param(Id(c),BoolType),param(Id(_),ClassType(Id(_))),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(Z),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 667))

    def test_668(self):
        line = '''Class V:K{}Class F{}Class _41{Constructor (P,__4:Array [Array [Array [Float ,0111],0XA],0X4]){}Var wjkBsY7,_:Int ;}Class R_:s{Constructor (l:P_){ {Val _jX__:Array [Array [Float ,07],53];} }}Class _:_{Destructor (){}$_(i_:Array [Array [Array [String ,0b11],0X2],0x9]){} }'''
        expect = '''Program([ClassDecl(Id(V),Id(K),[]),ClassDecl(Id(F),[]),ClassDecl(Id(_41),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(4,ArrayType(10,ArrayType(73,FloatType)))),param(Id(__4),ArrayType(4,ArrayType(10,ArrayType(73,FloatType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(wjkBsY7),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType))]),ClassDecl(Id(R_),Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(l),ClassType(Id(P_)))],Block([Block([ConstDecl(Id(_jX__),ArrayType(53,ArrayType(7,FloatType)),None)])]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(i_),ArrayType(9,ArrayType(2,ArrayType(3,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 668))

    def test_669(self):
        line = '''Class _:_{Constructor (K:Float ;_,__zw_,E:_75;___6,_O11:Array [Boolean ,011];YO4V_,t:Boolean ;_:D;_i,_c:Int ;_:Array [Int ,0b1100010];y_E:Array [String ,0B11101];v,K,_v,t,a:C){}Destructor (){} }Class _:Y_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(K),FloatType),param(Id(_),ClassType(Id(_75))),param(Id(__zw_),ClassType(Id(_75))),param(Id(E),ClassType(Id(_75))),param(Id(___6),ArrayType(9,BoolType)),param(Id(_O11),ArrayType(9,BoolType)),param(Id(YO4V_),BoolType),param(Id(t),BoolType),param(Id(_),ClassType(Id(D))),param(Id(_i),IntType),param(Id(_c),IntType),param(Id(_),ArrayType(98,IntType)),param(Id(y_E),ArrayType(29,StringType)),param(Id(v),ClassType(Id(C))),param(Id(K),ClassType(Id(C))),param(Id(_v),ClassType(Id(C))),param(Id(t),ClassType(Id(C))),param(Id(a),ClassType(Id(C)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(Y_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 669))

    def test_670(self):
        line = '''Class __:F{Var _3,$_:Float ;Val _,$6:Array [Array [Float ,0b1_0],070];Val $n_,R,z,$_k_6,$6,$3:String ;}Class __{}Class _{C_R(_4D:Boolean ;i1:_;A,M,__83_L:Array [Array [Boolean ,0X45],62]){Val u,k:_;} }Class _:Uu{}'''
        expect = '''Program([ClassDecl(Id(__),Id(F),[AttributeDecl(Instance,VarDecl(Id(_3),FloatType)),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(56,ArrayType(2,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(56,ArrayType(2,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($n_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(R),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(z),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_k_6),StringType,None)),AttributeDecl(Static,ConstDecl(Id($6),StringType,None)),AttributeDecl(Static,ConstDecl(Id($3),StringType,None))]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(C_R),Instance,[param(Id(_4D),BoolType),param(Id(i1),ClassType(Id(_))),param(Id(A),ArrayType(62,ArrayType(69,BoolType))),param(Id(M),ArrayType(62,ArrayType(69,BoolType))),param(Id(__83_L),ArrayType(62,ArrayType(69,BoolType)))],Block([ConstDecl(Id(u),ClassType(Id(_)),None),ConstDecl(Id(k),ClassType(Id(_)),None)]))]),ClassDecl(Id(_),Id(Uu),[])])'''
        self.assertTrue(TestAST.test(line, expect, 670))

    def test_671(self):
        line = '''Class V{}Class h:N{V_(_1Y_:Array [Boolean ,0B1011011];a:Array [Array [Array [Array [Float ,056_3],02_042],024],8_4];G,_,V:_N){}Val r:_u;Var $8,_V,_,w,$aU:Array [Boolean ,80];}'''
        expect = '''Program([ClassDecl(Id(V),[]),ClassDecl(Id(h),Id(N),[MethodDecl(Id(V_),Instance,[param(Id(_1Y_),ArrayType(91,BoolType)),param(Id(a),ArrayType(84,ArrayType(20,ArrayType(1058,ArrayType(371,FloatType))))),param(Id(G),ClassType(Id(_N))),param(Id(_),ClassType(Id(_N))),param(Id(V),ClassType(Id(_N)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(r),ClassType(Id(_u)),None)),AttributeDecl(Static,VarDecl(Id($8),ArrayType(80,BoolType))),AttributeDecl(Instance,VarDecl(Id(_V),ArrayType(80,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(80,BoolType))),AttributeDecl(Instance,VarDecl(Id(w),ArrayType(80,BoolType))),AttributeDecl(Static,VarDecl(Id($aU),ArrayType(80,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 671))

    def test_672(self):
        line = '''Class _{}Class x{Val _E,$F_:_;}Class _{Constructor (){}Val _:Array [Array [Array [Array [Boolean ,0X9_7D],0X8],1_2],064];Val a082:Array [Array [Array [Boolean ,0X9],0B1100100],15];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(x),[AttributeDecl(Instance,ConstDecl(Id(_E),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($F_),ClassType(Id(_)),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(52,ArrayType(12,ArrayType(8,ArrayType(2429,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(a082),ArrayType(15,ArrayType(100,ArrayType(9,BoolType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 672))

    def test_673(self):
        line = '''Class _5:j{}Class __5{_vb_(__,_:t;Y,xP,Z,u,F:__914__1;MP,EN_lT,nJ:w;_:Float ;y5_p_:AQ;__,R98:__;f1,y:Array [String ,0106];C_,_:Array [Boolean ,0x6];U:String ){} }'''
        expect = '''Program([ClassDecl(Id(_5),Id(j),[]),ClassDecl(Id(__5),[MethodDecl(Id(_vb_),Instance,[param(Id(__),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(Y),ClassType(Id(__914__1))),param(Id(xP),ClassType(Id(__914__1))),param(Id(Z),ClassType(Id(__914__1))),param(Id(u),ClassType(Id(__914__1))),param(Id(F),ClassType(Id(__914__1))),param(Id(MP),ClassType(Id(w))),param(Id(EN_lT),ClassType(Id(w))),param(Id(nJ),ClassType(Id(w))),param(Id(_),FloatType),param(Id(y5_p_),ClassType(Id(AQ))),param(Id(__),ClassType(Id(__))),param(Id(R98),ClassType(Id(__))),param(Id(f1),ArrayType(70,StringType)),param(Id(y),ArrayType(70,StringType)),param(Id(C_),ArrayType(6,BoolType)),param(Id(_),ArrayType(6,BoolType)),param(Id(U),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 673))

    def test_674(self):
        line = '''Class _:_2{}Class _4B{__(_,r:U;_,_8_,d:Array [String ,28];_9:Array [Array [Float ,0X8],0X18];_3,_,Ha,_:Boolean ;_o,Q:Array [Array [Array [Array [Float ,5_36],28],0x32],0X18];M7_QY,w7:Array [Boolean ,04_1];_s_:Boolean ;_:String ){}Val A,$4I,g,L:Tdr;}Class F:k{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_2),[]),ClassDecl(Id(_4B),[MethodDecl(Id(__),Instance,[param(Id(_),ClassType(Id(U))),param(Id(r),ClassType(Id(U))),param(Id(_),ArrayType(28,StringType)),param(Id(_8_),ArrayType(28,StringType)),param(Id(d),ArrayType(28,StringType)),param(Id(_9),ArrayType(24,ArrayType(8,FloatType))),param(Id(_3),BoolType),param(Id(_),BoolType),param(Id(Ha),BoolType),param(Id(_),BoolType),param(Id(_o),ArrayType(24,ArrayType(50,ArrayType(28,ArrayType(536,FloatType))))),param(Id(Q),ArrayType(24,ArrayType(50,ArrayType(28,ArrayType(536,FloatType))))),param(Id(M7_QY),ArrayType(33,BoolType)),param(Id(w7),ArrayType(33,BoolType)),param(Id(_s_),BoolType),param(Id(_),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(A),ClassType(Id(Tdr)),None)),AttributeDecl(Static,ConstDecl(Id($4I),ClassType(Id(Tdr)),None)),AttributeDecl(Instance,ConstDecl(Id(g),ClassType(Id(Tdr)),None)),AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(Tdr)),None))]),ClassDecl(Id(F),Id(k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 674))

    def test_675(self):
        line = '''Class _{_(f8,_b:Float ;i_kazL_7Y:pw_u;_:_;h_,O5_:Array [Float ,0b11101];E68,l4,C__HMX_,o32:Array [String ,0xE7_790_13];_:Array [Array [Float ,0B1],0X98];_:_5){}Var _:Array [Float ,053];}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(f8),FloatType),param(Id(_b),FloatType),param(Id(i_kazL_7Y),ClassType(Id(pw_u))),param(Id(_),ClassType(Id(_))),param(Id(h_),ArrayType(29,FloatType)),param(Id(O5_),ArrayType(29,FloatType)),param(Id(E68),ArrayType(242716691,StringType)),param(Id(l4),ArrayType(242716691,StringType)),param(Id(C__HMX_),ArrayType(242716691,StringType)),param(Id(o32),ArrayType(242716691,StringType)),param(Id(_),ArrayType(152,ArrayType(1,FloatType))),param(Id(_),ClassType(Id(_5)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(43,FloatType)))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 675))

    def test_676(self):
        line = '''Class Z6_{}Class QC__2:d{}Class _{Val $P06_,_N,$_:Boolean ;w(j:_s5_;_1zs:Array [Boolean ,050];L,r,F:Array [Array [Array [String ,0x1E],0x1E],0B1011010]){} }Class __:c{Destructor (){} }Class R_:_{}'''
        expect = '''Program([ClassDecl(Id(Z6_),[]),ClassDecl(Id(QC__2),Id(d),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($P06_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_N),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),MethodDecl(Id(w),Instance,[param(Id(j),ClassType(Id(_s5_))),param(Id(_1zs),ArrayType(40,BoolType)),param(Id(L),ArrayType(90,ArrayType(30,ArrayType(30,StringType)))),param(Id(r),ArrayType(90,ArrayType(30,ArrayType(30,StringType)))),param(Id(F),ArrayType(90,ArrayType(30,ArrayType(30,StringType))))],Block([]))]),ClassDecl(Id(__),Id(c),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(R_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 676))

    def test_677(self):
        line = '''Class n7uD{}Class _s5:W{Constructor (){}Var $n_:Array [Array [Array [String ,0x8_A4],0B111110],0X4];_(){}Val $_,$A9:Array [Array [Array [Int ,0b1_1],0x4_5F_D],0121];}Class I:_3y{}Class c4:z{}'''
        expect = '''Program([ClassDecl(Id(n7uD),[]),ClassDecl(Id(_s5),Id(W),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($n_),ArrayType(4,ArrayType(62,ArrayType(2212,StringType))))),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(81,ArrayType(17917,ArrayType(3,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($A9),ArrayType(81,ArrayType(17917,ArrayType(3,IntType))),None))]),ClassDecl(Id(I),Id(_3y),[]),ClassDecl(Id(c4),Id(z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 677))

    def test_678(self):
        line = '''Class _:E_9{Constructor (_9,_p:Array [Float ,0b1000100];_,Y,v_,O:_;_H:String ;_:Array [Int ,0X9];A5_,_:Array [Array [Boolean ,0117],1]){}Constructor (_,_,_6_,_f0:Int ;Ke_:Array [Array [Array [Boolean ,0b1],0X7],0B1]){Break ;} }Class _:M___{}'''
        expect = '''Program([ClassDecl(Id(_),Id(E_9),[MethodDecl(Id(Constructor),Instance,[param(Id(_9),ArrayType(68,FloatType)),param(Id(_p),ArrayType(68,FloatType)),param(Id(_),ClassType(Id(_))),param(Id(Y),ClassType(Id(_))),param(Id(v_),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(_H),StringType),param(Id(_),ArrayType(9,IntType)),param(Id(A5_),ArrayType(1,ArrayType(79,BoolType))),param(Id(_),ArrayType(1,ArrayType(79,BoolType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),IntType),param(Id(_6_),IntType),param(Id(_f0),IntType),param(Id(Ke_),ArrayType(1,ArrayType(7,ArrayType(1,BoolType))))],Block([Break]))]),ClassDecl(Id(_),Id(M___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 678))

    def test_679(self):
        line = '''Class _g_{Constructor (){} }Class H:_{}Class i{Val $53:Array [Array [Float ,03],057];}Class __:Es_{Var J,$_6:Float ;Var $_3:Array [Array [Array [Array [Int ,061],0B1010010],5],02];Var _:_h;}'''
        expect = '''Program([ClassDecl(Id(_g_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(H),Id(_),[]),ClassDecl(Id(i),[AttributeDecl(Static,ConstDecl(Id($53),ArrayType(47,ArrayType(3,FloatType)),None))]),ClassDecl(Id(__),Id(Es_),[AttributeDecl(Instance,VarDecl(Id(J),FloatType)),AttributeDecl(Static,VarDecl(Id($_6),FloatType)),AttributeDecl(Static,VarDecl(Id($_3),ArrayType(2,ArrayType(5,ArrayType(82,ArrayType(49,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_h)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 679))

    def test_680(self):
        line = '''Class _{Constructor (){} }Class _{Destructor (){} }Class r_c7j44XZ2:_{$0(_,k,I,n:Array [Array [String ,0b1011001],0x41];_,_V,_,O,K,_:String ;i2,n,_:Array [String ,0b1011001]){ {} }Var $h_lQ:String ;_2(__,US,d,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(r_c7j44XZ2),Id(_),[MethodDecl(Id($0),Static,[param(Id(_),ArrayType(65,ArrayType(89,StringType))),param(Id(k),ArrayType(65,ArrayType(89,StringType))),param(Id(I),ArrayType(65,ArrayType(89,StringType))),param(Id(n),ArrayType(65,ArrayType(89,StringType))),param(Id(_),StringType),param(Id(_V),StringType),param(Id(_),StringType),param(Id(O),StringType),param(Id(K),StringType),param(Id(_),StringType),param(Id(i2),ArrayType(89,StringType)),param(Id(n),ArrayType(89,StringType)),param(Id(_),ArrayType(89,StringType))],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($h_lQ),StringType)),MethodDecl(Id(_2),Instance,[param(Id(__),BoolType),param(Id(US),BoolType),param(Id(d),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 680))

    def test_681(self):
        line = '''Class m1{Constructor (_V0:Array [Array [Array [Boolean ,0b101110],0B11],0B110010];__0,_,C,K_o:Array [Float ,0X11];_,__,S,__76__:Array [Array [Array [Array [String ,4],0B1],0xCF_0],0xF2_740A];e:Array [Array [Boolean ,1_3],0B110010]){} }'''
        expect = '''Program([ClassDecl(Id(m1),[MethodDecl(Id(Constructor),Instance,[param(Id(_V0),ArrayType(50,ArrayType(3,ArrayType(46,BoolType)))),param(Id(__0),ArrayType(17,FloatType)),param(Id(_),ArrayType(17,FloatType)),param(Id(C),ArrayType(17,FloatType)),param(Id(K_o),ArrayType(17,FloatType)),param(Id(_),ArrayType(15889418,ArrayType(3312,ArrayType(1,ArrayType(4,StringType))))),param(Id(__),ArrayType(15889418,ArrayType(3312,ArrayType(1,ArrayType(4,StringType))))),param(Id(S),ArrayType(15889418,ArrayType(3312,ArrayType(1,ArrayType(4,StringType))))),param(Id(__76__),ArrayType(15889418,ArrayType(3312,ArrayType(1,ArrayType(4,StringType))))),param(Id(e),ArrayType(50,ArrayType(13,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 681))

    def test_682(self):
        line = '''Class Jm7:Yi{Val _p2__n:Boolean ;}Class p{Constructor (w__:Array [Float ,0B10_0];h:_;_1,_a3:lU;w,R,_62:Float ;_4,F,WTpj,_,__:K;_:Array [Array [Boolean ,0B111110],047]){}Destructor (){}Destructor (){} }Class ___0_g:_{}'''
        expect = '''Program([ClassDecl(Id(Jm7),Id(Yi),[AttributeDecl(Instance,ConstDecl(Id(_p2__n),BoolType,None))]),ClassDecl(Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(w__),ArrayType(4,FloatType)),param(Id(h),ClassType(Id(_))),param(Id(_1),ClassType(Id(lU))),param(Id(_a3),ClassType(Id(lU))),param(Id(w),FloatType),param(Id(R),FloatType),param(Id(_62),FloatType),param(Id(_4),ClassType(Id(K))),param(Id(F),ClassType(Id(K))),param(Id(WTpj),ClassType(Id(K))),param(Id(_),ClassType(Id(K))),param(Id(__),ClassType(Id(K))),param(Id(_),ArrayType(39,ArrayType(62,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___0_g),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 682))

    def test_683(self):
        line = '''Class Z{}Class R:v_D{Constructor (){}Constructor (){} }Class _8{Val $3,$2,$8,u:Array [Array [Array [String ,35],0b11_11],0B1];_(_:Array [String ,7_5]){}Val $qP_X,$G,$_:Float ;Var $5g:_;}'''
        expect = '''Program([ClassDecl(Id(Z),[]),ClassDecl(Id(R),Id(v_D),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_8),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(1,ArrayType(15,ArrayType(35,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(1,ArrayType(15,ArrayType(35,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(1,ArrayType(15,ArrayType(35,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(1,ArrayType(15,ArrayType(35,StringType))),None)),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(75,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($qP_X),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($G),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,VarDecl(Id($5g),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 683))

    def test_684(self):
        line = '''Class _{}Class _:_{Var l_:Array [Int ,0140];}Class _:_{Var $5:Array [Array [Array [Array [Array [Boolean ,0x34],0B1000111],0140],0B1000111],19];Var $_:Array [Array [Float ,0B1000111],16];}Class lK_0_:m{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(l_),ArrayType(96,IntType)))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($5),ArrayType(19,ArrayType(71,ArrayType(96,ArrayType(71,ArrayType(52,BoolType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(16,ArrayType(71,FloatType))))]),ClassDecl(Id(lK_0_),Id(m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 684))

    def test_685(self):
        line = '''Class _{Constructor (_:Array [Array [Array [Array [String ,0b101000],78],0X7],067_2_6_12_1];nPt_:Boolean ;Nk:Z;g,Q:Array [Array [Array [Array [String ,0122],0x32],0X51],295]){Var x4,m,r:_;} }Class qk{}Class _K{Val $65,m,$S_0,$_C_,$83:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1813585,ArrayType(7,ArrayType(78,ArrayType(40,StringType))))),param(Id(nPt_),BoolType),param(Id(Nk),ClassType(Id(Z))),param(Id(g),ArrayType(295,ArrayType(81,ArrayType(50,ArrayType(82,StringType))))),param(Id(Q),ArrayType(295,ArrayType(81,ArrayType(50,ArrayType(82,StringType)))))],Block([VarDecl(Id(x4),ClassType(Id(_)),NullLiteral()),VarDecl(Id(m),ClassType(Id(_)),NullLiteral()),VarDecl(Id(r),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(qk),[]),ClassDecl(Id(_K),[AttributeDecl(Static,ConstDecl(Id($65),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(m),IntType,None)),AttributeDecl(Static,ConstDecl(Id($S_0),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_C_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($83),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 685))

    def test_686(self):
        line = '''Class bQ{}Class j:_{_tO3(V,_e,K:_0;_,_:Array [Array [Int ,06_2],0X53];_:Y;u:_){}Plx_z_4(){Break ;}Val $tS,$_vD__:Array [Array [Float ,0b1],0107];Constructor (_3:z;j:String ){} }'''
        expect = '''Program([ClassDecl(Id(bQ),[]),ClassDecl(Id(j),Id(_),[MethodDecl(Id(_tO3),Instance,[param(Id(V),ClassType(Id(_0))),param(Id(_e),ClassType(Id(_0))),param(Id(K),ClassType(Id(_0))),param(Id(_),ArrayType(83,ArrayType(50,IntType))),param(Id(_),ArrayType(83,ArrayType(50,IntType))),param(Id(_),ClassType(Id(Y))),param(Id(u),ClassType(Id(_)))],Block([])),MethodDecl(Id(Plx_z_4),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($tS),ArrayType(71,ArrayType(1,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($_vD__),ArrayType(71,ArrayType(1,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ClassType(Id(z))),param(Id(j),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 686))

    def test_687(self):
        line = '''Class _:r3{Constructor (_,_v,Iv5_:Boolean ;J:_um16;_Z:Array [Array [Array [Float ,06],0b1100010],0X1C];ns8__1,X,R8,_6,t31ES3:_5_;_,F_:String ){}a(r:String ;_,MO:Int ){} }Class D{}'''
        expect = '''Program([ClassDecl(Id(_),Id(r3),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_v),BoolType),param(Id(Iv5_),BoolType),param(Id(J),ClassType(Id(_um16))),param(Id(_Z),ArrayType(28,ArrayType(98,ArrayType(6,FloatType)))),param(Id(ns8__1),ClassType(Id(_5_))),param(Id(X),ClassType(Id(_5_))),param(Id(R8),ClassType(Id(_5_))),param(Id(_6),ClassType(Id(_5_))),param(Id(t31ES3),ClassType(Id(_5_))),param(Id(_),StringType),param(Id(F_),StringType)],Block([])),MethodDecl(Id(a),Instance,[param(Id(r),StringType),param(Id(_),IntType),param(Id(MO),IntType)],Block([]))]),ClassDecl(Id(D),[])])'''
        self.assertTrue(TestAST.test(line, expect, 687))

    def test_688(self):
        line = '''Class l_:_d{Constructor (r:i_21;_5_:String ){Var _,_,_:Array [Array [String ,010],03_744_7];}Val $7,$r3D,$4:Array [Array [Array [Array [Array [Boolean ,56],0b111110],980594],0X15],03];Var _V,$_:Int ;}'''
        expect = '''Program([ClassDecl(Id(l_),Id(_d),[MethodDecl(Id(Constructor),Instance,[param(Id(r),ClassType(Id(i_21))),param(Id(_5_),StringType)],Block([VarDecl(Id(_),ArrayType(16167,ArrayType(8,StringType))),VarDecl(Id(_),ArrayType(16167,ArrayType(8,StringType))),VarDecl(Id(_),ArrayType(16167,ArrayType(8,StringType)))])),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(3,ArrayType(21,ArrayType(980594,ArrayType(62,ArrayType(56,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($r3D),ArrayType(3,ArrayType(21,ArrayType(980594,ArrayType(62,ArrayType(56,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(3,ArrayType(21,ArrayType(980594,ArrayType(62,ArrayType(56,BoolType))))),None)),AttributeDecl(Instance,VarDecl(Id(_V),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 688))

    def test_689(self):
        line = '''Class xj:_{Constructor (S_,d,_:_){Break ;}Destructor (){}R_(z:String ;j,k,L_:Array [Array [Float ,0122],76]){}Constructor (_:Int ){Continue ;}Constructor (_i__:String ){} }'''
        expect = '''Program([ClassDecl(Id(xj),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(S_),ClassType(Id(_))),param(Id(d),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(R_),Instance,[param(Id(z),StringType),param(Id(j),ArrayType(76,ArrayType(82,FloatType))),param(Id(k),ArrayType(76,ArrayType(82,FloatType))),param(Id(L_),ArrayType(76,ArrayType(82,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_i__),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 689))

    def test_690(self):
        line = '''Class L_:_{Var $Y_a6:_;Var $_Ld:Array [Array [String ,2],02];}Class __6_11_{}Class H_4{_3H_8(){}Constructor (__G:_r1_rn;_o3Uh43_i:Array [Array [Array [Array [Boolean ,76],016_53],0b1],4]){}Val B:Float ;}'''
        expect = '''Program([ClassDecl(Id(L_),Id(_),[AttributeDecl(Static,VarDecl(Id($Y_a6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_Ld),ArrayType(2,ArrayType(2,StringType))))]),ClassDecl(Id(__6_11_),[]),ClassDecl(Id(H_4),[MethodDecl(Id(_3H_8),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__G),ClassType(Id(_r1_rn))),param(Id(_o3Uh43_i),ArrayType(4,ArrayType(1,ArrayType(939,ArrayType(76,BoolType)))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(B),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 690))

    def test_691(self):
        line = '''Class _{Constructor (){}Constructor (_x:_;Yz8,V,_:Float ;_e5:Array [Array [Array [Float ,0B1],3_2_8_6_13_6],0x3D_6F7_400_D1C];__:e_H;_:Dt_14Z;_,o_8:Boolean ;__:Boolean ;G2A98,__:Array [Array [Array [Array [Array [Int ,63],0X2],0x4],0x58],63]){}Var $___,zu3r,r:_9t;Var $x_,a_,$_:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_x),ClassType(Id(_))),param(Id(Yz8),FloatType),param(Id(V),FloatType),param(Id(_),FloatType),param(Id(_e5),ArrayType(4221806054684,ArrayType(3286136,ArrayType(1,FloatType)))),param(Id(__),ClassType(Id(e_H))),param(Id(_),ClassType(Id(Dt_14Z))),param(Id(_),BoolType),param(Id(o_8),BoolType),param(Id(__),BoolType),param(Id(G2A98),ArrayType(63,ArrayType(88,ArrayType(4,ArrayType(2,ArrayType(63,IntType)))))),param(Id(__),ArrayType(63,ArrayType(88,ArrayType(4,ArrayType(2,ArrayType(63,IntType))))))],Block([])),AttributeDecl(Static,VarDecl(Id($___),ClassType(Id(_9t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(zu3r),ClassType(Id(_9t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(r),ClassType(Id(_9t)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($x_),FloatType)),AttributeDecl(Instance,VarDecl(Id(a_),FloatType)),AttributeDecl(Static,VarDecl(Id($_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 691))

    def test_692(self):
        line = '''Class z:_{$8(_Ks,_:String ;_,h0:Array [Array [Float ,0100],04];_,P,x:Array [Array [Array [Float ,0b10_1],0x8_A_6_D],0X85];_:String ;_:Array [Boolean ,3_0738]){Break ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(z),Id(_),[MethodDecl(Id($8),Static,[param(Id(_Ks),StringType),param(Id(_),StringType),param(Id(_),ArrayType(4,ArrayType(64,FloatType))),param(Id(h0),ArrayType(4,ArrayType(64,FloatType))),param(Id(_),ArrayType(133,ArrayType(35437,ArrayType(5,FloatType)))),param(Id(P),ArrayType(133,ArrayType(35437,ArrayType(5,FloatType)))),param(Id(x),ArrayType(133,ArrayType(35437,ArrayType(5,FloatType)))),param(Id(_),StringType),param(Id(_),ArrayType(30738,BoolType))],Block([Break,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 692))

    def test_693(self):
        line = '''Class LV_:B_{}Class W{}Class eA{$416(_,d8,_:Array [Array [Array [String ,0B111111],0124],0X49]){} }Class __{$98(_4:Array [Float ,92];d_,Jb2,_,_,K:String ;B,_y,_,eHw79,V:Array [Array [Array [Array [Array [Array [Float ,85],0x3],0b1010010],0124],4_589],03_3]){} }Class __4:q{}Class g{}'''
        expect = '''Program([ClassDecl(Id(LV_),Id(B_),[]),ClassDecl(Id(W),[]),ClassDecl(Id(eA),[MethodDecl(Id($416),Static,[param(Id(_),ArrayType(73,ArrayType(84,ArrayType(63,StringType)))),param(Id(d8),ArrayType(73,ArrayType(84,ArrayType(63,StringType)))),param(Id(_),ArrayType(73,ArrayType(84,ArrayType(63,StringType))))],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($98),Static,[param(Id(_4),ArrayType(92,FloatType)),param(Id(d_),StringType),param(Id(Jb2),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(K),StringType),param(Id(B),ArrayType(27,ArrayType(4589,ArrayType(84,ArrayType(82,ArrayType(3,ArrayType(85,FloatType))))))),param(Id(_y),ArrayType(27,ArrayType(4589,ArrayType(84,ArrayType(82,ArrayType(3,ArrayType(85,FloatType))))))),param(Id(_),ArrayType(27,ArrayType(4589,ArrayType(84,ArrayType(82,ArrayType(3,ArrayType(85,FloatType))))))),param(Id(eHw79),ArrayType(27,ArrayType(4589,ArrayType(84,ArrayType(82,ArrayType(3,ArrayType(85,FloatType))))))),param(Id(V),ArrayType(27,ArrayType(4589,ArrayType(84,ArrayType(82,ArrayType(3,ArrayType(85,FloatType)))))))],Block([]))]),ClassDecl(Id(__4),Id(q),[]),ClassDecl(Id(g),[])])'''
        self.assertTrue(TestAST.test(line, expect, 693))

    def test_694(self):
        line = '''Class c9_0___{Constructor (iT:String ){ {} }Val $0,_:Array [Array [Array [Array [Array [Array [String ,06_5_1],065],065],0b1_0_011_1],97],84];}Class m7X{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(c9_0___),[MethodDecl(Id(Constructor),Instance,[param(Id(iT),StringType)],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(84,ArrayType(97,ArrayType(39,ArrayType(53,ArrayType(53,ArrayType(425,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(84,ArrayType(97,ArrayType(39,ArrayType(53,ArrayType(53,ArrayType(425,StringType)))))),None))]),ClassDecl(Id(m7X),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 694))

    def test_695(self):
        line = '''Class _:EF_{Constructor (_bd:Array [Boolean ,0X2];_P_____:_;_,_L,x2:String ;W,_:Int ){} }Class f0d_:P{h(X,x_:Int ;K7k:Array [String ,0xD];r,kI,_f_:String ){} }Class _:_{Val $8v:Array [Array [String ,80],03_7_56_21];}Class R{}Class N__U:_9_0{}'''
        expect = '''Program([ClassDecl(Id(_),Id(EF_),[MethodDecl(Id(Constructor),Instance,[param(Id(_bd),ArrayType(2,BoolType)),param(Id(_P_____),ClassType(Id(_))),param(Id(_),StringType),param(Id(_L),StringType),param(Id(x2),StringType),param(Id(W),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(f0d_),Id(P),[MethodDecl(Id(h),Instance,[param(Id(X),IntType),param(Id(x_),IntType),param(Id(K7k),ArrayType(13,StringType)),param(Id(r),StringType),param(Id(kI),StringType),param(Id(_f_),StringType)],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($8v),ArrayType(129937,ArrayType(80,StringType)),None))]),ClassDecl(Id(R),[]),ClassDecl(Id(N__U),Id(_9_0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 695))

    def test_696(self):
        line = '''Class _:____{Constructor (mw:W;RK_4,F,v_2c7,_:Array [Boolean ,62];_:Array [Boolean ,0b10_0];v,_c,x:Array [Array [Array [Array [Array [Array [Array [Float ,0b1000100],07_6],0B111101],31],0x4_8_3_B_F],544],31]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(____),[MethodDecl(Id(Constructor),Instance,[param(Id(mw),ClassType(Id(W))),param(Id(RK_4),ArrayType(62,BoolType)),param(Id(F),ArrayType(62,BoolType)),param(Id(v_2c7),ArrayType(62,BoolType)),param(Id(_),ArrayType(62,BoolType)),param(Id(_),ArrayType(4,BoolType)),param(Id(v),ArrayType(31,ArrayType(544,ArrayType(295871,ArrayType(31,ArrayType(61,ArrayType(62,ArrayType(68,FloatType)))))))),param(Id(_c),ArrayType(31,ArrayType(544,ArrayType(295871,ArrayType(31,ArrayType(61,ArrayType(62,ArrayType(68,FloatType)))))))),param(Id(x),ArrayType(31,ArrayType(544,ArrayType(295871,ArrayType(31,ArrayType(61,ArrayType(62,ArrayType(68,FloatType))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 696))

    def test_697(self):
        line = '''Class _{Val $u_D79E,J4,_,$__5:Array [Array [Array [Array [Array [Array [String ,0X8],0x2_C],07],0B1_00],072_5],04];}Class R_B:Y{Constructor (x__55H,T:Array [Array [Float ,0b1100001],0x35]){}Val $G_,$8__:String ;}Class __{Var _:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($u_D79E),ArrayType(4,ArrayType(469,ArrayType(4,ArrayType(7,ArrayType(44,ArrayType(8,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(J4),ArrayType(4,ArrayType(469,ArrayType(4,ArrayType(7,ArrayType(44,ArrayType(8,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,ArrayType(469,ArrayType(4,ArrayType(7,ArrayType(44,ArrayType(8,StringType)))))),None)),AttributeDecl(Static,ConstDecl(Id($__5),ArrayType(4,ArrayType(469,ArrayType(4,ArrayType(7,ArrayType(44,ArrayType(8,StringType)))))),None))]),ClassDecl(Id(R_B),Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(x__55H),ArrayType(53,ArrayType(97,FloatType))),param(Id(T),ArrayType(53,ArrayType(97,FloatType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($G_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8__),StringType,None))]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(_),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 697))

    def test_698(self):
        line = '''Class _2I_{}Class _k{}Class cVN:_{}Class GK_{X(){R_::$3_3().U._().l();}Val Q__:y;I(_,_3gK:Array [Array [Float ,2],0X63];k_1r:Array [Array [Boolean ,2],0b1]){}Var $r:Array [Boolean ,0X57];}Class Z:g{Constructor (){} }Class n:r32eQ5w4__3{}'''
        expect = '''Program([ClassDecl(Id(_2I_),[]),ClassDecl(Id(_k),[]),ClassDecl(Id(cVN),Id(_),[]),ClassDecl(Id(GK_),[MethodDecl(Id(X),Instance,[],Block([Call(CallExpr(FieldAccess(CallExpr(Id(R_),Id($3_3),[]),Id(U)),Id(_),[]),Id(l),[])])),AttributeDecl(Instance,ConstDecl(Id(Q__),ClassType(Id(y)),None)),MethodDecl(Id(I),Instance,[param(Id(_),ArrayType(99,ArrayType(2,FloatType))),param(Id(_3gK),ArrayType(99,ArrayType(2,FloatType))),param(Id(k_1r),ArrayType(1,ArrayType(2,BoolType)))],Block([])),AttributeDecl(Static,VarDecl(Id($r),ArrayType(87,BoolType)))]),ClassDecl(Id(Z),Id(g),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(n),Id(r32eQ5w4__3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 698))

    def test_699(self):
        line = '''Class t{Constructor (_,_:x__){}Destructor (){}_7R(d:Array [Array [Array [Float ,0x2],87],065]){_::$_2h_();}Var _,$_,_:Array [Boolean ,0B1100011];Constructor (fpd35f32W:Array [Array [Array [String ,0b111110],0B1],065]){Continue ;}Destructor (){Continue ;Return ;} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(x__))),param(Id(_),ClassType(Id(x__)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_7R),Instance,[param(Id(d),ArrayType(53,ArrayType(87,ArrayType(2,FloatType))))],Block([Call(Id(_),Id($_2h_),[])])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(99,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(99,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(99,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(fpd35f32W),ArrayType(53,ArrayType(1,ArrayType(62,StringType))))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 699))

    def test_700(self):
        line = '''Class _:m{Constructor (){}Var X,$__:Float ;Destructor (){Continue ;}Val c:Array [Boolean ,6_5];Val $d,$Um,$_,z:Array [Array [Array [Array [Array [Boolean ,27],0b11_1],5],0X24],0b1111];}'''
        expect = '''Program([ClassDecl(Id(_),Id(m),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(X),FloatType)),AttributeDecl(Static,VarDecl(Id($__),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(c),ArrayType(65,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($d),ArrayType(15,ArrayType(36,ArrayType(5,ArrayType(7,ArrayType(27,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($Um),ArrayType(15,ArrayType(36,ArrayType(5,ArrayType(7,ArrayType(27,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(15,ArrayType(36,ArrayType(5,ArrayType(7,ArrayType(27,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(15,ArrayType(36,ArrayType(5,ArrayType(7,ArrayType(27,BoolType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 700))

    def test_701(self):
        line = '''Class f_gT_{Constructor (s:Array [Array [Array [Int ,30],0x27],30];c,_,O:Array [Boolean ,0x27]){}Val $0:Float ;}Class _{}Class K{Var TR1:Int ;Var __,M:Array [Array [Int ,0b1],32];}'''
        expect = '''Program([ClassDecl(Id(f_gT_),[MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(30,ArrayType(39,ArrayType(30,IntType)))),param(Id(c),ArrayType(39,BoolType)),param(Id(_),ArrayType(39,BoolType)),param(Id(O),ArrayType(39,BoolType))],Block([])),AttributeDecl(Static,ConstDecl(Id($0),FloatType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(K),[AttributeDecl(Instance,VarDecl(Id(TR1),IntType)),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(32,ArrayType(1,IntType)))),AttributeDecl(Instance,VarDecl(Id(M),ArrayType(32,ArrayType(1,IntType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 701))

    def test_702(self):
        line = '''Class M:_{Var _:Array [Boolean ,20];Constructor (i:Array [Array [Array [String ,20],0B1_00],065];_E_,__x,__96__:Array [Int ,0X60];w:Boolean ;__:Float ;_:Array [Int ,07]){} }Class _03{}Class W{}Class u_{}'''
        expect = '''Program([ClassDecl(Id(M),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(20,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(i),ArrayType(53,ArrayType(4,ArrayType(20,StringType)))),param(Id(_E_),ArrayType(96,IntType)),param(Id(__x),ArrayType(96,IntType)),param(Id(__96__),ArrayType(96,IntType)),param(Id(w),BoolType),param(Id(__),FloatType),param(Id(_),ArrayType(7,IntType))],Block([]))]),ClassDecl(Id(_03),[]),ClassDecl(Id(W),[]),ClassDecl(Id(u_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 702))

    def test_703(self):
        line = '''Class VxSt:o{Val $I9_r,h_:Array [Boolean ,0x4F];Constructor (____R,_,e:b){} }Class __{Constructor (_f,E:Array [Array [Array [Boolean ,044],0x4F],044]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(VxSt),Id(o),[AttributeDecl(Static,ConstDecl(Id($I9_r),ArrayType(79,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(h_),ArrayType(79,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(____R),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(e),ClassType(Id(b)))],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_f),ArrayType(36,ArrayType(79,ArrayType(36,BoolType)))),param(Id(E),ArrayType(36,ArrayType(79,ArrayType(36,BoolType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 703))

    def test_704(self):
        line = '''Class T:N_6Z{Destructor (){} }Class __:_ay_w{}Class __:e{}Class _:___A{}Class _:m{Constructor (__s,Z0_6,Tgs:Array [Float ,02_3];_82,_74,_f:String ;F_C57:Array [Int ,0XA_0C]){} }'''
        expect = '''Program([ClassDecl(Id(T),Id(N_6Z),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(_ay_w),[]),ClassDecl(Id(__),Id(e),[]),ClassDecl(Id(_),Id(___A),[]),ClassDecl(Id(_),Id(m),[MethodDecl(Id(Constructor),Instance,[param(Id(__s),ArrayType(19,FloatType)),param(Id(Z0_6),ArrayType(19,FloatType)),param(Id(Tgs),ArrayType(19,FloatType)),param(Id(_82),StringType),param(Id(_74),StringType),param(Id(_f),StringType),param(Id(F_C57),ArrayType(2572,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 704))

    def test_705(self):
        line = '''Class o_5q{Val _:Boolean ;$_G_(_r_813:Int ;R,_2,R,_,_,_:_;G,R:Array [Array [Array [Boolean ,21],8],0X1_8];_,_,U,I717,I9:B;_:v;Y_5Y,p,_:Array [Array [Array [Array [String ,21],0b1_10],03],0b111000]){}Constructor (q,P1_,_:Int ;z,__,nC67,_:Array [Array [String ,2],06];Mo:__;_v_Q7rA,mq:Array [Array [String ,0x39],02]){} }Class I{}'''
        expect = '''Program([ClassDecl(Id(o_5q),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id($_G_),Static,[param(Id(_r_813),IntType),param(Id(R),ClassType(Id(_))),param(Id(_2),ClassType(Id(_))),param(Id(R),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(G),ArrayType(24,ArrayType(8,ArrayType(21,BoolType)))),param(Id(R),ArrayType(24,ArrayType(8,ArrayType(21,BoolType)))),param(Id(_),ClassType(Id(B))),param(Id(_),ClassType(Id(B))),param(Id(U),ClassType(Id(B))),param(Id(I717),ClassType(Id(B))),param(Id(I9),ClassType(Id(B))),param(Id(_),ClassType(Id(v))),param(Id(Y_5Y),ArrayType(56,ArrayType(3,ArrayType(6,ArrayType(21,StringType))))),param(Id(p),ArrayType(56,ArrayType(3,ArrayType(6,ArrayType(21,StringType))))),param(Id(_),ArrayType(56,ArrayType(3,ArrayType(6,ArrayType(21,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(q),IntType),param(Id(P1_),IntType),param(Id(_),IntType),param(Id(z),ArrayType(6,ArrayType(2,StringType))),param(Id(__),ArrayType(6,ArrayType(2,StringType))),param(Id(nC67),ArrayType(6,ArrayType(2,StringType))),param(Id(_),ArrayType(6,ArrayType(2,StringType))),param(Id(Mo),ClassType(Id(__))),param(Id(_v_Q7rA),ArrayType(2,ArrayType(57,StringType))),param(Id(mq),ArrayType(2,ArrayType(57,StringType)))],Block([]))]),ClassDecl(Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 705))

    def test_706(self):
        line = '''Class _4__:_{}Class __7{}Class s:_Z974{Var $N,$_,$_,$t5:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,04],0X37],49],8],0B1111],0b100100],0x1F],0B1],0xB_9];}'''
        expect = '''Program([ClassDecl(Id(_4__),Id(_),[]),ClassDecl(Id(__7),[]),ClassDecl(Id(s),Id(_Z974),[AttributeDecl(Static,VarDecl(Id($N),ArrayType(185,ArrayType(1,ArrayType(31,ArrayType(36,ArrayType(15,ArrayType(8,ArrayType(49,ArrayType(55,ArrayType(4,IntType))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(185,ArrayType(1,ArrayType(31,ArrayType(36,ArrayType(15,ArrayType(8,ArrayType(49,ArrayType(55,ArrayType(4,IntType))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(185,ArrayType(1,ArrayType(31,ArrayType(36,ArrayType(15,ArrayType(8,ArrayType(49,ArrayType(55,ArrayType(4,IntType))))))))))),AttributeDecl(Static,VarDecl(Id($t5),ArrayType(185,ArrayType(1,ArrayType(31,ArrayType(36,ArrayType(15,ArrayType(8,ArrayType(49,ArrayType(55,ArrayType(4,IntType)))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 706))

    def test_707(self):
        line = '''Class QC{Val _N_:Array [Array [Array [Boolean ,0X3],0B1_0_0],56];$W(C,_Z:Array [Boolean ,06];qc03__7__:Array [Boolean ,56];_4_,T:Array [Boolean ,0B111101];d5:ir){} }Class L_{}'''
        expect = '''Program([ClassDecl(Id(QC),[AttributeDecl(Instance,ConstDecl(Id(_N_),ArrayType(56,ArrayType(4,ArrayType(3,BoolType))),None)),MethodDecl(Id($W),Static,[param(Id(C),ArrayType(6,BoolType)),param(Id(_Z),ArrayType(6,BoolType)),param(Id(qc03__7__),ArrayType(56,BoolType)),param(Id(_4_),ArrayType(61,BoolType)),param(Id(T),ArrayType(61,BoolType)),param(Id(d5),ClassType(Id(ir)))],Block([]))]),ClassDecl(Id(L_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 707))

    def test_708(self):
        line = '''Class _U_{Val $9:Int ;_(_,_,S:Array [Array [Array [Array [Int ,0B110_1_0],0140],06_3725],7_0];u_:a;m:Array [Array [String ,61],6];g:Array [Array [Array [Array [Array [Array [Array [Array [String ,5],61],0x4],07_5],61],0B1000111],07],0x5E_3_2_B86D]){} }'''
        expect = '''Program([ClassDecl(Id(_U_),[AttributeDecl(Static,ConstDecl(Id($9),IntType,None)),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(70,ArrayType(26581,ArrayType(96,ArrayType(26,IntType))))),param(Id(_),ArrayType(70,ArrayType(26581,ArrayType(96,ArrayType(26,IntType))))),param(Id(S),ArrayType(70,ArrayType(26581,ArrayType(96,ArrayType(26,IntType))))),param(Id(u_),ClassType(Id(a))),param(Id(m),ArrayType(6,ArrayType(61,StringType))),param(Id(g),ArrayType(1580382317,ArrayType(7,ArrayType(71,ArrayType(61,ArrayType(61,ArrayType(4,ArrayType(61,ArrayType(5,StringType)))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 708))

    def test_709(self):
        line = '''Class _{}Class WU_1N99{$_x(__:Array [Array [Array [Array [Array [Array [Float ,6_1_4],6582],030],030],0xE],0x1];__,PQ085_:Array [Array [Float ,36],0B101010];_,C,__,s38:Array [String ,0b1100010]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(WU_1N99),[MethodDecl(Id($_x),Static,[param(Id(__),ArrayType(1,ArrayType(14,ArrayType(24,ArrayType(24,ArrayType(6582,ArrayType(614,FloatType))))))),param(Id(__),ArrayType(42,ArrayType(36,FloatType))),param(Id(PQ085_),ArrayType(42,ArrayType(36,FloatType))),param(Id(_),ArrayType(98,StringType)),param(Id(C),ArrayType(98,StringType)),param(Id(__),ArrayType(98,StringType)),param(Id(s38),ArrayType(98,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 709))

    def test_710(self):
        line = '''Class s2{Destructor (){Continue ;Break ;}Var B,_:r9;$0_(__L:Array [Float ,0X19];_:Array [String ,0X4B]){Break ;}$J(W__1:_){}Val $3,$_L:m;Val _:Boolean ;Var _,_:Float ;_8(){}Constructor (S1W30i:Int ;Mk:Array [Array [Int ,0x7],0X4B]){}Var $_,$6,$3:F;}'''
        expect = '''Program([ClassDecl(Id(s2),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Break])),AttributeDecl(Instance,VarDecl(Id(B),ClassType(Id(r9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r9)),NullLiteral())),MethodDecl(Id($0_),Static,[param(Id(__L),ArrayType(25,FloatType)),param(Id(_),ArrayType(75,StringType))],Block([Break])),MethodDecl(Id($J),Static,[param(Id(W__1),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ClassType(Id(m)),None)),AttributeDecl(Static,ConstDecl(Id($_L),ClassType(Id(m)),None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),MethodDecl(Id(_8),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S1W30i),IntType),param(Id(Mk),ArrayType(75,ArrayType(7,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(F)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 710))

    def test_711(self):
        line = '''Class V:_1x_{Destructor (){}Constructor (_:BIp;E:Array [Int ,0B1001111];_T:Array [Array [Array [Array [String ,0x4E],0xA],06],0B1001111]){} }Class T_{Destructor (){Var _:c8;Continue ;} }Class PkF_:Z{Val g,$7,$p__:String ;}'''
        expect = '''Program([ClassDecl(Id(V),Id(_1x_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(BIp))),param(Id(E),ArrayType(79,IntType)),param(Id(_T),ArrayType(79,ArrayType(6,ArrayType(10,ArrayType(78,StringType)))))],Block([]))]),ClassDecl(Id(T_),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),ClassType(Id(c8)),NullLiteral()),Continue]))]),ClassDecl(Id(PkF_),Id(Z),[AttributeDecl(Instance,ConstDecl(Id(g),StringType,None)),AttributeDecl(Static,ConstDecl(Id($7),StringType,None)),AttributeDecl(Static,ConstDecl(Id($p__),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 711))

    def test_712(self):
        line = '''Class __:O2{Val $5:Array [Array [Int ,0B10000],6];__(S,_2:_3){} }Class s{Var $_:Float ;Constructor (vgX1_,_,m_X_,_,_:Array [Array [Array [Int ,04_2],032],19]){} }Class _{}Class _{$eN_W0_1(){}$U_(s3:String ){_t::$J();}Constructor (V:F_A;E42:Array [String ,032];_:_x;hi,U:Array [Array [Array [Array [Boolean ,0x1D],0B10000],0X1_A_493],0XD]){}Destructor (){}Constructor (_R:_){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(O2),[AttributeDecl(Static,ConstDecl(Id($5),ArrayType(6,ArrayType(16,IntType)),None)),MethodDecl(Id(__),Instance,[param(Id(S),ClassType(Id(_3))),param(Id(_2),ClassType(Id(_3)))],Block([]))]),ClassDecl(Id(s),[AttributeDecl(Static,VarDecl(Id($_),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(vgX1_),ArrayType(19,ArrayType(26,ArrayType(34,IntType)))),param(Id(_),ArrayType(19,ArrayType(26,ArrayType(34,IntType)))),param(Id(m_X_),ArrayType(19,ArrayType(26,ArrayType(34,IntType)))),param(Id(_),ArrayType(19,ArrayType(26,ArrayType(34,IntType)))),param(Id(_),ArrayType(19,ArrayType(26,ArrayType(34,IntType))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id($eN_W0_1),Static,[],Block([])),MethodDecl(Id($U_),Static,[param(Id(s3),StringType)],Block([Call(Id(_t),Id($J),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(V),ClassType(Id(F_A))),param(Id(E42),ArrayType(26,StringType)),param(Id(_),ClassType(Id(_x))),param(Id(hi),ArrayType(13,ArrayType(107667,ArrayType(16,ArrayType(29,BoolType))))),param(Id(U),ArrayType(13,ArrayType(107667,ArrayType(16,ArrayType(29,BoolType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_R),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 712))

    def test_713(self):
        line = '''Class _{Val xN,$__brU,FN_I:String ;Val _:Float ;Constructor (m1,_5,u__,_,_:String ;__0i2,DY,_:Array [Array [Array [Int ,0xD],0X5],0b110101]){}Var S_,$1___:Array [Array [Array [Array [Float ,0171],0xE],0X5],1];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(xN),StringType,None)),AttributeDecl(Static,ConstDecl(Id($__brU),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(FN_I),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(m1),StringType),param(Id(_5),StringType),param(Id(u__),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(__0i2),ArrayType(53,ArrayType(5,ArrayType(13,IntType)))),param(Id(DY),ArrayType(53,ArrayType(5,ArrayType(13,IntType)))),param(Id(_),ArrayType(53,ArrayType(5,ArrayType(13,IntType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(S_),ArrayType(1,ArrayType(5,ArrayType(14,ArrayType(121,FloatType)))))),AttributeDecl(Static,VarDecl(Id($1___),ArrayType(1,ArrayType(5,ArrayType(14,ArrayType(121,FloatType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 713))

    def test_714(self):
        line = '''Class R:K{g(qQ,Z__9,__c,gL_,Qr__Q,g_s,a:_;_099_:Array [Int ,8]){} }Class o{Constructor (){}Val o5L:_;}Class __ui{X8(b6,Z:String ;e,_G,_,b__:Array [Float ,0x11]){} }'''
        expect = '''Program([ClassDecl(Id(R),Id(K),[MethodDecl(Id(g),Instance,[param(Id(qQ),ClassType(Id(_))),param(Id(Z__9),ClassType(Id(_))),param(Id(__c),ClassType(Id(_))),param(Id(gL_),ClassType(Id(_))),param(Id(Qr__Q),ClassType(Id(_))),param(Id(g_s),ClassType(Id(_))),param(Id(a),ClassType(Id(_))),param(Id(_099_),ArrayType(8,IntType))],Block([]))]),ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(o5L),ClassType(Id(_)),None))]),ClassDecl(Id(__ui),[MethodDecl(Id(X8),Instance,[param(Id(b6),StringType),param(Id(Z),StringType),param(Id(e),ArrayType(17,FloatType)),param(Id(_G),ArrayType(17,FloatType)),param(Id(_),ArrayType(17,FloatType)),param(Id(b__),ArrayType(17,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 714))

    def test_715(self):
        line = '''Class b5{$g(_:f;_:k;_,K,zZ:String ;X,_:Array [Float ,0x38];__,_GN,v,u,_5,_,_5,__,b_,_O89_JR,_4B_:Float ;iN:Array [Array [Array [Boolean ,06_7],04],16]){} }Class _{}Class l{}'''
        expect = '''Program([ClassDecl(Id(b5),[MethodDecl(Id($g),Static,[param(Id(_),ClassType(Id(f))),param(Id(_),ClassType(Id(k))),param(Id(_),StringType),param(Id(K),StringType),param(Id(zZ),StringType),param(Id(X),ArrayType(56,FloatType)),param(Id(_),ArrayType(56,FloatType)),param(Id(__),FloatType),param(Id(_GN),FloatType),param(Id(v),FloatType),param(Id(u),FloatType),param(Id(_5),FloatType),param(Id(_),FloatType),param(Id(_5),FloatType),param(Id(__),FloatType),param(Id(b_),FloatType),param(Id(_O89_JR),FloatType),param(Id(_4B_),FloatType),param(Id(iN),ArrayType(16,ArrayType(4,ArrayType(55,BoolType))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 715))

    def test_716(self):
        line = '''Class O:GPg{$g(m_k_,_,o:G_6_){}Val $g,_M2,$7P_,$_8:Array [Float ,01];Constructor (e:us;_zn_,QJ:Array [Array [Array [Array [Array [Array [Int ,0135],07_2],0b1010111],36],01_2_64],0B11];f:String ){}$_(_:Float ;_:Boolean ){} }Class c9Q{}Class M5_:_E{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(O),Id(GPg),[MethodDecl(Id($g),Static,[param(Id(m_k_),ClassType(Id(G_6_))),param(Id(_),ClassType(Id(G_6_))),param(Id(o),ClassType(Id(G_6_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($g),ArrayType(1,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_M2),ArrayType(1,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($7P_),ArrayType(1,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_8),ArrayType(1,FloatType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(e),ClassType(Id(us))),param(Id(_zn_),ArrayType(3,ArrayType(692,ArrayType(36,ArrayType(87,ArrayType(58,ArrayType(93,IntType))))))),param(Id(QJ),ArrayType(3,ArrayType(692,ArrayType(36,ArrayType(87,ArrayType(58,ArrayType(93,IntType))))))),param(Id(f),StringType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_),FloatType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(c9Q),[]),ClassDecl(Id(M5_),Id(_E),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 716))

    def test_717(self):
        line = '''Class _26{Destructor (){ {}Val K,_:_;Continue ;} }Class P0{Constructor (v_:Array [Array [Array [Float ,6_1_0_1],23],0xA]){} }Class I_zs:_{Destructor (){}$3H(){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_26),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),ConstDecl(Id(K),ClassType(Id(_)),None),ConstDecl(Id(_),ClassType(Id(_)),None),Continue]))]),ClassDecl(Id(P0),[MethodDecl(Id(Constructor),Instance,[param(Id(v_),ArrayType(10,ArrayType(23,ArrayType(6101,FloatType))))],Block([]))]),ClassDecl(Id(I_zs),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($3H),Static,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 717))

    def test_718(self):
        line = '''Class __{}Class R:X{}Class g:_{$_(E_A_h____923_:Array [Array [Array [Array [Array [Array [Array [Boolean ,18],0x37],7_4_08],0x37],9],06],0B1]){} }Class h{Var n,_,$4__:Array [Float ,0b1];}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(R),Id(X),[]),ClassDecl(Id(g),Id(_),[MethodDecl(Id($_),Static,[param(Id(E_A_h____923_),ArrayType(1,ArrayType(6,ArrayType(9,ArrayType(55,ArrayType(7408,ArrayType(55,ArrayType(18,BoolType))))))))],Block([]))]),ClassDecl(Id(h),[AttributeDecl(Instance,VarDecl(Id(n),ArrayType(1,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,FloatType))),AttributeDecl(Static,VarDecl(Id($4__),ArrayType(1,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 718))

    def test_719(self):
        line = '''Class _{}Class _{Constructor (__,D,N:Array [Array [Array [Array [Float ,86],0x2B],0b10001],0110];R__v,_,Wmk3:Float ;_,_,B71,_:Array [Array [Array [Array [Boolean ,0b10001],0b10],0x2],0X1757D];L:Int ){}Var _u557,$4l:Array [Array [Float ,06_44],6096];Destructor (){} }Class R{}Class _8:K8{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(72,ArrayType(17,ArrayType(43,ArrayType(86,FloatType))))),param(Id(D),ArrayType(72,ArrayType(17,ArrayType(43,ArrayType(86,FloatType))))),param(Id(N),ArrayType(72,ArrayType(17,ArrayType(43,ArrayType(86,FloatType))))),param(Id(R__v),FloatType),param(Id(_),FloatType),param(Id(Wmk3),FloatType),param(Id(_),ArrayType(95613,ArrayType(2,ArrayType(2,ArrayType(17,BoolType))))),param(Id(_),ArrayType(95613,ArrayType(2,ArrayType(2,ArrayType(17,BoolType))))),param(Id(B71),ArrayType(95613,ArrayType(2,ArrayType(2,ArrayType(17,BoolType))))),param(Id(_),ArrayType(95613,ArrayType(2,ArrayType(2,ArrayType(17,BoolType))))),param(Id(L),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_u557),ArrayType(6096,ArrayType(420,FloatType)))),AttributeDecl(Static,VarDecl(Id($4l),ArrayType(6096,ArrayType(420,FloatType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(R),[]),ClassDecl(Id(_8),Id(K8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 719))

    def test_720(self):
        line = '''Class _:b{}Class z{Constructor (_,aL:Array [Float ,84];_9g:Array [Float ,3_8_42_94]){Var Smw:Float ;}Constructor (_u_:Array [Boolean ,0X15]){ {} }Constructor (_4,y,_,B,R,V:Array [String ,0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(b),[]),ClassDecl(Id(z),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(84,FloatType)),param(Id(aL),ArrayType(84,FloatType)),param(Id(_9g),ArrayType(384294,FloatType))],Block([VarDecl(Id(Smw),FloatType)])),MethodDecl(Id(Constructor),Instance,[param(Id(_u_),ArrayType(21,BoolType))],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(_4),ArrayType(1,StringType)),param(Id(y),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(B),ArrayType(1,StringType)),param(Id(R),ArrayType(1,StringType)),param(Id(V),ArrayType(1,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 720))

    def test_721(self):
        line = '''Class _{Constructor (O:_3a;H,E16,_a,g,_,_91Hr,_883,k08:_22;u,_h:_;__7l_:Array [Array [Array [Boolean ,062_0],0B1010011],33]){}Destructor (){} }Class _{$w_(_0,D,__:Float ;s27,k:___6){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(O),ClassType(Id(_3a))),param(Id(H),ClassType(Id(_22))),param(Id(E16),ClassType(Id(_22))),param(Id(_a),ClassType(Id(_22))),param(Id(g),ClassType(Id(_22))),param(Id(_),ClassType(Id(_22))),param(Id(_91Hr),ClassType(Id(_22))),param(Id(_883),ClassType(Id(_22))),param(Id(k08),ClassType(Id(_22))),param(Id(u),ClassType(Id(_))),param(Id(_h),ClassType(Id(_))),param(Id(__7l_),ArrayType(33,ArrayType(83,ArrayType(400,BoolType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($w_),Static,[param(Id(_0),FloatType),param(Id(D),FloatType),param(Id(__),FloatType),param(Id(s27),ClassType(Id(___6))),param(Id(k),ClassType(Id(___6)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 721))

    def test_722(self):
        line = '''Class q:Y{Constructor (u3:__;_q,_:_6__6o2_;gX_,_:_;_,_:Array [Array [Int ,73],2];xd,ZT:t;_eu:Array [Array [Array [Int ,4],0B101101],025];_:Array [String ,8];M:p2){}Destructor (){Val _10,_,_8,_694_4,f:_;} }'''
        expect = '''Program([ClassDecl(Id(q),Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(u3),ClassType(Id(__))),param(Id(_q),ClassType(Id(_6__6o2_))),param(Id(_),ClassType(Id(_6__6o2_))),param(Id(gX_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(2,ArrayType(73,IntType))),param(Id(_),ArrayType(2,ArrayType(73,IntType))),param(Id(xd),ClassType(Id(t))),param(Id(ZT),ClassType(Id(t))),param(Id(_eu),ArrayType(21,ArrayType(45,ArrayType(4,IntType)))),param(Id(_),ArrayType(8,StringType)),param(Id(M),ClassType(Id(p2)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_10),ClassType(Id(_)),None),ConstDecl(Id(_),ClassType(Id(_)),None),ConstDecl(Id(_8),ClassType(Id(_)),None),ConstDecl(Id(_694_4),ClassType(Id(_)),None),ConstDecl(Id(f),ClassType(Id(_)),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 722))

    def test_723(self):
        line = '''Class _:_{Val $l,$___,T9:Array [Array [Array [String ,0b11],0b11],0x8];Val _:x;}Class E:_{}Class __:sF4{Val $Y,$Q_:_;}Class __{$_(){} }Class __{}Class _71py{Val u,$_F0o:H;}Class Q:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($l),ArrayType(8,ArrayType(3,ArrayType(3,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($___),ArrayType(8,ArrayType(3,ArrayType(3,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(T9),ArrayType(8,ArrayType(3,ArrayType(3,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(x)),None))]),ClassDecl(Id(E),Id(_),[]),ClassDecl(Id(__),Id(sF4),[AttributeDecl(Static,ConstDecl(Id($Y),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($Q_),ClassType(Id(_)),None))]),ClassDecl(Id(__),[MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(_71py),[AttributeDecl(Instance,ConstDecl(Id(u),ClassType(Id(H)),None)),AttributeDecl(Static,ConstDecl(Id($_F0o),ClassType(Id(H)),None))]),ClassDecl(Id(Q),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 723))

    def test_724(self):
        line = '''Class _:_{}Class _E9:_{Var __:Array [Array [Array [Boolean ,0B110],14],2_11];}Class _y{Constructor (_:Array [String ,0x1_5_2];u_,j,C,_c:Array [String ,0x9]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_E9),Id(_),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(211,ArrayType(14,ArrayType(6,BoolType)))))]),ClassDecl(Id(_y),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(338,StringType)),param(Id(u_),ArrayType(9,StringType)),param(Id(j),ArrayType(9,StringType)),param(Id(C),ArrayType(9,StringType)),param(Id(_c),ArrayType(9,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 724))

    def test_725(self):
        line = '''Class __{Constructor (ZC6,d,P,_,_:Array [Array [Float ,14],0x5_D5];DX,N,B,_8_,_,_:Float ;_7,_:Xz0){}Val $S,_4,L82,$B,_,$s:Array [Array [Array [Array [String ,0b1],0b10010],04],0x5D];}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(ZC6),ArrayType(1493,ArrayType(14,FloatType))),param(Id(d),ArrayType(1493,ArrayType(14,FloatType))),param(Id(P),ArrayType(1493,ArrayType(14,FloatType))),param(Id(_),ArrayType(1493,ArrayType(14,FloatType))),param(Id(_),ArrayType(1493,ArrayType(14,FloatType))),param(Id(DX),FloatType),param(Id(N),FloatType),param(Id(B),FloatType),param(Id(_8_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_7),ClassType(Id(Xz0))),param(Id(_),ClassType(Id(Xz0)))],Block([])),AttributeDecl(Static,ConstDecl(Id($S),ArrayType(93,ArrayType(4,ArrayType(18,ArrayType(1,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(93,ArrayType(4,ArrayType(18,ArrayType(1,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(L82),ArrayType(93,ArrayType(4,ArrayType(18,ArrayType(1,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($B),ArrayType(93,ArrayType(4,ArrayType(18,ArrayType(1,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(93,ArrayType(4,ArrayType(18,ArrayType(1,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($s),ArrayType(93,ArrayType(4,ArrayType(18,ArrayType(1,StringType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 725))

    def test_726(self):
        line = '''Class _{Constructor (_G6_,N,r1:Boolean ;__:Array [Array [Float ,0b1_01_0_1],0b111]){}$144(){}Constructor (_:Boolean ;_71_TF,_,H3:String ){}Val $3:Array [Boolean ,0B11101];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_G6_),BoolType),param(Id(N),BoolType),param(Id(r1),BoolType),param(Id(__),ArrayType(7,ArrayType(21,FloatType)))],Block([])),MethodDecl(Id($144),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_71_TF),StringType),param(Id(_),StringType),param(Id(H3),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(29,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 726))

    def test_727(self):
        line = '''Class K9_4_:_4{Val Q,$L_O88a,Mm:Array [Array [Array [Array [Array [Boolean ,021],0B101111],0B101111],0x6],0b10];}Class h:_{Val _u_:Array [Array [Float ,1],0b110000];}Class O:_1{}Class e:W1_{_(_:j){Break ;} }'''
        expect = '''Program([ClassDecl(Id(K9_4_),Id(_4),[AttributeDecl(Instance,ConstDecl(Id(Q),ArrayType(2,ArrayType(6,ArrayType(47,ArrayType(47,ArrayType(17,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($L_O88a),ArrayType(2,ArrayType(6,ArrayType(47,ArrayType(47,ArrayType(17,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(Mm),ArrayType(2,ArrayType(6,ArrayType(47,ArrayType(47,ArrayType(17,BoolType))))),None))]),ClassDecl(Id(h),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_u_),ArrayType(48,ArrayType(1,FloatType)),None))]),ClassDecl(Id(O),Id(_1),[]),ClassDecl(Id(e),Id(W1_),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(j)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 727))

    def test_728(self):
        line = '''Class _:_8{Val $S,$_:O;Constructor (U_0_S,_,_9,D_cZ:_;Y16,_y,__T,_o,_,m7_,_:g){}$_Sc3(__:Float ){jE_::$Z__=O3._9_HS+.!-L_D::$15;}Constructor (){} }Class __{$9(Z:_){}Val $4N56:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_8),[AttributeDecl(Static,ConstDecl(Id($S),ClassType(Id(O)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(O)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(U_0_S),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_9),ClassType(Id(_))),param(Id(D_cZ),ClassType(Id(_))),param(Id(Y16),ClassType(Id(g))),param(Id(_y),ClassType(Id(g))),param(Id(__T),ClassType(Id(g))),param(Id(_o),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(m7_),ClassType(Id(g))),param(Id(_),ClassType(Id(g)))],Block([])),MethodDecl(Id($_Sc3),Static,[param(Id(__),FloatType)],Block([AssignStmt(FieldAccess(Id(jE_),Id($Z__)),BinaryOp(+.,FieldAccess(Id(O3),Id(_9_HS)),UnaryOp(!,UnaryOp(-,FieldAccess(Id(L_D),Id($15))))))])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($9),Static,[param(Id(Z),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($4N56),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 728))

    def test_729(self):
        line = '''Class p:zo_dTV___8{}Class xq1__:_{Var $V6,_:r_;}Class N:_S{Val _7__C:Array [Array [Array [String ,29],0x1C],0X6];}Class u{}Class _{Destructor (){}Var _:Array [Float ,0b100];}Class _:R5K8_E{}'''
        expect = '''Program([ClassDecl(Id(p),Id(zo_dTV___8),[]),ClassDecl(Id(xq1__),Id(_),[AttributeDecl(Static,VarDecl(Id($V6),ClassType(Id(r_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r_)),NullLiteral()))]),ClassDecl(Id(N),Id(_S),[AttributeDecl(Instance,ConstDecl(Id(_7__C),ArrayType(6,ArrayType(28,ArrayType(29,StringType))),None))]),ClassDecl(Id(u),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,FloatType)))]),ClassDecl(Id(_),Id(R5K8_E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 729))

    def test_730(self):
        line = '''Class _{}Class Z:cS{Constructor (_0:X;UXq,__:Array [Float ,061]){} }Class V_81_:K{_(_K:Array [Float ,010];__5,_o,f355_,G:Array [Array [Boolean ,061],0B1000000];M,O1,pm0:_9){} }Class K:l{c6D(j:Array [Array [Int ,0b1010110],94];_:Array [Array [Array [String ,0x4],0x4],0B1000000];wp:Array [Boolean ,0B1]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(Z),Id(cS),[MethodDecl(Id(Constructor),Instance,[param(Id(_0),ClassType(Id(X))),param(Id(UXq),ArrayType(49,FloatType)),param(Id(__),ArrayType(49,FloatType))],Block([]))]),ClassDecl(Id(V_81_),Id(K),[MethodDecl(Id(_),Instance,[param(Id(_K),ArrayType(8,FloatType)),param(Id(__5),ArrayType(64,ArrayType(49,BoolType))),param(Id(_o),ArrayType(64,ArrayType(49,BoolType))),param(Id(f355_),ArrayType(64,ArrayType(49,BoolType))),param(Id(G),ArrayType(64,ArrayType(49,BoolType))),param(Id(M),ClassType(Id(_9))),param(Id(O1),ClassType(Id(_9))),param(Id(pm0),ClassType(Id(_9)))],Block([]))]),ClassDecl(Id(K),Id(l),[MethodDecl(Id(c6D),Instance,[param(Id(j),ArrayType(94,ArrayType(86,IntType))),param(Id(_),ArrayType(64,ArrayType(4,ArrayType(4,StringType)))),param(Id(wp),ArrayType(1,BoolType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 730))

    def test_731(self):
        line = '''Class _{Val $_:Array [Int ,39];}Class cs7_6{}Class ___{}Class w:c{Val x,$_1__:Float ;Constructor (_,H,____,G60_4,_:Array [Array [String ,1],0b1]){} }Class y{Constructor (){Break ;}$_(){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(39,IntType),None))]),ClassDecl(Id(cs7_6),[]),ClassDecl(Id(___),[]),ClassDecl(Id(w),Id(c),[AttributeDecl(Instance,ConstDecl(Id(x),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_1__),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(1,StringType))),param(Id(H),ArrayType(1,ArrayType(1,StringType))),param(Id(____),ArrayType(1,ArrayType(1,StringType))),param(Id(G60_4),ArrayType(1,ArrayType(1,StringType))),param(Id(_),ArrayType(1,ArrayType(1,StringType)))],Block([]))]),ClassDecl(Id(y),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id($_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 731))

    def test_732(self):
        line = '''Class a{Var $O,J:String ;$_ZPx(n:Boolean ;a,B__61_:Array [Array [Array [Boolean ,0X2A],011],32];h,_,_583405_:Array [Array [Int ,100],0x8]){Continue ;}Destructor (){Break ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(a),[AttributeDecl(Static,VarDecl(Id($O),StringType)),AttributeDecl(Instance,VarDecl(Id(J),StringType)),MethodDecl(Id($_ZPx),Static,[param(Id(n),BoolType),param(Id(a),ArrayType(32,ArrayType(9,ArrayType(42,BoolType)))),param(Id(B__61_),ArrayType(32,ArrayType(9,ArrayType(42,BoolType)))),param(Id(h),ArrayType(8,ArrayType(100,IntType))),param(Id(_),ArrayType(8,ArrayType(100,IntType))),param(Id(_583405_),ArrayType(8,ArrayType(100,IntType)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 732))

    def test_733(self):
        line = '''Class _____{Destructor (){}Constructor (__:_;_7:Array [Array [Array [Float ,0XD_7],0x22],024];S,___9,_1:String ;l969,B_0:L;_,_,K:Array [Array [Int ,03],0XA4];W:Array [Array [Boolean ,0X666],0X5C]){} }Class h8_:g{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_____),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_))),param(Id(_7),ArrayType(20,ArrayType(34,ArrayType(215,FloatType)))),param(Id(S),StringType),param(Id(___9),StringType),param(Id(_1),StringType),param(Id(l969),ClassType(Id(L))),param(Id(B_0),ClassType(Id(L))),param(Id(_),ArrayType(164,ArrayType(3,IntType))),param(Id(_),ArrayType(164,ArrayType(3,IntType))),param(Id(K),ArrayType(164,ArrayType(3,IntType))),param(Id(W),ArrayType(92,ArrayType(1638,BoolType)))],Block([]))]),ClassDecl(Id(h8_),Id(g),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 733))

    def test_734(self):
        line = '''Class w6H7{}Class _{}Class A{Val $Oa:Array [Float ,0B111];Val V,x,h:Array [Array [Array [Array [Array [Int ,3],8],0B1],0b10000_11],0X34];Constructor (__:Array [Array [Array [Int ,0x25],0X34],9_5_4_9]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(w6H7),[]),ClassDecl(Id(_),[]),ClassDecl(Id(A),[AttributeDecl(Static,ConstDecl(Id($Oa),ArrayType(7,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(52,ArrayType(67,ArrayType(1,ArrayType(8,ArrayType(3,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(52,ArrayType(67,ArrayType(1,ArrayType(8,ArrayType(3,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(52,ArrayType(67,ArrayType(1,ArrayType(8,ArrayType(3,IntType))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(9549,ArrayType(52,ArrayType(37,IntType))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 734))

    def test_735(self):
        line = '''Class IM2:m8_{Destructor (){}Val c6:Array [Array [Float ,0B10],90];$s_1(){} }Class _x0:_{_r_(r44,w_48,x,C,_6_,_2,K:Array [Float ,90];W:R;__:String ;_C:Array [Array [Array [Array [Boolean ,0X50],90],0B1],90]){} }Class U{Val o,$_6:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(IM2),Id(m8_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(c6),ArrayType(90,ArrayType(2,FloatType)),None)),MethodDecl(Id($s_1),Static,[],Block([]))]),ClassDecl(Id(_x0),Id(_),[MethodDecl(Id(_r_),Instance,[param(Id(r44),ArrayType(90,FloatType)),param(Id(w_48),ArrayType(90,FloatType)),param(Id(x),ArrayType(90,FloatType)),param(Id(C),ArrayType(90,FloatType)),param(Id(_6_),ArrayType(90,FloatType)),param(Id(_2),ArrayType(90,FloatType)),param(Id(K),ArrayType(90,FloatType)),param(Id(W),ClassType(Id(R))),param(Id(__),StringType),param(Id(_C),ArrayType(90,ArrayType(1,ArrayType(90,ArrayType(80,BoolType)))))],Block([]))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(o),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_6),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 735))

    def test_736(self):
        line = '''Class _:F{}Class _:_zC{Var $_:Array [Array [Array [Array [Boolean ,0X10],0x7],7_8_4],5];}Class Ra6{}Class _{Val U:Array [Array [Array [String ,0X10],49],30_00];}Class A{Var _66a,R_,_4:Int ;}Class _:b{}'''
        expect = '''Program([ClassDecl(Id(_),Id(F),[]),ClassDecl(Id(_),Id(_zC),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(5,ArrayType(784,ArrayType(7,ArrayType(16,BoolType))))))]),ClassDecl(Id(Ra6),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(U),ArrayType(3000,ArrayType(49,ArrayType(16,StringType))),None))]),ClassDecl(Id(A),[AttributeDecl(Instance,VarDecl(Id(_66a),IntType)),AttributeDecl(Instance,VarDecl(Id(R_),IntType)),AttributeDecl(Instance,VarDecl(Id(_4),IntType))]),ClassDecl(Id(_),Id(b),[])])'''
        self.assertTrue(TestAST.test(line, expect, 736))

    def test_737(self):
        line = '''Class _Q{Constructor (NT87:Array [Array [Boolean ,02],31];_fd:Array [Boolean ,0142];_:nc;__,_9_L,O,__,Z,_:Array [Float ,0x4];T_:Float ){Var hvc,m_,Df8J3:Array [String ,0X4A];} }'''
        expect = '''Program([ClassDecl(Id(_Q),[MethodDecl(Id(Constructor),Instance,[param(Id(NT87),ArrayType(31,ArrayType(2,BoolType))),param(Id(_fd),ArrayType(98,BoolType)),param(Id(_),ClassType(Id(nc))),param(Id(__),ArrayType(4,FloatType)),param(Id(_9_L),ArrayType(4,FloatType)),param(Id(O),ArrayType(4,FloatType)),param(Id(__),ArrayType(4,FloatType)),param(Id(Z),ArrayType(4,FloatType)),param(Id(_),ArrayType(4,FloatType)),param(Id(T_),FloatType)],Block([VarDecl(Id(hvc),ArrayType(74,StringType)),VarDecl(Id(m_),ArrayType(74,StringType)),VarDecl(Id(Df8J3),ArrayType(74,StringType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 737))

    def test_738(self):
        line = '''Class _{}Class _2:t2{Destructor (){}Var $2Fg1,$g:Array [Float ,03];}Class z_:X{$52(IUw0:Array [Int ,45];V_,__,k,y9:String ){Var hw79,__iW,e,B,P:Array [Array [Boolean ,45],2];__8::$1();} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_2),Id(t2),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($2Fg1),ArrayType(3,FloatType))),AttributeDecl(Static,VarDecl(Id($g),ArrayType(3,FloatType)))]),ClassDecl(Id(z_),Id(X),[MethodDecl(Id($52),Static,[param(Id(IUw0),ArrayType(45,IntType)),param(Id(V_),StringType),param(Id(__),StringType),param(Id(k),StringType),param(Id(y9),StringType)],Block([VarDecl(Id(hw79),ArrayType(2,ArrayType(45,BoolType))),VarDecl(Id(__iW),ArrayType(2,ArrayType(45,BoolType))),VarDecl(Id(e),ArrayType(2,ArrayType(45,BoolType))),VarDecl(Id(B),ArrayType(2,ArrayType(45,BoolType))),VarDecl(Id(P),ArrayType(2,ArrayType(45,BoolType))),Call(Id(__8),Id($1),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 738))

    def test_739(self):
        line = '''Class HX:a{Constructor (v,_,z,p_,P:Array [Int ,0141];K9:_;X:Float ;u__,_W_8:Array [Array [Array [Array [Array [String ,0B1111],0B1],0b1010100],0X4],257];__7:Array [Int ,0b1010100]){}Constructor (){} }Class V{Destructor (){}Constructor (_252O8lGY0_y,_7,_l:_){} }'''
        expect = '''Program([ClassDecl(Id(HX),Id(a),[MethodDecl(Id(Constructor),Instance,[param(Id(v),ArrayType(97,IntType)),param(Id(_),ArrayType(97,IntType)),param(Id(z),ArrayType(97,IntType)),param(Id(p_),ArrayType(97,IntType)),param(Id(P),ArrayType(97,IntType)),param(Id(K9),ClassType(Id(_))),param(Id(X),FloatType),param(Id(u__),ArrayType(257,ArrayType(4,ArrayType(84,ArrayType(1,ArrayType(15,StringType)))))),param(Id(_W_8),ArrayType(257,ArrayType(4,ArrayType(84,ArrayType(1,ArrayType(15,StringType)))))),param(Id(__7),ArrayType(84,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(V),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_252O8lGY0_y),ClassType(Id(_))),param(Id(_7),ClassType(Id(_))),param(Id(_l),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 739))

    def test_740(self):
        line = '''Class _t155{Var _,_t_:Array [Array [Float ,0b1_0_1],4];}Class V:_{Destructor (){}Destructor (){Continue ;}Constructor (){} }Class OC9:wx0E__{Var L3G1:String ;Var _,$7_,O:Boolean ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_t155),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,ArrayType(5,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_t_),ArrayType(4,ArrayType(5,FloatType))))]),ClassDecl(Id(V),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(OC9),Id(wx0E__),[AttributeDecl(Instance,VarDecl(Id(L3G1),StringType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($7_),BoolType)),AttributeDecl(Instance,VarDecl(Id(O),BoolType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 740))

    def test_741(self):
        line = '''Class U4E__39f:_{Val $8_:Array [Array [Array [Array [Array [Array [Array [Float ,2_85],0b111],44],44],0x3],0b1],6_10];}Class _:_{Constructor (_:Float ;__I_:Array [Boolean ,0XF]){} }Class __:Z{}Class V:z{}'''
        expect = '''Program([ClassDecl(Id(U4E__39f),Id(_),[AttributeDecl(Static,ConstDecl(Id($8_),ArrayType(610,ArrayType(1,ArrayType(3,ArrayType(44,ArrayType(44,ArrayType(7,ArrayType(285,FloatType))))))),None))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(__I_),ArrayType(15,BoolType))],Block([]))]),ClassDecl(Id(__),Id(Z),[]),ClassDecl(Id(V),Id(z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 741))

    def test_742(self):
        line = '''Class M{Constructor (c_,V_,uSz,a,__:Array [Array [Int ,0x5_8],0b1];__,_:Array [Int ,043];m,_n:Array [Array [String ,0x11],0B110010];BC:String ){}Constructor (O:Boolean ;L_:Array [Int ,0x4A_D];___5Q4:Float ;_06z7,_D_:k;_7:D;uG_,Y:Array [Array [Float ,0x3],07]){}Constructor (){} }Class x:K{}'''
        expect = '''Program([ClassDecl(Id(M),[MethodDecl(Id(Constructor),Instance,[param(Id(c_),ArrayType(1,ArrayType(88,IntType))),param(Id(V_),ArrayType(1,ArrayType(88,IntType))),param(Id(uSz),ArrayType(1,ArrayType(88,IntType))),param(Id(a),ArrayType(1,ArrayType(88,IntType))),param(Id(__),ArrayType(1,ArrayType(88,IntType))),param(Id(__),ArrayType(35,IntType)),param(Id(_),ArrayType(35,IntType)),param(Id(m),ArrayType(50,ArrayType(17,StringType))),param(Id(_n),ArrayType(50,ArrayType(17,StringType))),param(Id(BC),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(O),BoolType),param(Id(L_),ArrayType(1197,IntType)),param(Id(___5Q4),FloatType),param(Id(_06z7),ClassType(Id(k))),param(Id(_D_),ClassType(Id(k))),param(Id(_7),ClassType(Id(D))),param(Id(uG_),ArrayType(7,ArrayType(3,FloatType))),param(Id(Y),ArrayType(7,ArrayType(3,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 742))

    def test_743(self):
        line = '''Class __0:_{}Class __{Val $7_,_f18_E,$_N:Array [Boolean ,7_7];}Class _3{}Class _:_8{Var $M,$_K:Array [Float ,0B111111];}Class _2{Destructor (){}Val $Wp,p4,$MU0,_,_4,$___pR:Float ;}'''
        expect = '''Program([ClassDecl(Id(__0),Id(_),[]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($7_),ArrayType(77,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_f18_E),ArrayType(77,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_N),ArrayType(77,BoolType),None))]),ClassDecl(Id(_3),[]),ClassDecl(Id(_),Id(_8),[AttributeDecl(Static,VarDecl(Id($M),ArrayType(63,FloatType))),AttributeDecl(Static,VarDecl(Id($_K),ArrayType(63,FloatType)))]),ClassDecl(Id(_2),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($Wp),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(p4),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($MU0),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_4),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($___pR),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 743))

    def test_744(self):
        line = '''Class _26_1:P{Var w,$__,$88:Array [Boolean ,0B11];Destructor (){Continue ;Continue ;} }Class z{Destructor (){}Constructor (_m3,o,z:Array [String ,04_0];w6_76:Array [Array [Array [Array [Array [Boolean ,0X27],0x57],10],0B11],02703_17]){} }Class _:_{}Class y7:_A{}Class _3{}'''
        expect = '''Program([ClassDecl(Id(_26_1),Id(P),[AttributeDecl(Instance,VarDecl(Id(w),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($88),ArrayType(3,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))]),ClassDecl(Id(z),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_m3),ArrayType(32,StringType)),param(Id(o),ArrayType(32,StringType)),param(Id(z),ArrayType(32,StringType)),param(Id(w6_76),ArrayType(94415,ArrayType(3,ArrayType(10,ArrayType(87,ArrayType(39,BoolType))))))],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(y7),Id(_A),[]),ClassDecl(Id(_3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 744))

    def test_745(self):
        line = '''Class Yy1I7{Constructor (g39:Array [Array [Float ,0b1_0],0x2B];J,_:T5;_,_:J;_:k){}Val _:Float ;$7(_:Array [Float ,0b10111];d8p,_:Array [String ,76];_3z:Array [Float ,0X1F]){Var _q_,o:Array [String ,0B1];} }'''
        expect = '''Program([ClassDecl(Id(Yy1I7),[MethodDecl(Id(Constructor),Instance,[param(Id(g39),ArrayType(43,ArrayType(2,FloatType))),param(Id(J),ClassType(Id(T5))),param(Id(_),ClassType(Id(T5))),param(Id(_),ClassType(Id(J))),param(Id(_),ClassType(Id(J))),param(Id(_),ClassType(Id(k)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id($7),Static,[param(Id(_),ArrayType(23,FloatType)),param(Id(d8p),ArrayType(76,StringType)),param(Id(_),ArrayType(76,StringType)),param(Id(_3z),ArrayType(31,FloatType))],Block([VarDecl(Id(_q_),ArrayType(1,StringType)),VarDecl(Id(o),ArrayType(1,StringType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 745))

    def test_746(self):
        line = '''Class i___H_{Var O9_6s,rh3E__JQ:d_;}Class IT:G{}Class g:z__3{}Class Sl8V2{}Class _:_k{$7(_:Float ;z_:Array [String ,0x51];a:String ;_F____A,M:Float ;H:Float ){Var x,_:Array [String ,044];Break ;} }'''
        expect = '''Program([ClassDecl(Id(i___H_),[AttributeDecl(Instance,VarDecl(Id(O9_6s),ClassType(Id(d_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(rh3E__JQ),ClassType(Id(d_)),NullLiteral()))]),ClassDecl(Id(IT),Id(G),[]),ClassDecl(Id(g),Id(z__3),[]),ClassDecl(Id(Sl8V2),[]),ClassDecl(Id(_),Id(_k),[MethodDecl(Id($7),Static,[param(Id(_),FloatType),param(Id(z_),ArrayType(81,StringType)),param(Id(a),StringType),param(Id(_F____A),FloatType),param(Id(M),FloatType),param(Id(H),FloatType)],Block([VarDecl(Id(x),ArrayType(36,StringType)),VarDecl(Id(_),ArrayType(36,StringType)),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 746))

    def test_747(self):
        line = '''Class Y879{Destructor (){} }Class Q_0_{Constructor (_V,g6,J,__8,_7:Array [Boolean ,0X44];__,_:Float ;B_:Float ){Break ;Return ;} }Class h7___{Destructor (){}V(F,_,xc,_6,A:Array [Int ,2];w:Array [String ,9]){Continue ;{} }}Class _{}'''
        expect = '''Program([ClassDecl(Id(Y879),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Q_0_),[MethodDecl(Id(Constructor),Instance,[param(Id(_V),ArrayType(68,BoolType)),param(Id(g6),ArrayType(68,BoolType)),param(Id(J),ArrayType(68,BoolType)),param(Id(__8),ArrayType(68,BoolType)),param(Id(_7),ArrayType(68,BoolType)),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(B_),FloatType)],Block([Break,Return()]))]),ClassDecl(Id(h7___),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(V),Instance,[param(Id(F),ArrayType(2,IntType)),param(Id(_),ArrayType(2,IntType)),param(Id(xc),ArrayType(2,IntType)),param(Id(_6),ArrayType(2,IntType)),param(Id(A),ArrayType(2,IntType)),param(Id(w),ArrayType(9,StringType))],Block([Continue,Block([])]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 747))

    def test_748(self):
        line = '''Class __f{Constructor (){}Val E40,$_v,$_,DC65,$4,_,$S_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0xAD],3],0b1],76],05],0x1D],0x1D],076];}Class E:_{}'''
        expect = '''Program([ClassDecl(Id(__f),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(E40),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($_v),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(DC65),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($S_),ArrayType(62,ArrayType(29,ArrayType(29,ArrayType(5,ArrayType(76,ArrayType(1,ArrayType(3,ArrayType(173,FloatType)))))))),None))]),ClassDecl(Id(E),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 748))

    def test_749(self):
        line = '''Class r_5N:Q{Var $_:l;Constructor (){} }Class E:__Q__Y_{}Class _5S:G0_5{$X_M(){}Constructor (){}$eJ(ss:Array [Array [Boolean ,0X1],1134];_k,_,_:__){Return ;} }Class _:L{__(){Var IF_:Array [Int ,0b1_0];} }'''
        expect = '''Program([ClassDecl(Id(r_5N),Id(Q),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(l)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(E),Id(__Q__Y_),[]),ClassDecl(Id(_5S),Id(G0_5),[MethodDecl(Id($X_M),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($eJ),Static,[param(Id(ss),ArrayType(1134,ArrayType(1,BoolType))),param(Id(_k),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__)))],Block([Return()]))]),ClassDecl(Id(_),Id(L),[MethodDecl(Id(__),Instance,[],Block([VarDecl(Id(IF_),ArrayType(2,IntType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 749))

    def test_750(self):
        line = '''Class Dz_t_68{}Class _:_Uq{Destructor (){}Constructor (r:Int ){Val _,u6:Boolean ;}Val __,_,$_31,H,D:Array [Array [Array [String ,0B111],0B1011111],066];}Class _{}Class _274L{}'''
        expect = '''Program([ClassDecl(Id(Dz_t_68),[]),ClassDecl(Id(_),Id(_Uq),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(r),IntType)],Block([ConstDecl(Id(_),BoolType,None),ConstDecl(Id(u6),BoolType,None)])),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(54,ArrayType(95,ArrayType(7,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(54,ArrayType(95,ArrayType(7,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($_31),ArrayType(54,ArrayType(95,ArrayType(7,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(H),ArrayType(54,ArrayType(95,ArrayType(7,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(D),ArrayType(54,ArrayType(95,ArrayType(7,StringType))),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_274L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 750))

    def test_751(self):
        line = '''Class _:__{Val q7,$0,$1_:H_;}Class q48l:l_al7{}Class v_:G{$G___4(P7x_6:Int ){}Var D:Array [Array [Array [Float ,0B1],02],0b111101];$3__6(){}Val $oXzR:__B;Var $k1_91:B;}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(q7),ClassType(Id(H_)),None)),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(H_)),None)),AttributeDecl(Static,ConstDecl(Id($1_),ClassType(Id(H_)),None))]),ClassDecl(Id(q48l),Id(l_al7),[]),ClassDecl(Id(v_),Id(G),[MethodDecl(Id($G___4),Static,[param(Id(P7x_6),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(D),ArrayType(61,ArrayType(2,ArrayType(1,FloatType))))),MethodDecl(Id($3__6),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($oXzR),ClassType(Id(__B)),None)),AttributeDecl(Static,VarDecl(Id($k1_91),ClassType(Id(B)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 751))

    def test_752(self):
        line = '''Class _:G{}Class G:xRH14aP8{Constructor (_m,__r,_,_:Array [String ,0124];E,O:Array [Array [Array [Array [Boolean ,0X46],0B1],0x11],68];_C:Array [Int ,0b10_0]){} }Class _Z:__6{Constructor (){}Val $U:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(G),[]),ClassDecl(Id(G),Id(xRH14aP8),[MethodDecl(Id(Constructor),Instance,[param(Id(_m),ArrayType(84,StringType)),param(Id(__r),ArrayType(84,StringType)),param(Id(_),ArrayType(84,StringType)),param(Id(_),ArrayType(84,StringType)),param(Id(E),ArrayType(68,ArrayType(17,ArrayType(1,ArrayType(70,BoolType))))),param(Id(O),ArrayType(68,ArrayType(17,ArrayType(1,ArrayType(70,BoolType))))),param(Id(_C),ArrayType(4,IntType))],Block([]))]),ClassDecl(Id(_Z),Id(__6),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($U),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 752))

    def test_753(self):
        line = '''Class G:f3{Destructor (){Continue ;}Var _:Array [Array [Array [Array [Array [Array [Boolean ,74],8],0124],072_5_63],0x85_1],05];Destructor (){}Destructor (){}Destructor (){}Constructor (Zx:_;_:Boolean ;n_26:Array [Array [Int ,027],0124];o:_6;M2,n,S:Array [Array [Float ,0X5_8_D],96]){}Var _,$__:Array [Int ,04];Val I,_0,_,$Qi_,$_3E8t_:Float ;}Class cq:_{}Class __t4{}'''
        expect = '''Program([ClassDecl(Id(G),Id(f3),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,ArrayType(2129,ArrayType(30067,ArrayType(84,ArrayType(8,ArrayType(74,BoolType)))))))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Zx),ClassType(Id(_))),param(Id(_),BoolType),param(Id(n_26),ArrayType(84,ArrayType(23,IntType))),param(Id(o),ClassType(Id(_6))),param(Id(M2),ArrayType(96,ArrayType(1421,FloatType))),param(Id(n),ArrayType(96,ArrayType(1421,FloatType))),param(Id(S),ArrayType(96,ArrayType(1421,FloatType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,IntType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(4,IntType))),AttributeDecl(Instance,ConstDecl(Id(I),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_0),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($Qi_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_3E8t_),FloatType,None))]),ClassDecl(Id(cq),Id(_),[]),ClassDecl(Id(__t4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 753))

    def test_754(self):
        line = '''Class _r{Destructor (){} }Class _{$_h_(_:_){Break ;}Var $__B_6,$RUK4:String ;Val t8,$c6:Boolean ;Var $L,$_:Array [Boolean ,076_2];Val $2,___,$U,m,_,$2:Array [Boolean ,6];}Class __R{}'''
        expect = '''Program([ClassDecl(Id(_r),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($_h_),Static,[param(Id(_),ClassType(Id(_)))],Block([Break])),AttributeDecl(Static,VarDecl(Id($__B_6),StringType)),AttributeDecl(Static,VarDecl(Id($RUK4),StringType)),AttributeDecl(Instance,ConstDecl(Id(t8),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($c6),BoolType,None)),AttributeDecl(Static,VarDecl(Id($L),ArrayType(498,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(498,BoolType))),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(6,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(___),ArrayType(6,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($U),ArrayType(6,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(m),ArrayType(6,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(6,BoolType),None))]),ClassDecl(Id(__R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 754))

    def test_755(self):
        line = '''Class _{}Class _9:_m{_(c5_:Array [Array [Array [String ,0X20],0B1000000],0X20];_,W__:Int ){}Val Jd:Array [Float ,0xD];Var $4,$S,$V,$537,$U,$W,$i,X,x_ft91i,$6:Boolean ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_9),Id(_m),[MethodDecl(Id(_),Instance,[param(Id(c5_),ArrayType(32,ArrayType(64,ArrayType(32,StringType)))),param(Id(_),IntType),param(Id(W__),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(Jd),ArrayType(13,FloatType),None)),AttributeDecl(Static,VarDecl(Id($4),BoolType)),AttributeDecl(Static,VarDecl(Id($S),BoolType)),AttributeDecl(Static,VarDecl(Id($V),BoolType)),AttributeDecl(Static,VarDecl(Id($537),BoolType)),AttributeDecl(Static,VarDecl(Id($U),BoolType)),AttributeDecl(Static,VarDecl(Id($W),BoolType)),AttributeDecl(Static,VarDecl(Id($i),BoolType)),AttributeDecl(Instance,VarDecl(Id(X),BoolType)),AttributeDecl(Instance,VarDecl(Id(x_ft91i),BoolType)),AttributeDecl(Static,VarDecl(Id($6),BoolType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 755))

    def test_756(self):
        line = '''Class _{Constructor (_7__,i,W,_,_,O9,m,_,_,e3,u___,v6,e,_b,pp:Boolean ;S,y__7W:String ;_o:Int ;___:Array [Float ,0127]){}Var $Ru_M,$P:Array [Boolean ,0127];Val _,$_,$4:_3;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_7__),BoolType),param(Id(i),BoolType),param(Id(W),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(O9),BoolType),param(Id(m),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(e3),BoolType),param(Id(u___),BoolType),param(Id(v6),BoolType),param(Id(e),BoolType),param(Id(_b),BoolType),param(Id(pp),BoolType),param(Id(S),StringType),param(Id(y__7W),StringType),param(Id(_o),IntType),param(Id(___),ArrayType(87,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($Ru_M),ArrayType(87,BoolType))),AttributeDecl(Static,VarDecl(Id($P),ArrayType(87,BoolType))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_3)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_3)),None)),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(_3)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 756))

    def test_757(self):
        line = '''Class _:F{Var $v55:Array [Array [Boolean ,0b1_0],06_650];}Class _:_{Constructor (__,c4,fq:_;F_X:Array [Array [Array [Array [Array [Boolean ,8898_10],0107],07],8],0B1010001];E_X7:Float ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(F),[AttributeDecl(Static,VarDecl(Id($v55),ArrayType(3496,ArrayType(2,BoolType))))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_))),param(Id(c4),ClassType(Id(_))),param(Id(fq),ClassType(Id(_))),param(Id(F_X),ArrayType(81,ArrayType(8,ArrayType(7,ArrayType(71,ArrayType(889810,BoolType)))))),param(Id(E_X7),FloatType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 757))

    def test_758(self):
        line = '''Class __9:_{Constructor (w,S3b,_,s_:_){}Constructor (){ {Continue ;}Continue ;}Val $a:Array [Array [Array [Boolean ,03_4],4],02_756]=r_::$5_e.Z974L._();Var $7__,_1w,$_:String ;}'''
        expect = '''Program([ClassDecl(Id(__9),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(w),ClassType(Id(_))),param(Id(S3b),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(s_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([Continue]),Continue])),AttributeDecl(Static,ConstDecl(Id($a),ArrayType(1518,ArrayType(4,ArrayType(28,BoolType))),CallExpr(FieldAccess(FieldAccess(Id(r_),Id($5_e)),Id(Z974L)),Id(_),[]))),AttributeDecl(Static,VarDecl(Id($7__),StringType)),AttributeDecl(Instance,VarDecl(Id(_1w),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 758))

    def test_759(self):
        line = '''Class I_Ft_3ca{}Class _x80:H_Z{W_(__:String ){} }Class _{}Class __:W{}Class a{Val $diZC68,_7_l,$5:Array [Array [Boolean ,0x5A],026];}Class _{}Class _:u__{Val $6,_A6_,$__u:Array [Boolean ,0x5A];}Class X_n:t7{Destructor (){Val _8,g,uS,_,_:Array [Array [Array [Array [Float ,05],076],026],0B10001];}Val x__,_,T,_5,_,$_,$_:Int ;}Class _1{Destructor (){Continue ;}Val $_5:_x_;Val $9k,$_,$_d1,$F,$w__T:p_;}'''
        expect = '''Program([ClassDecl(Id(I_Ft_3ca),[]),ClassDecl(Id(_x80),Id(H_Z),[MethodDecl(Id(W_),Instance,[param(Id(__),StringType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(__),Id(W),[]),ClassDecl(Id(a),[AttributeDecl(Static,ConstDecl(Id($diZC68),ArrayType(22,ArrayType(90,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_7_l),ArrayType(22,ArrayType(90,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(22,ArrayType(90,BoolType)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(u__),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(90,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_A6_),ArrayType(90,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__u),ArrayType(90,BoolType),None))]),ClassDecl(Id(X_n),Id(t7),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_8),ArrayType(17,ArrayType(22,ArrayType(62,ArrayType(5,FloatType)))),None),ConstDecl(Id(g),ArrayType(17,ArrayType(22,ArrayType(62,ArrayType(5,FloatType)))),None),ConstDecl(Id(uS),ArrayType(17,ArrayType(22,ArrayType(62,ArrayType(5,FloatType)))),None),ConstDecl(Id(_),ArrayType(17,ArrayType(22,ArrayType(62,ArrayType(5,FloatType)))),None),ConstDecl(Id(_),ArrayType(17,ArrayType(22,ArrayType(62,ArrayType(5,FloatType)))),None)])),AttributeDecl(Instance,ConstDecl(Id(x__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(T),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_5),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(_1),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_5),ClassType(Id(_x_)),None)),AttributeDecl(Static,ConstDecl(Id($9k),ClassType(Id(p_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(p_)),None)),AttributeDecl(Static,ConstDecl(Id($_d1),ClassType(Id(p_)),None)),AttributeDecl(Static,ConstDecl(Id($F),ClassType(Id(p_)),None)),AttributeDecl(Static,ConstDecl(Id($w__T),ClassType(Id(p_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 759))

    def test_760(self):
        line = '''Class _i{$N2(x_KO4,_,_,pu_o,F:Array [Array [Float ,0B101011],01_6];__:Int ;_pwb:Array [Array [Array [Boolean ,93],02],0105];_:Array [Float ,06]){}Val T5_:Boolean ;Val $Z:b2C;}'''
        expect = '''Program([ClassDecl(Id(_i),[MethodDecl(Id($N2),Static,[param(Id(x_KO4),ArrayType(14,ArrayType(43,FloatType))),param(Id(_),ArrayType(14,ArrayType(43,FloatType))),param(Id(_),ArrayType(14,ArrayType(43,FloatType))),param(Id(pu_o),ArrayType(14,ArrayType(43,FloatType))),param(Id(F),ArrayType(14,ArrayType(43,FloatType))),param(Id(__),IntType),param(Id(_pwb),ArrayType(69,ArrayType(2,ArrayType(93,BoolType)))),param(Id(_),ArrayType(6,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(T5_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($Z),ClassType(Id(b2C)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 760))

    def test_761(self):
        line = '''Class __7{Constructor (_0__,_st__:Array [Array [Array [String ,75],0b1],0X1A];B,z,_5___Y_7_6:Float ;S:Boolean ;_8l6,x:Array [Float ,0120];_,Q11:Float ){}Constructor (S:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(__7),[MethodDecl(Id(Constructor),Instance,[param(Id(_0__),ArrayType(26,ArrayType(1,ArrayType(75,StringType)))),param(Id(_st__),ArrayType(26,ArrayType(1,ArrayType(75,StringType)))),param(Id(B),FloatType),param(Id(z),FloatType),param(Id(_5___Y_7_6),FloatType),param(Id(S),BoolType),param(Id(_8l6),ArrayType(80,FloatType)),param(Id(x),ArrayType(80,FloatType)),param(Id(_),FloatType),param(Id(Q11),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 761))

    def test_762(self):
        line = '''Class r:ns9{_(_6:O;_:Array [Array [Array [Array [String ,07],06],9_7_23],0X4]){} }Class Q:___{Var _1_,$_,$__035_,$X,$B5,h,$h,T,f89b_f_W,_:Array [Int ,01];}Class e1{}'''
        expect = '''Program([ClassDecl(Id(r),Id(ns9),[MethodDecl(Id(_),Instance,[param(Id(_6),ClassType(Id(O))),param(Id(_),ArrayType(4,ArrayType(9723,ArrayType(6,ArrayType(7,StringType)))))],Block([]))]),ClassDecl(Id(Q),Id(___),[AttributeDecl(Instance,VarDecl(Id(_1_),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($__035_),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($X),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($B5),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($h),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(T),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(f89b_f_W),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,IntType)))]),ClassDecl(Id(e1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 762))

    def test_763(self):
        line = '''Class _{Constructor (Bv,bb,o,F6,_U,_,_:String ;_,H0__:_;_:c;e,_,_9_0:Int ){} }Class X:R1_{Destructor (){Continue ;}Destructor (){}jf_0(V,_:String ){}Var o9uy:Int ;Constructor (){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Bv),StringType),param(Id(bb),StringType),param(Id(o),StringType),param(Id(F6),StringType),param(Id(_U),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_))),param(Id(H0__),ClassType(Id(_))),param(Id(_),ClassType(Id(c))),param(Id(e),IntType),param(Id(_),IntType),param(Id(_9_0),IntType)],Block([]))]),ClassDecl(Id(X),Id(R1_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(jf_0),Instance,[param(Id(V),StringType),param(Id(_),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(o9uy),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 763))

    def test_764(self):
        line = '''Class _{Constructor (id_q,m:Float ){} }Class J{}Class my{}Class K:A10_{m(j,c,tT_,j:Array [Float ,06];_4__:_T){} }Class z:_r_9{Constructor (_Hp6_7V:Array [Array [Array [Boolean ,863_86],06],0xE_B1];AQ_:Z6;_,d3,m_:Boolean ;x____5_,__,e:Array [Array [String ,0X12],0B1];p:C0;q,_6_zc:Array [Array [Array [Float ,0b1001000],0b1],0B100100];w:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(id_q),FloatType),param(Id(m),FloatType)],Block([]))]),ClassDecl(Id(J),[]),ClassDecl(Id(my),[]),ClassDecl(Id(K),Id(A10_),[MethodDecl(Id(m),Instance,[param(Id(j),ArrayType(6,FloatType)),param(Id(c),ArrayType(6,FloatType)),param(Id(tT_),ArrayType(6,FloatType)),param(Id(j),ArrayType(6,FloatType)),param(Id(_4__),ClassType(Id(_T)))],Block([]))]),ClassDecl(Id(z),Id(_r_9),[MethodDecl(Id(Constructor),Instance,[param(Id(_Hp6_7V),ArrayType(3761,ArrayType(6,ArrayType(86386,BoolType)))),param(Id(AQ_),ClassType(Id(Z6))),param(Id(_),BoolType),param(Id(d3),BoolType),param(Id(m_),BoolType),param(Id(x____5_),ArrayType(1,ArrayType(18,StringType))),param(Id(__),ArrayType(1,ArrayType(18,StringType))),param(Id(e),ArrayType(1,ArrayType(18,StringType))),param(Id(p),ClassType(Id(C0))),param(Id(q),ArrayType(36,ArrayType(1,ArrayType(72,FloatType)))),param(Id(_6_zc),ArrayType(36,ArrayType(1,ArrayType(72,FloatType)))),param(Id(w),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 764))

    def test_765(self):
        line = '''Class j{Destructor (){} }Class c:_dK_G{Val wD,_C_:Int ;Var K85:xE;Destructor (){"'""._D._();Break ;}Var $1g,__:_;_(Y:_){}Val $l_W,l5Tbu,$_:Array [String ,0xB];}Class _S75:_J{}Class v9{}Class _A{}'''
        expect = '''Program([ClassDecl(Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(c),Id(_dK_G),[AttributeDecl(Instance,ConstDecl(Id(wD),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_C_),IntType,None)),AttributeDecl(Instance,VarDecl(Id(K85),ClassType(Id(xE)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Call(FieldAccess(StringLit('"),Id(_D)),Id(_),[]),Break])),AttributeDecl(Static,VarDecl(Id($1g),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(Y),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($l_W),ArrayType(11,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(l5Tbu),ArrayType(11,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(11,StringType),None))]),ClassDecl(Id(_S75),Id(_J),[]),ClassDecl(Id(v9),[]),ClassDecl(Id(_A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 765))

    def test_766(self):
        line = '''Class __{Constructor (J:Array [Array [Float ,4_5],04];S4,Ky_,_:__;m,i:_;_:J;_29,m:Array [String ,012];qC,q,Hn19_p52:_c_2V__;_:Int ;_:OY8;B:Array [Array [Array [Array [Float ,0x5],37],2],37]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(4,ArrayType(45,FloatType))),param(Id(S4),ClassType(Id(__))),param(Id(Ky_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(m),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(_),ClassType(Id(J))),param(Id(_29),ArrayType(10,StringType)),param(Id(m),ArrayType(10,StringType)),param(Id(qC),ClassType(Id(_c_2V__))),param(Id(q),ClassType(Id(_c_2V__))),param(Id(Hn19_p52),ClassType(Id(_c_2V__))),param(Id(_),IntType),param(Id(_),ClassType(Id(OY8))),param(Id(B),ArrayType(37,ArrayType(2,ArrayType(37,ArrayType(5,FloatType)))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 766))

    def test_767(self):
        line = '''Class __u:__{Destructor (){}Var $C_:Boolean ;}Class W{Var V,_:Boolean ;Constructor (_2X,_:Float ;_:Array [Boolean ,0xA]){} }Class M0K{Val $7:Array [Int ,0b1_1_1_1_101_0_1];}'''
        expect = '''Program([ClassDecl(Id(__u),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($C_),BoolType))]),ClassDecl(Id(W),[AttributeDecl(Instance,VarDecl(Id(V),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_2X),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(10,BoolType))],Block([]))]),ClassDecl(Id(M0K),[AttributeDecl(Static,ConstDecl(Id($7),ArrayType(501,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 767))

    def test_768(self):
        line = '''Class v_:O{Constructor (){}Val __9,$_:Array [String ,063];Destructor (){Return ;Continue ;} }Class ve6:CT32{}Class _{Val O_,$_,tC,_,Y,$j,$j3G,$_:Array [Float ,0B1_0];}'''
        expect = '''Program([ClassDecl(Id(v_),Id(O),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__9),ArrayType(51,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(51,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Continue]))]),ClassDecl(Id(ve6),Id(CT32),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(O_),ArrayType(2,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(tC),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(2,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($j),ArrayType(2,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($j3G),ArrayType(2,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 768))

    def test_769(self):
        line = '''Class t:xM{Val _:I82_S0;Destructor (){}Val $D3,B:Array [Array [Array [Array [Array [String ,0x7],0B1000000],0X3C],0x7],0B1000000];c_(E63__:String ;_:Array [Array [Int ,0x7],0x86];L_:Array [Array [String ,0110],026]){} }'''
        expect = '''Program([ClassDecl(Id(t),Id(xM),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(I82_S0)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($D3),ArrayType(64,ArrayType(7,ArrayType(60,ArrayType(64,ArrayType(7,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(B),ArrayType(64,ArrayType(7,ArrayType(60,ArrayType(64,ArrayType(7,StringType))))),None)),MethodDecl(Id(c_),Instance,[param(Id(E63__),StringType),param(Id(_),ArrayType(134,ArrayType(7,IntType))),param(Id(L_),ArrayType(22,ArrayType(72,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 769))

    def test_770(self):
        line = '''Class _:__{}Class _:D{j__(K04:Array [Array [Int ,0x56],67]){Break ;}Destructor (){Break ;Continue ;}Var $7l,$7,_:Int ;}Class _rP:_O0_1H{$G(j,q0XMOo,_,p:Array [Int ,0b1];p,__:Array [Int ,5];_:Array [Float ,0x56]){Var _:Int ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(_),Id(D),[MethodDecl(Id(j__),Instance,[param(Id(K04),ArrayType(67,ArrayType(86,IntType)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue])),AttributeDecl(Static,VarDecl(Id($7l),IntType)),AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType))]),ClassDecl(Id(_rP),Id(_O0_1H),[MethodDecl(Id($G),Static,[param(Id(j),ArrayType(1,IntType)),param(Id(q0XMOo),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(p),ArrayType(1,IntType)),param(Id(p),ArrayType(5,IntType)),param(Id(__),ArrayType(5,IntType)),param(Id(_),ArrayType(86,FloatType))],Block([VarDecl(Id(_),IntType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 770))

    def test_771(self):
        line = '''Class _9:V_{Ci(_:T2gO_;N4,_,s1:Boolean ){}Val $__Yf8,r_,_8_,$9,_:Array [Array [Float ,05],016];}Class __rH17_{Constructor (V,k,__:TU;v:Array [Array [Int ,0XA],016]){} }'''
        expect = '''Program([ClassDecl(Id(_9),Id(V_),[MethodDecl(Id(Ci),Instance,[param(Id(_),ClassType(Id(T2gO_))),param(Id(N4),BoolType),param(Id(_),BoolType),param(Id(s1),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($__Yf8),ArrayType(14,ArrayType(5,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(r_),ArrayType(14,ArrayType(5,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_8_),ArrayType(14,ArrayType(5,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(14,ArrayType(5,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(14,ArrayType(5,FloatType)),None))]),ClassDecl(Id(__rH17_),[MethodDecl(Id(Constructor),Instance,[param(Id(V),ClassType(Id(TU))),param(Id(k),ClassType(Id(TU))),param(Id(__),ClassType(Id(TU))),param(Id(v),ArrayType(14,ArrayType(10,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 771))

    def test_772(self):
        line = '''Class h{}Class _:Dl{}Class _Qig1_{}Class _:___{Val e_,$__,$_,H_r6:Array [Array [Array [Array [Array [Array [String ,31],02],0X41],02],02_4],0b111000];Destructor (){}$b(S,O:String ;__:Array [Array [Array [Array [Array [Boolean ,051],0B1],0X1_6],0X41],31]){} }'''
        expect = '''Program([ClassDecl(Id(h),[]),ClassDecl(Id(_),Id(Dl),[]),ClassDecl(Id(_Qig1_),[]),ClassDecl(Id(_),Id(___),[AttributeDecl(Instance,ConstDecl(Id(e_),ArrayType(56,ArrayType(20,ArrayType(2,ArrayType(65,ArrayType(2,ArrayType(31,StringType)))))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(56,ArrayType(20,ArrayType(2,ArrayType(65,ArrayType(2,ArrayType(31,StringType)))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(56,ArrayType(20,ArrayType(2,ArrayType(65,ArrayType(2,ArrayType(31,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(H_r6),ArrayType(56,ArrayType(20,ArrayType(2,ArrayType(65,ArrayType(2,ArrayType(31,StringType)))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($b),Static,[param(Id(S),StringType),param(Id(O),StringType),param(Id(__),ArrayType(31,ArrayType(65,ArrayType(22,ArrayType(1,ArrayType(41,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 772))

    def test_773(self):
        line = '''Class A:p_{Destructor (){Val y_G,g,_iv,_81Qp_o:Array [Boolean ,2];}$Vo(_,_5,_0:Float ;O_3s:Int ;V:Array [Boolean ,617_5]){}Var _:qR9_;Val _,_0,H,$y:Boolean ;Var $__:Array [Float ,071];}'''
        expect = '''Program([ClassDecl(Id(A),Id(p_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(y_G),ArrayType(2,BoolType),None),ConstDecl(Id(g),ArrayType(2,BoolType),None),ConstDecl(Id(_iv),ArrayType(2,BoolType),None),ConstDecl(Id(_81Qp_o),ArrayType(2,BoolType),None)])),MethodDecl(Id($Vo),Static,[param(Id(_),FloatType),param(Id(_5),FloatType),param(Id(_0),FloatType),param(Id(O_3s),IntType),param(Id(V),ArrayType(6175,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(qR9_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_0),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(H),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($y),BoolType,None)),AttributeDecl(Static,VarDecl(Id($__),ArrayType(57,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 773))

    def test_774(self):
        line = '''Class _r:_{}Class v:V_q{}Class P:e7_{Constructor (fiJ1nt1,q,y,aK,_18,_,_Z6,_:String ;_,C:X6h){Val __:Array [String ,3];}Constructor (_:String ;h:_;D_,a,_,f_T__:Array [Boolean ,8]){} }'''
        expect = '''Program([ClassDecl(Id(_r),Id(_),[]),ClassDecl(Id(v),Id(V_q),[]),ClassDecl(Id(P),Id(e7_),[MethodDecl(Id(Constructor),Instance,[param(Id(fiJ1nt1),StringType),param(Id(q),StringType),param(Id(y),StringType),param(Id(aK),StringType),param(Id(_18),StringType),param(Id(_),StringType),param(Id(_Z6),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(X6h))),param(Id(C),ClassType(Id(X6h)))],Block([ConstDecl(Id(__),ArrayType(3,StringType),None)])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(h),ClassType(Id(_))),param(Id(D_),ArrayType(8,BoolType)),param(Id(a),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType)),param(Id(f_T__),ArrayType(8,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 774))

    def test_775(self):
        line = '''Class _{Val $_,_,_,$2x:Boolean ;Var _:Array [Array [Array [Array [String ,06_0],30_6998],0b1],55];}Class _:_{Val $5:Boolean ;Val $_,T:Array [Array [Array [Float ,056],0b100],0B100010];}Class G{}Class _Y:hy{}Class p{}Class _7_:o8{}Class d:q{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($2x),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(55,ArrayType(1,ArrayType(306998,ArrayType(48,StringType))))))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($5),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(34,ArrayType(4,ArrayType(46,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(34,ArrayType(4,ArrayType(46,FloatType))),None))]),ClassDecl(Id(G),[]),ClassDecl(Id(_Y),Id(hy),[]),ClassDecl(Id(p),[]),ClassDecl(Id(_7_),Id(o8),[]),ClassDecl(Id(d),Id(q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 775))

    def test_776(self):
        line = '''Class _3{}Class __6:d0{}Class __:u_o{Constructor (){}Var $_:Float ;$__(n,z__,TM:Array [Array [Array [Array [String ,0b10_1_0_1_1],054],0X43],0b110101]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_3),[]),ClassDecl(Id(__6),Id(d0),[]),ClassDecl(Id(__),Id(u_o),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),MethodDecl(Id($__),Static,[param(Id(n),ArrayType(53,ArrayType(67,ArrayType(44,ArrayType(43,StringType))))),param(Id(z__),ArrayType(53,ArrayType(67,ArrayType(44,ArrayType(43,StringType))))),param(Id(TM),ArrayType(53,ArrayType(67,ArrayType(44,ArrayType(43,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 776))

    def test_777(self):
        line = '''Class U_:g{}Class W{Var $089_:Array [Array [Array [Boolean ,021],0B1101],0b11];Destructor (){} }Class _:dp{$_(_2f9_N,R,s6j,KQ,___p:Array [Array [Boolean ,0B1101],0XD_79_5];i:__){Break ;} }'''
        expect = '''Program([ClassDecl(Id(U_),Id(g),[]),ClassDecl(Id(W),[AttributeDecl(Static,VarDecl(Id($089_),ArrayType(3,ArrayType(13,ArrayType(17,BoolType))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(dp),[MethodDecl(Id($_),Static,[param(Id(_2f9_N),ArrayType(55189,ArrayType(13,BoolType))),param(Id(R),ArrayType(55189,ArrayType(13,BoolType))),param(Id(s6j),ArrayType(55189,ArrayType(13,BoolType))),param(Id(KQ),ArrayType(55189,ArrayType(13,BoolType))),param(Id(___p),ArrayType(55189,ArrayType(13,BoolType))),param(Id(i),ClassType(Id(__)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 777))

    def test_778(self):
        line = '''Class b__V{Val $_5_,_:Array [Int ,05_453];Var $L,_,$_yn,b,_:Array [Array [Array [Array [Float ,0XC],0B11],78],0x41];Destructor (){}Constructor (_y,_:_23){} }Class _L__:_{Val p0K8:a_A;Constructor (_,_,_,S,_,_,_,_7,___Qr:String ){}Val a,$_:Array [Float ,0b1_1_01];}'''
        expect = '''Program([ClassDecl(Id(b__V),[AttributeDecl(Static,ConstDecl(Id($_5_),ArrayType(2859,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2859,IntType),None)),AttributeDecl(Static,VarDecl(Id($L),ArrayType(65,ArrayType(78,ArrayType(3,ArrayType(12,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(65,ArrayType(78,ArrayType(3,ArrayType(12,FloatType)))))),AttributeDecl(Static,VarDecl(Id($_yn),ArrayType(65,ArrayType(78,ArrayType(3,ArrayType(12,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(65,ArrayType(78,ArrayType(3,ArrayType(12,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(65,ArrayType(78,ArrayType(3,ArrayType(12,FloatType)))))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_y),ClassType(Id(_23))),param(Id(_),ClassType(Id(_23)))],Block([]))]),ClassDecl(Id(_L__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(p0K8),ClassType(Id(a_A)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(S),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_7),StringType),param(Id(___Qr),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(a),ArrayType(13,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(13,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 778))

    def test_779(self):
        line = '''Class __j__6:_{Val $y336:Array [Array [Float ,053],061];}Class h1{Constructor (_q_,__0:Array [Array [Array [Array [Array [Array [Int ,1],02],8_214863],07],0b1],07];f,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(__j__6),Id(_),[AttributeDecl(Static,ConstDecl(Id($y336),ArrayType(49,ArrayType(43,FloatType)),None))]),ClassDecl(Id(h1),[MethodDecl(Id(Constructor),Instance,[param(Id(_q_),ArrayType(7,ArrayType(1,ArrayType(7,ArrayType(8214863,ArrayType(2,ArrayType(1,IntType))))))),param(Id(__0),ArrayType(7,ArrayType(1,ArrayType(7,ArrayType(8214863,ArrayType(2,ArrayType(1,IntType))))))),param(Id(f),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 779))

    def test_780(self):
        line = '''Class K:_{$_(_L_2:Ct_4m08__v;_R6cQ,_:Array [Int ,02];D:Array [Array [Array [Array [Array [Array [Array [Boolean ,20],0B1_0_1111],0b1],20],9_1],0B1],20]){} }Class __:_i_vA3{Val $c8_m:___;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(K),Id(_),[MethodDecl(Id($_),Static,[param(Id(_L_2),ClassType(Id(Ct_4m08__v))),param(Id(_R6cQ),ArrayType(2,IntType)),param(Id(_),ArrayType(2,IntType)),param(Id(D),ArrayType(20,ArrayType(1,ArrayType(91,ArrayType(20,ArrayType(1,ArrayType(47,ArrayType(20,BoolType))))))))],Block([]))]),ClassDecl(Id(__),Id(_i_vA3),[AttributeDecl(Static,ConstDecl(Id($c8_m),ClassType(Id(___)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 780))

    def test_781(self):
        line = '''Class _R__6:_VL5P_2W_{$X29HD(_5:Float ;e_8_O,_7,_:Float ;_A5:String ;gD9,_T,_638_,_:Y;O:Array [Array [Array [String ,0xF],0xF],033]){}Val _,$0K_:Boolean ;Constructor (){}Val _2_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_R__6),Id(_VL5P_2W_),[MethodDecl(Id($X29HD),Static,[param(Id(_5),FloatType),param(Id(e_8_O),FloatType),param(Id(_7),FloatType),param(Id(_),FloatType),param(Id(_A5),StringType),param(Id(gD9),ClassType(Id(Y))),param(Id(_T),ClassType(Id(Y))),param(Id(_638_),ClassType(Id(Y))),param(Id(_),ClassType(Id(Y))),param(Id(O),ArrayType(27,ArrayType(15,ArrayType(15,StringType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($0K_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_2_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 781))

    def test_782(self):
        line = '''Class _5_:_{}Class _:i{}Class nE_{Constructor (){} }Class n{Val $n,_2,$__,_,_,_:Array [Array [Array [Array [String ,076],0X50],06],0xE];}Class __8:a6K_p9x{Val ___,_,$R97,$_:GB_K;}Class Ee28{}Class I{}'''
        expect = '''Program([ClassDecl(Id(_5_),Id(_),[]),ClassDecl(Id(_),Id(i),[]),ClassDecl(Id(nE_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(n),[AttributeDecl(Static,ConstDecl(Id($n),ArrayType(14,ArrayType(6,ArrayType(80,ArrayType(62,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_2),ArrayType(14,ArrayType(6,ArrayType(80,ArrayType(62,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(14,ArrayType(6,ArrayType(80,ArrayType(62,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(14,ArrayType(6,ArrayType(80,ArrayType(62,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(14,ArrayType(6,ArrayType(80,ArrayType(62,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(14,ArrayType(6,ArrayType(80,ArrayType(62,StringType)))),None))]),ClassDecl(Id(__8),Id(a6K_p9x),[AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(GB_K)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(GB_K)),None)),AttributeDecl(Static,ConstDecl(Id($R97),ClassType(Id(GB_K)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(GB_K)),None))]),ClassDecl(Id(Ee28),[]),ClassDecl(Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 782))

    def test_783(self):
        line = '''Class _{Destructor (){} }Class VPC{$nQ_(){Continue ;} }Class _{Constructor (_d,_50:Int ){}Var _,Y,k_z8:Array [Array [Int ,0B1001001],0B1001001];Var $5,$wj4:Boolean ;}Class _s{Constructor (gx,a:_C48R0){}Var __1_:Array [Array [Array [Array [Int ,0B11],0x3_F],0x27],0x27];C(){} }Class _j_58pd89:vv4_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(VPC),[MethodDecl(Id($nQ_),Static,[],Block([Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_d),IntType),param(Id(_50),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(73,ArrayType(73,IntType)))),AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(73,ArrayType(73,IntType)))),AttributeDecl(Instance,VarDecl(Id(k_z8),ArrayType(73,ArrayType(73,IntType)))),AttributeDecl(Static,VarDecl(Id($5),BoolType)),AttributeDecl(Static,VarDecl(Id($wj4),BoolType))]),ClassDecl(Id(_s),[MethodDecl(Id(Constructor),Instance,[param(Id(gx),ClassType(Id(_C48R0))),param(Id(a),ClassType(Id(_C48R0)))],Block([])),AttributeDecl(Instance,VarDecl(Id(__1_),ArrayType(39,ArrayType(39,ArrayType(63,ArrayType(3,IntType)))))),MethodDecl(Id(C),Instance,[],Block([]))]),ClassDecl(Id(_j_58pd89),Id(vv4_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 783))

    def test_784(self):
        line = '''Class Q{}Class N:_{Constructor (m7_:Array [Array [Int ,0X4],01];_,_:Array [Array [Boolean ,0X8_E9D],98];_CG_:Array [Array [Int ,8],0114];Y,_b__6:_;_s_,_:W;C,b__p4,__,b7_5,_f,f:Array [Array [Array [Array [Float ,0x42],0x2],98],0114]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Q),[]),ClassDecl(Id(N),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(m7_),ArrayType(1,ArrayType(4,IntType))),param(Id(_),ArrayType(98,ArrayType(36509,BoolType))),param(Id(_),ArrayType(98,ArrayType(36509,BoolType))),param(Id(_CG_),ArrayType(76,ArrayType(8,IntType))),param(Id(Y),ClassType(Id(_))),param(Id(_b__6),ClassType(Id(_))),param(Id(_s_),ClassType(Id(W))),param(Id(_),ClassType(Id(W))),param(Id(C),ArrayType(76,ArrayType(98,ArrayType(2,ArrayType(66,FloatType))))),param(Id(b__p4),ArrayType(76,ArrayType(98,ArrayType(2,ArrayType(66,FloatType))))),param(Id(__),ArrayType(76,ArrayType(98,ArrayType(2,ArrayType(66,FloatType))))),param(Id(b7_5),ArrayType(76,ArrayType(98,ArrayType(2,ArrayType(66,FloatType))))),param(Id(_f),ArrayType(76,ArrayType(98,ArrayType(2,ArrayType(66,FloatType))))),param(Id(f),ArrayType(76,ArrayType(98,ArrayType(2,ArrayType(66,FloatType)))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 784))

    def test_785(self):
        line = '''Class g_v1{}Class _8:G{$S0_(u9:_5;_,_b:String ;t_q:Array [Array [String ,0X91_B_0],0X59];N8:_;l7v,G_,B_4,_h_:Array [Array [Float ,031_30],0B111001]){Break ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(g_v1),[]),ClassDecl(Id(_8),Id(G),[MethodDecl(Id($S0_),Static,[param(Id(u9),ClassType(Id(_5))),param(Id(_),StringType),param(Id(_b),StringType),param(Id(t_q),ArrayType(89,ArrayType(37296,StringType))),param(Id(N8),ClassType(Id(_))),param(Id(l7v),ArrayType(57,ArrayType(1624,FloatType))),param(Id(G_),ArrayType(57,ArrayType(1624,FloatType))),param(Id(B_4),ArrayType(57,ArrayType(1624,FloatType))),param(Id(_h_),ArrayType(57,ArrayType(1624,FloatType)))],Block([Break,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 785))

    def test_786(self):
        line = '''Class F:b_{}Class _:n{$_(){}Destructor (){}Val _:Array [Array [Array [Array [Float ,91],0B1],03],91];$_(_0,_,_:_;_t:String ){Return ;}Destructor (){Continue ;} }Class b:H_{}Class _9:X{Var $R:B_;Constructor (w6,V:O;D3:Array [Int ,06]){} }'''
        expect = '''Program([ClassDecl(Id(F),Id(b_),[]),ClassDecl(Id(_),Id(n),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(91,ArrayType(3,ArrayType(1,ArrayType(91,FloatType)))),None)),MethodDecl(Id($_),Static,[param(Id(_0),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_t),StringType)],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(b),Id(H_),[]),ClassDecl(Id(_9),Id(X),[AttributeDecl(Static,VarDecl(Id($R),ClassType(Id(B_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(w6),ClassType(Id(O))),param(Id(V),ClassType(Id(O))),param(Id(D3),ArrayType(6,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 786))

    def test_787(self):
        line = '''Class _{Constructor (){}Destructor (){} }Class _H{}Class _:G_{}Class F4{}Class f19{Constructor (S,N,y4:L6;J_:Array [Array [Array [Array [String ,86],04],01_16],04];A__,K:_;u_,_2x2x1:Int ;_8d8_W:Boolean ;k_,ESO:_5;D_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_H),[]),ClassDecl(Id(_),Id(G_),[]),ClassDecl(Id(F4),[]),ClassDecl(Id(f19),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(L6))),param(Id(N),ClassType(Id(L6))),param(Id(y4),ClassType(Id(L6))),param(Id(J_),ArrayType(4,ArrayType(78,ArrayType(4,ArrayType(86,StringType))))),param(Id(A__),ClassType(Id(_))),param(Id(K),ClassType(Id(_))),param(Id(u_),IntType),param(Id(_2x2x1),IntType),param(Id(_8d8_W),BoolType),param(Id(k_),ClassType(Id(_5))),param(Id(ESO),ClassType(Id(_5))),param(Id(D_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 787))

    def test_788(self):
        line = '''Class _47:_9__Z{Destructor (){}Constructor (){y::$1_D.v.a.__i._4();} }Class v2:__{Constructor (){}Destructor (){Continue ;}Constructor (){}Constructor (i,_:Array [Float ,0B1001000]){} }Class Q{}'''
        expect = '''Program([ClassDecl(Id(_47),Id(_9__Z),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(FieldAccess(FieldAccess(FieldAccess(Id(y),Id($1_D)),Id(v)),Id(a)),Id(__i)),Id(_4),[])]))]),ClassDecl(Id(v2),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i),ArrayType(72,FloatType)),param(Id(_),ArrayType(72,FloatType))],Block([]))]),ClassDecl(Id(Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 788))

    def test_789(self):
        line = '''Class G2:_12_{Val _50,Uq_:Array [Array [Array [Array [Int ,58],0X2],0x3A],0X41];Constructor (){Val u,__52f,_,P,_f:String ;}Destructor (){} }Class _G19_Y0_:Q_3{}Class a_:V9PHr{}'''
        expect = '''Program([ClassDecl(Id(G2),Id(_12_),[AttributeDecl(Instance,ConstDecl(Id(_50),ArrayType(65,ArrayType(58,ArrayType(2,ArrayType(58,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(Uq_),ArrayType(65,ArrayType(58,ArrayType(2,ArrayType(58,IntType)))),None)),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(u),StringType,None),ConstDecl(Id(__52f),StringType,None),ConstDecl(Id(_),StringType,None),ConstDecl(Id(P),StringType,None),ConstDecl(Id(_f),StringType,None)])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_G19_Y0_),Id(Q_3),[]),ClassDecl(Id(a_),Id(V9PHr),[])])'''
        self.assertTrue(TestAST.test(line, expect, 789))

    def test_790(self):
        line = '''Class n{Val R_3q:__;}Class lmT_:iZBZ{}Class M1_{Constructor (S,_,__,_:Array [Array [Boolean ,06_7_1],0XF7B_4BC];_Z:String ){}Var v_,B:Array [String ,12];Var _,$_:Array [Boolean ,04];}'''
        expect = '''Program([ClassDecl(Id(n),[AttributeDecl(Instance,ConstDecl(Id(R_3q),ClassType(Id(__)),None))]),ClassDecl(Id(lmT_),Id(iZBZ),[]),ClassDecl(Id(M1_),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ArrayType(16233660,ArrayType(441,BoolType))),param(Id(_),ArrayType(16233660,ArrayType(441,BoolType))),param(Id(__),ArrayType(16233660,ArrayType(441,BoolType))),param(Id(_),ArrayType(16233660,ArrayType(441,BoolType))),param(Id(_Z),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(v_),ArrayType(12,StringType))),AttributeDecl(Instance,VarDecl(Id(B),ArrayType(12,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 790))

    def test_791(self):
        line = '''Class _6Sdz{Constructor (_D_eZ,_6,_9ae0z_lj:__4hGk;_31_:Boolean ;_o4,_,_:f92A_Y5u_;_w,_7147_,__,Vp0,_j4b_,__,_L,__86_f,_:Boolean ){Var _M:Float ;}Var _:Int ;}Class __7:_7{}Class _6:x__{}'''
        expect = '''Program([ClassDecl(Id(_6Sdz),[MethodDecl(Id(Constructor),Instance,[param(Id(_D_eZ),ClassType(Id(__4hGk))),param(Id(_6),ClassType(Id(__4hGk))),param(Id(_9ae0z_lj),ClassType(Id(__4hGk))),param(Id(_31_),BoolType),param(Id(_o4),ClassType(Id(f92A_Y5u_))),param(Id(_),ClassType(Id(f92A_Y5u_))),param(Id(_),ClassType(Id(f92A_Y5u_))),param(Id(_w),BoolType),param(Id(_7147_),BoolType),param(Id(__),BoolType),param(Id(Vp0),BoolType),param(Id(_j4b_),BoolType),param(Id(__),BoolType),param(Id(_L),BoolType),param(Id(__86_f),BoolType),param(Id(_),BoolType)],Block([VarDecl(Id(_M),FloatType)])),AttributeDecl(Instance,VarDecl(Id(_),IntType))]),ClassDecl(Id(__7),Id(_7),[]),ClassDecl(Id(_6),Id(x__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 791))

    def test_792(self):
        line = '''Class _:_C8_o8{Var $U_,$_T__326_7,_p,$1:Array [Int ,24];Constructor (_j:Int ;_YBR,_f:Array [Boolean ,24];_,o,_5,c:Ix9l;_6:Array [Int ,24]){} }Class S9hQ_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_C8_o8),[AttributeDecl(Static,VarDecl(Id($U_),ArrayType(24,IntType))),AttributeDecl(Static,VarDecl(Id($_T__326_7),ArrayType(24,IntType))),AttributeDecl(Instance,VarDecl(Id(_p),ArrayType(24,IntType))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(24,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(_j),IntType),param(Id(_YBR),ArrayType(24,BoolType)),param(Id(_f),ArrayType(24,BoolType)),param(Id(_),ClassType(Id(Ix9l))),param(Id(o),ClassType(Id(Ix9l))),param(Id(_5),ClassType(Id(Ix9l))),param(Id(c),ClassType(Id(Ix9l))),param(Id(_6),ArrayType(24,IntType))],Block([]))]),ClassDecl(Id(S9hQ_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 792))

    def test_793(self):
        line = '''Class _{Var C,a,T:Int ;Destructor (){}$6(qm,J_,C_,v___:Array [Float ,0b1];p:String ;X_:_){}Constructor (f_,z,n_,_:Boolean ){}Constructor (){}Var _,$_Z,__,_:qc90W;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(C),IntType)),AttributeDecl(Instance,VarDecl(Id(a),IntType)),AttributeDecl(Instance,VarDecl(Id(T),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($6),Static,[param(Id(qm),ArrayType(1,FloatType)),param(Id(J_),ArrayType(1,FloatType)),param(Id(C_),ArrayType(1,FloatType)),param(Id(v___),ArrayType(1,FloatType)),param(Id(p),StringType),param(Id(X_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(f_),BoolType),param(Id(z),BoolType),param(Id(n_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(qc90W)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_Z),ClassType(Id(qc90W)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(qc90W)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(qc90W)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 793))

    def test_794(self):
        line = '''Class _5{Constructor (){} }Class U{}Class _:_{Var MI:Boolean ;Var $4:String ;}Class df:__{}Class _:mL{Var $4,K:Array [String ,0x8_B];Destructor (){Break ;Break ;Val _r,_:String ;} }Class Z{}'''
        expect = '''Program([ClassDecl(Id(_5),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(U),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(MI),BoolType)),AttributeDecl(Static,VarDecl(Id($4),StringType))]),ClassDecl(Id(df),Id(__),[]),ClassDecl(Id(_),Id(mL),[AttributeDecl(Static,VarDecl(Id($4),ArrayType(139,StringType))),AttributeDecl(Instance,VarDecl(Id(K),ArrayType(139,StringType))),MethodDecl(Id(Destructor),Instance,[],Block([Break,Break,ConstDecl(Id(_r),StringType,None),ConstDecl(Id(_),StringType,None)]))]),ClassDecl(Id(Z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 794))

    def test_795(self):
        line = '''Class h:j{Constructor (_:_3;X,__2,n3_P5,B__26__O,V_:Array [Int ,01];P6:Float ;h1,_,_,X:Array [String ,0x3C]){}Constructor (_,z_7:Array [Boolean ,0b1];g7rN:Array [Int ,0X7_A0];Xtb:String ;__7_:Boolean ;a,_7i6_:Boolean ){} }Class V__{}'''
        expect = '''Program([ClassDecl(Id(h),Id(j),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_3))),param(Id(X),ArrayType(1,IntType)),param(Id(__2),ArrayType(1,IntType)),param(Id(n3_P5),ArrayType(1,IntType)),param(Id(B__26__O),ArrayType(1,IntType)),param(Id(V_),ArrayType(1,IntType)),param(Id(P6),FloatType),param(Id(h1),ArrayType(60,StringType)),param(Id(_),ArrayType(60,StringType)),param(Id(_),ArrayType(60,StringType)),param(Id(X),ArrayType(60,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,BoolType)),param(Id(z_7),ArrayType(1,BoolType)),param(Id(g7rN),ArrayType(1952,IntType)),param(Id(Xtb),StringType),param(Id(__7_),BoolType),param(Id(a),BoolType),param(Id(_7i6_),BoolType)],Block([]))]),ClassDecl(Id(V__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 795))

    def test_796(self):
        line = '''Class X:I{}Class _{Constructor (fM:Int ;g06,_2u5:Array [Array [String ,0X6F],0B100000];y:_;h,K:Array [Array [Array [Array [String ,056],54],54],063]){g8::$G();Var kx_:Array [Array [String ,0X2B],54];} }'''
        expect = '''Program([ClassDecl(Id(X),Id(I),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(fM),IntType),param(Id(g06),ArrayType(32,ArrayType(111,StringType))),param(Id(_2u5),ArrayType(32,ArrayType(111,StringType))),param(Id(y),ClassType(Id(_))),param(Id(h),ArrayType(51,ArrayType(54,ArrayType(54,ArrayType(46,StringType))))),param(Id(K),ArrayType(51,ArrayType(54,ArrayType(54,ArrayType(46,StringType)))))],Block([Call(Id(g8),Id($G),[]),VarDecl(Id(kx_),ArrayType(54,ArrayType(43,StringType)))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 796))

    def test_797(self):
        line = '''Class Q_:I{}Class b:kZ1Ii_{Destructor (){} }Class cbg:_{_(Q:H;S,_39,_,d,r:Array [Array [String ,0xF],0103];r,______29p:Array [String ,8];D,c__06,_X,c,pc,l,_,_,K:Boolean ;CA,_,w_f,K,I,X:Boolean ;E7_:Z_;_v___:Boolean ;_:_8__ov;w_:String ;_:String ;_:String ;_b_:_0){Continue ;}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(Q_),Id(I),[]),ClassDecl(Id(b),Id(kZ1Ii_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(cbg),Id(_),[MethodDecl(Id(_),Instance,[param(Id(Q),ClassType(Id(H))),param(Id(S),ArrayType(67,ArrayType(15,StringType))),param(Id(_39),ArrayType(67,ArrayType(15,StringType))),param(Id(_),ArrayType(67,ArrayType(15,StringType))),param(Id(d),ArrayType(67,ArrayType(15,StringType))),param(Id(r),ArrayType(67,ArrayType(15,StringType))),param(Id(r),ArrayType(8,StringType)),param(Id(______29p),ArrayType(8,StringType)),param(Id(D),BoolType),param(Id(c__06),BoolType),param(Id(_X),BoolType),param(Id(c),BoolType),param(Id(pc),BoolType),param(Id(l),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(K),BoolType),param(Id(CA),BoolType),param(Id(_),BoolType),param(Id(w_f),BoolType),param(Id(K),BoolType),param(Id(I),BoolType),param(Id(X),BoolType),param(Id(E7_),ClassType(Id(Z_))),param(Id(_v___),BoolType),param(Id(_),ClassType(Id(_8__ov))),param(Id(w_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_b_),ClassType(Id(_0)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 797))

    def test_798(self):
        line = '''Class _{Constructor (){}Var z_:Int ;Destructor (){}Constructor (){}Val _,_V:Array [String ,0xB4];}Class _{}Class W:_{Constructor (){Break ;} }Class _9{Var $N,L,l_,gmk:_;Destructor (){Break ;} }Class h_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(z_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(180,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_V),ArrayType(180,StringType),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(W),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(_9),[AttributeDecl(Static,VarDecl(Id($N),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(gmk),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(h_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 798))

    def test_799(self):
        line = '''Class Z{OM(_:Array [Float ,0X36];r,_0:Array [Float ,052];_Z_,t__S,j_0,b,j:Array [Boolean ,052];_:Int ;_sE6:Float ){Val _:_hd0_uQ3;}Var $_:Array [Array [String ,0xA_4],0b110]=q::$7()._B._;}Class _:w{}Class S{Val $3_,p:_0;}Class ___3:___{}'''
        expect = '''Program([ClassDecl(Id(Z),[MethodDecl(Id(OM),Instance,[param(Id(_),ArrayType(54,FloatType)),param(Id(r),ArrayType(42,FloatType)),param(Id(_0),ArrayType(42,FloatType)),param(Id(_Z_),ArrayType(42,BoolType)),param(Id(t__S),ArrayType(42,BoolType)),param(Id(j_0),ArrayType(42,BoolType)),param(Id(b),ArrayType(42,BoolType)),param(Id(j),ArrayType(42,BoolType)),param(Id(_),IntType),param(Id(_sE6),FloatType)],Block([ConstDecl(Id(_),ClassType(Id(_hd0_uQ3)),None)])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(6,ArrayType(164,StringType)),FieldAccess(FieldAccess(CallExpr(Id(q),Id($7),[]),Id(_B)),Id(_))))]),ClassDecl(Id(_),Id(w),[]),ClassDecl(Id(S),[AttributeDecl(Static,ConstDecl(Id($3_),ClassType(Id(_0)),None)),AttributeDecl(Instance,ConstDecl(Id(p),ClassType(Id(_0)),None))]),ClassDecl(Id(___3),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 799))

    def test_800(self):
        line = '''Class _{}Class _J_{}Class __r{o__(aI4_,M,d:bA;xQ:Boolean ){}_5K(_,_3_6_L_3:z;s:i_4){Break ;Break ;}Constructor (_lu:Int ;k:Array [Array [Array [Array [Array [Float ,0x21],0x46],0x46],0x46],0x46]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_J_),[]),ClassDecl(Id(__r),[MethodDecl(Id(o__),Instance,[param(Id(aI4_),ClassType(Id(bA))),param(Id(M),ClassType(Id(bA))),param(Id(d),ClassType(Id(bA))),param(Id(xQ),BoolType)],Block([])),MethodDecl(Id(_5K),Instance,[param(Id(_),ClassType(Id(z))),param(Id(_3_6_L_3),ClassType(Id(z))),param(Id(s),ClassType(Id(i_4)))],Block([Break,Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_lu),IntType),param(Id(k),ArrayType(70,ArrayType(70,ArrayType(70,ArrayType(70,ArrayType(33,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 800))

    def test_801(self):
        line = '''Class _{Destructor (){} }Class z_W:_{}Class __{}Class _5:_{}Class H{}Class _{}Class z:__{$0_29(ZV_,_i__:String ;A:Array [Boolean ,8_6_6_27];_,s_:Array [Array [Boolean ,39],06];X3:p;p_wV_I_:Array [Boolean ,2];t0V,Q:Array [String ,040]){}Val $0,b__:Q_7W;}Class __:z_G{Z5_9(B:_;__6a:Int ;kt:Array [Array [Float ,39],0b1];xx:Array [Int ,3_0];_:String ;_m_:Array [Array [Float ,03_5_7],5_6]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(z_W),Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_5),Id(_),[]),ClassDecl(Id(H),[]),ClassDecl(Id(_),[]),ClassDecl(Id(z),Id(__),[MethodDecl(Id($0_29),Static,[param(Id(ZV_),StringType),param(Id(_i__),StringType),param(Id(A),ArrayType(86627,BoolType)),param(Id(_),ArrayType(6,ArrayType(39,BoolType))),param(Id(s_),ArrayType(6,ArrayType(39,BoolType))),param(Id(X3),ClassType(Id(p))),param(Id(p_wV_I_),ArrayType(2,BoolType)),param(Id(t0V),ArrayType(32,StringType)),param(Id(Q),ArrayType(32,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(Q_7W)),None)),AttributeDecl(Instance,ConstDecl(Id(b__),ClassType(Id(Q_7W)),None))]),ClassDecl(Id(__),Id(z_G),[MethodDecl(Id(Z5_9),Instance,[param(Id(B),ClassType(Id(_))),param(Id(__6a),IntType),param(Id(kt),ArrayType(1,ArrayType(39,FloatType))),param(Id(xx),ArrayType(30,IntType)),param(Id(_),StringType),param(Id(_m_),ArrayType(56,ArrayType(239,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 801))

    def test_802(self):
        line = '''Class Q:iq_{Val B653:Array [Array [Float ,0430],100];}Class U2:a{Constructor (){} }Class n8{Constructor (U:Array [Boolean ,0B1010010];_B,_:Array [Int ,0b1101];t6,e:Boolean ){} }Class H2_{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(iq_),[AttributeDecl(Instance,ConstDecl(Id(B653),ArrayType(100,ArrayType(280,FloatType)),None))]),ClassDecl(Id(U2),Id(a),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(n8),[MethodDecl(Id(Constructor),Instance,[param(Id(U),ArrayType(82,BoolType)),param(Id(_B),ArrayType(13,IntType)),param(Id(_),ArrayType(13,IntType)),param(Id(t6),BoolType),param(Id(e),BoolType)],Block([]))]),ClassDecl(Id(H2_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 802))

    def test_803(self):
        line = '''Class _{Constructor (L,P8,_,cYG853,_1:Float ;M,_R:Array [String ,016];W:Float ;_2:Array [Array [Float ,5],0x456]){}Destructor (){}Constructor (_:__se){}Var C_:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(L),FloatType),param(Id(P8),FloatType),param(Id(_),FloatType),param(Id(cYG853),FloatType),param(Id(_1),FloatType),param(Id(M),ArrayType(14,StringType)),param(Id(_R),ArrayType(14,StringType)),param(Id(W),FloatType),param(Id(_2),ArrayType(1110,ArrayType(5,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__se)))],Block([])),AttributeDecl(Instance,VarDecl(Id(C_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 803))

    def test_804(self):
        line = '''Class O:z{Var $B,$E,$u7:_d;}Class J:_{}Class K{}Class M_H{}Class _6_{}Class jus{}Class H{Var $_,$FM,$__,tBy ,$9,$9:_;}Class _3:_{Constructor (_:_x;_:f64;x:String ;O:Array [String ,0X3D]){} }'''
        expect = '''Program([ClassDecl(Id(O),Id(z),[AttributeDecl(Static,VarDecl(Id($B),ClassType(Id(_d)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($E),ClassType(Id(_d)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($u7),ClassType(Id(_d)),NullLiteral()))]),ClassDecl(Id(J),Id(_),[]),ClassDecl(Id(K),[]),ClassDecl(Id(M_H),[]),ClassDecl(Id(_6_),[]),ClassDecl(Id(jus),[]),ClassDecl(Id(H),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($FM),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(tBy),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_3),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_x))),param(Id(_),ClassType(Id(f64))),param(Id(x),StringType),param(Id(O),ArrayType(61,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 804))

    def test_805(self):
        line = '''Class c:_e18{}Class K:_{}Class b_{Var $y98:Int ;Val $_,$3j5:Array [Array [Array [Array [Array [Float ,0x2A],0X1_D_1_6],0B10],0B11],0b1010000];Val c_,$_,$7,$x3d6,z,_:Array [Array [Array [Array [Boolean ,0B1000110],04],47],0X5A];Val $U_:Boolean ;$aur(__,G6_,_:Float ;B17:C){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(c),Id(_e18),[]),ClassDecl(Id(K),Id(_),[]),ClassDecl(Id(b_),[AttributeDecl(Static,VarDecl(Id($y98),IntType)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(80,ArrayType(3,ArrayType(2,ArrayType(7446,ArrayType(42,FloatType))))),None)),AttributeDecl(Static,ConstDecl(Id($3j5),ArrayType(80,ArrayType(3,ArrayType(2,ArrayType(7446,ArrayType(42,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(c_),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($x3d6),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($U_),BoolType,None)),MethodDecl(Id($aur),Static,[param(Id(__),FloatType),param(Id(G6_),FloatType),param(Id(_),FloatType),param(Id(B17),ClassType(Id(C)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 805))

    def test_806(self):
        line = '''Class CAR_3_{}Class _J1:_{O_(){}$b(a:Array [Array [Array [Int ,0X7],0b1],0B10111];Q,T__w,__,Oe_:Int ;w6,i:Int ;m,g:Array [Int ,0100];G_4:Int ;_:S;__,t:Array [String ,2];Z,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(CAR_3_),[]),ClassDecl(Id(_J1),Id(_),[MethodDecl(Id(O_),Instance,[],Block([])),MethodDecl(Id($b),Static,[param(Id(a),ArrayType(23,ArrayType(1,ArrayType(7,IntType)))),param(Id(Q),IntType),param(Id(T__w),IntType),param(Id(__),IntType),param(Id(Oe_),IntType),param(Id(w6),IntType),param(Id(i),IntType),param(Id(m),ArrayType(64,IntType)),param(Id(g),ArrayType(64,IntType)),param(Id(G_4),IntType),param(Id(_),ClassType(Id(S))),param(Id(__),ArrayType(2,StringType)),param(Id(t),ArrayType(2,StringType)),param(Id(Z),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 806))

    def test_807(self):
        line = '''Class _4:___{Constructor (_7,_:Array [Int ,0B10_0]){}Var I,$1FzI,$_:Array [Array [String ,0x8],0122];Val _,$t2Q,_,t4,$2p:Array [Array [Array [Array [Array [Array [Array [Float ,021_6],0X23],0122],075],1],05],77];Constructor (__3:Array [Array [Array [Boolean ,0122],77],02_430];H8,_1:Array [Int ,77];_,_:k){} }'''
        expect = '''Program([ClassDecl(Id(_4),Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType))],Block([])),AttributeDecl(Instance,VarDecl(Id(I),ArrayType(82,ArrayType(8,StringType)))),AttributeDecl(Static,VarDecl(Id($1FzI),ArrayType(82,ArrayType(8,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(82,ArrayType(8,StringType)))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($t2Q),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(t4),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($2p),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__3),ArrayType(1304,ArrayType(77,ArrayType(82,BoolType)))),param(Id(H8),ArrayType(77,IntType)),param(Id(_1),ArrayType(77,IntType)),param(Id(_),ClassType(Id(k))),param(Id(_),ClassType(Id(k)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 807))

    def test_808(self):
        line = '''Class _{}Class S:_7H{Val wRq:Array [Int ,0b10];}Class _u{}Class _6l:_{}Class _23P:__{Val g_V,x__,_90,_,$_:Array [Array [Array [Array [String ,3_7],0142],69],7];Var iZ,$4,Qh3:jK;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(S),Id(_7H),[AttributeDecl(Instance,ConstDecl(Id(wRq),ArrayType(2,IntType),None))]),ClassDecl(Id(_u),[]),ClassDecl(Id(_6l),Id(_),[]),ClassDecl(Id(_23P),Id(__),[AttributeDecl(Instance,ConstDecl(Id(g_V),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(x__),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_90),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,VarDecl(Id(iZ),ClassType(Id(jK)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(jK)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Qh3),ClassType(Id(jK)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 808))

    def test_809(self):
        line = '''Class _{Constructor (){Break ;} }Class h7{}Class n:_S_{}Class m{}Class w:Gb{Val $o,$_,$_,$_,_:Array [Array [Array [Array [String ,0X9B],0x2],023],077_6];Destructor (){}Val _:Array [Array [Array [Array [Boolean ,6],07],0x53],0b1];}Class __l_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(h7),[]),ClassDecl(Id(n),Id(_S_),[]),ClassDecl(Id(m),[]),ClassDecl(Id(w),Id(Gb),[AttributeDecl(Static,ConstDecl(Id($o),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(83,ArrayType(7,ArrayType(6,BoolType)))),None))]),ClassDecl(Id(__l_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 809))

    def test_810(self):
        line = '''Class _X{}Class _:sk_{Val $6:Array [Array [Array [Array [Array [Boolean ,0X4],0B1],0X6_8_1],48],0X3A];Val r:_;Destructor (){}Val $W_6_:B;Constructor (_,_:Float ;kJ6H,_:Y){ {}Continue ;Continue ;} }Class _i44:RI{Var AZ:Float ;}Class _{}Class cb{}'''
        expect = '''Program([ClassDecl(Id(_X),[]),ClassDecl(Id(_),Id(sk_),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(58,ArrayType(48,ArrayType(1665,ArrayType(1,ArrayType(4,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(r),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($W_6_),ClassType(Id(B)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(kJ6H),ClassType(Id(Y))),param(Id(_),ClassType(Id(Y)))],Block([Block([]),Continue,Continue]))]),ClassDecl(Id(_i44),Id(RI),[AttributeDecl(Instance,VarDecl(Id(AZ),FloatType))]),ClassDecl(Id(_),[]),ClassDecl(Id(cb),[])])'''
        self.assertTrue(TestAST.test(line, expect, 810))

    def test_811(self):
        line = '''Class _2T{}Class U_:__{Destructor (){}$h_(){Continue ;} }Class _7V8:b_2L{Constructor (_Es,_,_:Array [Array [Array [Array [Float ,04],8_3],0B11],0106];t,u,Y9m:Array [Array [Array [Array [Array [Array [Float ,0b1],0B1],0B1_00_00],85],0106],5_49_9_3]){} }Class H_{}'''
        expect = '''Program([ClassDecl(Id(_2T),[]),ClassDecl(Id(U_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($h_),Static,[],Block([Continue]))]),ClassDecl(Id(_7V8),Id(b_2L),[MethodDecl(Id(Constructor),Instance,[param(Id(_Es),ArrayType(70,ArrayType(3,ArrayType(83,ArrayType(4,FloatType))))),param(Id(_),ArrayType(70,ArrayType(3,ArrayType(83,ArrayType(4,FloatType))))),param(Id(_),ArrayType(70,ArrayType(3,ArrayType(83,ArrayType(4,FloatType))))),param(Id(t),ArrayType(54993,ArrayType(70,ArrayType(85,ArrayType(16,ArrayType(1,ArrayType(1,FloatType))))))),param(Id(u),ArrayType(54993,ArrayType(70,ArrayType(85,ArrayType(16,ArrayType(1,ArrayType(1,FloatType))))))),param(Id(Y9m),ArrayType(54993,ArrayType(70,ArrayType(85,ArrayType(16,ArrayType(1,ArrayType(1,FloatType)))))))],Block([]))]),ClassDecl(Id(H_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 811))

    def test_812(self):
        line = '''Class G{}Class f679{Val $_:Array [Int ,0b1_01];Constructor (s43,__:n){}Val $5_,d,$__:Array [Array [Array [Array [String ,0X2F],0B1],0X28],64];Destructor (){} }Class _:__X__M{Destructor (){}_(){Val _,_,c:_6M;}Val _,_,_:Float ;}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(f679),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(5,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(s43),ClassType(Id(n))),param(Id(__),ClassType(Id(n)))],Block([])),AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(64,ArrayType(40,ArrayType(1,ArrayType(47,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(d),ArrayType(64,ArrayType(40,ArrayType(1,ArrayType(47,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(64,ArrayType(40,ArrayType(1,ArrayType(47,StringType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__X__M),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(_6M)),None),ConstDecl(Id(_),ClassType(Id(_6M)),None),ConstDecl(Id(c),ClassType(Id(_6M)),None)])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 812))

    def test_813(self):
        line = '''Class __6{I_(n,_:Q){ {}{} }}Class ____:___{}Class M8:_{Constructor (u:_;vHrL4,_7,_r:Float ;N3a,_:Int ;H59yj4R,j,__:_){}Var _,$_v,$u5:T;}Class _9:t2{Var $A,N2,$_:Array [Array [Array [String ,7],07_6],6_1];}'''
        expect = '''Program([ClassDecl(Id(__6),[MethodDecl(Id(I_),Instance,[param(Id(n),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q)))],Block([Block([]),Block([])]))]),ClassDecl(Id(____),Id(___),[]),ClassDecl(Id(M8),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(u),ClassType(Id(_))),param(Id(vHrL4),FloatType),param(Id(_7),FloatType),param(Id(_r),FloatType),param(Id(N3a),IntType),param(Id(_),IntType),param(Id(H59yj4R),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(T)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_v),ClassType(Id(T)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($u5),ClassType(Id(T)),NullLiteral()))]),ClassDecl(Id(_9),Id(t2),[AttributeDecl(Static,VarDecl(Id($A),ArrayType(61,ArrayType(62,ArrayType(7,StringType))))),AttributeDecl(Instance,VarDecl(Id(N2),ArrayType(61,ArrayType(62,ArrayType(7,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(61,ArrayType(62,ArrayType(7,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 813))

    def test_814(self):
        line = '''Class k{Constructor (){} }Class aT6SU{}Class _u:_V{Constructor (w8k:Array [Boolean ,0XC]){}Constructor (_6_:Int ;y2,m_B_,P,l,x:n){Var _,A1:Array [Array [Array [Boolean ,075],6],0x29];}Destructor (){Break ;} }Class _:g{}'''
        expect = '''Program([ClassDecl(Id(k),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(aT6SU),[]),ClassDecl(Id(_u),Id(_V),[MethodDecl(Id(Constructor),Instance,[param(Id(w8k),ArrayType(12,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_6_),IntType),param(Id(y2),ClassType(Id(n))),param(Id(m_B_),ClassType(Id(n))),param(Id(P),ClassType(Id(n))),param(Id(l),ClassType(Id(n))),param(Id(x),ClassType(Id(n)))],Block([VarDecl(Id(_),ArrayType(41,ArrayType(6,ArrayType(61,BoolType)))),VarDecl(Id(A1),ArrayType(41,ArrayType(6,ArrayType(61,BoolType))))])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_),Id(g),[])])'''
        self.assertTrue(TestAST.test(line, expect, 814))

    def test_815(self):
        line = '''Class y_7{Destructor (){} }Class _1_2__5__{$Xx_(MW3:Array [String ,0B111001]){Var __:Array [Array [Float ,0b1101],06_4_7];Continue ;}Val _4,n4:String ;Val $vG,$y:Boolean ;}Class Ee{}'''
        expect = '''Program([ClassDecl(Id(y_7),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_1_2__5__),[MethodDecl(Id($Xx_),Static,[param(Id(MW3),ArrayType(57,StringType))],Block([VarDecl(Id(__),ArrayType(423,ArrayType(13,FloatType))),Continue])),AttributeDecl(Instance,ConstDecl(Id(_4),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(n4),StringType,None)),AttributeDecl(Static,ConstDecl(Id($vG),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($y),BoolType,None))]),ClassDecl(Id(Ee),[])])'''
        self.assertTrue(TestAST.test(line, expect, 815))

    def test_816(self):
        line = '''Class P:_n1C__A{}Class __{}Class _0:_{Destructor (){}Constructor (){} }Class _:z_{}Class I__l:e_0n{Val $_8,h,_:__;Constructor (O__wQ:_x;l_c,p_2:Boolean ){Var _:Array [Float ,8_85];Continue ;} }Class __:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(P),Id(_n1C__A),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_0),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(z_),[]),ClassDecl(Id(I__l),Id(e_0n),[AttributeDecl(Static,ConstDecl(Id($_8),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(h),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(O__wQ),ClassType(Id(_x))),param(Id(l_c),BoolType),param(Id(p_2),BoolType)],Block([VarDecl(Id(_),ArrayType(885,FloatType)),Continue]))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 816))

    def test_817(self):
        line = '''Class _I:Q{}Class _:_{}Class q86{Val $12:Array [String ,0b1010110];Val _7:_U4U__;}Class __7:_up{}Class R:cV{Constructor (z1,A:_;PdK:Array [Int ,0B10]){ {Var r_7_W:Array [Float ,062];}Break ;} }Class _{Constructor (zh6:Array [Array [Array [Array [Array [Array [Array [Boolean ,54],3],54],54],062],0B1],7];_,_41,__,pR,_:Int ){} }Class p4:_{Var P:Array [Array [Array [Array [Float ,0x3C],062],0X5],0x9C];Val _:P;}Class _{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_I),Id(Q),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(q86),[AttributeDecl(Static,ConstDecl(Id($12),ArrayType(86,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_7),ClassType(Id(_U4U__)),None))]),ClassDecl(Id(__7),Id(_up),[]),ClassDecl(Id(R),Id(cV),[MethodDecl(Id(Constructor),Instance,[param(Id(z1),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(PdK),ArrayType(2,IntType))],Block([Block([VarDecl(Id(r_7_W),ArrayType(50,FloatType))]),Break]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(zh6),ArrayType(7,ArrayType(1,ArrayType(50,ArrayType(54,ArrayType(54,ArrayType(3,ArrayType(54,BoolType)))))))),param(Id(_),IntType),param(Id(_41),IntType),param(Id(__),IntType),param(Id(pR),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(p4),Id(_),[AttributeDecl(Instance,VarDecl(Id(P),ArrayType(156,ArrayType(5,ArrayType(50,ArrayType(60,FloatType)))))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(P)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 817))

    def test_818(self):
        line = '''Class z:n_{}Class _{Constructor (u__l,ek_,_,q:F;Q,Q:_;j5,_,__z,_:g;_,NF:Array [Boolean ,6559_38_0];__B:Array [Array [Boolean ,0XD],0b1_011];x:_z;__H3_:_0;e,_Y,o0_,_:_;e,_:_;K,X:Int ;_qjJ2_,S,_,___l5_,B_:Int ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(z),Id(n_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(u__l),ClassType(Id(F))),param(Id(ek_),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(q),ClassType(Id(F))),param(Id(Q),ClassType(Id(_))),param(Id(Q),ClassType(Id(_))),param(Id(j5),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(__z),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(_),ArrayType(6559380,BoolType)),param(Id(NF),ArrayType(6559380,BoolType)),param(Id(__B),ArrayType(11,ArrayType(13,BoolType))),param(Id(x),ClassType(Id(_z))),param(Id(__H3_),ClassType(Id(_0))),param(Id(e),ClassType(Id(_))),param(Id(_Y),ClassType(Id(_))),param(Id(o0_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(K),IntType),param(Id(X),IntType),param(Id(_qjJ2_),IntType),param(Id(S),IntType),param(Id(_),IntType),param(Id(___l5_),IntType),param(Id(B_),IntType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 818))

    def test_819(self):
        line = '''Class __E:__{Constructor (_5,_:Array [Float ,01]){Return ;}$F2_I_h8_(_,Q1,A:Array [Array [Int ,053],0X4D];_x4:Array [Int ,062]){}Var $_,$cpW05,R:Array [Array [Array [Array [String ,40],0B110],0X4D],053];}Class _{}Class X2{}'''
        expect = '''Program([ClassDecl(Id(__E),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_5),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType))],Block([Return()])),MethodDecl(Id($F2_I_h8_),Static,[param(Id(_),ArrayType(77,ArrayType(43,IntType))),param(Id(Q1),ArrayType(77,ArrayType(43,IntType))),param(Id(A),ArrayType(77,ArrayType(43,IntType))),param(Id(_x4),ArrayType(50,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(43,ArrayType(77,ArrayType(6,ArrayType(40,StringType)))))),AttributeDecl(Static,VarDecl(Id($cpW05),ArrayType(43,ArrayType(77,ArrayType(6,ArrayType(40,StringType)))))),AttributeDecl(Instance,VarDecl(Id(R),ArrayType(43,ArrayType(77,ArrayType(6,ArrayType(40,StringType))))))]),ClassDecl(Id(_),[]),ClassDecl(Id(X2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 819))

    def test_820(self):
        line = '''Class _{$p_5_bG__8(__:Array [String ,0X3];_:i;_9,L:Boolean ;_:Float ;P,_,__4U:Boolean ;I_:Array [Array [String ,0x8],0X87];_:w;_2:Array [Array [Boolean ,58],301_8_4_1]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($p_5_bG__8),Static,[param(Id(__),ArrayType(3,StringType)),param(Id(_),ClassType(Id(i))),param(Id(_9),BoolType),param(Id(L),BoolType),param(Id(_),FloatType),param(Id(P),BoolType),param(Id(_),BoolType),param(Id(__4U),BoolType),param(Id(I_),ArrayType(135,ArrayType(8,StringType))),param(Id(_),ClassType(Id(w))),param(Id(_2),ArrayType(301841,ArrayType(58,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 820))

    def test_821(self):
        line = '''Class W:_{Constructor (){_::$_._.z._();__8R_0::$K.o5g1().Qr.h().i4.r();Return ;}Val _,m_p,$_,Y2t19:_;}Class S:_ewl__{Var $7:Int ;Destructor (){}$__2(){}c(y,q:Int ){} }'''
        expect = '''Program([ClassDecl(Id(W),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(FieldAccess(FieldAccess(Id(_),Id($_)),Id(_)),Id(z)),Id(_),[]),Call(FieldAccess(CallExpr(FieldAccess(CallExpr(FieldAccess(Id(__8R_0),Id($K)),Id(o5g1),[]),Id(Qr)),Id(h),[]),Id(i4)),Id(r),[]),Return()])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(m_p),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(Y2t19),ClassType(Id(_)),None))]),ClassDecl(Id(S),Id(_ewl__),[AttributeDecl(Static,VarDecl(Id($7),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($__2),Static,[],Block([])),MethodDecl(Id(c),Instance,[param(Id(y),IntType),param(Id(q),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 821))

    def test_822(self):
        line = '''Class _7:u{Val _:Boolean ;_H(w_0:u;h,__:Float ;R_,E5,t:Array [Array [String ,83],0B111];i,_:Array [Array [Array [Array [Float ,036],0B1],83],0X1A];_:Array [Array [Array [Boolean ,0x9B_1],8_8],8];_:Boolean ){} }Class _:____{Var _:String ;Var $_:Array [Array [Int ,83],4];}Class t:_{$E_Gd_(){} }'''
        expect = '''Program([ClassDecl(Id(_7),Id(u),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(_H),Instance,[param(Id(w_0),ClassType(Id(u))),param(Id(h),FloatType),param(Id(__),FloatType),param(Id(R_),ArrayType(7,ArrayType(83,StringType))),param(Id(E5),ArrayType(7,ArrayType(83,StringType))),param(Id(t),ArrayType(7,ArrayType(83,StringType))),param(Id(i),ArrayType(26,ArrayType(83,ArrayType(1,ArrayType(30,FloatType))))),param(Id(_),ArrayType(26,ArrayType(83,ArrayType(1,ArrayType(30,FloatType))))),param(Id(_),ArrayType(8,ArrayType(88,ArrayType(2481,BoolType)))),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),Id(____),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,ArrayType(83,IntType))))]),ClassDecl(Id(t),Id(_),[MethodDecl(Id($E_Gd_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 822))

    def test_823(self):
        line = '''Class l:_hJ{Var X0,L2:Int ;$__4(_,x1:Boolean ;_1:Float ;_T:Boolean ;_:_;V_,__1_r:e_D;a:Float ;U:Array [String ,0x43];s,y,TA:Array [Array [String ,0b100],0X4D];_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(l),Id(_hJ),[AttributeDecl(Instance,VarDecl(Id(X0),IntType)),AttributeDecl(Instance,VarDecl(Id(L2),IntType)),MethodDecl(Id($__4),Static,[param(Id(_),BoolType),param(Id(x1),BoolType),param(Id(_1),FloatType),param(Id(_T),BoolType),param(Id(_),ClassType(Id(_))),param(Id(V_),ClassType(Id(e_D))),param(Id(__1_r),ClassType(Id(e_D))),param(Id(a),FloatType),param(Id(U),ArrayType(67,StringType)),param(Id(s),ArrayType(77,ArrayType(4,StringType))),param(Id(y),ArrayType(77,ArrayType(4,StringType))),param(Id(TA),ArrayType(77,ArrayType(4,StringType))),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 823))

    def test_824(self):
        line = '''Class __{Var G,_:Array [Array [String ,0xB4_7],0xF19];Val V,k:Boolean ;Var $6,t,$069,L4:Array [Array [Boolean ,4_8_9_0],92];}Class u:__0{Var $5_:_;Constructor (__:_){} }'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(G),ArrayType(3865,ArrayType(2887,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3865,ArrayType(2887,StringType)))),AttributeDecl(Instance,ConstDecl(Id(V),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(k),BoolType,None)),AttributeDecl(Static,VarDecl(Id($6),ArrayType(92,ArrayType(4890,BoolType)))),AttributeDecl(Instance,VarDecl(Id(t),ArrayType(92,ArrayType(4890,BoolType)))),AttributeDecl(Static,VarDecl(Id($069),ArrayType(92,ArrayType(4890,BoolType)))),AttributeDecl(Instance,VarDecl(Id(L4),ArrayType(92,ArrayType(4890,BoolType))))]),ClassDecl(Id(u),Id(__0),[AttributeDecl(Static,VarDecl(Id($5_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 824))

    def test_825(self):
        line = '''Class Q{}Class r{}Class j:_l5_xA{Destructor (){} }Class p:V_{}Class U4_23:_{Var _9:String ;Destructor (){}Constructor (y4,_,_,K:String ;__,Y:q_o){}Constructor (){ {} }Var Iw3S,$9,$_,a:Array [Float ,57];Constructor (P04y5:String ){}Var $_:Int ;}Class _s_{}Class s6:r{Constructor (I_:Array [Int ,0B11000];o_:Array [Array [Array [Boolean ,0B1_011_00_1],077],0X5E];V8:Float ;Rj,h,_r1,KF9Y6:Array [Array [Boolean ,0B11000],077]){} }'''
        expect = '''Program([ClassDecl(Id(Q),[]),ClassDecl(Id(r),[]),ClassDecl(Id(j),Id(_l5_xA),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(p),Id(V_),[]),ClassDecl(Id(U4_23),Id(_),[AttributeDecl(Instance,VarDecl(Id(_9),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(y4),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(K),StringType),param(Id(__),ClassType(Id(q_o))),param(Id(Y),ClassType(Id(q_o)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(Iw3S),ArrayType(57,FloatType))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(57,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(57,FloatType))),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(57,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(P04y5),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(_s_),[]),ClassDecl(Id(s6),Id(r),[MethodDecl(Id(Constructor),Instance,[param(Id(I_),ArrayType(24,IntType)),param(Id(o_),ArrayType(94,ArrayType(63,ArrayType(89,BoolType)))),param(Id(V8),FloatType),param(Id(Rj),ArrayType(63,ArrayType(24,BoolType))),param(Id(h),ArrayType(63,ArrayType(24,BoolType))),param(Id(_r1),ArrayType(63,ArrayType(24,BoolType))),param(Id(KF9Y6),ArrayType(63,ArrayType(24,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 825))

    def test_826(self):
        line = '''Class o{Val _:Array [Float ,076];}Class ___3Ki{}Class _o{Constructor (I,_J6:Int ;_4_F_k:_){"'"\n"._.__I.q();Return ;} }Class k_{y(T_,KEQ,rx:Array [Array [Int ,0b1_0],83];_,_:v){Continue ;}Constructor (Pe:String ;_,v_,_,u:_7){Break ;}$076_(){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(o),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(62,FloatType),None))]),ClassDecl(Id(___3Ki),[]),ClassDecl(Id(_o),[MethodDecl(Id(Constructor),Instance,[param(Id(I),IntType),param(Id(_J6),IntType),param(Id(_4_F_k),ClassType(Id(_)))],Block([Call(FieldAccess(FieldAccess(StringLit('"\n),Id(_)),Id(__I)),Id(q),[]),Return()]))]),ClassDecl(Id(k_),[MethodDecl(Id(y),Instance,[param(Id(T_),ArrayType(83,ArrayType(2,IntType))),param(Id(KEQ),ArrayType(83,ArrayType(2,IntType))),param(Id(rx),ArrayType(83,ArrayType(2,IntType))),param(Id(_),ClassType(Id(v))),param(Id(_),ClassType(Id(v)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(Pe),StringType),param(Id(_),ClassType(Id(_7))),param(Id(v_),ClassType(Id(_7))),param(Id(_),ClassType(Id(_7))),param(Id(u),ClassType(Id(_7)))],Block([Break])),MethodDecl(Id($076_),Static,[],Block([]))]),ClassDecl(Id(_),[])])'''
        #self.assertTrue(TestAST.test(line, expect, 826))

    def test_827(self):
        line = '''Class _s:__{Constructor (){}Val $8__:Array [Int ,0x3];Constructor (){ {}Break ;g::$8();}Constructor (_,Y,_38:I;l7,Ip39:Float ;Z,q:_P;C,R,R,O_:_59c){}Val _:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_s),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($8__),ArrayType(3,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Break,Call(Id(g),Id($8),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(I))),param(Id(Y),ClassType(Id(I))),param(Id(_38),ClassType(Id(I))),param(Id(l7),FloatType),param(Id(Ip39),FloatType),param(Id(Z),ClassType(Id(_P))),param(Id(q),ClassType(Id(_P))),param(Id(C),ClassType(Id(_59c))),param(Id(R),ClassType(Id(_59c))),param(Id(R),ClassType(Id(_59c))),param(Id(O_),ClassType(Id(_59c)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 827))

    def test_828(self):
        line = '''Class _{Constructor (l,x,P:Array [String ,17];_G,_:Array [Array [Array [Array [Array [Int ,06],0B101111],0X4A],07_64],0XD64];w:Array [Int ,0b1]){} }Class _:_A_{Var A,_,_:_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(l),ArrayType(17,StringType)),param(Id(x),ArrayType(17,StringType)),param(Id(P),ArrayType(17,StringType)),param(Id(_G),ArrayType(3428,ArrayType(500,ArrayType(74,ArrayType(47,ArrayType(6,IntType)))))),param(Id(_),ArrayType(3428,ArrayType(500,ArrayType(74,ArrayType(47,ArrayType(6,IntType)))))),param(Id(w),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(_),Id(_A_),[AttributeDecl(Instance,VarDecl(Id(A),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 828))

    def test_829(self):
        line = '''Class u_k_:_6{}Class __:_zi6{}Class _O_4{Constructor (){}$7(_,_RQJ_,___9,Jb20__3m:String ){Continue ;Break ;Break ;}Constructor (_,V:Array [Boolean ,0b1111]){Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(u_k_),Id(_6),[]),ClassDecl(Id(__),Id(_zi6),[]),ClassDecl(Id(_O_4),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($7),Static,[param(Id(_),StringType),param(Id(_RQJ_),StringType),param(Id(___9),StringType),param(Id(Jb20__3m),StringType)],Block([Continue,Break,Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(15,BoolType)),param(Id(V),ArrayType(15,BoolType))],Block([Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 829))

    def test_830(self):
        line = '''Class _46:N{}Class dV:k{}Class _Rz{}Class _96:___{}Class _5:X{Constructor (x_3_,t__K:Array [Array [Array [Int ,1_7],3],7];L,_Z8:Og;_:Float ){}Destructor (){}__x(___M:_;_:Array [String ,030_25_47];_40_,_P,_45_,Q_:_;_,_:Int ){}$P(OG,__,w:_k;F3F,_:Array [Array [Int ,0X3F],055]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_46),Id(N),[]),ClassDecl(Id(dV),Id(k),[]),ClassDecl(Id(_Rz),[]),ClassDecl(Id(_96),Id(___),[]),ClassDecl(Id(_5),Id(X),[MethodDecl(Id(Constructor),Instance,[param(Id(x_3_),ArrayType(7,ArrayType(3,ArrayType(17,IntType)))),param(Id(t__K),ArrayType(7,ArrayType(3,ArrayType(17,IntType)))),param(Id(L),ClassType(Id(Og))),param(Id(_Z8),ClassType(Id(Og))),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(__x),Instance,[param(Id(___M),ClassType(Id(_))),param(Id(_),ArrayType(99687,StringType)),param(Id(_40_),ClassType(Id(_))),param(Id(_P),ClassType(Id(_))),param(Id(_45_),ClassType(Id(_))),param(Id(Q_),ClassType(Id(_))),param(Id(_),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id($P),Static,[param(Id(OG),ClassType(Id(_k))),param(Id(__),ClassType(Id(_k))),param(Id(w),ClassType(Id(_k))),param(Id(F3F),ArrayType(45,ArrayType(63,IntType))),param(Id(_),ArrayType(45,ArrayType(63,IntType)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 830))

    def test_831(self):
        line = '''Class _{}Class R{Val I4:Array [Float ,0b11100];}Class bR:_0_{Val P:w7_;Var $6,$211:String ;}Class M:H{Val $_:Array [Array [Array [Array [Array [Array [Int ,0xF_A70],0b1_0],6],0X2C],0X2C],010];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(R),[AttributeDecl(Instance,ConstDecl(Id(I4),ArrayType(28,FloatType),None))]),ClassDecl(Id(bR),Id(_0_),[AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(w7_)),None)),AttributeDecl(Static,VarDecl(Id($6),StringType)),AttributeDecl(Static,VarDecl(Id($211),StringType))]),ClassDecl(Id(M),Id(H),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(8,ArrayType(44,ArrayType(44,ArrayType(6,ArrayType(2,ArrayType(64112,IntType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 831))

    def test_832(self):
        line = '''Class __{Constructor (_,_,H,h9,F,_0_d1_,_,_51xD,_:Array [Float ,5];_517,k5:Array [Float ,24];_,_X,_:String ;_e___,_8,k,_J_:Array [Array [Array [Array [Array [Float ,0B111101],8_78],0X3_5],0xF_BF],8]){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(H),ArrayType(5,FloatType)),param(Id(h9),ArrayType(5,FloatType)),param(Id(F),ArrayType(5,FloatType)),param(Id(_0_d1_),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(_51xD),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(_517),ArrayType(24,FloatType)),param(Id(k5),ArrayType(24,FloatType)),param(Id(_),StringType),param(Id(_X),StringType),param(Id(_),StringType),param(Id(_e___),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType)))))),param(Id(_8),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType)))))),param(Id(k),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType)))))),param(Id(_J_),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 832))

    def test_833(self):
        line = '''Class s{$J1(_,S,_:S;__:H;c_z_,__:Array [Array [Boolean ,06],6];W2j_:Array [Array [Array [Array [Int ,0XAA5_6],0xAA],0B1_0],03];O,K:Float ;H:Int ;gv:Array [Float ,011];_:Array [Float ,16_8]){} }'''
        expect = '''Program([ClassDecl(Id(s),[MethodDecl(Id($J1),Static,[param(Id(_),ClassType(Id(S))),param(Id(S),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(__),ClassType(Id(H))),param(Id(c_z_),ArrayType(6,ArrayType(6,BoolType))),param(Id(__),ArrayType(6,ArrayType(6,BoolType))),param(Id(W2j_),ArrayType(3,ArrayType(2,ArrayType(170,ArrayType(43606,IntType))))),param(Id(O),FloatType),param(Id(K),FloatType),param(Id(H),IntType),param(Id(gv),ArrayType(9,FloatType)),param(Id(_),ArrayType(168,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 833))

    def test_834(self):
        line = '''Class y:A_3{Val _7_12,_W,$13__,$CC,_e,$4x,$E:Array [Array [Array [Array [Int ,0325_6],0B1_0_1_0],017],0X2F];}Class __L_{}Class _{Constructor (){}Val $I2,s_,S:String ;Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(y),Id(A_3),[AttributeDecl(Instance,ConstDecl(Id(_7_12),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_W),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($13__),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($CC),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_e),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($4x),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($E),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None))]),ClassDecl(Id(__L_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($I2),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(s_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(S),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 834))

    def test_835(self):
        line = '''Class cT{Var h,$_:String ;Constructor (___,I7:Array [Array [Array [Array [Array [Array [Array [Float ,0b11],5],89],89],0b1],89],03];_,Q:w;_:Array [Array [Array [Int ,0X33],0b1111],0xA]){}Val ___,n3:Array [Float ,89];$2(){} }Class _1{}Class Jp{}Class H_:k_75{$_bd(__:_A;_:Array [Array [String ,0XD],072_2];_7:W;_T,w,_V_:_;_:Float ;_,_:_;o_:Int ;_4,_4:Array [Array [Array [Boolean ,89],047],0XB8D_7]){} }'''
        expect = '''Program([ClassDecl(Id(cT),[AttributeDecl(Instance,VarDecl(Id(h),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(___),ArrayType(3,ArrayType(89,ArrayType(1,ArrayType(89,ArrayType(89,ArrayType(5,ArrayType(3,FloatType)))))))),param(Id(I7),ArrayType(3,ArrayType(89,ArrayType(1,ArrayType(89,ArrayType(89,ArrayType(5,ArrayType(3,FloatType)))))))),param(Id(_),ClassType(Id(w))),param(Id(Q),ClassType(Id(w))),param(Id(_),ArrayType(10,ArrayType(15,ArrayType(51,IntType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(___),ArrayType(89,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(n3),ArrayType(89,FloatType),None)),MethodDecl(Id($2),Static,[],Block([]))]),ClassDecl(Id(_1),[]),ClassDecl(Id(Jp),[]),ClassDecl(Id(H_),Id(k_75),[MethodDecl(Id($_bd),Static,[param(Id(__),ClassType(Id(_A))),param(Id(_),ArrayType(466,ArrayType(13,StringType))),param(Id(_7),ClassType(Id(W))),param(Id(_T),ClassType(Id(_))),param(Id(w),ClassType(Id(_))),param(Id(_V_),ClassType(Id(_))),param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(o_),IntType),param(Id(_4),ArrayType(47319,ArrayType(39,ArrayType(89,BoolType)))),param(Id(_4),ArrayType(47319,ArrayType(39,ArrayType(89,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 835))

    def test_836(self):
        line = '''Class _0_4{}Class __a:_{}Class P{Var _v_:Array [Array [Array [Boolean ,043_1],0B11111],076_5];Destructor (){}Val $8,Q_139,$S_a:Array [Array [Float ,0X5A],70];Var $R_2,$9:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_0_4),[]),ClassDecl(Id(__a),Id(_),[]),ClassDecl(Id(P),[AttributeDecl(Instance,VarDecl(Id(_v_),ArrayType(501,ArrayType(31,ArrayType(281,BoolType))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(70,ArrayType(90,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(Q_139),ArrayType(70,ArrayType(90,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($S_a),ArrayType(70,ArrayType(90,FloatType)),None)),AttributeDecl(Static,VarDecl(Id($R_2),BoolType)),AttributeDecl(Static,VarDecl(Id($9),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 836))

    def test_837(self):
        line = '''Class a{Constructor (){}_(J,W5,__,u:String ){}Constructor (){} }Class _S8:_{Constructor (L,_,G95:T;f655:Int ;eO,j:String ;_,o,___:Boolean ){} }Class lM{Constructor (){} }Class e{}Class V_:_I{Val am,$1,$u,s:Array [Array [Array [Array [Int ,0X38],025],0x42],0X38];}'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(J),StringType),param(Id(W5),StringType),param(Id(__),StringType),param(Id(u),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_S8),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(L),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(G95),ClassType(Id(T))),param(Id(f655),IntType),param(Id(eO),StringType),param(Id(j),StringType),param(Id(_),BoolType),param(Id(o),BoolType),param(Id(___),BoolType)],Block([]))]),ClassDecl(Id(lM),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(e),[]),ClassDecl(Id(V_),Id(_I),[AttributeDecl(Instance,ConstDecl(Id(am),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($u),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 837))

    def test_838(self):
        line = '''Class _:_9{}Class tK_95:y{$Y_(){} }Class _{Val $b:Float ;J(_:Float ;t,J:Boolean ;f36,_:Array [Array [Int ,0126],0XE]){Val _v:Z_;Var dPC:Array [Array [Boolean ,0B100],0X45];}Constructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_9),[]),ClassDecl(Id(tK_95),Id(y),[MethodDecl(Id($Y_),Static,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($b),FloatType,None)),MethodDecl(Id(J),Instance,[param(Id(_),FloatType),param(Id(t),BoolType),param(Id(J),BoolType),param(Id(f36),ArrayType(14,ArrayType(86,IntType))),param(Id(_),ArrayType(14,ArrayType(86,IntType)))],Block([ConstDecl(Id(_v),ClassType(Id(Z_)),None),VarDecl(Id(dPC),ArrayType(69,ArrayType(4,BoolType)))])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 838))

    def test_839(self):
        line = '''Class R:_{}Class g6{Constructor (P:Array [Array [Array [Array [Array [Int ,0B1100001],04],0B1100001],91_1],01];_1:Boolean ;_:Array [Array [Array [Array [Array [Int ,0xA],046],0103],0XA],0b1]){}Destructor (){} }Class _{}Class _:_{Val E:Array [Array [Array [Array [Array [Array [Array [String ,71],9_7],71],0XC],71],0b11000],71];}'''
        expect = '''Program([ClassDecl(Id(R),Id(_),[]),ClassDecl(Id(g6),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(1,ArrayType(911,ArrayType(97,ArrayType(4,ArrayType(97,IntType)))))),param(Id(_1),BoolType),param(Id(_),ArrayType(1,ArrayType(10,ArrayType(67,ArrayType(38,ArrayType(10,IntType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(71,ArrayType(24,ArrayType(71,ArrayType(12,ArrayType(71,ArrayType(97,ArrayType(71,StringType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 839))

    def test_840(self):
        line = '''Class ny_6:_{$_(){Break ;Return ;} }Class l5d:_{Var r:Int ;Constructor (){}Constructor (){} }Class y_{}Class _{}Class _gN2_:x___54{Destructor (){}$_4(){} }Class _D9:l{}'''
        expect = '''Program([ClassDecl(Id(ny_6),Id(_),[MethodDecl(Id($_),Static,[],Block([Break,Return()]))]),ClassDecl(Id(l5d),Id(_),[AttributeDecl(Instance,VarDecl(Id(r),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(y_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_gN2_),Id(x___54),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_4),Static,[],Block([]))]),ClassDecl(Id(_D9),Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 840))

    def test_841(self):
        line = '''Class Hx{Constructor (CTC3n9QMB_:Array [Array [Array [String ,0B1100010],03],0X2D];v1_:Int ;_,c:Array [Array [Array [Array [Array [Float ,01],66],01],0x3_34],01];__:Array [String ,98]){} }'''
        expect = '''Program([ClassDecl(Id(Hx),[MethodDecl(Id(Constructor),Instance,[param(Id(CTC3n9QMB_),ArrayType(45,ArrayType(3,ArrayType(98,StringType)))),param(Id(v1_),IntType),param(Id(_),ArrayType(1,ArrayType(820,ArrayType(1,ArrayType(66,ArrayType(1,FloatType)))))),param(Id(c),ArrayType(1,ArrayType(820,ArrayType(1,ArrayType(66,ArrayType(1,FloatType)))))),param(Id(__),ArrayType(98,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 841))

    def test_842(self):
        line = '''Class _{Var _,$_,$4:Array [Boolean ,3];}Class __{Destructor (){}$S93(){}Constructor (){}$8(r:_R;_:Float ){Continue ;Break ;}Constructor (){}Val $KL:Boolean ;}Class W_R{}Class S{}Class _{}Class _{Var T,_,A9_:Array [Array [Array [Boolean ,0b11],0x5F],0x5F];}Class O:j{Val f,c7:R;Constructor (T,_:Int ;_:Array [Array [Array [Int ,0B100011],0b1_0],0X8];_:Float ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(3,BoolType)))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($S93),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($8),Static,[param(Id(r),ClassType(Id(_R))),param(Id(_),FloatType)],Block([Continue,Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($KL),BoolType,None))]),ClassDecl(Id(W_R),[]),ClassDecl(Id(S),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(T),ArrayType(95,ArrayType(95,ArrayType(3,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(95,ArrayType(95,ArrayType(3,BoolType))))),AttributeDecl(Instance,VarDecl(Id(A9_),ArrayType(95,ArrayType(95,ArrayType(3,BoolType)))))]),ClassDecl(Id(O),Id(j),[AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(R)),None)),AttributeDecl(Instance,ConstDecl(Id(c7),ClassType(Id(R)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(T),IntType),param(Id(_),IntType),param(Id(_),ArrayType(8,ArrayType(2,ArrayType(35,IntType)))),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 842))

    def test_843(self):
        line = '''Class u4ZWT{Destructor (){}_(_yUZ:Array [Float ,0B1];_,_:Array [Array [Array [Array [Array [Int ,0X5_2],25],022],0B110000],0b1];_:Array [Array [Array [Int ,0xE],0X12],9];___:Array [Int ,0B110000];__1,_v6W:_9U_;h_2,_P4_,__:Array [Array [Array [Array [Float ,0B110000],01_1_6_6],0126_15],022];t_,__:String ;r:Int ){} }'''
        expect = '''Program([ClassDecl(Id(u4ZWT),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_yUZ),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,ArrayType(48,ArrayType(18,ArrayType(25,ArrayType(82,IntType)))))),param(Id(_),ArrayType(1,ArrayType(48,ArrayType(18,ArrayType(25,ArrayType(82,IntType)))))),param(Id(_),ArrayType(9,ArrayType(18,ArrayType(14,IntType)))),param(Id(___),ArrayType(48,IntType)),param(Id(__1),ClassType(Id(_9U_))),param(Id(_v6W),ClassType(Id(_9U_))),param(Id(h_2),ArrayType(18,ArrayType(5517,ArrayType(630,ArrayType(48,FloatType))))),param(Id(_P4_),ArrayType(18,ArrayType(5517,ArrayType(630,ArrayType(48,FloatType))))),param(Id(__),ArrayType(18,ArrayType(5517,ArrayType(630,ArrayType(48,FloatType))))),param(Id(t_),StringType),param(Id(__),StringType),param(Id(r),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 843))

    def test_844(self):
        line = '''Class _{}Class _4{Val $y:Array [Array [Float ,5],5];Constructor (_,_j_,cVy__:Array [Array [Array [Array [Array [String ,0X6],3],0x1E],053],053];t:Array [Array [Array [String ,0b1001111],053],0b1001111];J1,d:k_e;v_Z_5:Float ){} }Class z28aS:__0x{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($y),ArrayType(5,ArrayType(5,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43,ArrayType(43,ArrayType(30,ArrayType(3,ArrayType(6,StringType)))))),param(Id(_j_),ArrayType(43,ArrayType(43,ArrayType(30,ArrayType(3,ArrayType(6,StringType)))))),param(Id(cVy__),ArrayType(43,ArrayType(43,ArrayType(30,ArrayType(3,ArrayType(6,StringType)))))),param(Id(t),ArrayType(79,ArrayType(43,ArrayType(79,StringType)))),param(Id(J1),ClassType(Id(k_e))),param(Id(d),ClassType(Id(k_e))),param(Id(v_Z_5),FloatType)],Block([]))]),ClassDecl(Id(z28aS),Id(__0x),[])])'''
        self.assertTrue(TestAST.test(line, expect, 844))

    def test_845(self):
        line = '''Class _{}Class _:__4D8FMl{}Class _1{}Class _{Destructor (){Val _,_:Array [Float ,0x5_6_B];Val _,c_:Int ;Val _:Array [Array [Float ,0126],0b100000];Continue ;}Var $0:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__4D8FMl),[]),ClassDecl(Id(_1),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(1387,FloatType),None),ConstDecl(Id(_),ArrayType(1387,FloatType),None),ConstDecl(Id(_),IntType,None),ConstDecl(Id(c_),IntType,None),ConstDecl(Id(_),ArrayType(32,ArrayType(86,FloatType)),None),Continue])),AttributeDecl(Static,VarDecl(Id($0),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 845))

    def test_846(self):
        line = '''Class q5{}Class S_4F_:_{$__(V,g3:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x3],0x38],02566_5],44],01],87],060]){Var wk___:Array [Int ,060];} }Class f_3c_N___:_{}'''
        expect = '''Program([ClassDecl(Id(q5),[]),ClassDecl(Id(S_4F_),Id(_),[MethodDecl(Id($__),Static,[param(Id(V),ArrayType(48,ArrayType(87,ArrayType(1,ArrayType(44,ArrayType(11189,ArrayType(56,ArrayType(3,BoolType)))))))),param(Id(g3),ArrayType(48,ArrayType(87,ArrayType(1,ArrayType(44,ArrayType(11189,ArrayType(56,ArrayType(3,BoolType))))))))],Block([VarDecl(Id(wk___),ArrayType(48,IntType))]))]),ClassDecl(Id(f_3c_N___),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 846))

    def test_847(self):
        line = '''Class C:v{r(d,_,_,An,d,Wc23,_W,_H_:Int ;_H_Ix:Array [Boolean ,012]){}Destructor (){Continue ;}Val $q91_3:String ;}Class J_:Zp{}Class _{Destructor (){}Destructor (){} }Class _:_X_{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(C),Id(v),[MethodDecl(Id(r),Instance,[param(Id(d),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(An),IntType),param(Id(d),IntType),param(Id(Wc23),IntType),param(Id(_W),IntType),param(Id(_H_),IntType),param(Id(_H_Ix),ArrayType(10,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($q91_3),StringType,None))]),ClassDecl(Id(J_),Id(Zp),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_X_),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 847))

    def test_848(self):
        line = '''Class _1:O{$g7(_:Array [Array [Array [Int ,051],0x15],24]){} }Class _:HH{Var _r_:q;}Class PT:_{Var $0_,$vsL,Od,$N_:Array [Array [Boolean ,0b1],0B101110];}Class _:__{Constructor (_,__:m_){}_(){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(O),[MethodDecl(Id($g7),Static,[param(Id(_),ArrayType(24,ArrayType(21,ArrayType(41,IntType))))],Block([]))]),ClassDecl(Id(_),Id(HH),[AttributeDecl(Instance,VarDecl(Id(_r_),ClassType(Id(q)),NullLiteral()))]),ClassDecl(Id(PT),Id(_),[AttributeDecl(Static,VarDecl(Id($0_),ArrayType(46,ArrayType(1,BoolType)))),AttributeDecl(Static,VarDecl(Id($vsL),ArrayType(46,ArrayType(1,BoolType)))),AttributeDecl(Instance,VarDecl(Id(Od),ArrayType(46,ArrayType(1,BoolType)))),AttributeDecl(Static,VarDecl(Id($N_),ArrayType(46,ArrayType(1,BoolType))))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(m_))),param(Id(__),ClassType(Id(m_)))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 848))

    def test_849(self):
        line = '''Class p:Y{Val _,_:_7_;Constructor (_:Int ;f4:_Q2Rf_;_,_,_31_N3_,K_:Array [Int ,0131];B,_709,_K,_:Boolean ;M,_r2_5:Int ;_,_,ED_Sq1_,T_9,_L3m_:J_;_,__,_,_3,_:_8_){}Var $_,_:Array [Array [String ,9_1_0],07];}'''
        expect = '''Program([ClassDecl(Id(p),Id(Y),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_7_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_7_)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(f4),ClassType(Id(_Q2Rf_))),param(Id(_),ArrayType(89,IntType)),param(Id(_),ArrayType(89,IntType)),param(Id(_31_N3_),ArrayType(89,IntType)),param(Id(K_),ArrayType(89,IntType)),param(Id(B),BoolType),param(Id(_709),BoolType),param(Id(_K),BoolType),param(Id(_),BoolType),param(Id(M),IntType),param(Id(_r2_5),IntType),param(Id(_),ClassType(Id(J_))),param(Id(_),ClassType(Id(J_))),param(Id(ED_Sq1_),ClassType(Id(J_))),param(Id(T_9),ClassType(Id(J_))),param(Id(_L3m_),ClassType(Id(J_))),param(Id(_),ClassType(Id(_8_))),param(Id(__),ClassType(Id(_8_))),param(Id(_),ClassType(Id(_8_))),param(Id(_3),ClassType(Id(_8_))),param(Id(_),ClassType(Id(_8_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,ArrayType(910,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,ArrayType(910,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 849))

    def test_850(self):
        line = '''Class G{Val $__,$92_8_,$_,_,r,A:Boolean ;Val $p,$_0Xy:Int ;Destructor (){} }Class q:_9U{Var $x,$20,Gf32,$F_,T:S;Constructor (){}Var $2,$_,_,$Oy_:a9;Val $4_6,_O:Array [Array [Int ,0103],0X32];}'''
        expect = '''Program([ClassDecl(Id(G),[AttributeDecl(Static,ConstDecl(Id($__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($92_8_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(r),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(A),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($p),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_0Xy),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(q),Id(_9U),[AttributeDecl(Static,VarDecl(Id($x),ClassType(Id(S)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($20),ClassType(Id(S)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Gf32),ClassType(Id(S)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($F_),ClassType(Id(S)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(T),ClassType(Id(S)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Oy_),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4_6),ArrayType(50,ArrayType(67,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_O),ArrayType(50,ArrayType(67,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 850))

    def test_851(self):
        line = '''Class _:A_{}Class H:_{}Class __{Constructor (_,_:Array [Int ,0135];_:Array [Array [Array [Array [Int ,04],0XCE],0X30],01_1_4];_:Array [Int ,0x39];_x4,_,j:_;_,_5,_93:Float ){ {} }Var $8:E;}'''
        expect = '''Program([ClassDecl(Id(_),Id(A_),[]),ClassDecl(Id(H),Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(93,IntType)),param(Id(_),ArrayType(93,IntType)),param(Id(_),ArrayType(76,ArrayType(48,ArrayType(206,ArrayType(4,IntType))))),param(Id(_),ArrayType(57,IntType)),param(Id(_x4),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(_),FloatType),param(Id(_5),FloatType),param(Id(_93),FloatType)],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(E)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 851))

    def test_852(self):
        line = '''Class f:_{_(_U:_;G:String ;T:Array [Array [Array [Array [Boolean ,0111],0X2B],0B1011010],9_316990];u3:_;_,_v:Array [Float ,0B10_0_1_01];j,_,_,n,Q:w_;_,_:Array [Float ,0X2B]){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_U),ClassType(Id(_))),param(Id(G),StringType),param(Id(T),ArrayType(9316990,ArrayType(90,ArrayType(43,ArrayType(73,BoolType))))),param(Id(u3),ClassType(Id(_))),param(Id(_),ArrayType(37,FloatType)),param(Id(_v),ArrayType(37,FloatType)),param(Id(j),ClassType(Id(w_))),param(Id(_),ClassType(Id(w_))),param(Id(_),ClassType(Id(w_))),param(Id(n),ClassType(Id(w_))),param(Id(Q),ClassType(Id(w_))),param(Id(_),ArrayType(43,FloatType)),param(Id(_),ArrayType(43,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 852))

    def test_853(self):
        line = '''Class _4{Val $j6,a_:Boolean ;Var $0,$_,_,$6i_,$68,$_:Boolean ;Constructor (){} }Class W:_{}Class _7{Var $E,$__,$X__4,$_4:Array [Array [Array [Int ,7],05_2_6_4_74],0X62];}'''
        expect = '''Program([ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($j6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(a_),BoolType,None)),AttributeDecl(Static,VarDecl(Id($0),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($6i_),BoolType)),AttributeDecl(Static,VarDecl(Id($68),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(W),Id(_),[]),ClassDecl(Id(_7),[AttributeDecl(Static,VarDecl(Id($E),ArrayType(98,ArrayType(175420,ArrayType(7,IntType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(98,ArrayType(175420,ArrayType(7,IntType))))),AttributeDecl(Static,VarDecl(Id($X__4),ArrayType(98,ArrayType(175420,ArrayType(7,IntType))))),AttributeDecl(Static,VarDecl(Id($_4),ArrayType(98,ArrayType(175420,ArrayType(7,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 853))

    def test_854(self):
        line = '''Class v{$__(l,T3:Array [Int ,0b1];W36:Boolean ;R:Int ;_:Array [Array [Boolean ,032],0X6];_qp_s:Array [Float ,0X6]){}Val __,w_7:_;}Class H_:P_{_(){} }Class j4{Constructor (o:D1;_,TE_,_l,_W2,_11M:_){} }'''
        expect = '''Program([ClassDecl(Id(v),[MethodDecl(Id($__),Static,[param(Id(l),ArrayType(1,IntType)),param(Id(T3),ArrayType(1,IntType)),param(Id(W36),BoolType),param(Id(R),IntType),param(Id(_),ArrayType(6,ArrayType(26,BoolType))),param(Id(_qp_s),ArrayType(6,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(w_7),ClassType(Id(_)),None))]),ClassDecl(Id(H_),Id(P_),[MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(j4),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ClassType(Id(D1))),param(Id(_),ClassType(Id(_))),param(Id(TE_),ClassType(Id(_))),param(Id(_l),ClassType(Id(_))),param(Id(_W2),ClassType(Id(_))),param(Id(_11M),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 854))

    def test_855(self):
        line = '''Class _14:_{Var $5u__4t:Array [Array [Int ,0x6_C],0x7];}Class n_T:g{ep7(_,w4:Array [Int ,07_04_2752];_tH1:Array [Float ,0XE];_T,_,_:Array [Array [Int ,0x4],0b1100100];vZ9:Array [Array [Boolean ,22],0B1_01];a0_,x_,_:_){} }'''
        expect = '''Program([ClassDecl(Id(_14),Id(_),[AttributeDecl(Static,VarDecl(Id($5u__4t),ArrayType(7,ArrayType(108,IntType))))]),ClassDecl(Id(n_T),Id(g),[MethodDecl(Id(ep7),Instance,[param(Id(_),ArrayType(1852906,IntType)),param(Id(w4),ArrayType(1852906,IntType)),param(Id(_tH1),ArrayType(14,FloatType)),param(Id(_T),ArrayType(100,ArrayType(4,IntType))),param(Id(_),ArrayType(100,ArrayType(4,IntType))),param(Id(_),ArrayType(100,ArrayType(4,IntType))),param(Id(vZ9),ArrayType(5,ArrayType(22,BoolType))),param(Id(a0_),ClassType(Id(_))),param(Id(x_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 855))

    def test_856(self):
        line = '''Class J:LC{Val u,_:ds8_;}Class v:_2{Destructor (){}Constructor (L:Array [Boolean ,0B1001010]){}Constructor (_:Int ;f,_,c8gIt:Array [Array [Array [Array [Array [Float ,13],021_3],042],0b10001],0x3_FDC]){If (!-M_::$6()._1){}Else {}Continue ;} }Class V{Constructor (){Continue ;}Val $_72,_4,$L:_;Var $7:_;}Class _:U{}Class _3d{}'''
        expect = '''Program([ClassDecl(Id(J),Id(LC),[AttributeDecl(Instance,ConstDecl(Id(u),ClassType(Id(ds8_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(ds8_)),None))]),ClassDecl(Id(v),Id(_2),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),ArrayType(74,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(f),ArrayType(16348,ArrayType(17,ArrayType(34,ArrayType(139,ArrayType(13,FloatType)))))),param(Id(_),ArrayType(16348,ArrayType(17,ArrayType(34,ArrayType(139,ArrayType(13,FloatType)))))),param(Id(c8gIt),ArrayType(16348,ArrayType(17,ArrayType(34,ArrayType(139,ArrayType(13,FloatType))))))],Block([If(UnaryOp(!,UnaryOp(-,FieldAccess(CallExpr(Id(M_),Id($6),[]),Id(_1)))),Block([]),Block([])),Continue]))]),ClassDecl(Id(V),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_72),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($L),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(U),[]),ClassDecl(Id(_3d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 856))

    def test_857(self):
        line = '''Class __07{_2(_V,_:n;_Q_bq_:String ;_0,U_,yp,_,S9_:Array [Array [Array [Int ,0xD],0X3D],0B11_1_1];_G_:Int ;d,v:J){}Val Tc9c,$_:Array [Int ,07];Val __:C;$_0s(yC:Array [Int ,0B100100]){} }'''
        expect = '''Program([ClassDecl(Id(__07),[MethodDecl(Id(_2),Instance,[param(Id(_V),ClassType(Id(n))),param(Id(_),ClassType(Id(n))),param(Id(_Q_bq_),StringType),param(Id(_0),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(U_),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(yp),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(_),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(S9_),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(_G_),IntType),param(Id(d),ClassType(Id(J))),param(Id(v),ClassType(Id(J)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(Tc9c),ArrayType(7,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(C)),None)),MethodDecl(Id($_0s),Static,[param(Id(yC),ArrayType(36,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 857))

    def test_858(self):
        line = '''Class _:_{Destructor (){}Var $9O9:Array [Array [String ,064],06];}Class _6:_{Val _9:Boolean ;}Class _:___d{Destructor (){}Var _,PQ,_s_,t,_,$t,$2,y,$_,Mv,G__m4,_,_J_,$__,$__,c_:Array [Float ,064];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($9O9),ArrayType(6,ArrayType(52,StringType))))]),ClassDecl(Id(_6),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_9),BoolType,None))]),ClassDecl(Id(_),Id(___d),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(PQ),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_s_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(t),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($t),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(y),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(Mv),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(G__m4),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_J_),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(c_),ArrayType(52,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 858))

    def test_859(self):
        line = '''Class J3{Constructor (_8,_S:Array [Boolean ,49]){} }Class kD{Var $j,Mqo_5__:Array [Int ,0X8F_8];Var $_2I:Array [Array [Boolean ,447_3],0X55];_(){Break ;Break ;}Destructor (){} }Class _N:_{Constructor (){}Var $_,e_,$1__:Float ;Val EM,$8:Int ;}Class k{}Class e:B{}'''
        expect = '''Program([ClassDecl(Id(J3),[MethodDecl(Id(Constructor),Instance,[param(Id(_8),ArrayType(49,BoolType)),param(Id(_S),ArrayType(49,BoolType))],Block([]))]),ClassDecl(Id(kD),[AttributeDecl(Static,VarDecl(Id($j),ArrayType(2296,IntType))),AttributeDecl(Instance,VarDecl(Id(Mqo_5__),ArrayType(2296,IntType))),AttributeDecl(Static,VarDecl(Id($_2I),ArrayType(85,ArrayType(4473,BoolType)))),MethodDecl(Id(_),Instance,[],Block([Break,Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_N),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(e_),FloatType)),AttributeDecl(Static,VarDecl(Id($1__),FloatType)),AttributeDecl(Instance,ConstDecl(Id(EM),IntType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None))]),ClassDecl(Id(k),[]),ClassDecl(Id(e),Id(B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 859))

    def test_860(self):
        line = '''Class _{}Class _x_G3_:Z{Val _b_:Array [Boolean ,0x4B];Var $b_,$_,$H,_,_,$6:Boolean ;N(M,__,N_,__Q:Float ;_:_;__:String ;_:Array [Array [Array [Float ,0x4B],0170],0x2];_q,_:h8){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_x_G3_),Id(Z),[AttributeDecl(Instance,ConstDecl(Id(_b_),ArrayType(75,BoolType),None)),AttributeDecl(Static,VarDecl(Id($b_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($H),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($6),BoolType)),MethodDecl(Id(N),Instance,[param(Id(M),FloatType),param(Id(__),FloatType),param(Id(N_),FloatType),param(Id(__Q),FloatType),param(Id(_),ClassType(Id(_))),param(Id(__),StringType),param(Id(_),ArrayType(2,ArrayType(120,ArrayType(75,FloatType)))),param(Id(_q),ClassType(Id(h8))),param(Id(_),ClassType(Id(h8)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 860))

    def test_861(self):
        line = '''Class V_:_94t{Var _,o,___,_M,$Q8:_;_(T,vKw_:Array [Boolean ,18];r7,_:Float ){} }Class _:_38{Val $Y:Array [Array [Array [Array [Array [Float ,0107],0XD],0107],1],0x88_8];}'''
        expect = '''Program([ClassDecl(Id(V_),Id(_94t),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(o),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_M),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Q8),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(T),ArrayType(18,BoolType)),param(Id(vKw_),ArrayType(18,BoolType)),param(Id(r7),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),Id(_38),[AttributeDecl(Static,ConstDecl(Id($Y),ArrayType(2184,ArrayType(1,ArrayType(71,ArrayType(13,ArrayType(71,FloatType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 861))

    def test_862(self):
        line = '''Class h65:_8w{_(X_,A:B_1;_8bvWH:Float ;_,fy97:Array [String ,01_6_4_4];_:_3;__,_2:z__){} }Class _jonFA_1{}Class p{_2(){} }Class _0:_{}Class _:_N07{}Class _:w_M{}Class _280{Val $_M_Ws,N_,_,$_u74_3:_I;Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(h65),Id(_8w),[MethodDecl(Id(_),Instance,[param(Id(X_),ClassType(Id(B_1))),param(Id(A),ClassType(Id(B_1))),param(Id(_8bvWH),FloatType),param(Id(_),ArrayType(932,StringType)),param(Id(fy97),ArrayType(932,StringType)),param(Id(_),ClassType(Id(_3))),param(Id(__),ClassType(Id(z__))),param(Id(_2),ClassType(Id(z__)))],Block([]))]),ClassDecl(Id(_jonFA_1),[]),ClassDecl(Id(p),[MethodDecl(Id(_2),Instance,[],Block([]))]),ClassDecl(Id(_0),Id(_),[]),ClassDecl(Id(_),Id(_N07),[]),ClassDecl(Id(_),Id(w_M),[]),ClassDecl(Id(_280),[AttributeDecl(Static,ConstDecl(Id($_M_Ws),ClassType(Id(_I)),None)),AttributeDecl(Instance,ConstDecl(Id(N_),ClassType(Id(_I)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_I)),None)),AttributeDecl(Static,ConstDecl(Id($_u74_3),ClassType(Id(_I)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 862))

    def test_863(self):
        line = '''Class __t{Constructor (__:j1;_r:_;s_,E:Int ;F_6__7_,_:Array [String ,0b10001];o5_,G,_,_:Boolean ){}Destructor (){}Constructor (P,__,v___:Boolean ;DS:__){}$45(T,_8:Array [Float ,4_2];_F,_:_0){} }'''
        expect = '''Program([ClassDecl(Id(__t),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(j1))),param(Id(_r),ClassType(Id(_))),param(Id(s_),IntType),param(Id(E),IntType),param(Id(F_6__7_),ArrayType(17,StringType)),param(Id(_),ArrayType(17,StringType)),param(Id(o5_),BoolType),param(Id(G),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(P),BoolType),param(Id(__),BoolType),param(Id(v___),BoolType),param(Id(DS),ClassType(Id(__)))],Block([])),MethodDecl(Id($45),Static,[param(Id(T),ArrayType(42,FloatType)),param(Id(_8),ArrayType(42,FloatType)),param(Id(_F),ClassType(Id(_0))),param(Id(_),ClassType(Id(_0)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 863))

    def test_864(self):
        line = '''Class x{Constructor (E,_d:_x){}Val C,$_,T6l:Array [Float ,01_0];Val Z79217D__,$_:Array [Array [Array [Boolean ,0x9],036],4];}Class _:_5_{Constructor (a,V_:v){} }Class _m:l{}'''
        expect = '''Program([ClassDecl(Id(x),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ClassType(Id(_x))),param(Id(_d),ClassType(Id(_x)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(C),ArrayType(8,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(8,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(T6l),ArrayType(8,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Z79217D__),ArrayType(4,ArrayType(30,ArrayType(9,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(4,ArrayType(30,ArrayType(9,BoolType))),None))]),ClassDecl(Id(_),Id(_5_),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ClassType(Id(v))),param(Id(V_),ClassType(Id(v)))],Block([]))]),ClassDecl(Id(_m),Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 864))

    def test_865(self):
        line = '''Class _{Destructor (){}Var $1:Float ;}Class x__:_11O{Val _X_Vb:String ;}Class _{}Class K:__{Var $P__:B__;Val $_3_94,$_,l6:Array [Array [Array [Float ,855],82_87_5],0x5A];}Class _n:V{_c(_,J,_y:_;_,_j,_B,_:P;_,j:Int ;D1:yl_G__){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($1),FloatType))]),ClassDecl(Id(x__),Id(_11O),[AttributeDecl(Instance,ConstDecl(Id(_X_Vb),StringType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(K),Id(__),[AttributeDecl(Static,VarDecl(Id($P__),ClassType(Id(B__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_3_94),ArrayType(90,ArrayType(82875,ArrayType(855,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(90,ArrayType(82875,ArrayType(855,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(l6),ArrayType(90,ArrayType(82875,ArrayType(855,FloatType))),None))]),ClassDecl(Id(_n),Id(V),[MethodDecl(Id(_c),Instance,[param(Id(_),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(_y),ClassType(Id(_))),param(Id(_),ClassType(Id(P))),param(Id(_j),ClassType(Id(P))),param(Id(_B),ClassType(Id(P))),param(Id(_),ClassType(Id(P))),param(Id(_),IntType),param(Id(j),IntType),param(Id(D1),ClassType(Id(yl_G__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 865))

    def test_866(self):
        line = '''Class _{}Class _r__15{Var $75,V:Float ;}Class d:I_l{R_(_X_,G,k__:String ){ {}Break ;}Var $_:Array [Int ,0133];p(N,t,_,_:_Wm;u,___,V_5:Array [Int ,0b1010011]){}Destructor (){} }Class kb:GY{Constructor (_,Xr:_;b8:Array [Boolean ,05]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_r__15),[AttributeDecl(Static,VarDecl(Id($75),FloatType)),AttributeDecl(Instance,VarDecl(Id(V),FloatType))]),ClassDecl(Id(d),Id(I_l),[MethodDecl(Id(R_),Instance,[param(Id(_X_),StringType),param(Id(G),StringType),param(Id(k__),StringType)],Block([Block([]),Break])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(91,IntType))),MethodDecl(Id(p),Instance,[param(Id(N),ClassType(Id(_Wm))),param(Id(t),ClassType(Id(_Wm))),param(Id(_),ClassType(Id(_Wm))),param(Id(_),ClassType(Id(_Wm))),param(Id(u),ArrayType(83,IntType)),param(Id(___),ArrayType(83,IntType)),param(Id(V_5),ArrayType(83,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(kb),Id(GY),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(Xr),ClassType(Id(_))),param(Id(b8),ArrayType(5,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 866))

    def test_867(self):
        line = '''Class e__:_7{$r_(__:Boolean ;I:Array [Array [Float ,0XDB],032];Y_H1:Boolean ;b5Y:Array [Array [Array [Boolean ,032],0b1_0],89];_,_:String ;__0:q__v){}$6(u:_V_){} }Class kv50:o4{}'''
        expect = '''Program([ClassDecl(Id(e__),Id(_7),[MethodDecl(Id($r_),Static,[param(Id(__),BoolType),param(Id(I),ArrayType(26,ArrayType(219,FloatType))),param(Id(Y_H1),BoolType),param(Id(b5Y),ArrayType(89,ArrayType(2,ArrayType(26,BoolType)))),param(Id(_),StringType),param(Id(_),StringType),param(Id(__0),ClassType(Id(q__v)))],Block([])),MethodDecl(Id($6),Static,[param(Id(u),ClassType(Id(_V_)))],Block([]))]),ClassDecl(Id(kv50),Id(o4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 867))

    def test_868(self):
        line = '''Class u:_{}Class u:_m{}Class d4:_c{Var s2:_nw_;_(){False .__P=!!Self .y;}$_1v(_6,q,_:Array [String ,7];Z:Boolean ){Break ;}Var $7,d:Float ;s(A3,_:Int ;u3,H9:Float ){} }'''
        expect = '''Program([ClassDecl(Id(u),Id(_),[]),ClassDecl(Id(u),Id(_m),[]),ClassDecl(Id(d4),Id(_c),[AttributeDecl(Instance,VarDecl(Id(s2),ClassType(Id(_nw_)),NullLiteral())),MethodDecl(Id(_),Instance,[],Block([AssignStmt(FieldAccess(BooleanLit(False),Id(__P)),UnaryOp(!,UnaryOp(!,FieldAccess(Self(),Id(y)))))])),MethodDecl(Id($_1v),Static,[param(Id(_6),ArrayType(7,StringType)),param(Id(q),ArrayType(7,StringType)),param(Id(_),ArrayType(7,StringType)),param(Id(Z),BoolType)],Block([Break])),AttributeDecl(Static,VarDecl(Id($7),FloatType)),AttributeDecl(Instance,VarDecl(Id(d),FloatType)),MethodDecl(Id(s),Instance,[param(Id(A3),IntType),param(Id(_),IntType),param(Id(u3),FloatType),param(Id(H9),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 868))

    def test_869(self):
        line = '''Class W:f{Destructor (){} }Class _P{}Class _:_1g{Constructor (){}Val $X,$n7:Array [Array [Array [Array [Array [Array [Boolean ,39_2],0B1],0B1],9],0140],8];Destructor (){Return ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(W),Id(f),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_P),[]),ClassDecl(Id(_),Id(_1g),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(8,ArrayType(96,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(392,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($n7),ArrayType(8,ArrayType(96,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(392,BoolType)))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 869))

    def test_870(self):
        line = '''Class _{Constructor (){} }Class Z97{Var $__:Array [Array [Int ,065],8];Constructor (_:Array [Array [Int ,63],0x6];_,Cg,B_:Float ;b4o,_G:Array [Float ,0B10_00]){} }Class A_8{}Class u:y_{Destructor (){} }Class m_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Z97),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(8,ArrayType(53,IntType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(6,ArrayType(63,IntType))),param(Id(_),FloatType),param(Id(Cg),FloatType),param(Id(B_),FloatType),param(Id(b4o),ArrayType(8,FloatType)),param(Id(_G),ArrayType(8,FloatType))],Block([]))]),ClassDecl(Id(A_8),[]),ClassDecl(Id(u),Id(y_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(m_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 870))

    def test_871(self):
        line = '''Class _3_4:_U_{_(k2_,O,_:Array [Array [Array [Float ,0b1000000],0X33],06];__,r_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,07667_7],0B100001],0xB],0x19],58],0B1],0xB],0X33],067],0b1_0_0],8];_:__;_4Hf5_:Array [Boolean ,0b1000000];S:x_2_1D){ {} }}'''
        expect = '''Program([ClassDecl(Id(_3_4),Id(_U_),[MethodDecl(Id(_),Instance,[param(Id(k2_),ArrayType(6,ArrayType(51,ArrayType(64,FloatType)))),param(Id(O),ArrayType(6,ArrayType(51,ArrayType(64,FloatType)))),param(Id(_),ArrayType(6,ArrayType(51,ArrayType(64,FloatType)))),param(Id(__),ArrayType(8,ArrayType(4,ArrayType(55,ArrayType(51,ArrayType(11,ArrayType(1,ArrayType(58,ArrayType(25,ArrayType(11,ArrayType(33,ArrayType(32191,FloatType)))))))))))),param(Id(r_),ArrayType(8,ArrayType(4,ArrayType(55,ArrayType(51,ArrayType(11,ArrayType(1,ArrayType(58,ArrayType(25,ArrayType(11,ArrayType(33,ArrayType(32191,FloatType)))))))))))),param(Id(_),ClassType(Id(__))),param(Id(_4Hf5_),ArrayType(64,BoolType)),param(Id(S),ClassType(Id(x_2_1D)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 871))

    def test_872(self):
        line = '''Class _{Val _ST18__:Array [Array [Array [Int ,5],044],0100];}Class t{Var $_,$R__1,$__24W,$h,$_:Array [Array [String ,0b1_1],1];Destructor (){} }Class J:__2C_t__{Constructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_ST18__),ArrayType(64,ArrayType(36,ArrayType(5,IntType))),None))]),ClassDecl(Id(t),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($R__1),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($__24W),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($h),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(3,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J),Id(__2C_t__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 872))

    def test_873(self):
        line = '''Class __:_M{}Class s4f_{}Class _11_3:_1_{l(_,SH,_1_J:Boolean ;_1b,s,_,_,v:Array [Array [Array [Array [Array [Array [Array [Int ,0X1_4],76],031],031],0b100],063],76];__62__5,__Y__bU,_F__mI,s78,D,__49,_:Array [Boolean ,8]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_M),[]),ClassDecl(Id(s4f_),[]),ClassDecl(Id(_11_3),Id(_1_),[MethodDecl(Id(l),Instance,[param(Id(_),BoolType),param(Id(SH),BoolType),param(Id(_1_J),BoolType),param(Id(_1b),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(s),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(_),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(_),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(v),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(__62__5),ArrayType(8,BoolType)),param(Id(__Y__bU),ArrayType(8,BoolType)),param(Id(_F__mI),ArrayType(8,BoolType)),param(Id(s78),ArrayType(8,BoolType)),param(Id(D),ArrayType(8,BoolType)),param(Id(__49),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 873))

    def test_874(self):
        line = '''Class _{Val $h,$__3,$0u:Array [Boolean ,02_4];Constructor (_:Int ;e,_:_;_,_1:Int ;_,U,_:_;_E7,W_T,_W:Float ){Continue ;}$o3(I,__U,bf2_,U:Array [Array [Array [Array [Int ,0B110001],0b101010],87],6]){}Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($h),ArrayType(20,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__3),ArrayType(20,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($0u),ArrayType(20,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(e),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),IntType),param(Id(_1),IntType),param(Id(_),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_E7),FloatType),param(Id(W_T),FloatType),param(Id(_W),FloatType)],Block([Continue])),MethodDecl(Id($o3),Static,[param(Id(I),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType))))),param(Id(__U),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType))))),param(Id(bf2_),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType))))),param(Id(U),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 874))

    def test_875(self):
        line = '''Class ___99O{Constructor (_:Array [Int ,0B100100]){}Constructor (_:Int ;_:_;E,_0:_2_l;C,____,_:Array [Array [Array [Int ,0xE6_1_43],0xF_9],0x29];__:Array [Float ,03]){} }'''
        expect = '''Program([ClassDecl(Id(___99O),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(36,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ClassType(Id(_))),param(Id(E),ClassType(Id(_2_l))),param(Id(_0),ClassType(Id(_2_l))),param(Id(C),ArrayType(41,ArrayType(249,ArrayType(942403,IntType)))),param(Id(____),ArrayType(41,ArrayType(249,ArrayType(942403,IntType)))),param(Id(_),ArrayType(41,ArrayType(249,ArrayType(942403,IntType)))),param(Id(__),ArrayType(3,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 875))

    def test_876(self):
        line = '''Class M:_H{Constructor (){Continue ;}Constructor (D3_:U;f__:I;_,_2,F0bF1_,n_3,_,T_:E9;n2C1,e,y:Int ;d,_,_:Array [Array [Array [Int ,062],07246_6],0xC_D_4];_2,h,_:_C7;K_:Array [Array [Float ,0x5],0b1001100];kF:String ;Nl_,_p,_,P,o:Float ;F_7,_:Int ;_4,U:Array [Array [Array [String ,0B1010100],39],0XD4_FF];WP_,L:Array [Array [Int ,0x16],0x16];A,_:Int ;Qg75,_,y:_8;_:sw){}Destructor (){Val _,F:Float ;} }'''
        expect = '''Program([ClassDecl(Id(M),Id(_H),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(D3_),ClassType(Id(U))),param(Id(f__),ClassType(Id(I))),param(Id(_),ClassType(Id(E9))),param(Id(_2),ClassType(Id(E9))),param(Id(F0bF1_),ClassType(Id(E9))),param(Id(n_3),ClassType(Id(E9))),param(Id(_),ClassType(Id(E9))),param(Id(T_),ClassType(Id(E9))),param(Id(n2C1),IntType),param(Id(e),IntType),param(Id(y),IntType),param(Id(d),ArrayType(3284,ArrayType(30006,ArrayType(50,IntType)))),param(Id(_),ArrayType(3284,ArrayType(30006,ArrayType(50,IntType)))),param(Id(_),ArrayType(3284,ArrayType(30006,ArrayType(50,IntType)))),param(Id(_2),ClassType(Id(_C7))),param(Id(h),ClassType(Id(_C7))),param(Id(_),ClassType(Id(_C7))),param(Id(K_),ArrayType(76,ArrayType(5,FloatType))),param(Id(kF),StringType),param(Id(Nl_),FloatType),param(Id(_p),FloatType),param(Id(_),FloatType),param(Id(P),FloatType),param(Id(o),FloatType),param(Id(F_7),IntType),param(Id(_),IntType),param(Id(_4),ArrayType(54527,ArrayType(39,ArrayType(84,StringType)))),param(Id(U),ArrayType(54527,ArrayType(39,ArrayType(84,StringType)))),param(Id(WP_),ArrayType(22,ArrayType(22,IntType))),param(Id(L),ArrayType(22,ArrayType(22,IntType))),param(Id(A),IntType),param(Id(_),IntType),param(Id(Qg75),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(y),ClassType(Id(_8))),param(Id(_),ClassType(Id(sw)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),FloatType,None),ConstDecl(Id(F),FloatType,None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 876))

    def test_877(self):
        line = '''Class __:v{Constructor (w:String ){}Constructor (){}Constructor (_,_9,__,Cl:String ;j__,M0P,__:Array [Int ,0x3];_:Float ;_:Array [Array [Array [Float ,0B1_0],05],0x3];j2:Array [Array [Array [Boolean ,0x3],0x3],0XC];_583Z_:W4_;q_,bX01_,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(v),[MethodDecl(Id(Constructor),Instance,[param(Id(w),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_9),StringType),param(Id(__),StringType),param(Id(Cl),StringType),param(Id(j__),ArrayType(3,IntType)),param(Id(M0P),ArrayType(3,IntType)),param(Id(__),ArrayType(3,IntType)),param(Id(_),FloatType),param(Id(_),ArrayType(3,ArrayType(5,ArrayType(2,FloatType)))),param(Id(j2),ArrayType(12,ArrayType(3,ArrayType(3,BoolType)))),param(Id(_583Z_),ClassType(Id(W4_))),param(Id(q_),IntType),param(Id(bX01_),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 877))

    def test_878(self):
        line = '''Class vQT9:_4{Constructor (FR:Float ;_B:Array [Array [Array [Array [Boolean ,0xB_660C1_6],0x3],0x33],0b1];q,_:String ;J6,m96:Array [Int ,03_14_5];O6_,_:Array [Array [Array [Array [Array [Boolean ,0101],0101],06_7],0x1],32]){} }'''
        expect = '''Program([ClassDecl(Id(vQT9),Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(FR),FloatType),param(Id(_B),ArrayType(1,ArrayType(51,ArrayType(3,ArrayType(191237142,BoolType))))),param(Id(q),StringType),param(Id(_),StringType),param(Id(J6),ArrayType(1637,IntType)),param(Id(m96),ArrayType(1637,IntType)),param(Id(O6_),ArrayType(32,ArrayType(1,ArrayType(55,ArrayType(65,ArrayType(65,BoolType)))))),param(Id(_),ArrayType(32,ArrayType(1,ArrayType(55,ArrayType(65,ArrayType(65,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 878))

    def test_879(self):
        line = '''Class n{_(__,yC:Array [Int ,033];_,_p,_,_,___,_1_,SW9_,I,Y_,_,_:_;_3:Boolean ;_4,U__:Array [Array [Array [Float ,0xC],0XE],0B1];w:Array [Float ,6_7];D,B:Int ){} }Class l:_{Val _82,$_,_,_,$2,$Y:Array [Boolean ,8];}Class _{Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(n),[MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(27,IntType)),param(Id(yC),ArrayType(27,IntType)),param(Id(_),ClassType(Id(_))),param(Id(_p),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(___),ClassType(Id(_))),param(Id(_1_),ClassType(Id(_))),param(Id(SW9_),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(Y_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_3),BoolType),param(Id(_4),ArrayType(1,ArrayType(14,ArrayType(12,FloatType)))),param(Id(U__),ArrayType(1,ArrayType(14,ArrayType(12,FloatType)))),param(Id(w),ArrayType(67,FloatType)),param(Id(D),IntType),param(Id(B),IntType)],Block([]))]),ClassDecl(Id(l),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_82),ArrayType(8,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(8,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(8,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($Y),ArrayType(8,BoolType),None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 879))

    def test_880(self):
        line = '''Class _k8_7_{Var $3_D6U,$_:Array [Int ,68];Var o20,A,$V,W:Int ;}Class X5D_:_{Destructor (){Break ;} }Class w:q{}Class I{$_d(_4:Array [String ,03_7]){}Val $_ST,$80_:_;}Class _8:__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_k8_7_),[AttributeDecl(Static,VarDecl(Id($3_D6U),ArrayType(68,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(68,IntType))),AttributeDecl(Instance,VarDecl(Id(o20),IntType)),AttributeDecl(Instance,VarDecl(Id(A),IntType)),AttributeDecl(Static,VarDecl(Id($V),IntType)),AttributeDecl(Instance,VarDecl(Id(W),IntType))]),ClassDecl(Id(X5D_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(w),Id(q),[]),ClassDecl(Id(I),[MethodDecl(Id($_d),Static,[param(Id(_4),ArrayType(31,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($_ST),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($80_),ClassType(Id(_)),None))]),ClassDecl(Id(_8),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 880))

    def test_881(self):
        line = '''Class _5{Var N,$8_,_,$xg:Array [Array [Array [Array [Array [Array [Boolean ,0x27],69],0X35],0x27],01],04_7_0_7];}Class _O999:_A{Constructor (){} }Class _9_:_{}Class lF_{}Class N__:____q79f{}'''
        expect = '''Program([ClassDecl(Id(_5),[AttributeDecl(Instance,VarDecl(Id(N),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($8_),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType)))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($xg),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType))))))))]),ClassDecl(Id(_O999),Id(_A),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_9_),Id(_),[]),ClassDecl(Id(lF_),[]),ClassDecl(Id(N__),Id(____q79f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 881))

    def test_882(self):
        line = '''Class _:g{Constructor (_,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,60],01_2],60],0b1_0],0X9],4_868],074],0b1010111],60];z1R_,__5:Array [Array [Int ,0X5_DE_8],0x4_C]){}Var $kd,N_:sy;}Class X{Constructor (_5,x,D,_69_,X,_:Array [Float ,074]){}Var $5,G_:Float ;Val $4,$S:_53;}'''
        expect = '''Program([ClassDecl(Id(_),Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(60,ArrayType(87,ArrayType(60,ArrayType(4868,ArrayType(9,ArrayType(2,ArrayType(60,ArrayType(10,ArrayType(60,BoolType)))))))))),param(Id(_),ArrayType(60,ArrayType(87,ArrayType(60,ArrayType(4868,ArrayType(9,ArrayType(2,ArrayType(60,ArrayType(10,ArrayType(60,BoolType)))))))))),param(Id(z1R_),ArrayType(76,ArrayType(24040,IntType))),param(Id(__5),ArrayType(76,ArrayType(24040,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($kd),ClassType(Id(sy)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(N_),ClassType(Id(sy)),NullLiteral()))]),ClassDecl(Id(X),[MethodDecl(Id(Constructor),Instance,[param(Id(_5),ArrayType(60,FloatType)),param(Id(x),ArrayType(60,FloatType)),param(Id(D),ArrayType(60,FloatType)),param(Id(_69_),ArrayType(60,FloatType)),param(Id(X),ArrayType(60,FloatType)),param(Id(_),ArrayType(60,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($5),FloatType)),AttributeDecl(Instance,VarDecl(Id(G_),FloatType)),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(_53)),None)),AttributeDecl(Static,ConstDecl(Id($S),ClassType(Id(_53)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 882))

    def test_883(self):
        line = '''Class _:k{}Class __mt:N8{___Q4V(Z:Array [Array [Array [Array [Array [Array [Boolean ,0B1010111],0X3_A1_8],0x9],84],84],0B1010111];U_,s:Array [Array [Array [Int ,0X76],0x1C],032];k:Array [Array [String ,04_2],0b1001010]){} }Class i{}'''
        expect = '''Program([ClassDecl(Id(_),Id(k),[]),ClassDecl(Id(__mt),Id(N8),[MethodDecl(Id(___Q4V),Instance,[param(Id(Z),ArrayType(87,ArrayType(84,ArrayType(84,ArrayType(9,ArrayType(14872,ArrayType(87,BoolType))))))),param(Id(U_),ArrayType(26,ArrayType(28,ArrayType(118,IntType)))),param(Id(s),ArrayType(26,ArrayType(28,ArrayType(118,IntType)))),param(Id(k),ArrayType(74,ArrayType(34,StringType)))],Block([]))]),ClassDecl(Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 883))

    def test_884(self):
        line = '''Class _A2{}Class _:P_6{Val $6,_:Array [Array [Boolean ,0B1001110],0x51];$48(){} }Class _3:____{Constructor (_:Array [Boolean ,0XE];_:_b){ {_::$3._._._();} }Val T_,___:_;}Class _P:_4{}'''
        expect = '''Program([ClassDecl(Id(_A2),[]),ClassDecl(Id(_),Id(P_6),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(81,ArrayType(78,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(81,ArrayType(78,BoolType)),None)),MethodDecl(Id($48),Static,[],Block([]))]),ClassDecl(Id(_3),Id(____),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(14,BoolType)),param(Id(_),ClassType(Id(_b)))],Block([Block([Call(FieldAccess(FieldAccess(FieldAccess(Id(_),Id($3)),Id(_)),Id(_)),Id(_),[])])])),AttributeDecl(Instance,ConstDecl(Id(T_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(_)),None))]),ClassDecl(Id(_P),Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 884))

    def test_885(self):
        line = '''Class n7:R6T_{Var $g:Array [Float ,047];}Class _u{Var _:Array [Array [Array [Boolean ,0B11101],0B1],047];Var $46,__X_d,$49D9,n,_:Array [Array [Int ,047],21];}Class _:__k{}Class _44b__1:_99W__8_{}'''
        expect = '''Program([ClassDecl(Id(n7),Id(R6T_),[AttributeDecl(Static,VarDecl(Id($g),ArrayType(39,FloatType)))]),ClassDecl(Id(_u),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(39,ArrayType(1,ArrayType(29,BoolType))))),AttributeDecl(Static,VarDecl(Id($46),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Instance,VarDecl(Id(__X_d),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Static,VarDecl(Id($49D9),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(21,ArrayType(39,IntType))))]),ClassDecl(Id(_),Id(__k),[]),ClassDecl(Id(_44b__1),Id(_99W__8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 885))

    def test_886(self):
        line = '''Class d:_9_7{Constructor (_:Array [Array [Array [Array [Array [String ,02],9_9],01],0xEB],90];_,h3b1_g_,_6t:Array [Int ,0XCE5];w:i_B_L;_,_:Array [Boolean ,05];_,Lf:Float ;N:l;ba:______;T05,D:Array [Float ,90]){} }Class b:_7{}'''
        expect = '''Program([ClassDecl(Id(d),Id(_9_7),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(90,ArrayType(235,ArrayType(1,ArrayType(99,ArrayType(2,StringType)))))),param(Id(_),ArrayType(3301,IntType)),param(Id(h3b1_g_),ArrayType(3301,IntType)),param(Id(_6t),ArrayType(3301,IntType)),param(Id(w),ClassType(Id(i_B_L))),param(Id(_),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(_),FloatType),param(Id(Lf),FloatType),param(Id(N),ClassType(Id(l))),param(Id(ba),ClassType(Id(______))),param(Id(T05),ArrayType(90,FloatType)),param(Id(D),ArrayType(90,FloatType))],Block([]))]),ClassDecl(Id(b),Id(_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 886))

    def test_887(self):
        line = '''Class T_{Val $_,_9,$_vU6_3:String ;_(__:Array [Array [Float ,0XF],0B10101];_90:Array [Array [Array [Boolean ,0b1000],072],0X45];j,WQ,__,s,q3:Array [String ,0x43];_,____:Array [Array [Array [Array [Float ,0x43],07],54],0X45]){}Var $_,$V_4_97F_C8,$_,_sWP1_x:Array [String ,0B1];Val O3_33:U;}'''
        expect = '''Program([ClassDecl(Id(T_),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_9),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_vU6_3),StringType,None)),MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(21,ArrayType(15,FloatType))),param(Id(_90),ArrayType(69,ArrayType(58,ArrayType(8,BoolType)))),param(Id(j),ArrayType(67,StringType)),param(Id(WQ),ArrayType(67,StringType)),param(Id(__),ArrayType(67,StringType)),param(Id(s),ArrayType(67,StringType)),param(Id(q3),ArrayType(67,StringType)),param(Id(_),ArrayType(69,ArrayType(54,ArrayType(7,ArrayType(67,FloatType))))),param(Id(____),ArrayType(69,ArrayType(54,ArrayType(7,ArrayType(67,FloatType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,StringType))),AttributeDecl(Static,VarDecl(Id($V_4_97F_C8),ArrayType(1,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,StringType))),AttributeDecl(Instance,VarDecl(Id(_sWP1_x),ArrayType(1,StringType))),AttributeDecl(Instance,ConstDecl(Id(O3_33),ClassType(Id(U)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 887))

    def test_888(self):
        line = '''Class ____:_{}Class F:U{Destructor (){Continue ;}Constructor (_E3,__:Array [Array [Array [Array [Array [Array [Boolean ,2],0b110101],0X7],0107],0x44],9];h53___,om,_:Array [Array [Array [String ,5],4],0X19];l_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(____),Id(_),[]),ClassDecl(Id(F),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_E3),ArrayType(9,ArrayType(68,ArrayType(71,ArrayType(7,ArrayType(53,ArrayType(2,BoolType))))))),param(Id(__),ArrayType(9,ArrayType(68,ArrayType(71,ArrayType(7,ArrayType(53,ArrayType(2,BoolType))))))),param(Id(h53___),ArrayType(25,ArrayType(4,ArrayType(5,StringType)))),param(Id(om),ArrayType(25,ArrayType(4,ArrayType(5,StringType)))),param(Id(_),ArrayType(25,ArrayType(4,ArrayType(5,StringType)))),param(Id(l_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 888))

    def test_889(self):
        line = '''Class _6:J69{Val _,$024:Array [Array [Array [Array [Int ,041],0b1],3],0X2E];Constructor (){}$969(i:Array [Array [Float ,0B10110],0B1];_:Array [Array [String ,3_7],99];_g_:Array [Array [Array [Boolean ,0X2E],0b10],9_1];h:Array [Array [Array [Array [Int ,0X2E],06_3_2],1],0B10110]){v::$t()._._();}Destructor (){}Var Kf____:Array [Array [Array [String ,0x5],0b1100000],041];}Class J:gzf_{}Class _{}Class _zX_:__u{}Class D{}Class __{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_6),Id(J69),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(46,ArrayType(3,ArrayType(1,ArrayType(33,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($024),ArrayType(46,ArrayType(3,ArrayType(1,ArrayType(33,IntType)))),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($969),Static,[param(Id(i),ArrayType(1,ArrayType(22,FloatType))),param(Id(_),ArrayType(99,ArrayType(37,StringType))),param(Id(_g_),ArrayType(91,ArrayType(2,ArrayType(46,BoolType)))),param(Id(h),ArrayType(22,ArrayType(1,ArrayType(410,ArrayType(46,IntType)))))],Block([Call(FieldAccess(CallExpr(Id(v),Id($t),[]),Id(_)),Id(_),[])])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(Kf____),ArrayType(33,ArrayType(96,ArrayType(5,StringType)))))]),ClassDecl(Id(J),Id(gzf_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_zX_),Id(__u),[]),ClassDecl(Id(D),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 889))

    def test_890(self):
        line = '''Class _2:_{}Class _z:N{Var w18,$_U,t4_:T;Var _0,$30,_5__:Array [Array [Array [Boolean ,0102],03_00],63];Constructor (){Continue ;Break ;Continue ;}Destructor (){} }Class _3nr_82{}'''
        expect = '''Program([ClassDecl(Id(_2),Id(_),[]),ClassDecl(Id(_z),Id(N),[AttributeDecl(Instance,VarDecl(Id(w18),ClassType(Id(T)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_U),ClassType(Id(T)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(t4_),ClassType(Id(T)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(63,ArrayType(192,ArrayType(66,BoolType))))),AttributeDecl(Static,VarDecl(Id($30),ArrayType(63,ArrayType(192,ArrayType(66,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_5__),ArrayType(63,ArrayType(192,ArrayType(66,BoolType))))),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Break,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_3nr_82),[])])'''
        self.assertTrue(TestAST.test(line, expect, 890))

    def test_891(self):
        line = '''Class h{}Class cv_N5{Destructor (){Continue ;}Val $7:Array [Array [Array [Array [Array [Array [Array [Array [Int ,063],0b1010100],063],044],16],16],07_5],6];Val _:Float ;}Class LR_:_5{}'''
        expect = '''Program([ClassDecl(Id(h),[]),ClassDecl(Id(cv_N5),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(6,ArrayType(61,ArrayType(16,ArrayType(16,ArrayType(36,ArrayType(51,ArrayType(84,ArrayType(51,IntType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(LR_),Id(_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 891))

    def test_892(self):
        line = '''Class _:_9{Val $my1q:Array [Boolean ,59];Destructor (){Continue ;{} }Constructor (sH_,_201:Boolean ){}Val _8E_39:M1;}Class A_:__m_{}Class qL6{$0(){}Val $4,C2,$0:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_9),[AttributeDecl(Static,ConstDecl(Id($my1q),ArrayType(59,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(sH_),BoolType),param(Id(_201),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_8E_39),ClassType(Id(M1)),None))]),ClassDecl(Id(A_),Id(__m_),[]),ClassDecl(Id(qL6),[MethodDecl(Id($0),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($4),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(C2),StringType,None)),AttributeDecl(Static,ConstDecl(Id($0),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 892))

    def test_893(self):
        line = '''Class ___{}Class _:N{Constructor (E,n:Array [Float ,45];_k_,_,___:Array [Array [Array [Array [Array [String ,0X7],45],45],0B110000],7];Pw,_:Boolean ;w4,f,_s,t,e4E9,k:ng;_H_x7ve,__,_,_:Float ;_:Array [Int ,2]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(___),[]),ClassDecl(Id(_),Id(N),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(45,FloatType)),param(Id(n),ArrayType(45,FloatType)),param(Id(_k_),ArrayType(7,ArrayType(48,ArrayType(45,ArrayType(45,ArrayType(7,StringType)))))),param(Id(_),ArrayType(7,ArrayType(48,ArrayType(45,ArrayType(45,ArrayType(7,StringType)))))),param(Id(___),ArrayType(7,ArrayType(48,ArrayType(45,ArrayType(45,ArrayType(7,StringType)))))),param(Id(Pw),BoolType),param(Id(_),BoolType),param(Id(w4),ClassType(Id(ng))),param(Id(f),ClassType(Id(ng))),param(Id(_s),ClassType(Id(ng))),param(Id(t),ClassType(Id(ng))),param(Id(e4E9),ClassType(Id(ng))),param(Id(k),ClassType(Id(ng))),param(Id(_H_x7ve),FloatType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(2,IntType))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 893))

    def test_894(self):
        line = '''Class _{Constructor (h8_,_G__H9BX4_:String ){ {Return ;Val h,wx_,__8__:Array [Boolean ,6];} }o(){Break ;}Var $_,$03,$I:String ;Destructor (){True .uty();Val Z8R:X;}Val _6,$k8_I:Float ;$_(){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h8_),StringType),param(Id(_G__H9BX4_),StringType)],Block([Block([Return(),ConstDecl(Id(h),ArrayType(6,BoolType),None),ConstDecl(Id(wx_),ArrayType(6,BoolType),None),ConstDecl(Id(__8__),ArrayType(6,BoolType),None)])])),MethodDecl(Id(o),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($03),StringType)),AttributeDecl(Static,VarDecl(Id($I),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([Call(BooleanLit(True),Id(uty),[]),ConstDecl(Id(Z8R),ClassType(Id(X)),None)])),AttributeDecl(Instance,ConstDecl(Id(_6),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($k8_I),FloatType,None)),MethodDecl(Id($_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 894))

    def test_895(self):
        line = '''Class _59{Constructor (A_:_m_;_:Array [Array [Array [Array [Array [Float ,031_6],0b111111],0B11],0X34],0X1]){}Val $Z_02_y,$_,$69__,ESC,b,$_w,_,$ZS_,$6p:Array [Array [String ,8],020];}Class U{Val __1,$____X_,__,$__i:Array [Array [Float ,50],020];}'''
        expect = '''Program([ClassDecl(Id(_59),[MethodDecl(Id(Constructor),Instance,[param(Id(A_),ClassType(Id(_m_))),param(Id(_),ArrayType(1,ArrayType(52,ArrayType(3,ArrayType(63,ArrayType(206,FloatType))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($Z_02_y),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($69__),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(ESC),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(b),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_w),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($ZS_),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($6p),ArrayType(16,ArrayType(8,StringType)),None))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(__1),ArrayType(16,ArrayType(50,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($____X_),ArrayType(16,ArrayType(50,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(16,ArrayType(50,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($__i),ArrayType(16,ArrayType(50,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 895))

    def test_896(self):
        line = '''Class _Y:_{Constructor (G:String ;_J:Array [String ,0B1]){Continue ;}Destructor (){}j3_C(a_y:Array [String ,06];_h,c,_Q3:_;Y,_:Array [Array [Array [Float ,0X7],9_10],0B1110];_Wx51,C1,g3:_u){Break ;}Constructor (){}Val $1,$pm_x__G1:_;}'''
        expect = '''Program([ClassDecl(Id(_Y),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(G),StringType),param(Id(_J),ArrayType(1,StringType))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(j3_C),Instance,[param(Id(a_y),ArrayType(6,StringType)),param(Id(_h),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(_Q3),ClassType(Id(_))),param(Id(Y),ArrayType(14,ArrayType(910,ArrayType(7,FloatType)))),param(Id(_),ArrayType(14,ArrayType(910,ArrayType(7,FloatType)))),param(Id(_Wx51),ClassType(Id(_u))),param(Id(C1),ClassType(Id(_u))),param(Id(g3),ClassType(Id(_u)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($pm_x__G1),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 896))

    def test_897(self):
        line = '''Class _C_6:J_{}Class i{Destructor (){}Var __,_:Array [Array [Boolean ,1],0X9];}Class m5:_{Constructor (_,_,_,__q,_:Array [Array [Float ,1],16];y__:Array [String ,0b1011011];fq:Array [Array [Array [Int ,1],0B110],1]){} }Class n{}'''
        expect = '''Program([ClassDecl(Id(_C_6),Id(J_),[]),ClassDecl(Id(i),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(9,ArrayType(1,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(9,ArrayType(1,BoolType))))]),ClassDecl(Id(m5),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(__q),ArrayType(16,ArrayType(1,FloatType))),param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(y__),ArrayType(91,StringType)),param(Id(fq),ArrayType(1,ArrayType(6,ArrayType(1,IntType))))],Block([]))]),ClassDecl(Id(n),[])])'''
        self.assertTrue(TestAST.test(line, expect, 897))

    def test_898(self):
        line = '''Class _{w_9F(_2x_,__6c_,Vf_j,_:Float ;m_73__:_;__,__f:Array [Array [Array [Boolean ,0125],0XC],0X61];_0J:_){} }Class __:_0{}Class i3P:__9x{$9(d:_;I,_97,f:Float ){} }Class _:z{}Class _H_J9:__{Var u_,$4:Array [String ,0X61];}Class X_:M{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(w_9F),Instance,[param(Id(_2x_),FloatType),param(Id(__6c_),FloatType),param(Id(Vf_j),FloatType),param(Id(_),FloatType),param(Id(m_73__),ClassType(Id(_))),param(Id(__),ArrayType(97,ArrayType(12,ArrayType(85,BoolType)))),param(Id(__f),ArrayType(97,ArrayType(12,ArrayType(85,BoolType)))),param(Id(_0J),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__),Id(_0),[]),ClassDecl(Id(i3P),Id(__9x),[MethodDecl(Id($9),Static,[param(Id(d),ClassType(Id(_))),param(Id(I),FloatType),param(Id(_97),FloatType),param(Id(f),FloatType)],Block([]))]),ClassDecl(Id(_),Id(z),[]),ClassDecl(Id(_H_J9),Id(__),[AttributeDecl(Instance,VarDecl(Id(u_),ArrayType(97,StringType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(97,StringType)))]),ClassDecl(Id(X_),Id(M),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 898))

    def test_899(self):
        line = '''Class __ft8{Constructor (_y3,_:Array [Float ,0B1_10_1_1]){Break ;Val J,_,a:Array [Array [Float ,0b1100],18];} }Class _9{}Class c:_{Constructor (t:Array [Float ,3];Es_A:O_5;_,__G,C:T_){}Constructor (_,_:Float ){} }Class c1{}Class _{Val $_,_:I_;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__ft8),[MethodDecl(Id(Constructor),Instance,[param(Id(_y3),ArrayType(27,FloatType)),param(Id(_),ArrayType(27,FloatType))],Block([Break,ConstDecl(Id(J),ArrayType(18,ArrayType(12,FloatType)),None),ConstDecl(Id(_),ArrayType(18,ArrayType(12,FloatType)),None),ConstDecl(Id(a),ArrayType(18,ArrayType(12,FloatType)),None)]))]),ClassDecl(Id(_9),[]),ClassDecl(Id(c),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(t),ArrayType(3,FloatType)),param(Id(Es_A),ClassType(Id(O_5))),param(Id(_),ClassType(Id(T_))),param(Id(__G),ClassType(Id(T_))),param(Id(C),ClassType(Id(T_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(c1),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(I_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(I_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 899))

    def test_900(self):
        line = '''Class w{_(_:Boolean ){} }Class _28:_{Destructor (){}Constructor (B0:Array [Array [Array [Array [Array [Array [Boolean ,0107],29],0B1],011],0b1_1_0],0b1];r_,_4,X:L_;hB_,_4f9,_:Array [Array [Float ,0X4],29];_:__){} }'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id(_),Instance,[param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_28),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(B0),ArrayType(1,ArrayType(6,ArrayType(9,ArrayType(1,ArrayType(29,ArrayType(71,BoolType))))))),param(Id(r_),ClassType(Id(L_))),param(Id(_4),ClassType(Id(L_))),param(Id(X),ClassType(Id(L_))),param(Id(hB_),ArrayType(29,ArrayType(4,FloatType))),param(Id(_4f9),ArrayType(29,ArrayType(4,FloatType))),param(Id(_),ArrayType(29,ArrayType(4,FloatType))),param(Id(_),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 900))

    def test_901(self):
        line = '''Class S:M831{}Class _C{$6(__,_8:Array [Array [Array [Array [Int ,0XB],06],0B1],0b1010000];_w,_:_E){} }Class W{}Class W{Val $3:Array [Int ,0x17];$Z(){}Var $1F:String ;Val $_s,$fK6C,_,$357A,oF:Float ;}'''
        expect = '''Program([ClassDecl(Id(S),Id(M831),[]),ClassDecl(Id(_C),[MethodDecl(Id($6),Static,[param(Id(__),ArrayType(80,ArrayType(1,ArrayType(6,ArrayType(11,IntType))))),param(Id(_8),ArrayType(80,ArrayType(1,ArrayType(6,ArrayType(11,IntType))))),param(Id(_w),ClassType(Id(_E))),param(Id(_),ClassType(Id(_E)))],Block([]))]),ClassDecl(Id(W),[]),ClassDecl(Id(W),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(23,IntType),None)),MethodDecl(Id($Z),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($1F),StringType)),AttributeDecl(Static,ConstDecl(Id($_s),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($fK6C),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($357A),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(oF),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 901))

    def test_902(self):
        line = '''Class l{$9(_0_:Array [Array [Array [Array [String ,0x284],0x4A],23],060];D5Vo,_N,w_0,q2,___,_,s,B:Array [Float ,0X2];_:Array [Int ,23];_JS:Array [Float ,0b1];x3,_g,Ct9__:Float ){} }Class p7_Sc:_{}'''
        expect = '''Program([ClassDecl(Id(l),[MethodDecl(Id($9),Static,[param(Id(_0_),ArrayType(48,ArrayType(23,ArrayType(74,ArrayType(644,StringType))))),param(Id(D5Vo),ArrayType(2,FloatType)),param(Id(_N),ArrayType(2,FloatType)),param(Id(w_0),ArrayType(2,FloatType)),param(Id(q2),ArrayType(2,FloatType)),param(Id(___),ArrayType(2,FloatType)),param(Id(_),ArrayType(2,FloatType)),param(Id(s),ArrayType(2,FloatType)),param(Id(B),ArrayType(2,FloatType)),param(Id(_),ArrayType(23,IntType)),param(Id(_JS),ArrayType(1,FloatType)),param(Id(x3),FloatType),param(Id(_g),FloatType),param(Id(Ct9__),FloatType)],Block([]))]),ClassDecl(Id(p7_Sc),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 902))

    def test_903(self):
        line = '''Class _{Var __,N:___;Constructor (_,U,_L2l,m830_9,_6,D_,b456z_:Array [String ,0xA];_,_1n_:Array [Array [Array [Boolean ,05],0XFC],025];r:Array [Array [Array [Boolean ,0X3_4_7],0x13],025]){} }Class __:x{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(___)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(N),ClassType(Id(___)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(10,StringType)),param(Id(U),ArrayType(10,StringType)),param(Id(_L2l),ArrayType(10,StringType)),param(Id(m830_9),ArrayType(10,StringType)),param(Id(_6),ArrayType(10,StringType)),param(Id(D_),ArrayType(10,StringType)),param(Id(b456z_),ArrayType(10,StringType)),param(Id(_),ArrayType(21,ArrayType(252,ArrayType(5,BoolType)))),param(Id(_1n_),ArrayType(21,ArrayType(252,ArrayType(5,BoolType)))),param(Id(r),ArrayType(21,ArrayType(19,ArrayType(839,BoolType))))],Block([]))]),ClassDecl(Id(__),Id(x),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 903))

    def test_904(self):
        line = '''Class l:u{Var $9_:Array [Array [Array [Float ,01_2_0],0b1_01_11],0x1_68];}Class V:_{M(G,__9,_q:_;_YGQ_Vo:s_;_:Boolean ;l:Array [Array [Array [Boolean ,072],072],36]){__h::$73().n.r5J_();} }'''
        expect = '''Program([ClassDecl(Id(l),Id(u),[AttributeDecl(Static,VarDecl(Id($9_),ArrayType(360,ArrayType(23,ArrayType(80,FloatType)))))]),ClassDecl(Id(V),Id(_),[MethodDecl(Id(M),Instance,[param(Id(G),ClassType(Id(_))),param(Id(__9),ClassType(Id(_))),param(Id(_q),ClassType(Id(_))),param(Id(_YGQ_Vo),ClassType(Id(s_))),param(Id(_),BoolType),param(Id(l),ArrayType(36,ArrayType(58,ArrayType(58,BoolType))))],Block([Call(FieldAccess(CallExpr(Id(__h),Id($73),[]),Id(n)),Id(r5J_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 904))

    def test_905(self):
        line = '''Class wY:P4{Var $_,$_6,$_x:Array [Array [Array [Array [Array [Array [String ,0xB],0b11],0xD],0B100010],4],0B100010];}Class T:bQ4{Constructor (){Continue ;}Destructor (){}Val E:Int ;}'''
        expect = '''Program([ClassDecl(Id(wY),Id(P4),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(34,ArrayType(4,ArrayType(34,ArrayType(13,ArrayType(3,ArrayType(11,StringType)))))))),AttributeDecl(Static,VarDecl(Id($_6),ArrayType(34,ArrayType(4,ArrayType(34,ArrayType(13,ArrayType(3,ArrayType(11,StringType)))))))),AttributeDecl(Static,VarDecl(Id($_x),ArrayType(34,ArrayType(4,ArrayType(34,ArrayType(13,ArrayType(3,ArrayType(11,StringType))))))))]),ClassDecl(Id(T),Id(bQ4),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(E),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 905))

    def test_906(self):
        line = '''Class I{Constructor (h:Float ;_,E,U:_){}$3(_U:String ;p_:Array [Array [Array [Array [Boolean ,0x2_0],014],0B1],0b101010];Q,FPU,_d,_,LM_23_7_:Array [String ,0x55];__7_:String ;T,E_:H;_:_U_;_3_,_:_;Lv,qD:n29_;_3_,k:Array [Int ,0XE]){Break ;} }Class _{Val $_:_08;}Class Zl8:___t{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(I),[MethodDecl(Id(Constructor),Instance,[param(Id(h),FloatType),param(Id(_),ClassType(Id(_))),param(Id(E),ClassType(Id(_))),param(Id(U),ClassType(Id(_)))],Block([])),MethodDecl(Id($3),Static,[param(Id(_U),StringType),param(Id(p_),ArrayType(42,ArrayType(1,ArrayType(12,ArrayType(32,BoolType))))),param(Id(Q),ArrayType(85,StringType)),param(Id(FPU),ArrayType(85,StringType)),param(Id(_d),ArrayType(85,StringType)),param(Id(_),ArrayType(85,StringType)),param(Id(LM_23_7_),ArrayType(85,StringType)),param(Id(__7_),StringType),param(Id(T),ClassType(Id(H))),param(Id(E_),ClassType(Id(H))),param(Id(_),ClassType(Id(_U_))),param(Id(_3_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Lv),ClassType(Id(n29_))),param(Id(qD),ClassType(Id(n29_))),param(Id(_3_),ArrayType(14,IntType)),param(Id(k),ArrayType(14,IntType))],Block([Break]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_08)),None))]),ClassDecl(Id(Zl8),Id(___t),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 906))

    def test_907(self):
        line = '''Class W__S__a9:O{}Class _4T:_{Constructor (TD:Int ;H6,yRu_3__E___,Fp_,ZBM_1q,g,u___,B,_N_:Array [Array [Array [Boolean ,0X25],0X25],0134];__,_:D){}Var _L:Array [Array [String ,0b1],02];}Class _{}'''
        expect = '''Program([ClassDecl(Id(W__S__a9),Id(O),[]),ClassDecl(Id(_4T),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(TD),IntType),param(Id(H6),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(yRu_3__E___),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(Fp_),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(ZBM_1q),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(g),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(u___),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(B),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(_N_),ArrayType(92,ArrayType(37,ArrayType(37,BoolType)))),param(Id(__),ClassType(Id(D))),param(Id(_),ClassType(Id(D)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_L),ArrayType(2,ArrayType(1,StringType))))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 907))

    def test_908(self):
        line = '''Class _9___:_v_{Constructor (x23:Int ;_:Array [Array [Array [String ,0xA_A],0x59],0X48];__,_q,l:String ;_:X3hL2;_Z_,T:Array [Array [Array [Array [Float ,0xF],66],0X1_A],0X7_3];_:Boolean ;__:Array [Array [Array [Array [Float ,060],0x59],66],0B10_1_0_0_1];kO:Array [Array [Boolean ,01],0x59];_:s){}I(_,_,_p:d0;_:cy){} }'''
        expect = '''Program([ClassDecl(Id(_9___),Id(_v_),[MethodDecl(Id(Constructor),Instance,[param(Id(x23),IntType),param(Id(_),ArrayType(72,ArrayType(89,ArrayType(170,StringType)))),param(Id(__),StringType),param(Id(_q),StringType),param(Id(l),StringType),param(Id(_),ClassType(Id(X3hL2))),param(Id(_Z_),ArrayType(115,ArrayType(26,ArrayType(66,ArrayType(15,FloatType))))),param(Id(T),ArrayType(115,ArrayType(26,ArrayType(66,ArrayType(15,FloatType))))),param(Id(_),BoolType),param(Id(__),ArrayType(41,ArrayType(66,ArrayType(89,ArrayType(48,FloatType))))),param(Id(kO),ArrayType(89,ArrayType(1,BoolType))),param(Id(_),ClassType(Id(s)))],Block([])),MethodDecl(Id(I),Instance,[param(Id(_),ClassType(Id(d0))),param(Id(_),ClassType(Id(d0))),param(Id(_p),ClassType(Id(d0))),param(Id(_),ClassType(Id(cy)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 908))

    def test_909(self):
        line = '''Class F9__:_fm_{_(_8:Array [Array [Array [String ,52],0b1000101],03]){}$I(_:V;_,f,_2,r_:Array [Array [Int ,0x52],136_3]){}Var $_742,$_:Array [String ,66];}Class _:_9_8{}Class zQ:uW{Val _,$q,ZYk:Boolean ;}Class _O:_{}'''
        expect = '''Program([ClassDecl(Id(F9__),Id(_fm_),[MethodDecl(Id(_),Instance,[param(Id(_8),ArrayType(3,ArrayType(69,ArrayType(52,StringType))))],Block([])),MethodDecl(Id($I),Static,[param(Id(_),ClassType(Id(V))),param(Id(_),ArrayType(1363,ArrayType(82,IntType))),param(Id(f),ArrayType(1363,ArrayType(82,IntType))),param(Id(_2),ArrayType(1363,ArrayType(82,IntType))),param(Id(r_),ArrayType(1363,ArrayType(82,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_742),ArrayType(66,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(66,StringType)))]),ClassDecl(Id(_),Id(_9_8),[]),ClassDecl(Id(zQ),Id(uW),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($q),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(ZYk),BoolType,None))]),ClassDecl(Id(_O),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 909))

    def test_910(self):
        line = '''Class _:_{$1(_,_,v:_;e_4__R5:Array [Array [Boolean ,90],0X4];_:_;_:Array [Array [Array [Array [Array [String ,0X62],0x24],0B1],06],063];__,_,G:_;_1A,kq:k;X_,K:Array [Boolean ,0B1]){} }Class H{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($1),Static,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(v),ClassType(Id(_))),param(Id(e_4__R5),ArrayType(4,ArrayType(90,BoolType))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(51,ArrayType(6,ArrayType(1,ArrayType(36,ArrayType(98,StringType)))))),param(Id(__),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(G),ClassType(Id(_))),param(Id(_1A),ClassType(Id(k))),param(Id(kq),ClassType(Id(k))),param(Id(X_),ArrayType(1,BoolType)),param(Id(K),ArrayType(1,BoolType))],Block([]))]),ClassDecl(Id(H),[])])'''
        self.assertTrue(TestAST.test(line, expect, 910))

    def test_911(self):
        line = '''Class c3_{}Class _:z{h_(_:_;__:Int ;_1V,xI:Array [String ,0b101];_:Int ;_,E:Array [Array [String ,0x39],0B10];w:Float ;__,_:Array [String ,03];m,_p,k:e__){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(c3_),[]),ClassDecl(Id(_),Id(z),[MethodDecl(Id(h_),Instance,[param(Id(_),ClassType(Id(_))),param(Id(__),IntType),param(Id(_1V),ArrayType(5,StringType)),param(Id(xI),ArrayType(5,StringType)),param(Id(_),IntType),param(Id(_),ArrayType(2,ArrayType(57,StringType))),param(Id(E),ArrayType(2,ArrayType(57,StringType))),param(Id(w),FloatType),param(Id(__),ArrayType(3,StringType)),param(Id(_),ArrayType(3,StringType)),param(Id(m),ClassType(Id(e__))),param(Id(_p),ClassType(Id(e__))),param(Id(k),ClassType(Id(e__)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 911))

    def test_912(self):
        line = '''Class _{Destructor (){}$x4_(_:Array [Boolean ,0b110100];__k,_:Float ;y:Array [Array [Int ,0x3],0xB6]){Break ;}Constructor (){} }Class _:_{Constructor (_:i_x;j:s;__Y7,_:Boolean ;a:Boolean ;_I:iG;__:Int ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($x4_),Static,[param(Id(_),ArrayType(52,BoolType)),param(Id(__k),FloatType),param(Id(_),FloatType),param(Id(y),ArrayType(182,ArrayType(3,IntType)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(i_x))),param(Id(j),ClassType(Id(s))),param(Id(__Y7),BoolType),param(Id(_),BoolType),param(Id(a),BoolType),param(Id(_I),ClassType(Id(iG))),param(Id(__),IntType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 912))

    def test_913(self):
        line = '''Class _o5RC_{Destructor (){}Constructor (I_:Array [Array [Array [Array [Array [Float ,0B110100],0b1_0],0B110100],0B110100],0B111];_,_,__,_D,_,o8_:Array [String ,0106]){}Val p_:m;}Class J:_{}'''
        expect = '''Program([ClassDecl(Id(_o5RC_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(I_),ArrayType(7,ArrayType(52,ArrayType(52,ArrayType(2,ArrayType(52,FloatType)))))),param(Id(_),ArrayType(70,StringType)),param(Id(_),ArrayType(70,StringType)),param(Id(__),ArrayType(70,StringType)),param(Id(_D),ArrayType(70,StringType)),param(Id(_),ArrayType(70,StringType)),param(Id(o8_),ArrayType(70,StringType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(p_),ClassType(Id(m)),None))]),ClassDecl(Id(J),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 913))

    def test_914(self):
        line = '''Class _{}Class _:_x_{}Class _P:_{Var $_2__du,$R:L;}Class _{}Class _6:_3_{$6_(){}Constructor (_:_HQ1;_v2:_7){}Constructor (){Var a,_7_,Z,t:Array [Array [Array [Array [String ,27],27],0107],0X4C];} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_x_),[]),ClassDecl(Id(_P),Id(_),[AttributeDecl(Static,VarDecl(Id($_2__du),ClassType(Id(L)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($R),ClassType(Id(L)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_6),Id(_3_),[MethodDecl(Id($6_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_HQ1))),param(Id(_v2),ClassType(Id(_7)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(a),ArrayType(76,ArrayType(71,ArrayType(27,ArrayType(27,StringType))))),VarDecl(Id(_7_),ArrayType(76,ArrayType(71,ArrayType(27,ArrayType(27,StringType))))),VarDecl(Id(Z),ArrayType(76,ArrayType(71,ArrayType(27,ArrayType(27,StringType))))),VarDecl(Id(t),ArrayType(76,ArrayType(71,ArrayType(27,ArrayType(27,StringType)))))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 914))

    def test_915(self):
        line = '''Class _9{}Class b6:_6_{Var r_,$FT7,$__:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x1C],0xA_630],0b101011],0111],0B10],85],0X7],0111];Destructor (){}Destructor (){} }Class x:_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_9),[]),ClassDecl(Id(b6),Id(_6_),[AttributeDecl(Instance,VarDecl(Id(r_),ArrayType(73,ArrayType(7,ArrayType(85,ArrayType(2,ArrayType(73,ArrayType(43,ArrayType(42544,ArrayType(28,IntType)))))))))),AttributeDecl(Static,VarDecl(Id($FT7),ArrayType(73,ArrayType(7,ArrayType(85,ArrayType(2,ArrayType(73,ArrayType(43,ArrayType(42544,ArrayType(28,IntType)))))))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(73,ArrayType(7,ArrayType(85,ArrayType(2,ArrayType(73,ArrayType(43,ArrayType(42544,ArrayType(28,IntType)))))))))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 915))

    def test_916(self):
        line = '''Class _:S__{_Y(){}Destructor (){}Constructor (_3:Array [Array [String ,7_1_67_3_6_1],1_6];_1,o,z,u__R30,C:Int ){}Val $NC,K,_0_7,j__u,U_5_79,E_,d4V_:A_;}Class _:__{Var J:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(S__),[MethodDecl(Id(_Y),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ArrayType(16,ArrayType(7167361,StringType))),param(Id(_1),IntType),param(Id(o),IntType),param(Id(z),IntType),param(Id(u__R30),IntType),param(Id(C),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($NC),ClassType(Id(A_)),None)),AttributeDecl(Instance,ConstDecl(Id(K),ClassType(Id(A_)),None)),AttributeDecl(Instance,ConstDecl(Id(_0_7),ClassType(Id(A_)),None)),AttributeDecl(Instance,ConstDecl(Id(j__u),ClassType(Id(A_)),None)),AttributeDecl(Instance,ConstDecl(Id(U_5_79),ClassType(Id(A_)),None)),AttributeDecl(Instance,ConstDecl(Id(E_),ClassType(Id(A_)),None)),AttributeDecl(Instance,ConstDecl(Id(d4V_),ClassType(Id(A_)),None))]),ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,VarDecl(Id(J),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 916))

    def test_917(self):
        line = '''Class _k_{Var __:Array [Float ,0X55];Var $6:Array [Float ,6];}Class __:_{}Class l9:rA{Destructor (){}Constructor (_:Array [Array [Boolean ,0X7],0B11];Ko,E,Po,_:P;_53:String ;j__,bJ4_:Array [Array [String ,0B101],0x3E]){__01::$rA9();} }'''
        expect = '''Program([ClassDecl(Id(_k_),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(85,FloatType))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(6,FloatType)))]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(l9),Id(rA),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(7,BoolType))),param(Id(Ko),ClassType(Id(P))),param(Id(E),ClassType(Id(P))),param(Id(Po),ClassType(Id(P))),param(Id(_),ClassType(Id(P))),param(Id(_53),StringType),param(Id(j__),ArrayType(62,ArrayType(5,StringType))),param(Id(bJ4_),ArrayType(62,ArrayType(5,StringType)))],Block([Call(Id(__01),Id($rA9),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 917))

    def test_918(self):
        line = '''Class u:j{D(_7_,j,U,d_,__,_:Array [Array [String ,5],013]){}_c(q,f_,_,_K92:Boolean ;__G:_;_:_18){}Val $b:Array [Float ,0b1];Var __j_,$_0:Array [String ,0X28];Var _6A96j,_3E84:Array [Array [String ,0X28],73];}Class B___0:j{}'''
        expect = '''Program([ClassDecl(Id(u),Id(j),[MethodDecl(Id(D),Instance,[param(Id(_7_),ArrayType(11,ArrayType(5,StringType))),param(Id(j),ArrayType(11,ArrayType(5,StringType))),param(Id(U),ArrayType(11,ArrayType(5,StringType))),param(Id(d_),ArrayType(11,ArrayType(5,StringType))),param(Id(__),ArrayType(11,ArrayType(5,StringType))),param(Id(_),ArrayType(11,ArrayType(5,StringType)))],Block([])),MethodDecl(Id(_c),Instance,[param(Id(q),BoolType),param(Id(f_),BoolType),param(Id(_),BoolType),param(Id(_K92),BoolType),param(Id(__G),ClassType(Id(_))),param(Id(_),ClassType(Id(_18)))],Block([])),AttributeDecl(Static,ConstDecl(Id($b),ArrayType(1,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(__j_),ArrayType(40,StringType))),AttributeDecl(Static,VarDecl(Id($_0),ArrayType(40,StringType))),AttributeDecl(Instance,VarDecl(Id(_6A96j),ArrayType(73,ArrayType(40,StringType)))),AttributeDecl(Instance,VarDecl(Id(_3E84),ArrayType(73,ArrayType(40,StringType))))]),ClassDecl(Id(B___0),Id(j),[])])'''
        self.assertTrue(TestAST.test(line, expect, 918))

    def test_919(self):
        line = '''Class __K2:E{il_(_,_S_:_;Z:Array [Int ,0b10010];_49_B_:Float ;R25,_p:Array [Array [Array [Array [Array [Array [Float ,0B10],0B1],07],0123],0x47],0b1];j_:T;_16:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(__K2),Id(E),[MethodDecl(Id(il_),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_S_),ClassType(Id(_))),param(Id(Z),ArrayType(18,IntType)),param(Id(_49_B_),FloatType),param(Id(R25),ArrayType(1,ArrayType(71,ArrayType(83,ArrayType(7,ArrayType(1,ArrayType(2,FloatType))))))),param(Id(_p),ArrayType(1,ArrayType(71,ArrayType(83,ArrayType(7,ArrayType(1,ArrayType(2,FloatType))))))),param(Id(j_),ClassType(Id(T))),param(Id(_16),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 919))

    def test_920(self):
        line = '''Class I{}Class _e0{$_6AL_(){}Constructor (){}Var $__7,u2,__,$I,_,A,$52_,d:Float ;Val $H9_4,_,a:Array [Array [Int ,06_5],0xB];}Class _2:Z{Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(I),[]),ClassDecl(Id(_e0),[MethodDecl(Id($_6AL_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($__7),FloatType)),AttributeDecl(Instance,VarDecl(Id(u2),FloatType)),AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Static,VarDecl(Id($I),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(A),FloatType)),AttributeDecl(Static,VarDecl(Id($52_),FloatType)),AttributeDecl(Instance,VarDecl(Id(d),FloatType)),AttributeDecl(Static,ConstDecl(Id($H9_4),ArrayType(11,ArrayType(53,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(11,ArrayType(53,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(a),ArrayType(11,ArrayType(53,IntType)),None))]),ClassDecl(Id(_2),Id(Z),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 920))

    def test_921(self):
        line = '''Class ___u0:_A_{ezh(_:_){} }Class __:b{Var R3:Boolean ;$_Er_(_,_t9:o){} }Class A_{$j(t__:String ){}Var v:Array [Boolean ,0X7];Val $6,$_:_;}Class l__{}Class ____1__wUB:zt8{}'''
        expect = '''Program([ClassDecl(Id(___u0),Id(_A_),[MethodDecl(Id(ezh),Instance,[param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__),Id(b),[AttributeDecl(Instance,VarDecl(Id(R3),BoolType)),MethodDecl(Id($_Er_),Static,[param(Id(_),ClassType(Id(o))),param(Id(_t9),ClassType(Id(o)))],Block([]))]),ClassDecl(Id(A_),[MethodDecl(Id($j),Static,[param(Id(t__),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(v),ArrayType(7,BoolType))),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None))]),ClassDecl(Id(l__),[]),ClassDecl(Id(____1__wUB),Id(zt8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 921))

    def test_922(self):
        line = '''Class L{$_(_J:Array [Array [Array [Array [Array [Array [Array [Array [String ,0101],80],0x4],0x4],07_7_4],0b1001100],07244_0],0x4];r_:Float ;_4:X){}Var $37e,$X:G_3;}Class r{}Class V{}Class _:T_{}Class pl{}'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id($_),Static,[param(Id(_J),ArrayType(4,ArrayType(29984,ArrayType(76,ArrayType(508,ArrayType(4,ArrayType(4,ArrayType(80,ArrayType(65,StringType))))))))),param(Id(r_),FloatType),param(Id(_4),ClassType(Id(X)))],Block([])),AttributeDecl(Static,VarDecl(Id($37e),ClassType(Id(G_3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($X),ClassType(Id(G_3)),NullLiteral()))]),ClassDecl(Id(r),[]),ClassDecl(Id(V),[]),ClassDecl(Id(_),Id(T_),[]),ClassDecl(Id(pl),[])])'''
        self.assertTrue(TestAST.test(line, expect, 922))

    def test_923(self):
        line = '''Class m{$PS_(m,_6,T:f;I:Boolean ){} }Class q8{Var e_d_JN,_q,_W:Array [Array [String ,02],0XD1];Destructor (){}Val m1:Array [Array [Float ,01],0X49];}Class b13o7{}Class x_{}'''
        expect = '''Program([ClassDecl(Id(m),[MethodDecl(Id($PS_),Static,[param(Id(m),ClassType(Id(f))),param(Id(_6),ClassType(Id(f))),param(Id(T),ClassType(Id(f))),param(Id(I),BoolType)],Block([]))]),ClassDecl(Id(q8),[AttributeDecl(Instance,VarDecl(Id(e_d_JN),ArrayType(209,ArrayType(2,StringType)))),AttributeDecl(Instance,VarDecl(Id(_q),ArrayType(209,ArrayType(2,StringType)))),AttributeDecl(Instance,VarDecl(Id(_W),ArrayType(209,ArrayType(2,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(m1),ArrayType(73,ArrayType(1,FloatType)),None))]),ClassDecl(Id(b13o7),[]),ClassDecl(Id(x_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 923))

    def test_924(self):
        line = '''Class V7{Val O,$U,_:Z9U__;}Class _{Destructor (){Var _:Array [Array [Array [Array [Array [Float ,01],050],0b1_101],0B1010111],0B1];}Constructor (ye,_j99,B_2:Float ;_,R:Array [String ,68];_,__,_:Array [Boolean ,0X56]){} }'''
        expect = '''Program([ClassDecl(Id(V7),[AttributeDecl(Instance,ConstDecl(Id(O),ClassType(Id(Z9U__)),None)),AttributeDecl(Static,ConstDecl(Id($U),ClassType(Id(Z9U__)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(Z9U__)),None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),ArrayType(1,ArrayType(87,ArrayType(13,ArrayType(40,ArrayType(1,FloatType))))))])),MethodDecl(Id(Constructor),Instance,[param(Id(ye),FloatType),param(Id(_j99),FloatType),param(Id(B_2),FloatType),param(Id(_),ArrayType(68,StringType)),param(Id(R),ArrayType(68,StringType)),param(Id(_),ArrayType(86,BoolType)),param(Id(__),ArrayType(86,BoolType)),param(Id(_),ArrayType(86,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 924))

    def test_925(self):
        line = '''Class l2:d{}Class h{}Class __:_8{}Class _4Gw{}Class oQiH1_{Var $4__,$fl_:Array [Array [Array [Array [Array [String ,74],54],0X17],74],0b1_0];$_7(_G:Array [String ,8]){ {{} }}Var $16:i__u;}'''
        expect = '''Program([ClassDecl(Id(l2),Id(d),[]),ClassDecl(Id(h),[]),ClassDecl(Id(__),Id(_8),[]),ClassDecl(Id(_4Gw),[]),ClassDecl(Id(oQiH1_),[AttributeDecl(Static,VarDecl(Id($4__),ArrayType(2,ArrayType(74,ArrayType(23,ArrayType(54,ArrayType(74,StringType))))))),AttributeDecl(Static,VarDecl(Id($fl_),ArrayType(2,ArrayType(74,ArrayType(23,ArrayType(54,ArrayType(74,StringType))))))),MethodDecl(Id($_7),Static,[param(Id(_G),ArrayType(8,StringType))],Block([Block([Block([])])])),AttributeDecl(Static,VarDecl(Id($16),ClassType(Id(i__u)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 925))

    def test_926(self):
        line = '''Class E:_{$9(_,B__1J:Array [Array [Float ,067],92];Zt:Array [Array [Int ,0X9],0b1010011];__l___lz,_l__:_;S303D0,_6C:Int ){}Var $u81ET:Array [Array [Float ,0x10],8_4_11];Destructor (){}Constructor (Z:H;_,j_:__2){} }Class wm1_5_{}Class A{}'''
        expect = '''Program([ClassDecl(Id(E),Id(_),[MethodDecl(Id($9),Static,[param(Id(_),ArrayType(92,ArrayType(55,FloatType))),param(Id(B__1J),ArrayType(92,ArrayType(55,FloatType))),param(Id(Zt),ArrayType(83,ArrayType(9,IntType))),param(Id(__l___lz),ClassType(Id(_))),param(Id(_l__),ClassType(Id(_))),param(Id(S303D0),IntType),param(Id(_6C),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($u81ET),ArrayType(8411,ArrayType(16,FloatType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Z),ClassType(Id(H))),param(Id(_),ClassType(Id(__2))),param(Id(j_),ClassType(Id(__2)))],Block([]))]),ClassDecl(Id(wm1_5_),[]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 926))

    def test_927(self):
        line = '''Class c4:F{Val h,$_hJ,$9,_F,$3,_:Array [Array [Array [Array [Array [Int ,5_92],016],0x3D],98],0x3D];Val $6_,Mh,_3L,w:Array [Array [Array [Array [Array [Float ,0X6],0b100010],017_564_2],0X6],0x3D];}'''
        expect = '''Program([ClassDecl(Id(c4),Id(F),[AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(61,ArrayType(98,ArrayType(61,ArrayType(14,ArrayType(592,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($_hJ),ArrayType(61,ArrayType(98,ArrayType(61,ArrayType(14,ArrayType(592,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(61,ArrayType(98,ArrayType(61,ArrayType(14,ArrayType(592,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_F),ArrayType(61,ArrayType(98,ArrayType(61,ArrayType(14,ArrayType(592,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(61,ArrayType(98,ArrayType(61,ArrayType(14,ArrayType(592,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(61,ArrayType(98,ArrayType(61,ArrayType(14,ArrayType(592,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($6_),ArrayType(61,ArrayType(6,ArrayType(64418,ArrayType(34,ArrayType(6,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(Mh),ArrayType(61,ArrayType(6,ArrayType(64418,ArrayType(34,ArrayType(6,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_3L),ArrayType(61,ArrayType(6,ArrayType(64418,ArrayType(34,ArrayType(6,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(61,ArrayType(6,ArrayType(64418,ArrayType(34,ArrayType(6,FloatType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 927))

    def test_928(self):
        line = '''Class _:L_{Val Ir:Float ;Constructor (__W_,_VFv,r,j_4_,__:____;_,_H2_,V:_;_D:String ;D4_,X61:Int ){}Constructor (x:Array [Array [Array [Boolean ,0B1],034],43]){} }Class _9V9G6{}Class Q:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(L_),[AttributeDecl(Instance,ConstDecl(Id(Ir),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__W_),ClassType(Id(____))),param(Id(_VFv),ClassType(Id(____))),param(Id(r),ClassType(Id(____))),param(Id(j_4_),ClassType(Id(____))),param(Id(__),ClassType(Id(____))),param(Id(_),ClassType(Id(_))),param(Id(_H2_),ClassType(Id(_))),param(Id(V),ClassType(Id(_))),param(Id(_D),StringType),param(Id(D4_),IntType),param(Id(X61),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(43,ArrayType(28,ArrayType(1,BoolType))))],Block([]))]),ClassDecl(Id(_9V9G6),[]),ClassDecl(Id(Q),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 928))

    def test_929(self):
        line = '''Class C:R{Val u:Array [Int ,32];Destructor (){ {} }Val $Z:Int ;}Class _:_{Var $J,_0Ej_,_:Array [Array [Array [Array [Array [Float ,619_2],0x40],037],0B1_0],0x2];Var $I7:Array [Boolean ,0X12];}'''
        expect = '''Program([ClassDecl(Id(C),Id(R),[AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(32,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($Z),IntType,None))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($J),ArrayType(2,ArrayType(2,ArrayType(31,ArrayType(64,ArrayType(6192,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(_0Ej_),ArrayType(2,ArrayType(2,ArrayType(31,ArrayType(64,ArrayType(6192,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,ArrayType(2,ArrayType(31,ArrayType(64,ArrayType(6192,FloatType))))))),AttributeDecl(Static,VarDecl(Id($I7),ArrayType(18,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 929))

    def test_930(self):
        line = '''Class F80{Var _W,$F:Array [Int ,0X2_D];Val $C:Array [Boolean ,32];Val __M:_t__;Val _:Array [String ,0B1001110];}Class _{Val R_:String ;}Class _:X7{Constructor (_X4_:E1;_:Array [Array [Int ,0x47],0b1110];_:Array [Array [Array [Array [Float ,02_00],0103],5_53],0b1110]){} }'''
        expect = '''Program([ClassDecl(Id(F80),[AttributeDecl(Instance,VarDecl(Id(_W),ArrayType(45,IntType))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(45,IntType))),AttributeDecl(Static,ConstDecl(Id($C),ArrayType(32,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(__M),ClassType(Id(_t__)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(78,StringType),None))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(R_),StringType,None))]),ClassDecl(Id(_),Id(X7),[MethodDecl(Id(Constructor),Instance,[param(Id(_X4_),ClassType(Id(E1))),param(Id(_),ArrayType(14,ArrayType(71,IntType))),param(Id(_),ArrayType(14,ArrayType(553,ArrayType(67,ArrayType(128,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 930))

    def test_931(self):
        line = '''Class _:_{Constructor (){Var G__7,ib13_,c:Array [Boolean ,0b1010100];} }Class I78{Val _xj,_,l,n:__;}Class _5:h0{Constructor (_,L3_:Array [Array [String ,4_0],75];s,H:Array [Array [Float ,39],0B1001];_8_UC,Su,_e:Int ;_:_0_;a72:__;Ki,n,__:_5TL3___){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(G__7),ArrayType(84,BoolType)),VarDecl(Id(ib13_),ArrayType(84,BoolType)),VarDecl(Id(c),ArrayType(84,BoolType))]))]),ClassDecl(Id(I78),[AttributeDecl(Instance,ConstDecl(Id(_xj),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(l),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(__)),None))]),ClassDecl(Id(_5),Id(h0),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(75,ArrayType(40,StringType))),param(Id(L3_),ArrayType(75,ArrayType(40,StringType))),param(Id(s),ArrayType(9,ArrayType(39,FloatType))),param(Id(H),ArrayType(9,ArrayType(39,FloatType))),param(Id(_8_UC),IntType),param(Id(Su),IntType),param(Id(_e),IntType),param(Id(_),ClassType(Id(_0_))),param(Id(a72),ClassType(Id(__))),param(Id(Ki),ClassType(Id(_5TL3___))),param(Id(n),ClassType(Id(_5TL3___))),param(Id(__),ClassType(Id(_5TL3___)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 931))

    def test_932(self):
        line = '''Class f_:c8{}Class c058:Q2{Constructor (){} }Class _{$_(){}Constructor (){}Constructor (_,_6w_4:Float ;_,_8:Array [Array [Array [Float ,0xB],68],0106];m:Float ){}$O_(w,_:j2){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(f_),Id(c8),[]),ClassDecl(Id(c058),Id(Q2),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_6w_4),FloatType),param(Id(_),ArrayType(70,ArrayType(68,ArrayType(11,FloatType)))),param(Id(_8),ArrayType(70,ArrayType(68,ArrayType(11,FloatType)))),param(Id(m),FloatType)],Block([])),MethodDecl(Id($O_),Static,[param(Id(w),ClassType(Id(j2))),param(Id(_),ClassType(Id(j2)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 932))

    def test_933(self):
        line = '''Class __{Constructor (z2q:Array [Array [String ,0B1_1_0],0B1];E:Array [Array [Array [Int ,0B110000],0X5F],0XE];Qx:Array [Array [Array [Float ,14],7_1_1_48092_4],14]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(z2q),ArrayType(1,ArrayType(6,StringType))),param(Id(E),ArrayType(14,ArrayType(95,ArrayType(48,IntType)))),param(Id(Qx),ArrayType(14,ArrayType(711480924,ArrayType(14,FloatType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 933))

    def test_934(self):
        line = '''Class V:_21{}Class _E:dxY{Destructor (){ {} }}Class _:_{$4(){} }Class _P_{Constructor (){} }Class q_{Var $068,__,__33w6gw:Array [Array [Float ,0B100_01_11_1_0],04];Val $_5,$_:Array [Boolean ,0B1000111];}'''
        expect = '''Program([ClassDecl(Id(V),Id(_21),[]),ClassDecl(Id(_E),Id(dxY),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($4),Static,[],Block([]))]),ClassDecl(Id(_P_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(q_),[AttributeDecl(Static,VarDecl(Id($068),ArrayType(4,ArrayType(286,FloatType)))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(4,ArrayType(286,FloatType)))),AttributeDecl(Instance,VarDecl(Id(__33w6gw),ArrayType(4,ArrayType(286,FloatType)))),AttributeDecl(Static,ConstDecl(Id($_5),ArrayType(71,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(71,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 934))

    def test_935(self):
        line = '''Class L0:Y{Destructor (){} }Class d:_{}Class _a{$_(_,__:_FEO;s_,H:Boolean ;q_p9,_,j48_,_:Array [Array [Array [Float ,0B11110],0B1],0x7];p4:_;KS_oL,_,_k:uU;_,E:Array [Array [Boolean ,13],0XE];_Px:d8){Continue ;}$2t(){} }'''
        expect = '''Program([ClassDecl(Id(L0),Id(Y),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(d),Id(_),[]),ClassDecl(Id(_a),[MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(_FEO))),param(Id(__),ClassType(Id(_FEO))),param(Id(s_),BoolType),param(Id(H),BoolType),param(Id(q_p9),ArrayType(7,ArrayType(1,ArrayType(30,FloatType)))),param(Id(_),ArrayType(7,ArrayType(1,ArrayType(30,FloatType)))),param(Id(j48_),ArrayType(7,ArrayType(1,ArrayType(30,FloatType)))),param(Id(_),ArrayType(7,ArrayType(1,ArrayType(30,FloatType)))),param(Id(p4),ClassType(Id(_))),param(Id(KS_oL),ClassType(Id(uU))),param(Id(_),ClassType(Id(uU))),param(Id(_k),ClassType(Id(uU))),param(Id(_),ArrayType(14,ArrayType(13,BoolType))),param(Id(E),ArrayType(14,ArrayType(13,BoolType))),param(Id(_Px),ClassType(Id(d8)))],Block([Continue])),MethodDecl(Id($2t),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 935))

    def test_936(self):
        line = '''Class s:_8{}Class h5_{}Class x:_{Destructor (){} }Class __1{_(l,_,d,I4,J,Sn:Array [Array [Array [Array [Int ,8_7_4_6],040],0B11001],0X37];_:Int ;_o,S,o,_:f){} }Class cF__:W{}'''
        expect = '''Program([ClassDecl(Id(s),Id(_8),[]),ClassDecl(Id(h5_),[]),ClassDecl(Id(x),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__1),[MethodDecl(Id(_),Instance,[param(Id(l),ArrayType(55,ArrayType(25,ArrayType(32,ArrayType(8746,IntType))))),param(Id(_),ArrayType(55,ArrayType(25,ArrayType(32,ArrayType(8746,IntType))))),param(Id(d),ArrayType(55,ArrayType(25,ArrayType(32,ArrayType(8746,IntType))))),param(Id(I4),ArrayType(55,ArrayType(25,ArrayType(32,ArrayType(8746,IntType))))),param(Id(J),ArrayType(55,ArrayType(25,ArrayType(32,ArrayType(8746,IntType))))),param(Id(Sn),ArrayType(55,ArrayType(25,ArrayType(32,ArrayType(8746,IntType))))),param(Id(_),IntType),param(Id(_o),ClassType(Id(f))),param(Id(S),ClassType(Id(f))),param(Id(o),ClassType(Id(f))),param(Id(_),ClassType(Id(f)))],Block([]))]),ClassDecl(Id(cF__),Id(W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 936))

    def test_937(self):
        line = '''Class LY:_{Val _:Array [Boolean ,05];}Class _{Constructor (){}Var $_:SL;Var $_O:Array [Array [Array [String ,24],24],017];Val $___,$7,$Q,$y5,$NC,_72:Int ;Var S,$m1K_:p;}'''
        expect = '''Program([ClassDecl(Id(LY),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,BoolType),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(SL)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_O),ArrayType(15,ArrayType(24,ArrayType(24,StringType))))),AttributeDecl(Static,ConstDecl(Id($___),IntType,None)),AttributeDecl(Static,ConstDecl(Id($7),IntType,None)),AttributeDecl(Static,ConstDecl(Id($Q),IntType,None)),AttributeDecl(Static,ConstDecl(Id($y5),IntType,None)),AttributeDecl(Static,ConstDecl(Id($NC),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_72),IntType,None)),AttributeDecl(Instance,VarDecl(Id(S),ClassType(Id(p)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($m1K_),ClassType(Id(p)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 937))

    def test_938(self):
        line = '''Class __F:_M{Constructor (C,W:Array [Boolean ,054];__,B,_x3,i,PdM______,_:i0_){}_0(Rc,qV_:Int ){}Constructor (_,A_:Float ;_,V8,r6_Nx,D_,VbR_:Boolean ){}Var $2F,_4I:_l;Constructor (){}Val _:__;}'''
        expect = '''Program([ClassDecl(Id(__F),Id(_M),[MethodDecl(Id(Constructor),Instance,[param(Id(C),ArrayType(44,BoolType)),param(Id(W),ArrayType(44,BoolType)),param(Id(__),ClassType(Id(i0_))),param(Id(B),ClassType(Id(i0_))),param(Id(_x3),ClassType(Id(i0_))),param(Id(i),ClassType(Id(i0_))),param(Id(PdM______),ClassType(Id(i0_))),param(Id(_),ClassType(Id(i0_)))],Block([])),MethodDecl(Id(_0),Instance,[param(Id(Rc),IntType),param(Id(qV_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(A_),FloatType),param(Id(_),BoolType),param(Id(V8),BoolType),param(Id(r6_Nx),BoolType),param(Id(D_),BoolType),param(Id(VbR_),BoolType)],Block([])),AttributeDecl(Static,VarDecl(Id($2F),ClassType(Id(_l)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_4I),ClassType(Id(_l)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 938))

    def test_939(self):
        line = '''Class _:_{Constructor (e9,__,u_,_y:Array [Array [Float ,03],0x6]){Continue ;}Var $L2:Boolean ;Var _,_,s_1_:Array [Array [Array [Array [String ,0b110101],3_5_0_5],7],0131];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(e9),ArrayType(6,ArrayType(3,FloatType))),param(Id(__),ArrayType(6,ArrayType(3,FloatType))),param(Id(u_),ArrayType(6,ArrayType(3,FloatType))),param(Id(_y),ArrayType(6,ArrayType(3,FloatType)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($L2),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(89,ArrayType(7,ArrayType(3505,ArrayType(53,StringType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(89,ArrayType(7,ArrayType(3505,ArrayType(53,StringType)))))),AttributeDecl(Instance,VarDecl(Id(s_1_),ArrayType(89,ArrayType(7,ArrayType(3505,ArrayType(53,StringType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 939))

    def test_940(self):
        line = '''Class t_{}Class k{$44k(__3,_,_:String ;_:i_;_:String ;_B3w_:Int ){} }Class _x:_6{}Class h{Constructor (_c:Array [Int ,82];_4_2,_,R__Th_:Boolean ){} }Class _{}Class _{}'''
        expect = '''Program([ClassDecl(Id(t_),[]),ClassDecl(Id(k),[MethodDecl(Id($44k),Static,[param(Id(__3),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(i_))),param(Id(_),StringType),param(Id(_B3w_),IntType)],Block([]))]),ClassDecl(Id(_x),Id(_6),[]),ClassDecl(Id(h),[MethodDecl(Id(Constructor),Instance,[param(Id(_c),ArrayType(82,IntType)),param(Id(_4_2),BoolType),param(Id(_),BoolType),param(Id(R__Th_),BoolType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 940))

    def test_941(self):
        line = '''Class __v:O{Val $__:Array [Array [Array [Array [Array [String ,0136],0136],0B11_1],0B1],0B1];}Class sf_:_t{Constructor (){Break ;Return ;}Var _70M:Array [Array [Array [Array [Int ,04],0X44],76],0x45];}Class l_3{}Class _:Y{Var K,_5:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(__v),Id(O),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(1,ArrayType(1,ArrayType(7,ArrayType(94,ArrayType(94,StringType))))),None))]),ClassDecl(Id(sf_),Id(_t),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Return()])),AttributeDecl(Instance,VarDecl(Id(_70M),ArrayType(69,ArrayType(76,ArrayType(68,ArrayType(4,IntType))))))]),ClassDecl(Id(l_3),[]),ClassDecl(Id(_),Id(Y),[AttributeDecl(Instance,VarDecl(Id(K),BoolType)),AttributeDecl(Instance,VarDecl(Id(_5),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 941))

    def test_942(self):
        line = '''Class ho{}Class wc1_{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0121],0x3CE_2_8],8],0X49],05_2_7],4],0B11],0X49];_1Q_2:Array [Array [Array [Array [Boolean ,3],61_0],0b101110],0121];_,D:Array [Float ,3];_:String ;_:Array [Array [Int ,0x14],0121];_,_9___j3:c3;M:Array [Array [Float ,0x4],0X49];MA:Array [Array [Array [Float ,0121],5_1],05];_jw,_q,F,l0:Int ;y,_,aUM,_:Array [Float ,0X8]){Break ;}Qa(__9_,_0q_6:Boolean ;O:Array [String ,0b101110]){} }Class _4_{}Class V7_:Ug{}'''
        expect = '''Program([ClassDecl(Id(ho),[]),ClassDecl(Id(wc1_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(73,ArrayType(3,ArrayType(4,ArrayType(343,ArrayType(73,ArrayType(8,ArrayType(249384,ArrayType(81,FloatType))))))))),param(Id(_1Q_2),ArrayType(81,ArrayType(46,ArrayType(610,ArrayType(3,BoolType))))),param(Id(_),ArrayType(3,FloatType)),param(Id(D),ArrayType(3,FloatType)),param(Id(_),StringType),param(Id(_),ArrayType(81,ArrayType(20,IntType))),param(Id(_),ClassType(Id(c3))),param(Id(_9___j3),ClassType(Id(c3))),param(Id(M),ArrayType(73,ArrayType(4,FloatType))),param(Id(MA),ArrayType(5,ArrayType(51,ArrayType(81,FloatType)))),param(Id(_jw),IntType),param(Id(_q),IntType),param(Id(F),IntType),param(Id(l0),IntType),param(Id(y),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType)),param(Id(aUM),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType))],Block([Break])),MethodDecl(Id(Qa),Instance,[param(Id(__9_),BoolType),param(Id(_0q_6),BoolType),param(Id(O),ArrayType(46,StringType))],Block([]))]),ClassDecl(Id(_4_),[]),ClassDecl(Id(V7_),Id(Ug),[])])'''
        self.assertTrue(TestAST.test(line, expect, 942))

    def test_943(self):
        line = '''Class ___:_{Constructor (){} }Class J1{Var P,$8O,$z:Array [String ,0B110101];Destructor (){} }Class _:_{}Class _:__71{}Class Tz4:_{Constructor (n:Array [Array [Array [Array [Int ,6_7_638_20_38],0B110101],0XC],0B110101]){}Constructor (__8:Array [Int ,0X5]){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(J1),[AttributeDecl(Instance,VarDecl(Id(P),ArrayType(53,StringType))),AttributeDecl(Static,VarDecl(Id($8O),ArrayType(53,StringType))),AttributeDecl(Static,VarDecl(Id($z),ArrayType(53,StringType))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(__71),[]),ClassDecl(Id(Tz4),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(n),ArrayType(53,ArrayType(12,ArrayType(53,ArrayType(676382038,IntType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__8),ArrayType(5,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 943))

    def test_944(self):
        line = '''Class F:p{Var $ab,E6B,$9i4,_S_2,$_,$_,$_,$_,_,I,$__IY:Boolean ;}Class U_Z:___{Var _:N0;}Class _3:N{}Class d:__7_{_(_1:Array [Array [Array [Array [String ,047],0117],0b100110],03];x_53,_,_q:a){} }Class G{Destructor (){} }Class Q_:_2{}'''
        expect = '''Program([ClassDecl(Id(F),Id(p),[AttributeDecl(Static,VarDecl(Id($ab),BoolType)),AttributeDecl(Instance,VarDecl(Id(E6B),BoolType)),AttributeDecl(Static,VarDecl(Id($9i4),BoolType)),AttributeDecl(Instance,VarDecl(Id(_S_2),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(I),BoolType)),AttributeDecl(Static,VarDecl(Id($__IY),BoolType))]),ClassDecl(Id(U_Z),Id(___),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(N0)),NullLiteral()))]),ClassDecl(Id(_3),Id(N),[]),ClassDecl(Id(d),Id(__7_),[MethodDecl(Id(_),Instance,[param(Id(_1),ArrayType(3,ArrayType(38,ArrayType(79,ArrayType(39,StringType))))),param(Id(x_53),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(_q),ClassType(Id(a)))],Block([]))]),ClassDecl(Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Q_),Id(_2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 944))

    def test_945(self):
        line = '''Class yv{}Class _:_{Var Fk7__,$9:Boolean ;Val $P:yuF_5;Constructor (_l_6,D,J_,__,s0_Tu,H:Int ;__0:bZ;_:String ;_:Array [String ,0X7_8];_,_,y3,O_:k_;_,_9,b5_,_u,p_,aRv60_,X4,d,s__:Array [Array [Array [Array [String ,0b1001010],0b1],0B11_0],0X37]){Continue ;}Var $m,J0,$_5:Array [Array [String ,061],0X76C];Val _5:j;}'''
        expect = '''Program([ClassDecl(Id(yv),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(Fk7__),BoolType)),AttributeDecl(Static,VarDecl(Id($9),BoolType)),AttributeDecl(Static,ConstDecl(Id($P),ClassType(Id(yuF_5)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_l_6),IntType),param(Id(D),IntType),param(Id(J_),IntType),param(Id(__),IntType),param(Id(s0_Tu),IntType),param(Id(H),IntType),param(Id(__0),ClassType(Id(bZ))),param(Id(_),StringType),param(Id(_),ArrayType(120,StringType)),param(Id(_),ClassType(Id(k_))),param(Id(_),ClassType(Id(k_))),param(Id(y3),ClassType(Id(k_))),param(Id(O_),ClassType(Id(k_))),param(Id(_),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(_9),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(b5_),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(_u),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(p_),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(aRv60_),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(X4),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(d),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType))))),param(Id(s__),ArrayType(55,ArrayType(6,ArrayType(1,ArrayType(74,StringType)))))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($m),ArrayType(1900,ArrayType(49,StringType)))),AttributeDecl(Instance,VarDecl(Id(J0),ArrayType(1900,ArrayType(49,StringType)))),AttributeDecl(Static,VarDecl(Id($_5),ArrayType(1900,ArrayType(49,StringType)))),AttributeDecl(Instance,ConstDecl(Id(_5),ClassType(Id(j)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 945))

    def test_946(self):
        line = '''Class x:_70{Var K_,$_:Array [Array [Float ,49],0B1];Val $_4Z8__3_,$y6:X38_o6;Val E,x_,$98:Array [Array [Array [Array [Array [Array [Array [Array [String ,49],4],042],050_4],49],0b1_1],0X53],0B1011101];Destructor (){}Constructor (t30,_8_:Boolean ;_,dX_6:Boolean ){}Val o_:_tz6Y;}'''
        expect = '''Program([ClassDecl(Id(x),Id(_70),[AttributeDecl(Instance,VarDecl(Id(K_),ArrayType(1,ArrayType(49,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(49,FloatType)))),AttributeDecl(Static,ConstDecl(Id($_4Z8__3_),ClassType(Id(X38_o6)),None)),AttributeDecl(Static,ConstDecl(Id($y6),ClassType(Id(X38_o6)),None)),AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(93,ArrayType(83,ArrayType(3,ArrayType(49,ArrayType(324,ArrayType(34,ArrayType(4,ArrayType(49,StringType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(x_),ArrayType(93,ArrayType(83,ArrayType(3,ArrayType(49,ArrayType(324,ArrayType(34,ArrayType(4,ArrayType(49,StringType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($98),ArrayType(93,ArrayType(83,ArrayType(3,ArrayType(49,ArrayType(324,ArrayType(34,ArrayType(4,ArrayType(49,StringType)))))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(t30),BoolType),param(Id(_8_),BoolType),param(Id(_),BoolType),param(Id(dX_6),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(o_),ClassType(Id(_tz6Y)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 946))

    def test_947(self):
        line = '''Class _:jsp{Constructor (_:Array [Array [Array [Float ,94],075],07_5_06];__,_3_:Array [String ,0XAB];v,__:_4X;_Y_rG_,m_g,e5,_,dN3_9IQ,p_E,d_:Int ){} }Class _:a_Bc{$9(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(jsp),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3910,ArrayType(61,ArrayType(94,FloatType)))),param(Id(__),ArrayType(171,StringType)),param(Id(_3_),ArrayType(171,StringType)),param(Id(v),ClassType(Id(_4X))),param(Id(__),ClassType(Id(_4X))),param(Id(_Y_rG_),IntType),param(Id(m_g),IntType),param(Id(e5),IntType),param(Id(_),IntType),param(Id(dN3_9IQ),IntType),param(Id(p_E),IntType),param(Id(d_),IntType)],Block([]))]),ClassDecl(Id(_),Id(a_Bc),[MethodDecl(Id($9),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 947))

    def test_948(self):
        line = '''Class _6{G(d:_;_,_,_G4_,_,M:Array [Array [Array [Int ,0b1010101],0b1010101],1_3_2]){} }Class y7_{Constructor (_,s,__46,_0:Boolean ;n3,_bi,_,f,e,_:_){}Val _:Array [Array [Array [String ,0b1010101],71],0x49];}'''
        expect = '''Program([ClassDecl(Id(_6),[MethodDecl(Id(G),Instance,[param(Id(d),ClassType(Id(_))),param(Id(_),ArrayType(132,ArrayType(85,ArrayType(85,IntType)))),param(Id(_),ArrayType(132,ArrayType(85,ArrayType(85,IntType)))),param(Id(_G4_),ArrayType(132,ArrayType(85,ArrayType(85,IntType)))),param(Id(_),ArrayType(132,ArrayType(85,ArrayType(85,IntType)))),param(Id(M),ArrayType(132,ArrayType(85,ArrayType(85,IntType))))],Block([]))]),ClassDecl(Id(y7_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(s),BoolType),param(Id(__46),BoolType),param(Id(_0),BoolType),param(Id(n3),ClassType(Id(_))),param(Id(_bi),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(f),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(73,ArrayType(71,ArrayType(85,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 948))

    def test_949(self):
        line = '''Class h_:_{}Class j7{Val i,o,$7t,$_:Array [Int ,0b1_00];Constructor (){} }Class J_{Constructor (D,_,_,Bv_:i_45__;_b,m7_:Array [String ,5_8_1_638664_0];_:Array [Array [Boolean ,0B101111],0x16]){}U(_2T:Int ;y,Srv,S_,_,Ue,I6_:WPnZ;K:Float ;_mSYJ:_W3K9__91_1M10;O:Array [Float ,2]){} }'''
        expect = '''Program([ClassDecl(Id(h_),Id(_),[]),ClassDecl(Id(j7),[AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(4,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(o),ArrayType(4,IntType),None)),AttributeDecl(Static,ConstDecl(Id($7t),ArrayType(4,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(4,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(J_),[MethodDecl(Id(Constructor),Instance,[param(Id(D),ClassType(Id(i_45__))),param(Id(_),ClassType(Id(i_45__))),param(Id(_),ClassType(Id(i_45__))),param(Id(Bv_),ClassType(Id(i_45__))),param(Id(_b),ArrayType(5816386640,StringType)),param(Id(m7_),ArrayType(5816386640,StringType)),param(Id(_),ArrayType(22,ArrayType(47,BoolType)))],Block([])),MethodDecl(Id(U),Instance,[param(Id(_2T),IntType),param(Id(y),ClassType(Id(WPnZ))),param(Id(Srv),ClassType(Id(WPnZ))),param(Id(S_),ClassType(Id(WPnZ))),param(Id(_),ClassType(Id(WPnZ))),param(Id(Ue),ClassType(Id(WPnZ))),param(Id(I6_),ClassType(Id(WPnZ))),param(Id(K),FloatType),param(Id(_mSYJ),ClassType(Id(_W3K9__91_1M10))),param(Id(O),ArrayType(2,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 949))

    def test_950(self):
        line = '''Class _{Constructor (a4Qb_:_3;e,x:_f;N,_:Boolean ){}$A(){} }Class _02_84{Constructor (_,_:String ;_3Lb,_V,_1,a,_:Array [Array [Float ,0X6_B],0X59]){}Constructor (_HV,_8:Array [Array [Int ,0X59],0x10]){} }Class e:Nn_{Destructor (){} }Class _:o2{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(a4Qb_),ClassType(Id(_3))),param(Id(e),ClassType(Id(_f))),param(Id(x),ClassType(Id(_f))),param(Id(N),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id($A),Static,[],Block([]))]),ClassDecl(Id(_02_84),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(_3Lb),ArrayType(89,ArrayType(107,FloatType))),param(Id(_V),ArrayType(89,ArrayType(107,FloatType))),param(Id(_1),ArrayType(89,ArrayType(107,FloatType))),param(Id(a),ArrayType(89,ArrayType(107,FloatType))),param(Id(_),ArrayType(89,ArrayType(107,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_HV),ArrayType(16,ArrayType(89,IntType))),param(Id(_8),ArrayType(16,ArrayType(89,IntType)))],Block([]))]),ClassDecl(Id(e),Id(Nn_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(o2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 950))

    def test_951(self):
        line = '''Class __j{}Class _{}Class __b:_hH_4S84{Val $N,A_,__7,_C__jKk_5:Array [Float ,0XCF_1];Val e:Boolean ;Var $_:Int ;}Class U{}Class u:bz_{Var $2aDl2,$H,$_S:Array [Array [Int ,37],3_5];}'''
        expect = '''Program([ClassDecl(Id(__j),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__b),Id(_hH_4S84),[AttributeDecl(Static,ConstDecl(Id($N),ArrayType(3313,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(A_),ArrayType(3313,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__7),ArrayType(3313,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_C__jKk_5),ArrayType(3313,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(e),BoolType,None)),AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(U),[]),ClassDecl(Id(u),Id(bz_),[AttributeDecl(Static,VarDecl(Id($2aDl2),ArrayType(35,ArrayType(37,IntType)))),AttributeDecl(Static,VarDecl(Id($H),ArrayType(35,ArrayType(37,IntType)))),AttributeDecl(Static,VarDecl(Id($_S),ArrayType(35,ArrayType(37,IntType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 951))

    def test_952(self):
        line = '''Class u{}Class _4{Constructor (yX:Int ;_:Array [Array [Int ,0130],28]){}$__(){Continue ;} }Class J{}Class _:__{}Class _W:_4{Destructor (){} }Class J{Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(u),[]),ClassDecl(Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(yX),IntType),param(Id(_),ArrayType(28,ArrayType(88,IntType)))],Block([])),MethodDecl(Id($__),Static,[],Block([Continue]))]),ClassDecl(Id(J),[]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(_W),Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 952))

    def test_953(self):
        line = '''Class __{Constructor (_,m:Array [Array [Float ,025_0],0456];_v2,Iud6:Array [Array [Array [Array [Array [Array [Boolean ,07],0X19],0x2],0x29],84],7_3]){}Var $_,_:Array [Array [Array [Int ,1_6],0xA_C_F_7D],0B1011011];}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(302,ArrayType(168,FloatType))),param(Id(m),ArrayType(302,ArrayType(168,FloatType))),param(Id(_v2),ArrayType(73,ArrayType(84,ArrayType(41,ArrayType(2,ArrayType(25,ArrayType(7,BoolType))))))),param(Id(Iud6),ArrayType(73,ArrayType(84,ArrayType(41,ArrayType(2,ArrayType(25,ArrayType(7,BoolType)))))))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(91,ArrayType(708477,ArrayType(16,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(91,ArrayType(708477,ArrayType(16,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 953))

    def test_954(self):
        line = '''Class H:Y{Val $_0T:Array [Array [Float ,0b1],037];Constructor (){}Destructor (){}Constructor (k7__:String ;_0,_r,_,_:Int ;f:Array [Int ,36]){} }Class u_:_{Constructor (y8,_:Array [Float ,037]){}Constructor (){}Var rt:Array [String ,0b1010010];}'''
        expect = '''Program([ClassDecl(Id(H),Id(Y),[AttributeDecl(Static,ConstDecl(Id($_0T),ArrayType(31,ArrayType(1,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(k7__),StringType),param(Id(_0),IntType),param(Id(_r),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(f),ArrayType(36,IntType))],Block([]))]),ClassDecl(Id(u_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(y8),ArrayType(31,FloatType)),param(Id(_),ArrayType(31,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(rt),ArrayType(82,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 954))

    def test_955(self):
        line = '''Class ET{Constructor (_:String ;lt56,_7:Array [Int ,0X3A]){Break ;}SP(x7:Array [Int ,0x4E];_,__0w91Hi:Float ;_aS_t6,t,c:Boolean ;_,mi,_,_Am:Array [String ,37];__6,r__:Array [Array [String ,0X3A],0B1_0]){} }Class K4r{}Class _{}'''
        expect = '''Program([ClassDecl(Id(ET),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(lt56),ArrayType(58,IntType)),param(Id(_7),ArrayType(58,IntType))],Block([Break])),MethodDecl(Id(SP),Instance,[param(Id(x7),ArrayType(78,IntType)),param(Id(_),FloatType),param(Id(__0w91Hi),FloatType),param(Id(_aS_t6),BoolType),param(Id(t),BoolType),param(Id(c),BoolType),param(Id(_),ArrayType(37,StringType)),param(Id(mi),ArrayType(37,StringType)),param(Id(_),ArrayType(37,StringType)),param(Id(_Am),ArrayType(37,StringType)),param(Id(__6),ArrayType(2,ArrayType(58,StringType))),param(Id(r__),ArrayType(2,ArrayType(58,StringType)))],Block([]))]),ClassDecl(Id(K4r),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 955))

    def test_956(self):
        line = '''Class w{Destructor (){ {} }$_(h:String ;W1_:_Y){}Destructor (){}Constructor (_n_,E:_d;_0:Array [Array [Boolean ,0XA_0],52];_w,_Y:w;_,Z8n,_9N,o_:Array [Int ,52];_Izh,_,mj,TJ1___,_K:L;_0,g2,a:Float ;_7:_Gd;_,W,gu,n0_:Array [Array [Array [Array [Float ,05],106],0x7],0x90_C];U,g,_,_,J,_,_,QH,QJ,_:Float ;_Tt:Array [Float ,0xA];_,_5M:Array [Array [String ,0B1010001],012]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id($_),Static,[param(Id(h),StringType),param(Id(W1_),ClassType(Id(_Y)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_n_),ClassType(Id(_d))),param(Id(E),ClassType(Id(_d))),param(Id(_0),ArrayType(52,ArrayType(160,BoolType))),param(Id(_w),ClassType(Id(w))),param(Id(_Y),ClassType(Id(w))),param(Id(_),ArrayType(52,IntType)),param(Id(Z8n),ArrayType(52,IntType)),param(Id(_9N),ArrayType(52,IntType)),param(Id(o_),ArrayType(52,IntType)),param(Id(_Izh),ClassType(Id(L))),param(Id(_),ClassType(Id(L))),param(Id(mj),ClassType(Id(L))),param(Id(TJ1___),ClassType(Id(L))),param(Id(_K),ClassType(Id(L))),param(Id(_0),FloatType),param(Id(g2),FloatType),param(Id(a),FloatType),param(Id(_7),ClassType(Id(_Gd))),param(Id(_),ArrayType(2316,ArrayType(7,ArrayType(106,ArrayType(5,FloatType))))),param(Id(W),ArrayType(2316,ArrayType(7,ArrayType(106,ArrayType(5,FloatType))))),param(Id(gu),ArrayType(2316,ArrayType(7,ArrayType(106,ArrayType(5,FloatType))))),param(Id(n0_),ArrayType(2316,ArrayType(7,ArrayType(106,ArrayType(5,FloatType))))),param(Id(U),FloatType),param(Id(g),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(J),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(QH),FloatType),param(Id(QJ),FloatType),param(Id(_),FloatType),param(Id(_Tt),ArrayType(10,FloatType)),param(Id(_),ArrayType(10,ArrayType(81,StringType))),param(Id(_5M),ArrayType(10,ArrayType(81,StringType)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 956))

    def test_957(self):
        line = '''Class _5_:_{}Class _{}Class _{Val $Tu:__g_k;$_O___J_t(N,D_8:m;u:Array [Array [Int ,0x5A],6];i:Array [Array [Int ,2_09],79];P7_:D){}_(wu1_:Array [Int ,0x5A];m_9,n,R,D_:Array [Array [Array [Float ,9],0B1],03]){} }'''
        expect = '''Program([ClassDecl(Id(_5_),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($Tu),ClassType(Id(__g_k)),None)),MethodDecl(Id($_O___J_t),Static,[param(Id(N),ClassType(Id(m))),param(Id(D_8),ClassType(Id(m))),param(Id(u),ArrayType(6,ArrayType(90,IntType))),param(Id(i),ArrayType(79,ArrayType(209,IntType))),param(Id(P7_),ClassType(Id(D)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(wu1_),ArrayType(90,IntType)),param(Id(m_9),ArrayType(3,ArrayType(1,ArrayType(9,FloatType)))),param(Id(n),ArrayType(3,ArrayType(1,ArrayType(9,FloatType)))),param(Id(R),ArrayType(3,ArrayType(1,ArrayType(9,FloatType)))),param(Id(D_),ArrayType(3,ArrayType(1,ArrayType(9,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 957))

    def test_958(self):
        line = '''Class _{Constructor (h_,W__:Array [Array [Array [Array [Boolean ,0b1],0b11101],53],0b1];g_,q_m95,d,z,__CK,_:Boolean ){}Val _,_,i:Array [Array [String ,0X1F],0X1F];}Class E:__{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h_),ArrayType(1,ArrayType(53,ArrayType(29,ArrayType(1,BoolType))))),param(Id(W__),ArrayType(1,ArrayType(53,ArrayType(29,ArrayType(1,BoolType))))),param(Id(g_),BoolType),param(Id(q_m95),BoolType),param(Id(d),BoolType),param(Id(z),BoolType),param(Id(__CK),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(31,ArrayType(31,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(31,ArrayType(31,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(31,ArrayType(31,StringType)),None))]),ClassDecl(Id(E),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 958))

    def test_959(self):
        line = '''Class _{y(__:String ;_B,___:Float ;z1,b,_,I_:Float ;O_:_w;_E:G){}Val m:String ;Constructor (x:Array [String ,84];l__E,t,a2,_Q__k2,_e0,___1,_pf,k_:Array [Array [Int ,0B1_1],071];_8,_:Array [Boolean ,8]){}Var $9O25B:q__;Var $__y,$m__lu0:o;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(y),Instance,[param(Id(__),StringType),param(Id(_B),FloatType),param(Id(___),FloatType),param(Id(z1),FloatType),param(Id(b),FloatType),param(Id(_),FloatType),param(Id(I_),FloatType),param(Id(O_),ClassType(Id(_w))),param(Id(_E),ClassType(Id(G)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(m),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(84,StringType)),param(Id(l__E),ArrayType(57,ArrayType(3,IntType))),param(Id(t),ArrayType(57,ArrayType(3,IntType))),param(Id(a2),ArrayType(57,ArrayType(3,IntType))),param(Id(_Q__k2),ArrayType(57,ArrayType(3,IntType))),param(Id(_e0),ArrayType(57,ArrayType(3,IntType))),param(Id(___1),ArrayType(57,ArrayType(3,IntType))),param(Id(_pf),ArrayType(57,ArrayType(3,IntType))),param(Id(k_),ArrayType(57,ArrayType(3,IntType))),param(Id(_8),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType))],Block([])),AttributeDecl(Static,VarDecl(Id($9O25B),ClassType(Id(q__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__y),ClassType(Id(o)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($m__lu0),ClassType(Id(o)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 959))

    def test_960(self):
        line = '''Class __:E{_Y__(){} }Class BC:oX{}Class _:_{Constructor (U9v_,_6U,O,_,_,_7_:String ;_2,_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,121_0_3_80],0b1_0],0XA9_0],077],88],0X4A],0XF4],0B10];S,_2_,n,__,K_6,I,L:Boolean ){} }Class a_{}Class _f:q{Constructor (){Return ;Continue ;Continue ;} }Class _:w{Var t,_,n:Array [String ,0B111000];}'''
        expect = '''Program([ClassDecl(Id(__),Id(E),[MethodDecl(Id(_Y__),Instance,[],Block([]))]),ClassDecl(Id(BC),Id(oX),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(U9v_),StringType),param(Id(_6U),StringType),param(Id(O),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_7_),StringType),param(Id(_2),ArrayType(2,ArrayType(244,ArrayType(74,ArrayType(88,ArrayType(63,ArrayType(2704,ArrayType(2,ArrayType(1210380,BoolType))))))))),param(Id(_),ArrayType(2,ArrayType(244,ArrayType(74,ArrayType(88,ArrayType(63,ArrayType(2704,ArrayType(2,ArrayType(1210380,BoolType))))))))),param(Id(S),BoolType),param(Id(_2_),BoolType),param(Id(n),BoolType),param(Id(__),BoolType),param(Id(K_6),BoolType),param(Id(I),BoolType),param(Id(L),BoolType)],Block([]))]),ClassDecl(Id(a_),[]),ClassDecl(Id(_f),Id(q),[MethodDecl(Id(Constructor),Instance,[],Block([Return(),Continue,Continue]))]),ClassDecl(Id(_),Id(w),[AttributeDecl(Instance,VarDecl(Id(t),ArrayType(56,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(56,StringType))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(56,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 960))

    def test_961(self):
        line = '''Class w_:_{_(_,S_:Float ;_A:Array [Array [Float ,6],07_1_37];w_69:Array [Float ,0b1_00_11]){}H_(){}Constructor (Y_:_D){} }Class __{Constructor (ptF0_,R:y;Il_,E_,h16_R:Int ){Break ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(w_),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),FloatType),param(Id(S_),FloatType),param(Id(_A),ArrayType(3679,ArrayType(6,FloatType))),param(Id(w_69),ArrayType(19,FloatType))],Block([])),MethodDecl(Id(H_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Y_),ClassType(Id(_D)))],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(ptF0_),ClassType(Id(y))),param(Id(R),ClassType(Id(y))),param(Id(Il_),IntType),param(Id(E_),IntType),param(Id(h16_R),IntType)],Block([Break,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 961))

    def test_962(self):
        line = '''Class __{}Class G{}Class N{Constructor (V,g_,_,_,_:n__;_:Array [Int ,7]){Val _:Float ;Continue ;}Constructor (E:Array [Array [Array [String ,03],29],03]){}Val ______:Array [String ,010];Destructor (){Break ;} }Class y{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(G),[]),ClassDecl(Id(N),[MethodDecl(Id(Constructor),Instance,[param(Id(V),ClassType(Id(n__))),param(Id(g_),ClassType(Id(n__))),param(Id(_),ClassType(Id(n__))),param(Id(_),ClassType(Id(n__))),param(Id(_),ClassType(Id(n__))),param(Id(_),ArrayType(7,IntType))],Block([ConstDecl(Id(_),FloatType,None),Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(3,ArrayType(29,ArrayType(3,StringType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(______),ArrayType(8,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 962))

    def test_963(self):
        line = '''Class _s:r{_(Xf:Array [String ,0b1001101]){}Val $6m:Array [Array [Int ,31],04];Var ____,_:Float ;Var _:Array [Array [Int ,0B1010110],0114];}Class u:_Lu{}Class _{}Class __g:Z_{}Class ___Zl{Constructor (_:Float ){}Var T2,___:Eubh;Val $Vra_,$w:Float ;}Class _:B{Destructor (){}Var _34,$Z1_0_,x,$2:hRp;}'''
        expect = '''Program([ClassDecl(Id(_s),Id(r),[MethodDecl(Id(_),Instance,[param(Id(Xf),ArrayType(77,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($6m),ArrayType(4,ArrayType(31,IntType)),None)),AttributeDecl(Instance,VarDecl(Id(____),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(76,ArrayType(86,IntType))))]),ClassDecl(Id(u),Id(_Lu),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__g),Id(Z_),[]),ClassDecl(Id(___Zl),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(T2),ClassType(Id(Eubh)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(Eubh)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Vra_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($w),FloatType,None))]),ClassDecl(Id(_),Id(B),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_34),ClassType(Id(hRp)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Z1_0_),ClassType(Id(hRp)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(hRp)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(hRp)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 963))

    def test_964(self):
        line = '''Class P_g_:u{Var _9H:Array [Array [Boolean ,88],03];Constructor (_:Array [Array [Array [Array [Boolean ,0X7],0B1010011],0B1010011],0x32];d,b:Float ;_FD5:_l1;m:_po;Xu:T;U,qt__A:_I;_,_0tj:Array [Float ,8_2];__:Array [Array [Array [Boolean ,5],03],03]){} }Class IT_:i{}'''
        expect = '''Program([ClassDecl(Id(P_g_),Id(u),[AttributeDecl(Instance,VarDecl(Id(_9H),ArrayType(3,ArrayType(88,BoolType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(50,ArrayType(83,ArrayType(83,ArrayType(7,BoolType))))),param(Id(d),FloatType),param(Id(b),FloatType),param(Id(_FD5),ClassType(Id(_l1))),param(Id(m),ClassType(Id(_po))),param(Id(Xu),ClassType(Id(T))),param(Id(U),ClassType(Id(_I))),param(Id(qt__A),ClassType(Id(_I))),param(Id(_),ArrayType(82,FloatType)),param(Id(_0tj),ArrayType(82,FloatType)),param(Id(__),ArrayType(3,ArrayType(3,ArrayType(5,BoolType))))],Block([]))]),ClassDecl(Id(IT_),Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 964))

    def test_965(self):
        line = '''Class _{Destructor (){}$t(){Return ;}Var $8:Array [Array [Boolean ,0B1_11],0X38];}Class Oz:D14__{Val $35,$253c06,x:Array [String ,0X33];Var $_J:Array [String ,0XB];Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($t),Static,[],Block([Return()])),AttributeDecl(Static,VarDecl(Id($8),ArrayType(56,ArrayType(7,BoolType))))]),ClassDecl(Id(Oz),Id(D14__),[AttributeDecl(Static,ConstDecl(Id($35),ArrayType(51,StringType),None)),AttributeDecl(Static,ConstDecl(Id($253c06),ArrayType(51,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(51,StringType),None)),AttributeDecl(Static,VarDecl(Id($_J),ArrayType(11,StringType))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 965))

    def test_966(self):
        line = '''Class e:S{Destructor (){}Var _O0_,$2,_,$9,$2_A799:g9;n(_:d__G;r:Array [Array [Array [Boolean ,0X4D],0b10],0x50];_:Boolean ;__O:Z;Wg,eS_1_20:Int ){Break ;}Val o_,$Q:Array [Boolean ,3_2];}'''
        expect = '''Program([ClassDecl(Id(e),Id(S),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_O0_),ClassType(Id(g9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(g9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(g9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(g9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2_A799),ClassType(Id(g9)),NullLiteral())),MethodDecl(Id(n),Instance,[param(Id(_),ClassType(Id(d__G))),param(Id(r),ArrayType(80,ArrayType(2,ArrayType(77,BoolType)))),param(Id(_),BoolType),param(Id(__O),ClassType(Id(Z))),param(Id(Wg),IntType),param(Id(eS_1_20),IntType)],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(o_),ArrayType(32,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($Q),ArrayType(32,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 966))

    def test_967(self):
        line = '''Class A:dA{Var _:Array [Int ,0b111111];Constructor (__3:Array [String ,0X3_5_E_E9]){} }Class E{Var $V,vf,$9,_M6,_:Int ;$f(B:Boolean ;p,U90_:Array [Int ,3_0_3];_b5__:_){} }Class N:L__1a{}'''
        expect = '''Program([ClassDecl(Id(A),Id(dA),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(63,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(__3),ArrayType(220905,StringType))],Block([]))]),ClassDecl(Id(E),[AttributeDecl(Static,VarDecl(Id($V),IntType)),AttributeDecl(Instance,VarDecl(Id(vf),IntType)),AttributeDecl(Static,VarDecl(Id($9),IntType)),AttributeDecl(Instance,VarDecl(Id(_M6),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id($f),Static,[param(Id(B),BoolType),param(Id(p),ArrayType(303,IntType)),param(Id(U90_),ArrayType(303,IntType)),param(Id(_b5__),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(N),Id(L__1a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 967))

    def test_968(self):
        line = '''Class Z_{Constructor (__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,6],0b1_0],3_8],0x4B],64],06],022_5],0XF_6],0b1010],0x9];_:Int ;h0,u:q){Break ;Val N_:M2F_;Return ;} }'''
        expect = '''Program([ClassDecl(Id(Z_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(9,ArrayType(10,ArrayType(246,ArrayType(149,ArrayType(6,ArrayType(64,ArrayType(75,ArrayType(38,ArrayType(2,ArrayType(6,FloatType))))))))))),param(Id(_),IntType),param(Id(h0),ClassType(Id(q))),param(Id(u),ClassType(Id(q)))],Block([Break,ConstDecl(Id(N_),ClassType(Id(M2F_)),None),Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 968))

    def test_969(self):
        line = '''Class H50_14:__{Constructor (){Break ;} }Class _kK:_{Constructor (_75,d,u:Q){} }Class _{}Class m_9{Var _,_3,_4,_,$s75:Float ;Constructor (_:Array [Array [String ,0B1001100],0x8]){} }'''
        expect = '''Program([ClassDecl(Id(H50_14),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(_kK),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_75),ClassType(Id(Q))),param(Id(d),ClassType(Id(Q))),param(Id(u),ClassType(Id(Q)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(m_9),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_3),FloatType)),AttributeDecl(Instance,VarDecl(Id(_4),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($s75),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(8,ArrayType(76,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 969))

    def test_970(self):
        line = '''Class _g{}Class _p:_{}Class _:_{Constructor (E_,f,W:Boolean ;_,__0:M_V3;_4_,_,k,_9_:_e__;h,G,_b:String ;_4:Array [Array [Array [Array [Array [Boolean ,0115],0x2B],95],04_5],0115];_j5_,_2T42:_){j::$xQ();}Val M:_Qc_;}'''
        expect = '''Program([ClassDecl(Id(_g),[]),ClassDecl(Id(_p),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(E_),BoolType),param(Id(f),BoolType),param(Id(W),BoolType),param(Id(_),ClassType(Id(M_V3))),param(Id(__0),ClassType(Id(M_V3))),param(Id(_4_),ClassType(Id(_e__))),param(Id(_),ClassType(Id(_e__))),param(Id(k),ClassType(Id(_e__))),param(Id(_9_),ClassType(Id(_e__))),param(Id(h),StringType),param(Id(G),StringType),param(Id(_b),StringType),param(Id(_4),ArrayType(77,ArrayType(37,ArrayType(95,ArrayType(43,ArrayType(77,BoolType)))))),param(Id(_j5_),ClassType(Id(_))),param(Id(_2T42),ClassType(Id(_)))],Block([Call(Id(j),Id($xQ),[])])),AttributeDecl(Instance,ConstDecl(Id(M),ClassType(Id(_Qc_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 970))

    def test_971(self):
        line = '''Class T:R7__z08Fp{}Class __:_{Constructor (){}Constructor (_p3s:_v4;u:_ilR){}Val _2_:Array [Array [Array [Array [Int ,0B11],0xA],0xE_A_D],14];}Class _:W{}Class A{Val V_33:Array [Array [Array [Array [Array [String ,70],0x7_5202_17_6C77],70],70],0XF_2];}Class __:_{}Class _{w(){} }Class __:_C{}Class _m{}'''
        expect = '''Program([ClassDecl(Id(T),Id(R7__z08Fp),[]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_p3s),ClassType(Id(_v4))),param(Id(u),ClassType(Id(_ilR)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_2_),ArrayType(14,ArrayType(3757,ArrayType(10,ArrayType(3,IntType)))),None))]),ClassDecl(Id(_),Id(W),[]),ClassDecl(Id(A),[AttributeDecl(Instance,ConstDecl(Id(V_33),ArrayType(242,ArrayType(70,ArrayType(70,ArrayType(8048803802231,ArrayType(70,StringType))))),None))]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(w),Instance,[],Block([]))]),ClassDecl(Id(__),Id(_C),[]),ClassDecl(Id(_m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 971))

    def test_972(self):
        line = '''Class M{}Class _9:c{Destructor (){}Constructor (___,ClH_,D,_ksE:String ;Q,d,B:Boolean ;_,_,_07_,a:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X56],061],45],45],0b11],066],0X56],01]){} }Class _2j:t_{}'''
        expect = '''Program([ClassDecl(Id(M),[]),ClassDecl(Id(_9),Id(c),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(___),StringType),param(Id(ClH_),StringType),param(Id(D),StringType),param(Id(_ksE),StringType),param(Id(Q),BoolType),param(Id(d),BoolType),param(Id(B),BoolType),param(Id(_),ArrayType(1,ArrayType(86,ArrayType(54,ArrayType(3,ArrayType(45,ArrayType(45,ArrayType(49,ArrayType(86,IntType))))))))),param(Id(_),ArrayType(1,ArrayType(86,ArrayType(54,ArrayType(3,ArrayType(45,ArrayType(45,ArrayType(49,ArrayType(86,IntType))))))))),param(Id(_07_),ArrayType(1,ArrayType(86,ArrayType(54,ArrayType(3,ArrayType(45,ArrayType(45,ArrayType(49,ArrayType(86,IntType))))))))),param(Id(a),ArrayType(1,ArrayType(86,ArrayType(54,ArrayType(3,ArrayType(45,ArrayType(45,ArrayType(49,ArrayType(86,IntType)))))))))],Block([]))]),ClassDecl(Id(_2j),Id(t_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 972))

    def test_973(self):
        line = '''Class G4e:Lt{Val f,$H0,$5,Un,$96:Array [String ,0XE_32AC_8];Val $_0I,$7,_X_:Boolean ;Val $___:Boolean ;Constructor (){} }Class y{}Class _F_{Destructor (){Return ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(G4e),Id(Lt),[AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(14887624,StringType),None)),AttributeDecl(Static,ConstDecl(Id($H0),ArrayType(14887624,StringType),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(14887624,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(Un),ArrayType(14887624,StringType),None)),AttributeDecl(Static,ConstDecl(Id($96),ArrayType(14887624,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_0I),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($7),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_X_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($___),BoolType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(y),[]),ClassDecl(Id(_F_),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 973))

    def test_974(self):
        line = '''Class g:Q2{$6(z3:Boolean ;_,_,Ch_:Boolean ;Y,_aj:Array [Array [String ,062],0X29_6_0];V,xJ_,b1,_M,_,f,_:T_9){}Var $M,l_:__P;Val _62_,$_0_,$3_,$_n0_,__:Int ;yW(){Return ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(g),Id(Q2),[MethodDecl(Id($6),Static,[param(Id(z3),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(Ch_),BoolType),param(Id(Y),ArrayType(10592,ArrayType(50,StringType))),param(Id(_aj),ArrayType(10592,ArrayType(50,StringType))),param(Id(V),ClassType(Id(T_9))),param(Id(xJ_),ClassType(Id(T_9))),param(Id(b1),ClassType(Id(T_9))),param(Id(_M),ClassType(Id(T_9))),param(Id(_),ClassType(Id(T_9))),param(Id(f),ClassType(Id(T_9))),param(Id(_),ClassType(Id(T_9)))],Block([])),AttributeDecl(Static,VarDecl(Id($M),ClassType(Id(__P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l_),ClassType(Id(__P)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_62_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_0_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($3_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_n0_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),MethodDecl(Id(yW),Instance,[],Block([Return(),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 974))

    def test_975(self):
        line = '''Class niA{Var $_,Z6JM,_:Array [Array [Array [Array [Float ,0b1],1_5_50_3_0_0_0],0X26],37];Constructor (__Ffzh,__6,z_:Float ){}Var $_R:Array [Array [Array [String ,07],3024_9_9],0x8];}'''
        expect = '''Program([ClassDecl(Id(niA),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(37,ArrayType(38,ArrayType(15503000,ArrayType(1,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(Z6JM),ArrayType(37,ArrayType(38,ArrayType(15503000,ArrayType(1,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(37,ArrayType(38,ArrayType(15503000,ArrayType(1,FloatType)))))),MethodDecl(Id(Constructor),Instance,[param(Id(__Ffzh),FloatType),param(Id(__6),FloatType),param(Id(z_),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($_R),ArrayType(8,ArrayType(302499,ArrayType(7,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 975))

    def test_976(self):
        line = '''Class o:_1m2_{V(_:_5;dn:T_5_){} }Class _{Constructor (j,Ic3,UNE_:Array [Array [String ,3],0B100000];GB:A;___Q:Array [Array [Float ,0XE],0463];EL_:Float ;b,J,_n__,j5,_9a:_){}Val $g_J_,Tj_7,$o4k,_,$20_,_:Array [Array [Array [Float ,2],0B1],86];}Class d{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(o),Id(_1m2_),[MethodDecl(Id(V),Instance,[param(Id(_),ClassType(Id(_5))),param(Id(dn),ClassType(Id(T_5_)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(j),ArrayType(32,ArrayType(3,StringType))),param(Id(Ic3),ArrayType(32,ArrayType(3,StringType))),param(Id(UNE_),ArrayType(32,ArrayType(3,StringType))),param(Id(GB),ClassType(Id(A))),param(Id(___Q),ArrayType(307,ArrayType(14,FloatType))),param(Id(EL_),FloatType),param(Id(b),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(_n__),ClassType(Id(_))),param(Id(j5),ClassType(Id(_))),param(Id(_9a),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($g_J_),ArrayType(86,ArrayType(1,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(Tj_7),ArrayType(86,ArrayType(1,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($o4k),ArrayType(86,ArrayType(1,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(86,ArrayType(1,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($20_),ArrayType(86,ArrayType(1,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(86,ArrayType(1,ArrayType(2,FloatType))),None))]),ClassDecl(Id(d),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 976))

    def test_977(self):
        line = '''Class b:_{_(m8,_:Array [Array [Array [Array [Array [Float ,77],82],77],8_0],0x2];_9:Float ;g3j:Float ;_:Array [String ,06];w,N_:String ;A:Array [Float ,77]){} }Class C{Destructor (){}$Rg(){} }Class C{}Class _29{Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(b),Id(_),[MethodDecl(Id(_),Instance,[param(Id(m8),ArrayType(2,ArrayType(80,ArrayType(77,ArrayType(82,ArrayType(77,FloatType)))))),param(Id(_),ArrayType(2,ArrayType(80,ArrayType(77,ArrayType(82,ArrayType(77,FloatType)))))),param(Id(_9),FloatType),param(Id(g3j),FloatType),param(Id(_),ArrayType(6,StringType)),param(Id(w),StringType),param(Id(N_),StringType),param(Id(A),ArrayType(77,FloatType))],Block([]))]),ClassDecl(Id(C),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($Rg),Static,[],Block([]))]),ClassDecl(Id(C),[]),ClassDecl(Id(_29),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 977))

    def test_978(self):
        line = '''Class __{Destructor (){Return ;}Val $_,$T,$fu,$_:Int ;}Class _0:_s4{$13o(__,_:_88){Var _z,J,zwe_,e,_:Array [Array [Boolean ,2],04];}Destructor (){}Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($T),IntType,None)),AttributeDecl(Static,ConstDecl(Id($fu),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(_0),Id(_s4),[MethodDecl(Id($13o),Static,[param(Id(__),ClassType(Id(_88))),param(Id(_),ClassType(Id(_88)))],Block([VarDecl(Id(_z),ArrayType(4,ArrayType(2,BoolType))),VarDecl(Id(J),ArrayType(4,ArrayType(2,BoolType))),VarDecl(Id(zwe_),ArrayType(4,ArrayType(2,BoolType))),VarDecl(Id(e),ArrayType(4,ArrayType(2,BoolType))),VarDecl(Id(_),ArrayType(4,ArrayType(2,BoolType)))])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 978))

    def test_979(self):
        line = '''Class _1{Constructor (_,__:Array [Array [Float ,01_6],027];ly_a5:Int ;v2,Y,u:Array [Array [String ,28],0B1001110];ZX:Array [Array [Array [Array [Int ,0x5],0x1],28],2]){Break ;}$w(){}$_(){} }Class _4{}'''
        expect = '''Program([ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(23,ArrayType(14,FloatType))),param(Id(__),ArrayType(23,ArrayType(14,FloatType))),param(Id(ly_a5),IntType),param(Id(v2),ArrayType(78,ArrayType(28,StringType))),param(Id(Y),ArrayType(78,ArrayType(28,StringType))),param(Id(u),ArrayType(78,ArrayType(28,StringType))),param(Id(ZX),ArrayType(2,ArrayType(28,ArrayType(1,ArrayType(5,IntType)))))],Block([Break])),MethodDecl(Id($w),Static,[],Block([])),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 979))

    def test_980(self):
        line = '''Class I___7_{Destructor (){Return ;}Constructor (r:A;w,_:Array [Array [Float ,016],0B1_10];_,l:Array [Array [Array [Boolean ,0X2],0x15],0XC_7]){} }Class fa30{}Class d{}'''
        expect = '''Program([ClassDecl(Id(I___7_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(r),ClassType(Id(A))),param(Id(w),ArrayType(6,ArrayType(14,FloatType))),param(Id(_),ArrayType(6,ArrayType(14,FloatType))),param(Id(_),ArrayType(199,ArrayType(21,ArrayType(2,BoolType)))),param(Id(l),ArrayType(199,ArrayType(21,ArrayType(2,BoolType))))],Block([]))]),ClassDecl(Id(fa30),[]),ClassDecl(Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 980))

    def test_981(self):
        line = '''Class k:_D{}Class _{}Class _{}Class F{Var _:Array [Array [Array [Int ,05],4_0],0b111000];_3(_,_,_9,oc_D:Float ;vy:Array [Array [Array [Array [Float ,17],17],0X8],0B111011];_N:Array [Array [Array [Int ,03_5],4_8_31],74]){}Var $_x9,i,Kz_Z_,f_4:Array [Array [String ,0X8],01];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(k),Id(_D),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(F),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(56,ArrayType(40,ArrayType(5,IntType))))),MethodDecl(Id(_3),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_9),FloatType),param(Id(oc_D),FloatType),param(Id(vy),ArrayType(59,ArrayType(8,ArrayType(17,ArrayType(17,FloatType))))),param(Id(_N),ArrayType(74,ArrayType(4831,ArrayType(29,IntType))))],Block([])),AttributeDecl(Static,VarDecl(Id($_x9),ArrayType(1,ArrayType(8,StringType)))),AttributeDecl(Instance,VarDecl(Id(i),ArrayType(1,ArrayType(8,StringType)))),AttributeDecl(Instance,VarDecl(Id(Kz_Z_),ArrayType(1,ArrayType(8,StringType)))),AttributeDecl(Instance,VarDecl(Id(f_4),ArrayType(1,ArrayType(8,StringType)))),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 981))

    def test_982(self):
        line = '''Class K__{Var $_:_h;}Class j{_(){ {{} }Continue ;}Constructor (_Wjd,g:Boolean ;_:Array [Array [String ,8],0b1];_A_1,F4h59n:Array [Array [String ,44],061];_:_7;UC,__:Array [Boolean ,0X3D];_,K:Array [Float ,44];_:Array [Int ,0b1010011]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(K__),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_h)),NullLiteral()))]),ClassDecl(Id(j),[MethodDecl(Id(_),Instance,[],Block([Block([Block([])]),Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_Wjd),BoolType),param(Id(g),BoolType),param(Id(_),ArrayType(1,ArrayType(8,StringType))),param(Id(_A_1),ArrayType(49,ArrayType(44,StringType))),param(Id(F4h59n),ArrayType(49,ArrayType(44,StringType))),param(Id(_),ClassType(Id(_7))),param(Id(UC),ArrayType(61,BoolType)),param(Id(__),ArrayType(61,BoolType)),param(Id(_),ArrayType(44,FloatType)),param(Id(K),ArrayType(44,FloatType)),param(Id(_),ArrayType(83,IntType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 982))

    def test_983(self):
        line = '''Class c{$_9(w7m:Array [Array [String ,82],82];_,_37:Array [Array [Array [Array [Array [Boolean ,0B11011],82],0x3B],3_1_0],0b1100001];_:w_;AW_,_:CU;B__:_;Y,_w:__;_,_:Array [Array [Float ,82],0103]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(c),[MethodDecl(Id($_9),Static,[param(Id(w7m),ArrayType(82,ArrayType(82,StringType))),param(Id(_),ArrayType(97,ArrayType(310,ArrayType(59,ArrayType(82,ArrayType(27,BoolType)))))),param(Id(_37),ArrayType(97,ArrayType(310,ArrayType(59,ArrayType(82,ArrayType(27,BoolType)))))),param(Id(_),ClassType(Id(w_))),param(Id(AW_),ClassType(Id(CU))),param(Id(_),ClassType(Id(CU))),param(Id(B__),ClassType(Id(_))),param(Id(Y),ClassType(Id(__))),param(Id(_w),ClassType(Id(__))),param(Id(_),ArrayType(67,ArrayType(82,FloatType))),param(Id(_),ArrayType(67,ArrayType(82,FloatType)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 983))

    def test_984(self):
        line = '''Class _:_{$488(){}$_6(M7:Array [Array [String ,02],0X9_A];_____:t__;__,_:Float ;B,_8,w_2d:_6_m4BZ800a){Val Nf4w3,A_T_w_2,Y,r___,F:_;Continue ;}Var $_,$_Mpx_H_99,_:Array [Float ,024];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($488),Static,[],Block([])),MethodDecl(Id($_6),Static,[param(Id(M7),ArrayType(154,ArrayType(2,StringType))),param(Id(_____),ClassType(Id(t__))),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(B),ClassType(Id(_6_m4BZ800a))),param(Id(_8),ClassType(Id(_6_m4BZ800a))),param(Id(w_2d),ClassType(Id(_6_m4BZ800a)))],Block([ConstDecl(Id(Nf4w3),ClassType(Id(_)),None),ConstDecl(Id(A_T_w_2),ClassType(Id(_)),None),ConstDecl(Id(Y),ClassType(Id(_)),None),ConstDecl(Id(r___),ClassType(Id(_)),None),ConstDecl(Id(F),ClassType(Id(_)),None),Continue])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(20,FloatType))),AttributeDecl(Static,VarDecl(Id($_Mpx_H_99),ArrayType(20,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(20,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 984))

    def test_985(self):
        line = '''Class TU_:_8{Val $m_o,f6:Array [Int ,75];}Class _6_1D_:_{}Class G_{Constructor (_M:Array [Int ,0B1];iw,__,_t:Array [Int ,75];Fj78:j;R,_,_,_0___,_,ABN,GOCV:Array [Array [Array [Float ,0B1_0],0b1000001],75];_a3c,_52_6_S:Boolean ;K43,_X,___,_,_:_;D_e:_;U,y_:Array [Array [Array [Array [Float ,0XE],0X62],0xED],07]){} }'''
        expect = '''Program([ClassDecl(Id(TU_),Id(_8),[AttributeDecl(Static,ConstDecl(Id($m_o),ArrayType(75,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(f6),ArrayType(75,IntType),None))]),ClassDecl(Id(_6_1D_),Id(_),[]),ClassDecl(Id(G_),[MethodDecl(Id(Constructor),Instance,[param(Id(_M),ArrayType(1,IntType)),param(Id(iw),ArrayType(75,IntType)),param(Id(__),ArrayType(75,IntType)),param(Id(_t),ArrayType(75,IntType)),param(Id(Fj78),ClassType(Id(j))),param(Id(R),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(_),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(_),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(_0___),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(_),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(ABN),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(GOCV),ArrayType(75,ArrayType(65,ArrayType(2,FloatType)))),param(Id(_a3c),BoolType),param(Id(_52_6_S),BoolType),param(Id(K43),ClassType(Id(_))),param(Id(_X),ClassType(Id(_))),param(Id(___),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(D_e),ClassType(Id(_))),param(Id(U),ArrayType(7,ArrayType(237,ArrayType(98,ArrayType(14,FloatType))))),param(Id(y_),ArrayType(7,ArrayType(237,ArrayType(98,ArrayType(14,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 985))

    def test_986(self):
        line = '''Class ___:___aa{Constructor (){Val X,_:Int ;} }Class X:M_{}Class A5:s{Var $AQ,$J_0:Boolean ;}Class _:_{}Class __f{Var _:Float ;Val V:Array [Array [Int ,0b1001],03_15];Destructor (){}Var $_0G,_:_6;}'''
        expect = '''Program([ClassDecl(Id(___),Id(___aa),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(X),IntType,None),ConstDecl(Id(_),IntType,None)]))]),ClassDecl(Id(X),Id(M_),[]),ClassDecl(Id(A5),Id(s),[AttributeDecl(Static,VarDecl(Id($AQ),BoolType)),AttributeDecl(Static,VarDecl(Id($J_0),BoolType))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__f),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(205,ArrayType(9,IntType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_0G),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_6)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 986))

    def test_987(self):
        line = '''Class _:_D{Constructor (_lA_,_:Array [Array [String ,0b1],30];dC,__M3,_3C,_:Array [Array [Int ,0B100000],0b11_10];fd:Array [Int ,0b11];_:P_0n;Q,_:Array [String ,016];_g_y:String ;__:String ;_:String ){}Constructor (UNZ_9:Array [Array [Array [Array [Array [Array [Boolean ,0B1_111],0X10],30],0B100000],0B100000],0B1]){} }Class E{}Class _4{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_D),[MethodDecl(Id(Constructor),Instance,[param(Id(_lA_),ArrayType(30,ArrayType(1,StringType))),param(Id(_),ArrayType(30,ArrayType(1,StringType))),param(Id(dC),ArrayType(14,ArrayType(32,IntType))),param(Id(__M3),ArrayType(14,ArrayType(32,IntType))),param(Id(_3C),ArrayType(14,ArrayType(32,IntType))),param(Id(_),ArrayType(14,ArrayType(32,IntType))),param(Id(fd),ArrayType(3,IntType)),param(Id(_),ClassType(Id(P_0n))),param(Id(Q),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(_g_y),StringType),param(Id(__),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(UNZ_9),ArrayType(1,ArrayType(32,ArrayType(32,ArrayType(30,ArrayType(16,ArrayType(15,BoolType)))))))],Block([]))]),ClassDecl(Id(E),[]),ClassDecl(Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 987))

    def test_988(self):
        line = '''Class q_:X1{$___(R4_,P__:Boolean ){} }Class ___96O{Val $I,$5:Array [Array [Array [Array [Array [Array [Array [Int ,0B1],075],02],3_689],0B100101],0x3E],06_6_6];Nb(){} }Class E_{}'''
        expect = '''Program([ClassDecl(Id(q_),Id(X1),[MethodDecl(Id($___),Static,[param(Id(R4_),BoolType),param(Id(P__),BoolType)],Block([]))]),ClassDecl(Id(___96O),[AttributeDecl(Static,ConstDecl(Id($I),ArrayType(438,ArrayType(62,ArrayType(37,ArrayType(3689,ArrayType(2,ArrayType(61,ArrayType(1,IntType))))))),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(438,ArrayType(62,ArrayType(37,ArrayType(3689,ArrayType(2,ArrayType(61,ArrayType(1,IntType))))))),None)),MethodDecl(Id(Nb),Instance,[],Block([]))]),ClassDecl(Id(E_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 988))

    def test_989(self):
        line = '''Class u:TE_{Constructor (_:Array [Array [Array [Array [Array [Array [Boolean ,0X8],0x2_8A],24_2_8],070],2],0b110011];_,F,_d_,__Fs:Array [Array [String ,7],1_119];__:_;m,R_:Array [Int ,0XB];DB,_,Lw:Boolean ){} }Class U:_9{}'''
        expect = '''Program([ClassDecl(Id(u),Id(TE_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(51,ArrayType(2,ArrayType(56,ArrayType(2428,ArrayType(650,ArrayType(8,BoolType))))))),param(Id(_),ArrayType(1119,ArrayType(7,StringType))),param(Id(F),ArrayType(1119,ArrayType(7,StringType))),param(Id(_d_),ArrayType(1119,ArrayType(7,StringType))),param(Id(__Fs),ArrayType(1119,ArrayType(7,StringType))),param(Id(__),ClassType(Id(_))),param(Id(m),ArrayType(11,IntType)),param(Id(R_),ArrayType(11,IntType)),param(Id(DB),BoolType),param(Id(_),BoolType),param(Id(Lw),BoolType)],Block([]))]),ClassDecl(Id(U),Id(_9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 989))

    def test_990(self):
        line = '''Class H:_{}Class v:_{}Class _{Var $_:Array [Int ,03];Constructor (_,_:String ;_:Array [Array [Array [String ,0X15],01],0b1000010];o,_,G:Array [Array [Array [Float ,24],0XB_2],24];g4,RG_T:String ){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(H),Id(_),[]),ClassDecl(Id(v),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ArrayType(66,ArrayType(1,ArrayType(21,StringType)))),param(Id(o),ArrayType(24,ArrayType(178,ArrayType(24,FloatType)))),param(Id(_),ArrayType(24,ArrayType(178,ArrayType(24,FloatType)))),param(Id(G),ArrayType(24,ArrayType(178,ArrayType(24,FloatType)))),param(Id(g4),StringType),param(Id(RG_T),StringType)],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 990))

    def test_991(self):
        line = '''Class __1:B{D(RI,_mNy,h:Array [Int ,0B1001010];_,__,I_0md,_,l_,U1:Float ;m,_:Array [Int ,43]){}$_(J,c,_,J,q_3S,___,d_Ku4:_;_2,j,_e_,vx:Array [String ,0X87_8];_,G_,f:_6_;G,y4:Array [Boolean ,0B1_1];_:_;wn:Int ;y_1,x_T4:Array [Array [Array [Int ,047],43],0x4D]){ {}Break ;} }Class V9wP{}Class _:Q_5_{$l(){} }Class v8{$de(___9:Float ){} }Class P:ueM__{}Class D:L{}Class _N{}Class m_{}'''
        expect = '''Program([ClassDecl(Id(__1),Id(B),[MethodDecl(Id(D),Instance,[param(Id(RI),ArrayType(74,IntType)),param(Id(_mNy),ArrayType(74,IntType)),param(Id(h),ArrayType(74,IntType)),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(I_0md),FloatType),param(Id(_),FloatType),param(Id(l_),FloatType),param(Id(U1),FloatType),param(Id(m),ArrayType(43,IntType)),param(Id(_),ArrayType(43,IntType))],Block([])),MethodDecl(Id($_),Static,[param(Id(J),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(q_3S),ClassType(Id(_))),param(Id(___),ClassType(Id(_))),param(Id(d_Ku4),ClassType(Id(_))),param(Id(_2),ArrayType(2168,StringType)),param(Id(j),ArrayType(2168,StringType)),param(Id(_e_),ArrayType(2168,StringType)),param(Id(vx),ArrayType(2168,StringType)),param(Id(_),ClassType(Id(_6_))),param(Id(G_),ClassType(Id(_6_))),param(Id(f),ClassType(Id(_6_))),param(Id(G),ArrayType(3,BoolType)),param(Id(y4),ArrayType(3,BoolType)),param(Id(_),ClassType(Id(_))),param(Id(wn),IntType),param(Id(y_1),ArrayType(77,ArrayType(43,ArrayType(39,IntType)))),param(Id(x_T4),ArrayType(77,ArrayType(43,ArrayType(39,IntType))))],Block([Block([]),Break]))]),ClassDecl(Id(V9wP),[]),ClassDecl(Id(_),Id(Q_5_),[MethodDecl(Id($l),Static,[],Block([]))]),ClassDecl(Id(v8),[MethodDecl(Id($de),Static,[param(Id(___9),FloatType)],Block([]))]),ClassDecl(Id(P),Id(ueM__),[]),ClassDecl(Id(D),Id(L),[]),ClassDecl(Id(_N),[]),ClassDecl(Id(m_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 991))

    def test_992(self):
        line = '''Class B{Constructor (g:Array [Array [Int ,0x4],0B111111];_:String ;_,n2,_,_,f,_:Array [Array [Array [Array [Array [Float ,0X4],0x60],0X4],0X4],035];V0,__1_,_:Boolean ){}Val _5,$vi:_jY_;}Class F1v__{Constructor (_i:f){} }Class WlH80{Var $_9,_,$oO,$1_,_0:E;Var _,lx,$F:Array [Array [Array [Boolean ,0B111111],59],0B111111];}'''
        expect = '''Program([ClassDecl(Id(B),[MethodDecl(Id(Constructor),Instance,[param(Id(g),ArrayType(63,ArrayType(4,IntType))),param(Id(_),StringType),param(Id(_),ArrayType(29,ArrayType(4,ArrayType(4,ArrayType(96,ArrayType(4,FloatType)))))),param(Id(n2),ArrayType(29,ArrayType(4,ArrayType(4,ArrayType(96,ArrayType(4,FloatType)))))),param(Id(_),ArrayType(29,ArrayType(4,ArrayType(4,ArrayType(96,ArrayType(4,FloatType)))))),param(Id(_),ArrayType(29,ArrayType(4,ArrayType(4,ArrayType(96,ArrayType(4,FloatType)))))),param(Id(f),ArrayType(29,ArrayType(4,ArrayType(4,ArrayType(96,ArrayType(4,FloatType)))))),param(Id(_),ArrayType(29,ArrayType(4,ArrayType(4,ArrayType(96,ArrayType(4,FloatType)))))),param(Id(V0),BoolType),param(Id(__1_),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_5),ClassType(Id(_jY_)),None)),AttributeDecl(Static,ConstDecl(Id($vi),ClassType(Id(_jY_)),None))]),ClassDecl(Id(F1v__),[MethodDecl(Id(Constructor),Instance,[param(Id(_i),ClassType(Id(f)))],Block([]))]),ClassDecl(Id(WlH80),[AttributeDecl(Static,VarDecl(Id($_9),ClassType(Id(E)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(E)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($oO),ClassType(Id(E)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1_),ClassType(Id(E)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ClassType(Id(E)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(63,ArrayType(59,ArrayType(63,BoolType))))),AttributeDecl(Instance,VarDecl(Id(lx),ArrayType(63,ArrayType(59,ArrayType(63,BoolType))))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(63,ArrayType(59,ArrayType(63,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 992))

    def test_993(self):
        line = '''Class __{}Class _{Destructor (){Var N_Xs6,__n,_3,_X4_:Boolean ;}Constructor (_,Wp,r,n:Int ;C:Array [String ,0B1011];Sk___4,_9yKA:Boolean ;e:Int ){}Constructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(N_Xs6),BoolType),VarDecl(Id(__n),BoolType),VarDecl(Id(_3),BoolType),VarDecl(Id(_X4_),BoolType)])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(Wp),IntType),param(Id(r),IntType),param(Id(n),IntType),param(Id(C),ArrayType(11,StringType)),param(Id(Sk___4),BoolType),param(Id(_9yKA),BoolType),param(Id(e),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 993))

    def test_994(self):
        line = '''Class O:_1{Val $8:Array [Array [Array [Array [Array [Array [Array [String ,0B1001011],50290_8],0x1D],88],023],07_2],0b1100];}Class _:_{Val $_,_oA,$69_4,$7:R;}Class V{}Class g:_027{}'''
        expect = '''Program([ClassDecl(Id(O),Id(_1),[AttributeDecl(Static,ConstDecl(Id($8),ArrayType(12,ArrayType(58,ArrayType(19,ArrayType(88,ArrayType(29,ArrayType(502908,ArrayType(75,StringType))))))),None))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(R)),None)),AttributeDecl(Instance,ConstDecl(Id(_oA),ClassType(Id(R)),None)),AttributeDecl(Static,ConstDecl(Id($69_4),ClassType(Id(R)),None)),AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(R)),None))]),ClassDecl(Id(V),[]),ClassDecl(Id(g),Id(_027),[])])'''
        self.assertTrue(TestAST.test(line, expect, 994))

    def test_995(self):
        line = '''Class M:_{Constructor (Y22_6_8T8x,L7:Array [Int ,4_5]){} }Class d:D6q7{r(_,_06__,_E,_6,QnX1,_G_,_36B,_W_:Array [Array [Boolean ,0B1_1],0b10011];a:_;X,_:Float ){}Val $_,$_:Float ;Var $5,$kW38:_;}Class Y_f:_{}Class U{}'''
        expect = '''Program([ClassDecl(Id(M),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Y22_6_8T8x),ArrayType(45,IntType)),param(Id(L7),ArrayType(45,IntType))],Block([]))]),ClassDecl(Id(d),Id(D6q7),[MethodDecl(Id(r),Instance,[param(Id(_),ArrayType(19,ArrayType(3,BoolType))),param(Id(_06__),ArrayType(19,ArrayType(3,BoolType))),param(Id(_E),ArrayType(19,ArrayType(3,BoolType))),param(Id(_6),ArrayType(19,ArrayType(3,BoolType))),param(Id(QnX1),ArrayType(19,ArrayType(3,BoolType))),param(Id(_G_),ArrayType(19,ArrayType(3,BoolType))),param(Id(_36B),ArrayType(19,ArrayType(3,BoolType))),param(Id(_W_),ArrayType(19,ArrayType(3,BoolType))),param(Id(a),ClassType(Id(_))),param(Id(X),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($kW38),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(Y_f),Id(_),[]),ClassDecl(Id(U),[])])'''
        self.assertTrue(TestAST.test(line, expect, 995))

    def test_996(self):
        line = '''Class _W{Val $_,G,r,$KA,$F:Array [Array [Array [Array [String ,0133],0133],0B1],0XB_9_B_56];}Class T_P:_M{Val $7:Array [String ,077];}Class _Q2{}Class x__{}Class _:Ta8{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_W),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(760662,ArrayType(1,ArrayType(91,ArrayType(91,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(G),ArrayType(760662,ArrayType(1,ArrayType(91,ArrayType(91,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(r),ArrayType(760662,ArrayType(1,ArrayType(91,ArrayType(91,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($KA),ArrayType(760662,ArrayType(1,ArrayType(91,ArrayType(91,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($F),ArrayType(760662,ArrayType(1,ArrayType(91,ArrayType(91,StringType)))),None))]),ClassDecl(Id(T_P),Id(_M),[AttributeDecl(Static,ConstDecl(Id($7),ArrayType(63,StringType),None))]),ClassDecl(Id(_Q2),[]),ClassDecl(Id(x__),[]),ClassDecl(Id(_),Id(Ta8),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 996))

    def test_997(self):
        line = '''Class N{Constructor (_4,B_,C:C;P,_:Int ;_:__6;_:Boolean ;_,_,_Q_,f,X0___,_,_:Int ;_:Array [Array [Array [Array [String ,0xA],24],0117],0XE];_,_L,_:Int ){}Val _:Int ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(N),[MethodDecl(Id(Constructor),Instance,[param(Id(_4),ClassType(Id(C))),param(Id(B_),ClassType(Id(C))),param(Id(C),ClassType(Id(C))),param(Id(P),IntType),param(Id(_),IntType),param(Id(_),ClassType(Id(__6))),param(Id(_),BoolType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_Q_),IntType),param(Id(f),IntType),param(Id(X0___),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),ArrayType(14,ArrayType(79,ArrayType(24,ArrayType(10,StringType))))),param(Id(_),IntType),param(Id(_L),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 997))

    def test_998(self):
        line = '''Class A_{}Class o:_{Var $d27,$__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0X2E],2],052],8],052],0x1],0x4],7],84];Destructor (){ {Continue ;} }}'''
        expect = '''Program([ClassDecl(Id(A_),[]),ClassDecl(Id(o),Id(_),[AttributeDecl(Static,VarDecl(Id($d27),ArrayType(84,ArrayType(7,ArrayType(4,ArrayType(1,ArrayType(42,ArrayType(8,ArrayType(42,ArrayType(2,ArrayType(46,FloatType))))))))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(84,ArrayType(7,ArrayType(4,ArrayType(1,ArrayType(42,ArrayType(8,ArrayType(42,ArrayType(2,ArrayType(46,FloatType))))))))))),MethodDecl(Id(Destructor),Instance,[],Block([Block([Continue])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 998))

    def test_999(self):
        line = '''Class l:_4_{Destructor (){Continue ;}Val $_,$Q,$0,$8,$__:Int ;}Class __{}Class _:_1_2{Destructor (){Continue ;Var d,N_2R4dbw,_,_:Array [Array [Array [Array [Int ,0XA],0X38],9_248],02];{}Continue ;} }Class __:_{}'''
        expect = '''Program([ClassDecl(Id(l),Id(_4_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($Q),IntType,None)),AttributeDecl(Static,ConstDecl(Id($0),IntType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None)),AttributeDecl(Static,ConstDecl(Id($__),IntType,None))]),ClassDecl(Id(__),[]),ClassDecl(Id(_),Id(_1_2),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,VarDecl(Id(d),ArrayType(2,ArrayType(9248,ArrayType(56,ArrayType(10,IntType))))),VarDecl(Id(N_2R4dbw),ArrayType(2,ArrayType(9248,ArrayType(56,ArrayType(10,IntType))))),VarDecl(Id(_),ArrayType(2,ArrayType(9248,ArrayType(56,ArrayType(10,IntType))))),VarDecl(Id(_),ArrayType(2,ArrayType(9248,ArrayType(56,ArrayType(10,IntType))))),Block([]),Continue]))]),ClassDecl(Id(__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 999))

