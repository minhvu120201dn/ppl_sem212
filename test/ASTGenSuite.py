import unittest
from TestUtils import TestAST
from AST import *

class ASTGenSuite(unittest.TestCase):
    def test_0(self):
        line = '''Class s_{Constructor (){}Val S:e;}Class Q_{}Class __N7:_{}Class nl{Destructor (){Val _:Array [Array [Array [Boolean ,032],1],0X59];} }Class J_{Val U__,__,$a7U,q,$6,$_,__:_7s6_;}'''
        expect = '''Program([ClassDecl(Id(s_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(S),ClassType(Id(e)),None))]),ClassDecl(Id(Q_),[]),ClassDecl(Id(__N7),Id(_),[]),ClassDecl(Id(nl),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(89,ArrayType(1,ArrayType(26,BoolType))),None)]))]),ClassDecl(Id(J_),[AttributeDecl(Instance,ConstDecl(Id(U__),ClassType(Id(_7s6_)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_7s6_)),None)),AttributeDecl(Static,ConstDecl(Id($a7U),ClassType(Id(_7s6_)),None)),AttributeDecl(Instance,ConstDecl(Id(q),ClassType(Id(_7s6_)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_7s6_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_7s6_)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_7s6_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 30))

    def test_1(self):
        line = '''Class z:f{Constructor (uh:Y;K_g_:F;_,__:Array [Array [Int ,0x4E],0X5E];_,_:Float ){}Constructor (){} }Class r:_{}Class _D6t_:__{Var _:Float ;Val K_5:Array [Boolean ,8];Var S_,i,_:Array [Array [String ,0XB],65];$_(w_,_4,va7_d:Int ;_:F){}Val $5:String ;Val $v,$5:_63D;}'''
        expect = '''Program([ClassDecl(Id(z),Id(f),[MethodDecl(Id(Constructor),Instance,[param(Id(uh),ClassType(Id(Y))),param(Id(K_g_),ClassType(Id(F))),param(Id(_),ArrayType(94,ArrayType(78,IntType))),param(Id(__),ArrayType(94,ArrayType(78,IntType))),param(Id(_),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(r),Id(_),[]),ClassDecl(Id(_D6t_),Id(__),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,ConstDecl(Id(K_5),ArrayType(8,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(S_),ArrayType(65,ArrayType(11,StringType)))),AttributeDecl(Instance,VarDecl(Id(i),ArrayType(65,ArrayType(11,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(65,ArrayType(11,StringType)))),MethodDecl(Id($_),Static,[param(Id(w_),IntType),param(Id(_4),IntType),param(Id(va7_d),IntType),param(Id(_),ClassType(Id(F)))],Block([])),AttributeDecl(Static,ConstDecl(Id($5),StringType,None)),AttributeDecl(Static,ConstDecl(Id($v),ClassType(Id(_63D)),None)),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(_63D)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 31))

    def test_2(self):
        line = '''Class _:_L{Constructor (_8_k:H;_R,_DY_5:z4_8;_:q1;K:wo5){Return ;} }Class _6{Constructor (N4:String ;J,_:String ;_,q:_h;K:_;k,_:UC){}Var $U,C,$95,$5_,p,$3:_;$64(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_L),[MethodDecl(Id(Constructor),Instance,[param(Id(_8_k),ClassType(Id(H))),param(Id(_R),ClassType(Id(z4_8))),param(Id(_DY_5),ClassType(Id(z4_8))),param(Id(_),ClassType(Id(q1))),param(Id(K),ClassType(Id(wo5)))],Block([Return()]))]),ClassDecl(Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(N4),StringType),param(Id(J),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_h))),param(Id(q),ClassType(Id(_h))),param(Id(K),ClassType(Id(_))),param(Id(k),ClassType(Id(UC))),param(Id(_),ClassType(Id(UC)))],Block([])),AttributeDecl(Static,VarDecl(Id($U),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(C),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($95),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(p),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($64),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 32))

    def test_3(self):
        line = '''Class m8x2_22{Val _,_,$6:_;Var _d:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0107],0xA_5],0107],95],0XF],0107],95],5];Var x,VU2:_2;Var f,zg:_2__h;}Class _:o_f{}Class nN1:A{}'''
        expect = '''Program([ClassDecl(Id(m8x2_22),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_)),None)),AttributeDecl(Instance,VarDecl(Id(_d),ArrayType(5,ArrayType(95,ArrayType(71,ArrayType(15,ArrayType(95,ArrayType(71,ArrayType(165,ArrayType(71,FloatType)))))))))),AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(VU2),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(f),ClassType(Id(_2__h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(zg),ClassType(Id(_2__h)),NullLiteral()))]),ClassDecl(Id(_),Id(o_f),[]),ClassDecl(Id(nN1),Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 33))

    def test_4(self):
        line = '''Class _{Destructor (){}Destructor (){} }Class _{w(z_,N:M;QS:_;Z1:Int ){u::$1=O_::$7;}Val nUM:String ;Constructor (_____,_1,__z:Float ){ {Break ;} }Val S2:Int ;Var $t7_A,G_,z,$__:b_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(w),Instance,[param(Id(z_),ClassType(Id(M))),param(Id(N),ClassType(Id(M))),param(Id(QS),ClassType(Id(_))),param(Id(Z1),IntType)],Block([AssignStmt(FieldAccess(Id(u),Id($1)),FieldAccess(Id(O_),Id($7)))])),AttributeDecl(Instance,ConstDecl(Id(nUM),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_____),FloatType),param(Id(_1),FloatType),param(Id(__z),FloatType)],Block([Block([Break])])),AttributeDecl(Instance,ConstDecl(Id(S2),IntType,None)),AttributeDecl(Static,VarDecl(Id($t7_A),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(G_),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(z),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(b_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 34))

    def test_5(self):
        line = '''Class U___{Destructor (){Break ;Continue ;Continue ;Continue ;}Var _,Ys:String ;gR_o_(S1,_07_j96:Array [Array [Int ,0x9_58FA7],0B1];uZ,_:Float ;b2:String ;q7_,_:Array [Array [Boolean ,4],0X78]){} }'''
        expect = '''Program([ClassDecl(Id(U___),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue,Continue,Continue])),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(Ys),StringType)),MethodDecl(Id(gR_o_),Instance,[param(Id(S1),ArrayType(1,ArrayType(9801639,IntType))),param(Id(_07_j96),ArrayType(1,ArrayType(9801639,IntType))),param(Id(uZ),FloatType),param(Id(_),FloatType),param(Id(b2),StringType),param(Id(q7_),ArrayType(120,ArrayType(4,BoolType))),param(Id(_),ArrayType(120,ArrayType(4,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 35))

    def test_6(self):
        line = '''Class _6h:_{Val RLt_:_Y;}Class L:__D{Val $__4:Int ;}Class W{Destructor (){Break ;Break ;Continue ;} }Class C{Var $5:String ;Constructor (_4_9,_:Boolean ;q:String ;J:String ;m,_,_,d3,T0X_:_){} }Class w:_{}'''
        expect = '''Program([ClassDecl(Id(_6h),Id(_),[AttributeDecl(Instance,ConstDecl(Id(RLt_),ClassType(Id(_Y)),None))]),ClassDecl(Id(L),Id(__D),[AttributeDecl(Static,ConstDecl(Id($__4),IntType,None))]),ClassDecl(Id(W),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Break,Continue]))]),ClassDecl(Id(C),[AttributeDecl(Static,VarDecl(Id($5),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_4_9),BoolType),param(Id(_),BoolType),param(Id(q),StringType),param(Id(J),StringType),param(Id(m),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(d3),ClassType(Id(_))),param(Id(T0X_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(w),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 36))

    def test_7(self):
        line = '''Class I{}Class a:_{Constructor (F,f,_,u_0:Array [Int ,050];s:_A;N:_Y;e_24X,__,__,__,z,w:Array [Array [Boolean ,0b1100100],0b1];_,s__2:Array [Array [String ,0B1],0x2D];__,_:Array [Array [Float ,21_1_59],44];_:Array [Int ,0B10101]){} }Class _:f_b_2I{Var $5:Array [Array [String ,0X27],0X27];Val F3:_;}'''
        expect = '''Program([ClassDecl(Id(I),[]),ClassDecl(Id(a),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(F),ArrayType(40,IntType)),param(Id(f),ArrayType(40,IntType)),param(Id(_),ArrayType(40,IntType)),param(Id(u_0),ArrayType(40,IntType)),param(Id(s),ClassType(Id(_A))),param(Id(N),ClassType(Id(_Y))),param(Id(e_24X),ArrayType(1,ArrayType(100,BoolType))),param(Id(__),ArrayType(1,ArrayType(100,BoolType))),param(Id(__),ArrayType(1,ArrayType(100,BoolType))),param(Id(__),ArrayType(1,ArrayType(100,BoolType))),param(Id(z),ArrayType(1,ArrayType(100,BoolType))),param(Id(w),ArrayType(1,ArrayType(100,BoolType))),param(Id(_),ArrayType(45,ArrayType(1,StringType))),param(Id(s__2),ArrayType(45,ArrayType(1,StringType))),param(Id(__),ArrayType(44,ArrayType(21159,FloatType))),param(Id(_),ArrayType(44,ArrayType(21159,FloatType))),param(Id(_),ArrayType(21,IntType))],Block([]))]),ClassDecl(Id(_),Id(f_b_2I),[AttributeDecl(Static,VarDecl(Id($5),ArrayType(39,ArrayType(39,StringType)))),AttributeDecl(Instance,ConstDecl(Id(F3),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 37))

    def test_8(self):
        line = '''Class __:h_{}Class _4{Constructor (){}$7_(){} }Class t:K_{}Class i{Constructor (d,yY4:_){}Val $o,g_4,_8:_;}Class M4{V(){Break ;}Val $3jqD1,$6:_;}Class _{}Class _{z(){Break ;Return ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(h_),[]),ClassDecl(Id(_4),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($7_),Static,[],Block([]))]),ClassDecl(Id(t),Id(K_),[]),ClassDecl(Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(_))),param(Id(yY4),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($o),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(g_4),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_8),ClassType(Id(_)),None))]),ClassDecl(Id(M4),[MethodDecl(Id(V),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($3jqD1),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(z),Instance,[],Block([Break,Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 38))

    def test_9(self):
        line = '''Class _3:__6{Var $_:_s;}Class _:_{Constructor (_,Y,D:Float ;_,_:Array [Array [Array [Array [String ,0b1],0B1_1],0X6],0B11];N6l_,A:_;J:_K2){}Val F:Boolean ;Var $SS:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_3),Id(__6),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_s)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(Y),FloatType),param(Id(D),FloatType),param(Id(_),ArrayType(3,ArrayType(6,ArrayType(3,ArrayType(1,StringType))))),param(Id(_),ArrayType(3,ArrayType(6,ArrayType(3,ArrayType(1,StringType))))),param(Id(N6l_),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(J),ClassType(Id(_K2)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(F),BoolType,None)),AttributeDecl(Static,VarDecl(Id($SS),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 39))

    def test_10(self):
        line = '''Class p_:_{}Class v831:_i2{Var $mG4_,l6p,$141w_,__,J9_7,$65_,$40,c_,$P_A_3S,$4,r__,L6iQS:Array [Float ,6];Constructor (){}Var $1_,Oy:Array [Array [Int ,0x9B],0b101111];}Class q_:__{}'''
        expect = '''Program([ClassDecl(Id(p_),Id(_),[]),ClassDecl(Id(v831),Id(_i2),[AttributeDecl(Static,VarDecl(Id($mG4_),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(l6p),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($141w_),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(J9_7),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($65_),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($40),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(c_),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($P_A_3S),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(r__),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(L6iQS),ArrayType(6,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($1_),ArrayType(47,ArrayType(155,IntType)))),AttributeDecl(Instance,VarDecl(Id(Oy),ArrayType(47,ArrayType(155,IntType))))]),ClassDecl(Id(q_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 310))

    def test_11(self):
        line = '''Class _{Constructor (Y,r1_,w5K,_,_,l03_S6:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B11_1],0124],25],0xBC],0xC],0b1111],07_5_0_4],25]){Break ;}Constructor (Y3Pri:Int ){} }Class dh:__P{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Y),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(r1_),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(w5K),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(_),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(_),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType))))))))),param(Id(l03_S6),ArrayType(25,ArrayType(3908,ArrayType(15,ArrayType(12,ArrayType(188,ArrayType(25,ArrayType(84,ArrayType(7,IntType)))))))))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(Y3Pri),IntType)],Block([]))]),ClassDecl(Id(dh),Id(__P),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 311))

    def test_12(self):
        line = '''Class _Op:__7{}Class TZ{}Class N___:u{}Class U__{Constructor (S,u7,_:x;_:Array [Float ,0b10111]){}$_(_P,_,_7:Array [Int ,0x3B]){} }Class Z_:_{Val $_G_:Array [Array [Array [Array [Array [Array [Float ,0b1],0x5],0b10111],0106],0B1],0b1];}'''
        expect = '''Program([ClassDecl(Id(_Op),Id(__7),[]),ClassDecl(Id(TZ),[]),ClassDecl(Id(N___),Id(u),[]),ClassDecl(Id(U__),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(x))),param(Id(u7),ClassType(Id(x))),param(Id(_),ClassType(Id(x))),param(Id(_),ArrayType(23,FloatType))],Block([])),MethodDecl(Id($_),Static,[param(Id(_P),ArrayType(59,IntType)),param(Id(_),ArrayType(59,IntType)),param(Id(_7),ArrayType(59,IntType))],Block([]))]),ClassDecl(Id(Z_),Id(_),[AttributeDecl(Static,ConstDecl(Id($_G_),ArrayType(1,ArrayType(1,ArrayType(70,ArrayType(23,ArrayType(5,ArrayType(1,FloatType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 312))

    def test_13(self):
        line = '''Class K:__9___8{__(Q:Array [Array [Array [Int ,0X38],0b10],0125];__o:Array [Boolean ,0125];_:Z;__,q:_O003;v_,_B3W,_8:String ;_,Mr_:_8;S:__D_){}Var $P_:Float ;Constructor (){Var _Oi:String ;} }Class pxB6_G__Z7{}Class _{}'''
        expect = '''Program([ClassDecl(Id(K),Id(__9___8),[MethodDecl(Id(__),Instance,[param(Id(Q),ArrayType(85,ArrayType(2,ArrayType(56,IntType)))),param(Id(__o),ArrayType(85,BoolType)),param(Id(_),ClassType(Id(Z))),param(Id(__),ClassType(Id(_O003))),param(Id(q),ClassType(Id(_O003))),param(Id(v_),StringType),param(Id(_B3W),StringType),param(Id(_8),StringType),param(Id(_),ClassType(Id(_8))),param(Id(Mr_),ClassType(Id(_8))),param(Id(S),ClassType(Id(__D_)))],Block([])),AttributeDecl(Static,VarDecl(Id($P_),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_Oi),StringType)]))]),ClassDecl(Id(pxB6_G__Z7),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 313))

    def test_14(self):
        line = '''Class _8{Destructor (){Val __K9__:Array [Array [Array [Float ,1],0B110000],0XA];}Destructor (){}$v(M,_,Q7O8:Boolean ;_3_:Array [Array [Array [Array [Array [Boolean ,0XA],2],0b111],0X5],23];Y:Array [Array [Boolean ,0X92],0b101]){Return ;} }Class C_{}'''
        expect = '''Program([ClassDecl(Id(_8),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(__K9__),ArrayType(10,ArrayType(48,ArrayType(1,FloatType))),None)])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($v),Static,[param(Id(M),BoolType),param(Id(_),BoolType),param(Id(Q7O8),BoolType),param(Id(_3_),ArrayType(23,ArrayType(5,ArrayType(7,ArrayType(2,ArrayType(10,BoolType)))))),param(Id(Y),ArrayType(5,ArrayType(146,BoolType)))],Block([Return()]))]),ClassDecl(Id(C_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 314))

    def test_15(self):
        line = '''Class jo{}Class _{}Class Q:d{}Class W{Var _,$i:Array [Int ,97];}Class v{Val $P:Int ;Val $9,$3:String ;Val $_J1:Array [Array [Array [Float ,0b110111],034],0B111010];}Class _:X{}Class D:yM{}'''
        expect = '''Program([ClassDecl(Id(jo),[]),ClassDecl(Id(_),[]),ClassDecl(Id(Q),Id(d),[]),ClassDecl(Id(W),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,IntType))),AttributeDecl(Static,VarDecl(Id($i),ArrayType(97,IntType)))]),ClassDecl(Id(v),[AttributeDecl(Static,ConstDecl(Id($P),IntType,None)),AttributeDecl(Static,ConstDecl(Id($9),StringType,None)),AttributeDecl(Static,ConstDecl(Id($3),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_J1),ArrayType(58,ArrayType(28,ArrayType(55,FloatType))),None))]),ClassDecl(Id(_),Id(X),[]),ClassDecl(Id(D),Id(yM),[])])'''
        self.assertTrue(TestAST.test(line, expect, 315))

    def test_16(self):
        line = '''Class nx{Var $__:_;$_2(){}Constructor (_4,_,P7,_0:Array [Array [Array [Array [Boolean ,0X26],0B1_0],7],7];__,_,a0_,___5__:Int ;__,_:Float ;eP,B,MV_2m5,_:B;_,f9_,V_:_){} }Class _PM{}'''
        expect = '''Program([ClassDecl(Id(nx),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($_2),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_4),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(_),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(P7),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(_0),ArrayType(7,ArrayType(7,ArrayType(2,ArrayType(38,BoolType))))),param(Id(__),IntType),param(Id(_),IntType),param(Id(a0_),IntType),param(Id(___5__),IntType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(eP),ClassType(Id(B))),param(Id(B),ClassType(Id(B))),param(Id(MV_2m5),ClassType(Id(B))),param(Id(_),ClassType(Id(B))),param(Id(_),ClassType(Id(_))),param(Id(f9_),ClassType(Id(_))),param(Id(V_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_PM),[])])'''
        self.assertTrue(TestAST.test(line, expect, 316))

    def test_17(self):
        line = '''Class pH:_{Val $____:Array [Float ,0B111101];Constructor (__,_:Array [String ,87_8_6_5_37_26_576];_:_1_;XR,_:Array [Array [Int ,0B111101],033]){Continue ;}Constructor (){ {Return ;Continue ;} }}'''
        expect = '''Program([ClassDecl(Id(pH),Id(_),[AttributeDecl(Static,ConstDecl(Id($____),ArrayType(61,FloatType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(878653726576,StringType)),param(Id(_),ArrayType(878653726576,StringType)),param(Id(_),ClassType(Id(_1_))),param(Id(XR),ArrayType(27,ArrayType(61,IntType))),param(Id(_),ArrayType(27,ArrayType(61,IntType)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Block([Return(),Continue])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 317))

    def test_18(self):
        line = '''Class o{Constructor (U:Boolean ){}Destructor (){}$_6(f:Int ;I:Array [Array [Array [Float ,3],0X5],0XFC];bK:String ;_:Array [Int ,0xF];n,i:Int ;t6,_91_S5,_:Array [Float ,050]){Continue ;{} }Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(U),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_6),Static,[param(Id(f),IntType),param(Id(I),ArrayType(252,ArrayType(5,ArrayType(3,FloatType)))),param(Id(bK),StringType),param(Id(_),ArrayType(15,IntType)),param(Id(n),IntType),param(Id(i),IntType),param(Id(t6),ArrayType(40,FloatType)),param(Id(_91_S5),ArrayType(40,FloatType)),param(Id(_),ArrayType(40,FloatType))],Block([Continue,Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 318))

    def test_19(self):
        line = '''Class q_s:_{p0(__no,F,_2,_:Array [String ,0b1_0_0_0_1_11111];___:v_;_,X:O;vS_:Array [Boolean ,0133];Nz_8:Z_;Z:Array [Array [Array [Array [Boolean ,0b111100],0b111100],0133],0133];h67,_9,q_2,_:_P___;_:Int ;_N_2:Array [Array [Array [Array [String ,0b11],0b111100],86],0B11];e_:_){} }Class N:sC{Destructor (){}Val _6,$____3:Boolean ;}Class N:_{}Class _L3{}'''
        expect = '''Program([ClassDecl(Id(q_s),Id(_),[MethodDecl(Id(p0),Instance,[param(Id(__no),ArrayType(575,StringType)),param(Id(F),ArrayType(575,StringType)),param(Id(_2),ArrayType(575,StringType)),param(Id(_),ArrayType(575,StringType)),param(Id(___),ClassType(Id(v_))),param(Id(_),ClassType(Id(O))),param(Id(X),ClassType(Id(O))),param(Id(vS_),ArrayType(91,BoolType)),param(Id(Nz_8),ClassType(Id(Z_))),param(Id(Z),ArrayType(91,ArrayType(91,ArrayType(60,ArrayType(60,BoolType))))),param(Id(h67),ClassType(Id(_P___))),param(Id(_9),ClassType(Id(_P___))),param(Id(q_2),ClassType(Id(_P___))),param(Id(_),ClassType(Id(_P___))),param(Id(_),IntType),param(Id(_N_2),ArrayType(3,ArrayType(86,ArrayType(60,ArrayType(3,StringType))))),param(Id(e_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(N),Id(sC),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_6),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($____3),BoolType,None))]),ClassDecl(Id(N),Id(_),[]),ClassDecl(Id(_L3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 319))

    def test_20(self):
        line = '''Class __8:_n{Var __,_:_D_;Constructor (_8,_,_s9Q:j_B;_j77:Array [Array [Array [Array [Float ,2],49],49],0B101_0];g7,__,B_,_:Array [Array [String ,49],042];RW:Boolean ;_287N:String ;_:aP){} }Class _9:U65{}'''
        expect = '''Program([ClassDecl(Id(__8),Id(_n),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_D_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_D_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_8),ClassType(Id(j_B))),param(Id(_),ClassType(Id(j_B))),param(Id(_s9Q),ClassType(Id(j_B))),param(Id(_j77),ArrayType(10,ArrayType(49,ArrayType(49,ArrayType(2,FloatType))))),param(Id(g7),ArrayType(34,ArrayType(49,StringType))),param(Id(__),ArrayType(34,ArrayType(49,StringType))),param(Id(B_),ArrayType(34,ArrayType(49,StringType))),param(Id(_),ArrayType(34,ArrayType(49,StringType))),param(Id(RW),BoolType),param(Id(_287N),StringType),param(Id(_),ClassType(Id(aP)))],Block([]))]),ClassDecl(Id(_9),Id(U65),[])])'''
        self.assertTrue(TestAST.test(line, expect, 320))

    def test_21(self):
        line = '''Class h_{}Class _{Val _O:Array [Array [Array [Array [Array [Array [Array [Int ,8],0b11],14_5],0101],0b1],0377],01_302];Var H,$_99_y,n_0,$8:Array [Array [Boolean ,0X3A],07];}Class _{}'''
        expect = '''Program([ClassDecl(Id(h_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_O),ArrayType(706,ArrayType(255,ArrayType(1,ArrayType(65,ArrayType(145,ArrayType(3,ArrayType(8,IntType))))))),None)),AttributeDecl(Instance,VarDecl(Id(H),ArrayType(7,ArrayType(58,BoolType)))),AttributeDecl(Static,VarDecl(Id($_99_y),ArrayType(7,ArrayType(58,BoolType)))),AttributeDecl(Instance,VarDecl(Id(n_0),ArrayType(7,ArrayType(58,BoolType)))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(7,ArrayType(58,BoolType))))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 321))

    def test_22(self):
        line = '''Class _t{_(n1:Array [Array [Array [Array [Float ,0X53],05_72_1_5],03],03];d,h:Boolean ;_:___9;G_:Qv;jL:h6;_,e9,Q7G,_:_W82){ {} }Val $4A:Array [String ,69];Destructor (){}Destructor (){} }Class A:a_{}Class X:U{Var $4J_,$lj:_;}'''
        expect = '''Program([ClassDecl(Id(_t),[MethodDecl(Id(_),Instance,[param(Id(n1),ArrayType(3,ArrayType(3,ArrayType(24205,ArrayType(83,FloatType))))),param(Id(d),BoolType),param(Id(h),BoolType),param(Id(_),ClassType(Id(___9))),param(Id(G_),ClassType(Id(Qv))),param(Id(jL),ClassType(Id(h6))),param(Id(_),ClassType(Id(_W82))),param(Id(e9),ClassType(Id(_W82))),param(Id(Q7G),ClassType(Id(_W82))),param(Id(_),ClassType(Id(_W82)))],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($4A),ArrayType(69,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(A),Id(a_),[]),ClassDecl(Id(X),Id(U),[AttributeDecl(Static,VarDecl(Id($4J_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($lj),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 322))

    def test_23(self):
        line = '''Class _06:u08h{Constructor (){}v9l(i:Array [Array [Array [Boolean ,7_84],0X5A],0x28];_o464,_5Z2k,_w,sE,_,__,_,z:Gt;y:Int ;_:Int ;T:l7;T9,v,N5,aH_:Float ;_x:Array [String ,0b11_0];l:Float ){Return ;} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_06),Id(u08h),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(v9l),Instance,[param(Id(i),ArrayType(40,ArrayType(90,ArrayType(784,BoolType)))),param(Id(_o464),ClassType(Id(Gt))),param(Id(_5Z2k),ClassType(Id(Gt))),param(Id(_w),ClassType(Id(Gt))),param(Id(sE),ClassType(Id(Gt))),param(Id(_),ClassType(Id(Gt))),param(Id(__),ClassType(Id(Gt))),param(Id(_),ClassType(Id(Gt))),param(Id(z),ClassType(Id(Gt))),param(Id(y),IntType),param(Id(_),IntType),param(Id(T),ClassType(Id(l7))),param(Id(T9),FloatType),param(Id(v),FloatType),param(Id(N5),FloatType),param(Id(aH_),FloatType),param(Id(_x),ArrayType(6,StringType)),param(Id(l),FloatType)],Block([Return()]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 323))

    def test_24(self):
        line = '''Class __:_o_{Var ul:_E3_;Constructor (_zC:___8;D,h:String ;z_9,R_,__e:Array [Array [Array [Boolean ,6_7],0b1001111],0b1]){} }Class _{Destructor (){}Val $_:Int ;}Class __3GV:C7_{}Class t{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_o_),[AttributeDecl(Instance,VarDecl(Id(ul),ClassType(Id(_E3_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_zC),ClassType(Id(___8))),param(Id(D),StringType),param(Id(h),StringType),param(Id(z_9),ArrayType(1,ArrayType(79,ArrayType(67,BoolType)))),param(Id(R_),ArrayType(1,ArrayType(79,ArrayType(67,BoolType)))),param(Id(__e),ArrayType(1,ArrayType(79,ArrayType(67,BoolType))))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(__3GV),Id(C7_),[]),ClassDecl(Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 324))

    def test_25(self):
        line = '''Class _:_5vV{}Class _8{Val _:Array [Array [Array [Array [Boolean ,0X5],5],01],0x37];Val _,$q_:Array [Array [Array [String ,0B1011100],0X8],0x1_B];Constructor (){} }Class J{}Class I0_:_{}Class o9_j25J{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_5vV),[]),ClassDecl(Id(_8),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(55,ArrayType(1,ArrayType(5,ArrayType(5,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(27,ArrayType(8,ArrayType(92,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($q_),ArrayType(27,ArrayType(8,ArrayType(92,StringType))),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(J),[]),ClassDecl(Id(I0_),Id(_),[]),ClassDecl(Id(o9_j25J),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 325))

    def test_26(self):
        line = '''Class _O{}Class g{}Class __{Constructor (_,_4:X6;x__,X:String ;G,_:Array [Int ,0x2B];_JV:Array [Array [Array [Array [Array [Array [Array [Int ,6],1],4_94],01],64],8],03];_,_8_w,B6:Array [Int ,0b11_0];U_:X;_8Vq__:Float ;_,_y:Array [Float ,2_7];_1:Array [String ,033_57_2];r:Array [Array [Float ,0X12],0b10_1_11]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_O),[]),ClassDecl(Id(g),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(X6))),param(Id(_4),ClassType(Id(X6))),param(Id(x__),StringType),param(Id(X),StringType),param(Id(G),ArrayType(43,IntType)),param(Id(_),ArrayType(43,IntType)),param(Id(_JV),ArrayType(3,ArrayType(8,ArrayType(64,ArrayType(1,ArrayType(494,ArrayType(1,ArrayType(6,IntType)))))))),param(Id(_),ArrayType(6,IntType)),param(Id(_8_w),ArrayType(6,IntType)),param(Id(B6),ArrayType(6,IntType)),param(Id(U_),ClassType(Id(X))),param(Id(_8Vq__),FloatType),param(Id(_),ArrayType(27,FloatType)),param(Id(_y),ArrayType(27,FloatType)),param(Id(_1),ArrayType(14202,StringType)),param(Id(r),ArrayType(23,ArrayType(18,FloatType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 326))

    def test_27(self):
        line = '''Class _:t_{}Class _{Val $_:Array [Float ,80];Constructor (B5:Array [Array [Boolean ,0B1],4];b:Array [Array [Array [Array [Int ,0X3],0B1],0X3],0x16]){}Var $_SsMp4:Boolean ;KS9(){}y8(){}$3_(_z__b,J,_l:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(t_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(80,FloatType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(B5),ArrayType(4,ArrayType(1,BoolType))),param(Id(b),ArrayType(22,ArrayType(3,ArrayType(1,ArrayType(3,IntType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($_SsMp4),BoolType)),MethodDecl(Id(KS9),Instance,[],Block([])),MethodDecl(Id(y8),Instance,[],Block([])),MethodDecl(Id($3_),Static,[param(Id(_z__b),IntType),param(Id(J),IntType),param(Id(_l),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 327))

    def test_28(self):
        line = '''Class S__:_{}Class J:_0__{}Class r__{W5_4jm__(_,c,_:_;vt:String ;_:P;L3,_,_6N_:Array [Float ,025];_,__:Array [Int ,75];_8L,_,C,_,d,_:String ;_,_,q,_A:C_;V:Array [Array [Float ,4],0B11_111];_w,w:Int ){}Val $Ie:String ;}'''
        expect = '''Program([ClassDecl(Id(S__),Id(_),[]),ClassDecl(Id(J),Id(_0__),[]),ClassDecl(Id(r__),[MethodDecl(Id(W5_4jm__),Instance,[param(Id(_),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(vt),StringType),param(Id(_),ClassType(Id(P))),param(Id(L3),ArrayType(21,FloatType)),param(Id(_),ArrayType(21,FloatType)),param(Id(_6N_),ArrayType(21,FloatType)),param(Id(_),ArrayType(75,IntType)),param(Id(__),ArrayType(75,IntType)),param(Id(_8L),StringType),param(Id(_),StringType),param(Id(C),StringType),param(Id(_),StringType),param(Id(d),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(C_))),param(Id(_),ClassType(Id(C_))),param(Id(q),ClassType(Id(C_))),param(Id(_A),ClassType(Id(C_))),param(Id(V),ArrayType(31,ArrayType(4,FloatType))),param(Id(_w),IntType),param(Id(w),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Ie),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 328))

    def test_29(self):
        line = '''Class D7:u_j{Val T:Array [Boolean ,0B1010011];Var __m01:Array [Array [Array [Array [Array [Array [Int ,0332],061276],63_8],0x12],0x8_8],5_4];Var e57R:Array [String ,0105];$4x2r(){} }'''
        expect = '''Program([ClassDecl(Id(D7),Id(u_j),[AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(83,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(__m01),ArrayType(54,ArrayType(136,ArrayType(18,ArrayType(638,ArrayType(25278,ArrayType(218,IntType)))))))),AttributeDecl(Instance,VarDecl(Id(e57R),ArrayType(69,StringType))),MethodDecl(Id($4x2r),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 329))

    def test_30(self):
        line = '''Class M{}Class _0:_M5{}Class _:B5{Var $___:_;Constructor (_:Int ){}$P___(q,_,bL5__RD,pO36_:_8;M_5,c,AsF:Array [Array [Array [Array [Array [Array [Boolean ,0b1],0113],0b11],0B1_101_1_0],0X5B],55];_:X;_:Float ){} }Class oZ{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(M),[]),ClassDecl(Id(_0),Id(_M5),[]),ClassDecl(Id(_),Id(B5),[AttributeDecl(Static,VarDecl(Id($___),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),MethodDecl(Id($P___),Static,[param(Id(q),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(bL5__RD),ClassType(Id(_8))),param(Id(pO36_),ClassType(Id(_8))),param(Id(M_5),ArrayType(55,ArrayType(91,ArrayType(54,ArrayType(3,ArrayType(75,ArrayType(1,BoolType))))))),param(Id(c),ArrayType(55,ArrayType(91,ArrayType(54,ArrayType(3,ArrayType(75,ArrayType(1,BoolType))))))),param(Id(AsF),ArrayType(55,ArrayType(91,ArrayType(54,ArrayType(3,ArrayType(75,ArrayType(1,BoolType))))))),param(Id(_),ClassType(Id(X))),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(oZ),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 330))

    def test_31(self):
        line = '''Class __{z(){}Constructor (_,g5WWs76_:Boolean ;_,_,m7566_n:Boolean ;_:Float ;_:Array [Array [Float ,0b1000111],0B1011011];_,X:Array [Array [Array [Boolean ,0404_64_0_5_6_5],0X51],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(z),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(g5WWs76_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(m7566_n),BoolType),param(Id(_),FloatType),param(Id(_),ArrayType(91,ArrayType(71,FloatType))),param(Id(_),ArrayType(1,ArrayType(81,ArrayType(68370805,BoolType)))),param(Id(X),ArrayType(1,ArrayType(81,ArrayType(68370805,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 331))

    def test_32(self):
        line = '''Class uE:V{Constructor (_7:Int ;F97:Array [Array [Int ,0B110],0X53];M:Array [Array [Array [Array [Array [Float ,0B1010000],0103],10],7_0],94]){} }Class _{}Class _9:_{}Class qX:b{Val J:Int ;}'''
        expect = '''Program([ClassDecl(Id(uE),Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),IntType),param(Id(F97),ArrayType(83,ArrayType(6,IntType))),param(Id(M),ArrayType(94,ArrayType(70,ArrayType(10,ArrayType(67,ArrayType(80,FloatType))))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_9),Id(_),[]),ClassDecl(Id(qX),Id(b),[AttributeDecl(Instance,ConstDecl(Id(J),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 332))

    def test_33(self):
        line = '''Class __79:Q_{Constructor (_,__:Int ;x,l1,_:Float ;a,V:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,044],0B1],0b100],0X3_2],0b11],0XBD3],38],044],38],0B1011101]){} }'''
        expect = '''Program([ClassDecl(Id(__79),Id(Q_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(__),IntType),param(Id(x),FloatType),param(Id(l1),FloatType),param(Id(_),FloatType),param(Id(a),ArrayType(93,ArrayType(38,ArrayType(36,ArrayType(38,ArrayType(3027,ArrayType(3,ArrayType(50,ArrayType(4,ArrayType(1,ArrayType(36,FloatType))))))))))),param(Id(V),ArrayType(93,ArrayType(38,ArrayType(36,ArrayType(38,ArrayType(3027,ArrayType(3,ArrayType(50,ArrayType(4,ArrayType(1,ArrayType(36,FloatType)))))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 333))

    def test_34(self):
        line = '''Class _eZ8U_{Var _:d;Constructor (){}Destructor (){ {}Continue ;Return ;}Var t,MCQ:_;Var $4_S:String ;Var $H,$H:String ;}Class z{Val $__,_,$2_,$_x__JU:i_;}Class e2{Val Lu:y;}'''
        expect = '''Program([ClassDecl(Id(_eZ8U_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(d)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Continue,Return()])),AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(MCQ),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4_S),StringType)),AttributeDecl(Static,VarDecl(Id($H),StringType)),AttributeDecl(Static,VarDecl(Id($H),StringType))]),ClassDecl(Id(z),[AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(i_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(i_)),None)),AttributeDecl(Static,ConstDecl(Id($2_),ClassType(Id(i_)),None)),AttributeDecl(Static,ConstDecl(Id($_x__JU),ClassType(Id(i_)),None))]),ClassDecl(Id(e2),[AttributeDecl(Instance,ConstDecl(Id(Lu),ClassType(Id(y)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 334))

    def test_35(self):
        line = '''Class L:u{Var e,$H:Array [Array [Array [Array [Array [Float ,0B1],0B1001110],77],0B1001110],9_1];}Class _{}Class i4c{}Class E_{Var $_6:Array [Array [Array [Int ,026_00],0X42],0110];}Class e{}'''
        expect = '''Program([ClassDecl(Id(L),Id(u),[AttributeDecl(Instance,VarDecl(Id(e),ArrayType(91,ArrayType(78,ArrayType(77,ArrayType(78,ArrayType(1,FloatType))))))),AttributeDecl(Static,VarDecl(Id($H),ArrayType(91,ArrayType(78,ArrayType(77,ArrayType(78,ArrayType(1,FloatType)))))))]),ClassDecl(Id(_),[]),ClassDecl(Id(i4c),[]),ClassDecl(Id(E_),[AttributeDecl(Static,VarDecl(Id($_6),ArrayType(72,ArrayType(66,ArrayType(1408,IntType)))))]),ClassDecl(Id(e),[])])'''
        self.assertTrue(TestAST.test(line, expect, 335))

    def test_36(self):
        line = '''Class _Z3_:_g_j{}Class f__:LT{Destructor (){ {} }Var __:Array [Int ,0117];}Class b4:p{$_(_:Array [Array [Array [Float ,0b11_0],0x3C],0x3C];dTp__,_H9:_39;h,p_J:_;XH_,_73__,_:Array [String ,0b101]){}Constructor (i6_,_5_a,_8:z9;_,C:Float ){} }Class U_R_{}'''
        expect = '''Program([ClassDecl(Id(_Z3_),Id(_g_j),[]),ClassDecl(Id(f__),Id(LT),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(79,IntType)))]),ClassDecl(Id(b4),Id(p),[MethodDecl(Id($_),Static,[param(Id(_),ArrayType(60,ArrayType(60,ArrayType(6,FloatType)))),param(Id(dTp__),ClassType(Id(_39))),param(Id(_H9),ClassType(Id(_39))),param(Id(h),ClassType(Id(_))),param(Id(p_J),ClassType(Id(_))),param(Id(XH_),ArrayType(5,StringType)),param(Id(_73__),ArrayType(5,StringType)),param(Id(_),ArrayType(5,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i6_),ClassType(Id(z9))),param(Id(_5_a),ClassType(Id(z9))),param(Id(_8),ClassType(Id(z9))),param(Id(_),FloatType),param(Id(C),FloatType)],Block([]))]),ClassDecl(Id(U_R_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 336))

    def test_37(self):
        line = '''Class _{Destructor (){} }Class __{Var $fcU8,$_,$_,_,$T,_:String ;Var _:Array [Array [Array [String ,0B100010],34_429],014];}Class _H{Ky(_3:Array [Array [Array [Array [Float ,0b1011111],36],36],36];ue6,XV5,saG0:Array [Array [Array [Int ,9],04],0x5];p_t:Boolean ){}Destructor (){}Val D9_F_:Array [Array [String ,0X5],050];Destructor (){Continue ;{} }}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($fcU8),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($T),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(12,ArrayType(34429,ArrayType(34,StringType)))))]),ClassDecl(Id(_H),[MethodDecl(Id(Ky),Instance,[param(Id(_3),ArrayType(36,ArrayType(36,ArrayType(36,ArrayType(95,FloatType))))),param(Id(ue6),ArrayType(5,ArrayType(4,ArrayType(9,IntType)))),param(Id(XV5),ArrayType(5,ArrayType(4,ArrayType(9,IntType)))),param(Id(saG0),ArrayType(5,ArrayType(4,ArrayType(9,IntType)))),param(Id(p_t),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(D9_F_),ArrayType(40,ArrayType(5,StringType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 337))

    def test_38(self):
        line = '''Class I1:Z_1UbF{Var __:Boolean ;}Class _{}Class c2:Z{}Class _:__{Val $2_p:Array [Array [Array [Boolean ,07_27],0b1_00],07_5_02_2];}Class _9:_{}Class _e:hH{Destructor (){}Val $_:Array [Float ,0X1A];}'''
        expect = '''Program([ClassDecl(Id(I1),Id(Z_1UbF),[AttributeDecl(Instance,VarDecl(Id(__),BoolType))]),ClassDecl(Id(_),[]),ClassDecl(Id(c2),Id(Z),[]),ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($2_p),ArrayType(31250,ArrayType(4,ArrayType(471,BoolType))),None))]),ClassDecl(Id(_9),Id(_),[]),ClassDecl(Id(_e),Id(hH),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(26,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 338))

    def test_39(self):
        line = '''Class __C7q0_j{Constructor (){}H(_0:Array [Int ,66];qL:Array [Float ,07];_n:Array [Int ,66];X_,S:Float ;C:String ;MY:Array [Boolean ,02];_,_y7__,_,_:y;w:Boolean ;_:_;u8,m_5:Array [Array [Int ,66],0b110010]){} }'''
        expect = '''Program([ClassDecl(Id(__C7q0_j),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(H),Instance,[param(Id(_0),ArrayType(66,IntType)),param(Id(qL),ArrayType(7,FloatType)),param(Id(_n),ArrayType(66,IntType)),param(Id(X_),FloatType),param(Id(S),FloatType),param(Id(C),StringType),param(Id(MY),ArrayType(2,BoolType)),param(Id(_),ClassType(Id(y))),param(Id(_y7__),ClassType(Id(y))),param(Id(_),ClassType(Id(y))),param(Id(_),ClassType(Id(y))),param(Id(w),BoolType),param(Id(_),ClassType(Id(_))),param(Id(u8),ArrayType(50,ArrayType(66,IntType))),param(Id(m_5),ArrayType(50,ArrayType(66,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 339))

    def test_40(self):
        line = '''Class H{Val $1,$m,$_3:Array [Array [Boolean ,35],35];J_(){} }Class __2_7{}Class _1{Constructor (_:Array [Array [Array [Boolean ,0b10011],0b11],0x8_0_F_5];_L,__:Array [Array [Float ,0B1110],017];V,tE__:Boolean ;__3,c,m,__c,_:Array [Int ,0b1];RJ,Q_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(H),[AttributeDecl(Static,ConstDecl(Id($1),ArrayType(35,ArrayType(35,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($m),ArrayType(35,ArrayType(35,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_3),ArrayType(35,ArrayType(35,BoolType)),None)),MethodDecl(Id(J_),Instance,[],Block([]))]),ClassDecl(Id(__2_7),[]),ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(33013,ArrayType(3,ArrayType(19,BoolType)))),param(Id(_L),ArrayType(15,ArrayType(14,FloatType))),param(Id(__),ArrayType(15,ArrayType(14,FloatType))),param(Id(V),BoolType),param(Id(tE__),BoolType),param(Id(__3),ArrayType(1,IntType)),param(Id(c),ArrayType(1,IntType)),param(Id(m),ArrayType(1,IntType)),param(Id(__c),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(RJ),IntType),param(Id(Q_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 340))

    def test_41(self):
        line = '''Class _:gZ673{}Class __{Constructor (){Break ;m1_::$__();Return ;e::$_1();Break ;} }Class ZG2{Constructor (){Var _:Array [Array [Array [Float ,864],0B11],0B100100];Return ;Return ;}Val $_,$_7____:_9;}'''
        expect = '''Program([ClassDecl(Id(_),Id(gZ673),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Call(Id(m1_),Id($__),[]),Return(),Call(Id(e),Id($_1),[]),Break]))]),ClassDecl(Id(ZG2),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_),ArrayType(36,ArrayType(3,ArrayType(864,FloatType)))),Return(),Return()])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_9)),None)),AttributeDecl(Static,ConstDecl(Id($_7____),ClassType(Id(_9)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 341))

    def test_42(self):
        line = '''Class IG:_{f(_:Array [Float ,072];c_h,__,s,_,k5P:Array [Int ,7];_,_4_T,_,_,_:Array [Array [Array [Array [Int ,0X5B],057],0x1],0X5_1];P0_D,oo:w;_I,_O,r,_7:Array [Float ,0x7]){} }'''
        expect = '''Program([ClassDecl(Id(IG),Id(_),[MethodDecl(Id(f),Instance,[param(Id(_),ArrayType(58,FloatType)),param(Id(c_h),ArrayType(7,IntType)),param(Id(__),ArrayType(7,IntType)),param(Id(s),ArrayType(7,IntType)),param(Id(_),ArrayType(7,IntType)),param(Id(k5P),ArrayType(7,IntType)),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_4_T),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(_),ArrayType(81,ArrayType(1,ArrayType(47,ArrayType(91,IntType))))),param(Id(P0_D),ClassType(Id(w))),param(Id(oo),ClassType(Id(w))),param(Id(_I),ArrayType(7,FloatType)),param(Id(_O),ArrayType(7,FloatType)),param(Id(r),ArrayType(7,FloatType)),param(Id(_7),ArrayType(7,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 342))

    def test_43(self):
        line = '''Class __T0SU:_{Destructor (){}Val $_R:Array [Int ,0b101111];Val $P,$___8,$2,$o_82_,D2R:M_;Var $N,$__,$9_,F,X,$e,$wj:String ;}Class __n:_{Constructor (k:_5g){} }Class _2:_{}'''
        expect = '''Program([ClassDecl(Id(__T0SU),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_R),ArrayType(47,IntType),None)),AttributeDecl(Static,ConstDecl(Id($P),ClassType(Id(M_)),None)),AttributeDecl(Static,ConstDecl(Id($___8),ClassType(Id(M_)),None)),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(M_)),None)),AttributeDecl(Static,ConstDecl(Id($o_82_),ClassType(Id(M_)),None)),AttributeDecl(Instance,ConstDecl(Id(D2R),ClassType(Id(M_)),None)),AttributeDecl(Static,VarDecl(Id($N),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType)),AttributeDecl(Static,VarDecl(Id($9_),StringType)),AttributeDecl(Instance,VarDecl(Id(F),StringType)),AttributeDecl(Instance,VarDecl(Id(X),StringType)),AttributeDecl(Static,VarDecl(Id($e),StringType)),AttributeDecl(Static,VarDecl(Id($wj),StringType))]),ClassDecl(Id(__n),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(_5g)))],Block([]))]),ClassDecl(Id(_2),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 343))

    def test_44(self):
        line = '''Class H_:_k_{Constructor (__pR:Int ;D___:W){}Destructor (){} }Class _1_{}Class _{$_(_C_97_,_1,Y:Array [String ,16];T:Array [Array [Float ,6_0],06]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(H_),Id(_k_),[MethodDecl(Id(Constructor),Instance,[param(Id(__pR),IntType),param(Id(D___),ClassType(Id(W)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_1_),[]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[param(Id(_C_97_),ArrayType(16,StringType)),param(Id(_1),ArrayType(16,StringType)),param(Id(Y),ArrayType(16,StringType)),param(Id(T),ArrayType(6,ArrayType(60,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 344))

    def test_45(self):
        line = '''Class u4R4:_6{$3(_9:_){} }Class G:_{Var RD,$_7:_63;}Class PQ1_B_D{}Class _:K{_(_,_0:Array [String ,0xF5D_4];PnK6N_v,_:Boolean ){} }Class _:J{$N(_,Z_3,_:Boolean ){}Var L43:_95;}'''
        expect = '''Program([ClassDecl(Id(u4R4),Id(_6),[MethodDecl(Id($3),Static,[param(Id(_9),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(G),Id(_),[AttributeDecl(Instance,VarDecl(Id(RD),ClassType(Id(_63)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_7),ClassType(Id(_63)),NullLiteral()))]),ClassDecl(Id(PQ1_B_D),[]),ClassDecl(Id(_),Id(K),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(62932,StringType)),param(Id(_0),ArrayType(62932,StringType)),param(Id(PnK6N_v),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),Id(J),[MethodDecl(Id($N),Static,[param(Id(_),BoolType),param(Id(Z_3),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(L43),ClassType(Id(_95)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 345))

    def test_46(self):
        line = '''Class __8{Var j_,_:Array [Array [Float ,0B1010101],0153];Val $F_7_,_:_;}Class __{}Class _8{}Class _:_{Constructor (__,_,_,_D,_0,aIRP114,_8_:S;_,_:Array [Array [Float ,100],025];p:Int ;__5,o:String ;___k_O:C;r,w:Array [Array [String ,03],8_9]){} }'''
        expect = '''Program([ClassDecl(Id(__8),[AttributeDecl(Instance,VarDecl(Id(j_),ArrayType(107,ArrayType(85,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(107,ArrayType(85,FloatType)))),AttributeDecl(Static,ConstDecl(Id($F_7_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None))]),ClassDecl(Id(__),[]),ClassDecl(Id(_8),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_D),ClassType(Id(S))),param(Id(_0),ClassType(Id(S))),param(Id(aIRP114),ClassType(Id(S))),param(Id(_8_),ClassType(Id(S))),param(Id(_),ArrayType(21,ArrayType(100,FloatType))),param(Id(_),ArrayType(21,ArrayType(100,FloatType))),param(Id(p),IntType),param(Id(__5),StringType),param(Id(o),StringType),param(Id(___k_O),ClassType(Id(C))),param(Id(r),ArrayType(89,ArrayType(3,StringType))),param(Id(w),ArrayType(89,ArrayType(3,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 346))

    def test_47(self):
        line = '''Class _{Val _,_,a0_:c;Val g09_1,e:Array [Float ,030];}Class e7{}Class Ee:__{$_530(){}Constructor (__:Int ;_v4,_,_,c9:_y;f,_E:Array [Float ,0b1011100];us,a_,_6_,_,_5:q){}Var g,X,$ZtO,TNc,_:Array [String ,05_407];Val e7:L984;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(c)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(c)),None)),AttributeDecl(Instance,ConstDecl(Id(a0_),ClassType(Id(c)),None)),AttributeDecl(Instance,ConstDecl(Id(g09_1),ArrayType(24,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(24,FloatType),None))]),ClassDecl(Id(e7),[]),ClassDecl(Id(Ee),Id(__),[MethodDecl(Id($_530),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(_v4),ClassType(Id(_y))),param(Id(_),ClassType(Id(_y))),param(Id(_),ClassType(Id(_y))),param(Id(c9),ClassType(Id(_y))),param(Id(f),ArrayType(92,FloatType)),param(Id(_E),ArrayType(92,FloatType)),param(Id(us),ClassType(Id(q))),param(Id(a_),ClassType(Id(q))),param(Id(_6_),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(_5),ClassType(Id(q)))],Block([])),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(2823,StringType))),AttributeDecl(Instance,VarDecl(Id(X),ArrayType(2823,StringType))),AttributeDecl(Static,VarDecl(Id($ZtO),ArrayType(2823,StringType))),AttributeDecl(Instance,VarDecl(Id(TNc),ArrayType(2823,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2823,StringType))),AttributeDecl(Instance,ConstDecl(Id(e7),ClassType(Id(L984)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 347))

    def test_48(self):
        line = '''Class _:__15E{Var $G,_:Array [Array [String ,0B10],0X3];Constructor (_:Array [Array [Array [Float ,0113],073],93];rm_,_1cW_Mm,ke,f5_O:B;_,i_:_;_b_0:Boolean ;Z,_,G,_:Array [Int ,7_7_8];r,_,_256,f,R:_TR){}Destructor (){Continue ;}Destructor (){}kq7(Y,GN7aw_:Array [Boolean ,5]){} }Class p{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__15E),[AttributeDecl(Static,VarDecl(Id($G),ArrayType(3,ArrayType(2,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(2,StringType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(93,ArrayType(59,ArrayType(75,FloatType)))),param(Id(rm_),ClassType(Id(B))),param(Id(_1cW_Mm),ClassType(Id(B))),param(Id(ke),ClassType(Id(B))),param(Id(f5_O),ClassType(Id(B))),param(Id(_),ClassType(Id(_))),param(Id(i_),ClassType(Id(_))),param(Id(_b_0),BoolType),param(Id(Z),ArrayType(778,IntType)),param(Id(_),ArrayType(778,IntType)),param(Id(G),ArrayType(778,IntType)),param(Id(_),ArrayType(778,IntType)),param(Id(r),ClassType(Id(_TR))),param(Id(_),ClassType(Id(_TR))),param(Id(_256),ClassType(Id(_TR))),param(Id(f),ClassType(Id(_TR))),param(Id(R),ClassType(Id(_TR)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(kq7),Instance,[param(Id(Y),ArrayType(5,BoolType)),param(Id(GN7aw_),ArrayType(5,BoolType))],Block([]))]),ClassDecl(Id(p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 348))

    def test_49(self):
        line = '''Class P:r{Val $15__,K_3,$0:Array [Array [Array [Array [Array [Array [Boolean ,2],0XD],2],0X9],017],2];Var $Eq,$o,_8,$_,$M_E_:Array [Int ,017];Val $___,_P:String ;_F(p_:_5___){}_(WVhN_,m:__7_1_m_;_:Int ){} }Class B:En_{Val $_1_60_:Array [Boolean ,2];}'''
        expect = '''Program([ClassDecl(Id(P),Id(r),[AttributeDecl(Static,ConstDecl(Id($15__),ArrayType(2,ArrayType(15,ArrayType(9,ArrayType(2,ArrayType(13,ArrayType(2,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(K_3),ArrayType(2,ArrayType(15,ArrayType(9,ArrayType(2,ArrayType(13,ArrayType(2,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(2,ArrayType(15,ArrayType(9,ArrayType(2,ArrayType(13,ArrayType(2,BoolType)))))),None)),AttributeDecl(Static,VarDecl(Id($Eq),ArrayType(15,IntType))),AttributeDecl(Static,VarDecl(Id($o),ArrayType(15,IntType))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(15,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15,IntType))),AttributeDecl(Static,VarDecl(Id($M_E_),ArrayType(15,IntType))),AttributeDecl(Static,ConstDecl(Id($___),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_P),StringType,None)),MethodDecl(Id(_F),Instance,[param(Id(p_),ClassType(Id(_5___)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(WVhN_),ClassType(Id(__7_1_m_))),param(Id(m),ClassType(Id(__7_1_m_))),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(B),Id(En_),[AttributeDecl(Static,ConstDecl(Id($_1_60_),ArrayType(2,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 349))

    def test_50(self):
        line = '''Class SZN:H2{Val i:Array [String ,022];}Class aY_:_{}Class o{Constructor (){} }Class Z_:z{}Class _:A_{Var __41:Array [Int ,03];Constructor (){} }Class As5:G52{Val D_,$sk,__8,J:_9X;}'''
        expect = '''Program([ClassDecl(Id(SZN),Id(H2),[AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(18,StringType),None))]),ClassDecl(Id(aY_),Id(_),[]),ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Z_),Id(z),[]),ClassDecl(Id(_),Id(A_),[AttributeDecl(Instance,VarDecl(Id(__41),ArrayType(3,IntType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(As5),Id(G52),[AttributeDecl(Instance,ConstDecl(Id(D_),ClassType(Id(_9X)),None)),AttributeDecl(Static,ConstDecl(Id($sk),ClassType(Id(_9X)),None)),AttributeDecl(Instance,ConstDecl(Id(__8),ClassType(Id(_9X)),None)),AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(_9X)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 350))

    def test_51(self):
        line = '''Class _Z:g64{}Class _{Val C_:Array [Array [Array [Array [Float ,14_76_8],01],0b11001],01_0_1];Destructor (){ {} }}Class _49__v:I{}Class _:_{Var $d:Array [String ,0103];}Class __{}Class b:__{Constructor (){} }Class C:g{C__(){Continue ;}Val ui:Array [Array [Boolean ,0x62],0X6A];}'''
        expect = '''Program([ClassDecl(Id(_Z),Id(g64),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(C_),ArrayType(65,ArrayType(25,ArrayType(1,ArrayType(14768,FloatType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_49__v),Id(I),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($d),ArrayType(67,StringType)))]),ClassDecl(Id(__),[]),ClassDecl(Id(b),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(C),Id(g),[MethodDecl(Id(C__),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(ui),ArrayType(106,ArrayType(98,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 351))

    def test_52(self):
        line = '''Class U03_1X7_:T{Destructor (){}Destructor (){Val _,w:Array [Array [Array [Array [Boolean ,0116],0B1],0116],0X2E];}_8_8(Y,d_:Boolean ;_3,__F:_;U:_){Break ;}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(U03_1X7_),Id(T),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(46,ArrayType(78,ArrayType(1,ArrayType(78,BoolType)))),None),ConstDecl(Id(w),ArrayType(46,ArrayType(78,ArrayType(1,ArrayType(78,BoolType)))),None)])),MethodDecl(Id(_8_8),Instance,[param(Id(Y),BoolType),param(Id(d_),BoolType),param(Id(_3),ClassType(Id(_))),param(Id(__F),ClassType(Id(_))),param(Id(U),ClassType(Id(_)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 352))

    def test_53(self):
        line = '''Class _8O{a(_,M,L,_:Array [Boolean ,0B101_1]){Continue ;Return ;} }Class _lj{}Class _2W{Val $6,_:Boolean ;w5(k9_:m;E_H9,_7,n7L:String ){}Destructor (){Return ;} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_8O),[MethodDecl(Id(a),Instance,[param(Id(_),ArrayType(11,BoolType)),param(Id(M),ArrayType(11,BoolType)),param(Id(L),ArrayType(11,BoolType)),param(Id(_),ArrayType(11,BoolType))],Block([Continue,Return()]))]),ClassDecl(Id(_lj),[]),ClassDecl(Id(_2W),[AttributeDecl(Static,ConstDecl(Id($6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(w5),Instance,[param(Id(k9_),ClassType(Id(m))),param(Id(E_H9),StringType),param(Id(_7),StringType),param(Id(n7L),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 353))

    def test_54(self):
        line = '''Class K7{Var _2:_;}Class ____{}Class _1v{Constructor (_1_:Float ;__,_,__:Boolean ;_H:String ;x_H,_A_:K_){Val e3:Float ;} }Class FPx_{}Class s:_{}Class _{}Class _ex:__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(K7),[AttributeDecl(Instance,VarDecl(Id(_2),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(____),[]),ClassDecl(Id(_1v),[MethodDecl(Id(Constructor),Instance,[param(Id(_1_),FloatType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(__),BoolType),param(Id(_H),StringType),param(Id(x_H),ClassType(Id(K_))),param(Id(_A_),ClassType(Id(K_)))],Block([ConstDecl(Id(e3),FloatType,None)]))]),ClassDecl(Id(FPx_),[]),ClassDecl(Id(s),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_ex),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 354))

    def test_55(self):
        line = '''Class __:_{}Class _{Constructor (T:Z){}$_(){}_(H,D:Array [Array [Array [Float ,0X10],0x7],9];_c:Array [Array [Float ,7],0X10];__5,i_,m_38:_;__h,j_,L,M:Array [Array [Array [Array [Array [Boolean ,9_936],620],0135],0B100101],0135];P:Int ){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T),ClassType(Id(Z)))],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(H),ArrayType(9,ArrayType(7,ArrayType(16,FloatType)))),param(Id(D),ArrayType(9,ArrayType(7,ArrayType(16,FloatType)))),param(Id(_c),ArrayType(16,ArrayType(7,FloatType))),param(Id(__5),ClassType(Id(_))),param(Id(i_),ClassType(Id(_))),param(Id(m_38),ClassType(Id(_))),param(Id(__h),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(j_),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(L),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(M),ArrayType(93,ArrayType(37,ArrayType(93,ArrayType(620,ArrayType(9936,BoolType)))))),param(Id(P),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 355))

    def test_56(self):
        line = '''Class l_o_{Val $_0_6,_3O:Float ;}Class b:_82{Constructor (K:Array [Int ,0144]){Return ;}Constructor (Q:Boolean ;_:Array [Int ,0b101110];__,d3n_:Int ;dj:_;X:_){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(l_o_),[AttributeDecl(Static,ConstDecl(Id($_0_6),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_3O),FloatType,None))]),ClassDecl(Id(b),Id(_82),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(100,IntType))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(Q),BoolType),param(Id(_),ArrayType(46,IntType)),param(Id(__),IntType),param(Id(d3n_),IntType),param(Id(dj),ClassType(Id(_))),param(Id(X),ClassType(Id(_)))],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 356))

    def test_57(self):
        line = '''Class __2:_{Destructor (){} }Class _:_90__k4__{$4(R,_,_570:_;j_,L,_,Kw,Ns7Y,_5:Array [String ,06_67]){}Constructor (Po,N:Array [Boolean ,0X9_F]){}Destructor (){} }Class _____0{}Class a57:__a3{}'''
        expect = '''Program([ClassDecl(Id(__2),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_90__k4__),[MethodDecl(Id($4),Static,[param(Id(R),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_570),ClassType(Id(_))),param(Id(j_),ArrayType(439,StringType)),param(Id(L),ArrayType(439,StringType)),param(Id(_),ArrayType(439,StringType)),param(Id(Kw),ArrayType(439,StringType)),param(Id(Ns7Y),ArrayType(439,StringType)),param(Id(_5),ArrayType(439,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Po),ArrayType(159,BoolType)),param(Id(N),ArrayType(159,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_____0),[]),ClassDecl(Id(a57),Id(__a3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 357))

    def test_58(self):
        line = '''Class _:_6{Destructor (){}S(){}Constructor (_V,_6,__2_,Z:M_P;b,W_,_74D_:Array [Array [Array [Array [Array [Array [String ,02],01],28],07_1],015_7_2],0X1];v_b__:Array [String ,0x8]){Return ;}Val r__0:A;Var $_1:Array [Array [String ,0xFF_F],02];}Class _{}Class _f{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_6),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(S),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_V),ClassType(Id(M_P))),param(Id(_6),ClassType(Id(M_P))),param(Id(__2_),ClassType(Id(M_P))),param(Id(Z),ClassType(Id(M_P))),param(Id(b),ArrayType(1,ArrayType(890,ArrayType(57,ArrayType(28,ArrayType(1,ArrayType(2,StringType))))))),param(Id(W_),ArrayType(1,ArrayType(890,ArrayType(57,ArrayType(28,ArrayType(1,ArrayType(2,StringType))))))),param(Id(_74D_),ArrayType(1,ArrayType(890,ArrayType(57,ArrayType(28,ArrayType(1,ArrayType(2,StringType))))))),param(Id(v_b__),ArrayType(8,StringType))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(r__0),ClassType(Id(A)),None)),AttributeDecl(Static,VarDecl(Id($_1),ArrayType(2,ArrayType(4095,StringType))))]),ClassDecl(Id(_),[]),ClassDecl(Id(_f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 358))

    def test_59(self):
        line = '''Class _:_g{Constructor (_:Array [Int ,0B1];pe_:Array [Array [Array [Array [Array [Array [Array [String ,0xC],0X46_06],1],1],0X247],0B11101],5_42]){} }Class __L_{Val s0:Array [Array [String ,0X8],0x3];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,IntType)),param(Id(pe_),ArrayType(542,ArrayType(29,ArrayType(583,ArrayType(1,ArrayType(1,ArrayType(17926,ArrayType(12,StringType))))))))],Block([]))]),ClassDecl(Id(__L_),[AttributeDecl(Instance,ConstDecl(Id(s0),ArrayType(3,ArrayType(8,StringType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 359))

    def test_60(self):
        line = '''Class _U{$26(_Q_4T,_,_H,_,_:Array [Array [Array [Int ,0x4],0b1],0b1101];_,_:Boolean ){}Constructor (T:Array [String ,0x4]){}Val $hI,_:Array [Array [Array [Int ,05],0xC],50];Destructor (){} }Class _{Var N_,_,H:Array [Boolean ,0B1_01];Constructor (){}Constructor (t,_:Float ){}Var $06:k_;b(){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_U),[MethodDecl(Id($26),Static,[param(Id(_Q_4T),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_H),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(4,IntType)))),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(4,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($hI),ArrayType(50,ArrayType(12,ArrayType(5,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(50,ArrayType(12,ArrayType(5,IntType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(N_),ArrayType(5,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,BoolType))),AttributeDecl(Instance,VarDecl(Id(H),ArrayType(5,BoolType))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(t),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($06),ClassType(Id(k_)),NullLiteral())),MethodDecl(Id(b),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 360))

    def test_61(self):
        line = '''Class _:_F{$g3(_,__07,w:Array [Array [String ,0125],3];_l,__:Array [Float ,0125];_5,_U:Array [String ,0x44]){}Var Xv:Array [Array [Int ,04],0xB_0_DB];Destructor (){}Constructor (Q0,_r:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_F),[MethodDecl(Id($g3),Static,[param(Id(_),ArrayType(3,ArrayType(85,StringType))),param(Id(__07),ArrayType(3,ArrayType(85,StringType))),param(Id(w),ArrayType(3,ArrayType(85,StringType))),param(Id(_l),ArrayType(85,FloatType)),param(Id(__),ArrayType(85,FloatType)),param(Id(_5),ArrayType(68,StringType)),param(Id(_U),ArrayType(68,StringType))],Block([])),AttributeDecl(Instance,VarDecl(Id(Xv),ArrayType(45275,ArrayType(4,IntType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Q0),FloatType),param(Id(_r),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 361))

    def test_62(self):
        line = '''Class LA49{}Class _{}Class S:_{Var $J2,$01,__,_:Array [Float ,5];}Class _:Q{Constructor (){} }Class _{}Class c1{Constructor (){Continue ;Break ;}Var $3_,n_,$2,_34,$_,$6,$V,$_z__I_:_;}Class G{}'''
        expect = '''Program([ClassDecl(Id(LA49),[]),ClassDecl(Id(_),[]),ClassDecl(Id(S),Id(_),[AttributeDecl(Static,VarDecl(Id($J2),ArrayType(5,FloatType))),AttributeDecl(Static,VarDecl(Id($01),ArrayType(5,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(5,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,FloatType)))]),ClassDecl(Id(_),Id(Q),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(c1),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Break])),AttributeDecl(Static,VarDecl(Id($3_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_34),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($V),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_z__I_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 362))

    def test_63(self):
        line = '''Class YIL_:I_{Constructor (_:Array [Array [String ,0B1011000],03];Cn:Array [Array [Array [Float ,0b110000],0376],9_7_1];_:Boolean ;B:_pZ;X_F__,_:Float ){} }Class _hl6_:EVA7{Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(YIL_),Id(I_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(88,StringType))),param(Id(Cn),ArrayType(971,ArrayType(254,ArrayType(48,FloatType)))),param(Id(_),BoolType),param(Id(B),ClassType(Id(_pZ))),param(Id(X_F__),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_hl6_),Id(EVA7),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 363))

    def test_64(self):
        line = '''Class r{Val $5253_,$Z:X6;}Class T4:p{Destructor (){}Destructor (){Val P:Float ;} }Class m7_5hx8:p_{Var $lm:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b10],0x7],0x44],0x7_C_B],9],0xE29_C8],034],05_6_1];}Class G{Cc(){} }'''
        expect = '''Program([ClassDecl(Id(r),[AttributeDecl(Static,ConstDecl(Id($5253_),ClassType(Id(X6)),None)),AttributeDecl(Static,ConstDecl(Id($Z),ClassType(Id(X6)),None))]),ClassDecl(Id(T4),Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(P),FloatType,None)]))]),ClassDecl(Id(m7_5hx8),Id(p_),[AttributeDecl(Static,VarDecl(Id($lm),ArrayType(369,ArrayType(28,ArrayType(928200,ArrayType(9,ArrayType(1995,ArrayType(68,ArrayType(7,ArrayType(2,BoolType))))))))))]),ClassDecl(Id(G),[MethodDecl(Id(Cc),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 364))

    def test_65(self):
        line = '''Class __:_{}Class _{Var $6,_,$4,$_,$7,$_:Int ;}Class v_{}Class Z:v8_{}Class w_{Constructor (){}Var $8x_W_,$mX,wy_7_,$s,S_9:F;Val $7_Y:Int ;Constructor (l,mT,J0J,FX:Float ;_6L:Float ;_3Q_,e,EsR:Float ;W9v_6__:Array [Int ,0xB];_c____,_:s){Var k,_,D8x:_;} }Class _0s_w4:_{}Class ___67_305__:_{Val LO7:Boolean ;}Class x2:s_9W{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($6),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($4),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(v_),[]),ClassDecl(Id(Z),Id(v8_),[]),ClassDecl(Id(w_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($8x_W_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($mX),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(wy_7_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($s),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S_9),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($7_Y),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(l),FloatType),param(Id(mT),FloatType),param(Id(J0J),FloatType),param(Id(FX),FloatType),param(Id(_6L),FloatType),param(Id(_3Q_),FloatType),param(Id(e),FloatType),param(Id(EsR),FloatType),param(Id(W9v_6__),ArrayType(11,IntType)),param(Id(_c____),ClassType(Id(s))),param(Id(_),ClassType(Id(s)))],Block([VarDecl(Id(k),ClassType(Id(_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_)),NullLiteral()),VarDecl(Id(D8x),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(_0s_w4),Id(_),[]),ClassDecl(Id(___67_305__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(LO7),BoolType,None))]),ClassDecl(Id(x2),Id(s_9W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 365))

    def test_66(self):
        line = '''Class _:mo_{Var _,_:Boolean ;Var l_d:m;Constructor (_69,_:Array [Array [Boolean ,44_9],7];_:Array [Array [Boolean ,0x5F],0X4C]){Return ;}$U(M_9:Array [Int ,1];MK7b_d39:L;S_:Array [String ,0b11]){Break ;{} }Val Az,$_:j;}'''
        expect = '''Program([ClassDecl(Id(_),Id(mo_),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(l_d),ClassType(Id(m)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_69),ArrayType(7,ArrayType(449,BoolType))),param(Id(_),ArrayType(7,ArrayType(449,BoolType))),param(Id(_),ArrayType(76,ArrayType(95,BoolType)))],Block([Return()])),MethodDecl(Id($U),Static,[param(Id(M_9),ArrayType(1,IntType)),param(Id(MK7b_d39),ClassType(Id(L))),param(Id(S_),ArrayType(3,StringType))],Block([Break,Block([])])),AttributeDecl(Instance,ConstDecl(Id(Az),ClassType(Id(j)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(j)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 366))

    def test_67(self):
        line = '''Class ____{}Class _{Constructor (X2,__:KI55;_:x;_6m8,__W,n0:Boolean ;N5:_){} }Class _3:p5Q{Val $10_:Boolean ;_6(){} }Class D{}Class csY4_:d{}Class C:_{}Class S:_q{}'''
        expect = '''Program([ClassDecl(Id(____),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(X2),ClassType(Id(KI55))),param(Id(__),ClassType(Id(KI55))),param(Id(_),ClassType(Id(x))),param(Id(_6m8),BoolType),param(Id(__W),BoolType),param(Id(n0),BoolType),param(Id(N5),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_3),Id(p5Q),[AttributeDecl(Static,ConstDecl(Id($10_),BoolType,None)),MethodDecl(Id(_6),Instance,[],Block([]))]),ClassDecl(Id(D),[]),ClassDecl(Id(csY4_),Id(d),[]),ClassDecl(Id(C),Id(_),[]),ClassDecl(Id(S),Id(_q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 367))

    def test_68(self):
        line = '''Class s:__{Var $_,$_:String ;}Class O2:_P_J1{Constructor (t:n;_n,_,E_4:Array [Array [Array [Array [Float ,0X26],03],0b11111],01_3]){Break ;}Destructor (){}Val _,d_K_:Float ;Val shE:Array [Array [Array [Array [Int ,0B1010],0x45],0x45],0B1010];Var Y_i__i_:Array [String ,03];Var $ZN,Z:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(s),Id(__),[AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType))]),ClassDecl(Id(O2),Id(_P_J1),[MethodDecl(Id(Constructor),Instance,[param(Id(t),ClassType(Id(n))),param(Id(_n),ArrayType(11,ArrayType(31,ArrayType(3,ArrayType(38,FloatType))))),param(Id(_),ArrayType(11,ArrayType(31,ArrayType(3,ArrayType(38,FloatType))))),param(Id(E_4),ArrayType(11,ArrayType(31,ArrayType(3,ArrayType(38,FloatType)))))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(d_K_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(shE),ArrayType(10,ArrayType(69,ArrayType(69,ArrayType(10,IntType)))),None)),AttributeDecl(Instance,VarDecl(Id(Y_i__i_),ArrayType(3,StringType))),AttributeDecl(Static,VarDecl(Id($ZN),BoolType)),AttributeDecl(Instance,VarDecl(Id(Z),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 368))

    def test_69(self):
        line = '''Class a{$x(b,PDi,_C,_8_:Array [String ,0b1100000];_,_s_v,_1:_){Break ;Continue ;} }Class _{Constructor (){}_(J_a_23o7,j_:Array [Array [Array [Boolean ,01],5_3_4_4],036];_V:Array [Int ,060_6];_,G:Array [Int ,02_53];Kk:Float ){}Constructor (q:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id($x),Static,[param(Id(b),ArrayType(96,StringType)),param(Id(PDi),ArrayType(96,StringType)),param(Id(_C),ArrayType(96,StringType)),param(Id(_8_),ArrayType(96,StringType)),param(Id(_),ClassType(Id(_))),param(Id(_s_v),ClassType(Id(_))),param(Id(_1),ClassType(Id(_)))],Block([Break,Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(J_a_23o7),ArrayType(30,ArrayType(5344,ArrayType(1,BoolType)))),param(Id(j_),ArrayType(30,ArrayType(5344,ArrayType(1,BoolType)))),param(Id(_V),ArrayType(390,IntType)),param(Id(_),ArrayType(171,IntType)),param(Id(G),ArrayType(171,IntType)),param(Id(Kk),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(q),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 369))

    def test_70(self):
        line = '''Class _:a__{Constructor (_:Array [Array [Boolean ,48],033];F1a0p,M,__:X;_,f:Array [Array [Array [Array [Array [Array [Array [Float ,033],0x54],03],6],48],363_2_1_4_3],0b1];_,_,Q:_4v_0_;W:Array [Array [String ,0x9],48];i__,T,_,A:_9;U,_W:_){}Destructor (){Val _,u9_X:Array [Int ,0B1_0_1];} }'''
        expect = '''Program([ClassDecl(Id(_),Id(a__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(27,ArrayType(48,BoolType))),param(Id(F1a0p),ClassType(Id(X))),param(Id(M),ClassType(Id(X))),param(Id(__),ClassType(Id(X))),param(Id(_),ArrayType(1,ArrayType(3632143,ArrayType(48,ArrayType(6,ArrayType(3,ArrayType(84,ArrayType(27,FloatType)))))))),param(Id(f),ArrayType(1,ArrayType(3632143,ArrayType(48,ArrayType(6,ArrayType(3,ArrayType(84,ArrayType(27,FloatType)))))))),param(Id(_),ClassType(Id(_4v_0_))),param(Id(_),ClassType(Id(_4v_0_))),param(Id(Q),ClassType(Id(_4v_0_))),param(Id(W),ArrayType(48,ArrayType(9,StringType))),param(Id(i__),ClassType(Id(_9))),param(Id(T),ClassType(Id(_9))),param(Id(_),ClassType(Id(_9))),param(Id(A),ClassType(Id(_9))),param(Id(U),ClassType(Id(_))),param(Id(_W),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(5,IntType),None),ConstDecl(Id(u9_X),ArrayType(5,IntType),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 370))

    def test_71(self):
        line = '''Class _0_:_5{}Class _WD:D___8{$91_(_,M26,S,__:Array [String ,0b11110]){} }Class _:__8ip{}Class k26kFw:_1{Constructor (Z:Int ;_32,CN:Array [Float ,0X13]){}Val _:J5;Constructor (){}$d(){} }Class _:f{}'''
        expect = '''Program([ClassDecl(Id(_0_),Id(_5),[]),ClassDecl(Id(_WD),Id(D___8),[MethodDecl(Id($91_),Static,[param(Id(_),ArrayType(30,StringType)),param(Id(M26),ArrayType(30,StringType)),param(Id(S),ArrayType(30,StringType)),param(Id(__),ArrayType(30,StringType))],Block([]))]),ClassDecl(Id(_),Id(__8ip),[]),ClassDecl(Id(k26kFw),Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),IntType),param(Id(_32),ArrayType(19,FloatType)),param(Id(CN),ArrayType(19,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(J5)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($d),Static,[],Block([]))]),ClassDecl(Id(_),Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 371))

    def test_72(self):
        line = '''Class P{Var _:Array [Array [Array [Array [Array [String ,06_3_3],0B11_1_1],0X46],2],062];Var $___:Int ;}Class __:baZ{Destructor (){}Val $5:Array [Array [Array [Array [Array [Array [Boolean ,02],9],0x1A],024],0b1000],04_0];}'''
        expect = '''Program([ClassDecl(Id(P),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(50,ArrayType(2,ArrayType(70,ArrayType(15,ArrayType(411,StringType))))))),AttributeDecl(Static,VarDecl(Id($___),IntType))]),ClassDecl(Id(__),Id(baZ),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(32,ArrayType(8,ArrayType(20,ArrayType(26,ArrayType(9,ArrayType(2,BoolType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 372))

    def test_73(self):
        line = '''Class _:ve__Q_9_{}Class _:H1{Constructor (__,_,q_T_0:Array [Int ,58];_W,J,_1,_s_:Array [Array [Array [Array [Array [Array [String ,6_8_41_9],0b1],93],58],58],3_3];z,t:Array [Boolean ,047];_8:N8___){ {}{} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(ve__Q_9_),[]),ClassDecl(Id(_),Id(H1),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(58,IntType)),param(Id(_),ArrayType(58,IntType)),param(Id(q_T_0),ArrayType(58,IntType)),param(Id(_W),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(J),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(_1),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(_s_),ArrayType(33,ArrayType(58,ArrayType(58,ArrayType(93,ArrayType(1,ArrayType(68419,StringType))))))),param(Id(z),ArrayType(39,BoolType)),param(Id(t),ArrayType(39,BoolType)),param(Id(_8),ClassType(Id(N8___)))],Block([Block([]),Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 373))

    def test_74(self):
        line = '''Class a__1:u{}Class ePz{}Class _946{Destructor (){} }Class _{$9(){Continue ;}Constructor (){}Val e:Array [String ,0b101];Val $4:Array [Array [Array [Array [Array [Array [Array [Float ,87_6_92],0X46],0X5],0b1_11],75],0b101],0b101];}Class e{}Class L_0A{Destructor (){Continue ;Return ;Return ;} }Class _{Val Y,$___:Array [Boolean ,021];}'''
        expect = '''Program([ClassDecl(Id(a__1),Id(u),[]),ClassDecl(Id(ePz),[]),ClassDecl(Id(_946),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($9),Static,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(5,StringType),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(5,ArrayType(5,ArrayType(75,ArrayType(7,ArrayType(5,ArrayType(70,ArrayType(87692,FloatType))))))),None))]),ClassDecl(Id(e),[]),ClassDecl(Id(L_0A),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return(),Return()]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(17,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($___),ArrayType(17,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 374))

    def test_75(self):
        line = '''Class L{}Class _f{Val $6,$8,X,cX0,$9,$l,__r2_y_:Array [String ,0B111100];$__(){}Val $y,$C:Boolean ;Var $h:Array [Array [Array [Array [Array [String ,0X31],0X31],0B111100],020],0xB];}'''
        expect = '''Program([ClassDecl(Id(L),[]),ClassDecl(Id(_f),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(cX0),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($l),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(__r2_y_),ArrayType(60,StringType),None)),MethodDecl(Id($__),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($y),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($C),BoolType,None)),AttributeDecl(Static,VarDecl(Id($h),ArrayType(11,ArrayType(16,ArrayType(60,ArrayType(49,ArrayType(49,StringType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 375))

    def test_76(self):
        line = '''Class _:_{}Class f__:u799{$K_z3__(){Continue ;_::$50F();Continue ;}Constructor (){Return ;} }Class qX9U:K76{$8(X:Array [Boolean ,0X44];_,_:Array [Int ,652];F_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(f__),Id(u799),[MethodDecl(Id($K_z3__),Static,[],Block([Continue,Call(Id(_),Id($50F),[]),Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))]),ClassDecl(Id(qX9U),Id(K76),[MethodDecl(Id($8),Static,[param(Id(X),ArrayType(68,BoolType)),param(Id(_),ArrayType(652,IntType)),param(Id(_),ArrayType(652,IntType)),param(Id(F_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 376))

    def test_77(self):
        line = '''Class b24U{Var $7_,$_k_:Int ;BP80(_:Array [Float ,013_13_4];_:Array [Array [Boolean ,021],29];d2D_,_:Array [String ,60]){}q(L9_,_:Array [Array [String ,60],10]){} }Class A0{}'''
        expect = '''Program([ClassDecl(Id(b24U),[AttributeDecl(Static,VarDecl(Id($7_),IntType)),AttributeDecl(Static,VarDecl(Id($_k_),IntType)),MethodDecl(Id(BP80),Instance,[param(Id(_),ArrayType(5724,FloatType)),param(Id(_),ArrayType(29,ArrayType(17,BoolType))),param(Id(d2D_),ArrayType(60,StringType)),param(Id(_),ArrayType(60,StringType))],Block([])),MethodDecl(Id(q),Instance,[param(Id(L9_),ArrayType(10,ArrayType(60,StringType))),param(Id(_),ArrayType(10,ArrayType(60,StringType)))],Block([]))]),ClassDecl(Id(A0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 377))

    def test_78(self):
        line = '''Class _2{Var A:Array [Array [Array [Float ,05],3],0b10];__(_:Array [Array [Array [Array [Array [Array [Float ,0x12],0x5],0x12],45],045],0b1];_:_;__,__:_N_){} }Class _5B:qv_{Var _:Tc9_;}Class __:_S{}Class V___30_{}'''
        expect = '''Program([ClassDecl(Id(_2),[AttributeDecl(Instance,VarDecl(Id(A),ArrayType(2,ArrayType(3,ArrayType(5,FloatType))))),MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(1,ArrayType(37,ArrayType(45,ArrayType(18,ArrayType(5,ArrayType(18,FloatType))))))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_N_))),param(Id(__),ClassType(Id(_N_)))],Block([]))]),ClassDecl(Id(_5B),Id(qv_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(Tc9_)),NullLiteral()))]),ClassDecl(Id(__),Id(_S),[]),ClassDecl(Id(V___30_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 378))

    def test_79(self):
        line = '''Class _____{B4(_:Array [String ,0x50];__J1,_:Array [Array [Array [Array [Array [Array [Int ,0B1],06_3],2_7],0b100111],0B1_1_1],0b100111];D2,d,__4,_:e;d,p,_a_9pQ,Ni7__:_;_:_){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_____),[MethodDecl(Id(B4),Instance,[param(Id(_),ArrayType(80,StringType)),param(Id(__J1),ArrayType(39,ArrayType(7,ArrayType(39,ArrayType(27,ArrayType(51,ArrayType(1,IntType))))))),param(Id(_),ArrayType(39,ArrayType(7,ArrayType(39,ArrayType(27,ArrayType(51,ArrayType(1,IntType))))))),param(Id(D2),ClassType(Id(e))),param(Id(d),ClassType(Id(e))),param(Id(__4),ClassType(Id(e))),param(Id(_),ClassType(Id(e))),param(Id(d),ClassType(Id(_))),param(Id(p),ClassType(Id(_))),param(Id(_a_9pQ),ClassType(Id(_))),param(Id(Ni7__),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 379))

    def test_80(self):
        line = '''Class C:GIT{}Class R:k{}Class h:d{Val vc0,$1,$x,$_r369_:_Q_7;Constructor (_:_K;_2:Boolean ;w,l:Int ;_:Array [Array [Array [Array [Int ,0B101011],0x1D],0b1100100],0XC];J8,_:Int ;_b,_P:_){} }'''
        expect = '''Program([ClassDecl(Id(C),Id(GIT),[]),ClassDecl(Id(R),Id(k),[]),ClassDecl(Id(h),Id(d),[AttributeDecl(Instance,ConstDecl(Id(vc0),ClassType(Id(_Q_7)),None)),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_Q_7)),None)),AttributeDecl(Static,ConstDecl(Id($x),ClassType(Id(_Q_7)),None)),AttributeDecl(Static,ConstDecl(Id($_r369_),ClassType(Id(_Q_7)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_K))),param(Id(_2),BoolType),param(Id(w),IntType),param(Id(l),IntType),param(Id(_),ArrayType(12,ArrayType(100,ArrayType(29,ArrayType(43,IntType))))),param(Id(J8),IntType),param(Id(_),IntType),param(Id(_b),ClassType(Id(_))),param(Id(_P),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 380))

    def test_81(self):
        line = '''Class Z{}Class ZA{Constructor (){}Destructor (){} }Class _j_:_{}Class _i:_91r{}Class x{Val _,$p,$X:g;Var h3u_4K__,$39,$_:Array [Array [Float ,0x43],0b11_0];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Z),[]),ClassDecl(Id(ZA),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_j_),Id(_),[]),ClassDecl(Id(_i),Id(_91r),[]),ClassDecl(Id(x),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(g)),None)),AttributeDecl(Static,ConstDecl(Id($p),ClassType(Id(g)),None)),AttributeDecl(Static,ConstDecl(Id($X),ClassType(Id(g)),None)),AttributeDecl(Instance,VarDecl(Id(h3u_4K__),ArrayType(6,ArrayType(67,FloatType)))),AttributeDecl(Static,VarDecl(Id($39),ArrayType(6,ArrayType(67,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(6,ArrayType(67,FloatType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 381))

    def test_82(self):
        line = '''Class _:E{Constructor (_,J:_W_;_q,_e1_:Array [Float ,0b111000];m:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0X3],0X1],0X5],25],0x1],0xB_E],04],97_1],05],03];l,_:Array [Array [String ,0b1],0b101];_5_,_9_:S;J,_,U:J8){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_W_))),param(Id(J),ClassType(Id(_W_))),param(Id(_q),ArrayType(56,FloatType)),param(Id(_e1_),ArrayType(56,FloatType)),param(Id(m),ArrayType(3,ArrayType(5,ArrayType(971,ArrayType(4,ArrayType(190,ArrayType(1,ArrayType(25,ArrayType(5,ArrayType(1,ArrayType(3,StringType))))))))))),param(Id(l),ArrayType(5,ArrayType(1,StringType))),param(Id(_),ArrayType(5,ArrayType(1,StringType))),param(Id(_5_),ClassType(Id(S))),param(Id(_9_),ClassType(Id(S))),param(Id(J),ClassType(Id(J8))),param(Id(_),ClassType(Id(J8))),param(Id(U),ClassType(Id(J8)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 382))

    def test_83(self):
        line = '''Class _0:_2{Constructor (_j,uW:Array [Array [Array [String ,0b100],0x4C],0B1010000];L:Float ;YW:Array [Boolean ,0B1010000];Ek,__,_:Dju_;Q_3_5_,_:Boolean ;_a5,L:Float ;_,_:Array [Float ,3_6_407]){}Val _4_:Float ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_0),Id(_2),[MethodDecl(Id(Constructor),Instance,[param(Id(_j),ArrayType(80,ArrayType(76,ArrayType(4,StringType)))),param(Id(uW),ArrayType(80,ArrayType(76,ArrayType(4,StringType)))),param(Id(L),FloatType),param(Id(YW),ArrayType(80,BoolType)),param(Id(Ek),ClassType(Id(Dju_))),param(Id(__),ClassType(Id(Dju_))),param(Id(_),ClassType(Id(Dju_))),param(Id(Q_3_5_),BoolType),param(Id(_),BoolType),param(Id(_a5),FloatType),param(Id(L),FloatType),param(Id(_),ArrayType(36407,FloatType)),param(Id(_),ArrayType(36407,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_4_),FloatType,None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 383))

    def test_84(self):
        line = '''Class _:__8{Constructor (F6,l,m72:Int ;L5_:Array [Array [Array [Int ,33],0b1001],0b101];p,B9,_l:Array [Float ,82];_E:Array [Float ,0x23]){Continue ;} }Class X{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(__8),[MethodDecl(Id(Constructor),Instance,[param(Id(F6),IntType),param(Id(l),IntType),param(Id(m72),IntType),param(Id(L5_),ArrayType(5,ArrayType(9,ArrayType(33,IntType)))),param(Id(p),ArrayType(82,FloatType)),param(Id(B9),ArrayType(82,FloatType)),param(Id(_l),ArrayType(82,FloatType)),param(Id(_E),ArrayType(35,FloatType))],Block([Continue]))]),ClassDecl(Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 384))

    def test_85(self):
        line = '''Class _7{Constructor (_:x1Z;X:Array [Array [Array [Array [Int ,0b11_0],0b1100000],07],0x22];K_,i,Rd:Boolean ){} }Class __{$7t(SR:J;H_:Array [Array [Array [Boolean ,31],010],0X20];J_Eq8:String ){}Var V:Array [Float ,0b1];}'''
        expect = '''Program([ClassDecl(Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(x1Z))),param(Id(X),ArrayType(34,ArrayType(7,ArrayType(96,ArrayType(6,IntType))))),param(Id(K_),BoolType),param(Id(i),BoolType),param(Id(Rd),BoolType)],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($7t),Static,[param(Id(SR),ClassType(Id(J))),param(Id(H_),ArrayType(32,ArrayType(8,ArrayType(31,BoolType)))),param(Id(J_Eq8),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(V),ArrayType(1,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 385))

    def test_86(self):
        line = '''Class __D_{Constructor (_l50,t,f:String ;D08:Int ;S:Array [Array [Boolean ,56],0x6];_:Boolean ;_i:m){Continue ;Val _8a__,_:Array [Float ,6];Val X_9_:Boolean ;Continue ;}Var _,_:Array [Array [Boolean ,56],076];}'''
        expect = '''Program([ClassDecl(Id(__D_),[MethodDecl(Id(Constructor),Instance,[param(Id(_l50),StringType),param(Id(t),StringType),param(Id(f),StringType),param(Id(D08),IntType),param(Id(S),ArrayType(6,ArrayType(56,BoolType))),param(Id(_),BoolType),param(Id(_i),ClassType(Id(m)))],Block([Continue,ConstDecl(Id(_8a__),ArrayType(6,FloatType),None),ConstDecl(Id(_),ArrayType(6,FloatType),None),ConstDecl(Id(X_9_),BoolType,None),Continue])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(62,ArrayType(56,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(62,ArrayType(56,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 386))

    def test_87(self):
        line = '''Class SX:_O{Val $H,$Q5,_:Array [String ,0x41];Constructor (){Break ;Var _8_,a,jJS:i;}Var _,$F:Array [Array [Boolean ,01],36];}Class W_{Constructor (__:Array [Boolean ,0B1010111]){}Constructor (_IU_:_){} }Class w_{Val t:Array [Boolean ,0X3D];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(SX),Id(_O),[AttributeDecl(Static,ConstDecl(Id($H),ArrayType(65,StringType),None)),AttributeDecl(Static,ConstDecl(Id($Q5),ArrayType(65,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(65,StringType),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break,VarDecl(Id(_8_),ClassType(Id(i)),NullLiteral()),VarDecl(Id(a),ClassType(Id(i)),NullLiteral()),VarDecl(Id(jJS),ClassType(Id(i)),NullLiteral())])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(36,ArrayType(1,BoolType)))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(36,ArrayType(1,BoolType))))]),ClassDecl(Id(W_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(87,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_IU_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(w_),[AttributeDecl(Instance,ConstDecl(Id(t),ArrayType(61,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 387))

    def test_88(self):
        line = '''Class m__{Val _,$4s_,lN:z;$8(){Continue ;}Val $10:E;$__(KG_5:Array [Boolean ,32];H7,F:String ;O7ay_:Array [Array [Float ,0141],0X1C];_,Y9:Int ;_,X2,C,nD_,_:E;y0_S_:_){Return ;}Val _6,_g_Fk:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(m__),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(z)),None)),AttributeDecl(Static,ConstDecl(Id($4s_),ClassType(Id(z)),None)),AttributeDecl(Instance,ConstDecl(Id(lN),ClassType(Id(z)),None)),MethodDecl(Id($8),Static,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($10),ClassType(Id(E)),None)),MethodDecl(Id($__),Static,[param(Id(KG_5),ArrayType(32,BoolType)),param(Id(H7),StringType),param(Id(F),StringType),param(Id(O7ay_),ArrayType(28,ArrayType(97,FloatType))),param(Id(_),IntType),param(Id(Y9),IntType),param(Id(_),ClassType(Id(E))),param(Id(X2),ClassType(Id(E))),param(Id(C),ClassType(Id(E))),param(Id(nD_),ClassType(Id(E))),param(Id(_),ClassType(Id(E))),param(Id(y0_S_),ClassType(Id(_)))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(_6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_g_Fk),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 388))

    def test_89(self):
        line = '''Class f:w{}Class c{}Class E{Constructor (D:Array [Array [Float ,014_7],66];_,_,H,_2,_:Array [Float ,0B110000];_,xNa_:Array [Int ,055];D:Boolean ;__79,_h7,_:Array [Array [Array [Int ,03_2],055],0b110111];_:Array [Float ,3];k_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(w),[]),ClassDecl(Id(c),[]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(D),ArrayType(66,ArrayType(103,FloatType))),param(Id(_),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(H),ArrayType(48,FloatType)),param(Id(_2),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(_),ArrayType(45,IntType)),param(Id(xNa_),ArrayType(45,IntType)),param(Id(D),BoolType),param(Id(__79),ArrayType(55,ArrayType(45,ArrayType(26,IntType)))),param(Id(_h7),ArrayType(55,ArrayType(45,ArrayType(26,IntType)))),param(Id(_),ArrayType(55,ArrayType(45,ArrayType(26,IntType)))),param(Id(_),ArrayType(3,FloatType)),param(Id(k_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 389))

    def test_90(self):
        line = '''Class W{}Class Q9{}Class _4_{Constructor (_:Array [Boolean ,0b1];_,_:I8_6;_,_:String ;_,p,_,J,___5,KN:Array [Array [Array [Array [Array [Int ,28],28],0b110100],031],031]){} }'''
        expect = '''Program([ClassDecl(Id(W),[]),ClassDecl(Id(Q9),[]),ClassDecl(Id(_4_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(I8_6))),param(Id(_),ClassType(Id(I8_6))),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(p),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(_),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(J),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(___5),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType)))))),param(Id(KN),ArrayType(25,ArrayType(25,ArrayType(52,ArrayType(28,ArrayType(28,IntType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 390))

    def test_91(self):
        line = '''Class L{b(_,__W:Array [Array [Array [Boolean ,0x38],0x38],4169_4];y,I_4_,_,i,O1,C,I3:_;_2t,_e:Array [Array [Array [Array [Array [Boolean ,0X4D],0b1000001],04],01],0B1000100]){} }Class _R_:L{Constructor (){ {} }Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id(b),Instance,[param(Id(_),ArrayType(41694,ArrayType(56,ArrayType(56,BoolType)))),param(Id(__W),ArrayType(41694,ArrayType(56,ArrayType(56,BoolType)))),param(Id(y),ClassType(Id(_))),param(Id(I_4_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(O1),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(I3),ClassType(Id(_))),param(Id(_2t),ArrayType(68,ArrayType(1,ArrayType(4,ArrayType(65,ArrayType(77,BoolType)))))),param(Id(_e),ArrayType(68,ArrayType(1,ArrayType(4,ArrayType(65,ArrayType(77,BoolType))))))],Block([]))]),ClassDecl(Id(_R_),Id(L),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 391))

    def test_92(self):
        line = '''Class _:XB3{Var _:__;}Class V8_3:_Z_2{}Class _{}Class _c:S{Constructor (_,w3:_;S_,_:Array [Boolean ,8];R1,_3tV:Array [Array [Array [Array [Array [Array [String ,6],6],0B1_0],0xA0],72],0B1];S,_F5r_:_){} }Class _{Var $s:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(XB3),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__)),NullLiteral()))]),ClassDecl(Id(V8_3),Id(_Z_2),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_c),Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(w3),ClassType(Id(_))),param(Id(S_),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType)),param(Id(R1),ArrayType(1,ArrayType(72,ArrayType(160,ArrayType(2,ArrayType(6,ArrayType(6,StringType))))))),param(Id(_3tV),ArrayType(1,ArrayType(72,ArrayType(160,ArrayType(2,ArrayType(6,ArrayType(6,StringType))))))),param(Id(S),ClassType(Id(_))),param(Id(_F5r_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($s),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 392))

    def test_93(self):
        line = '''Class _:_{Val $____:Boolean ;Destructor (){}Constructor (_vf_j_p:String ;Jk,_,_,_:Array [Array [String ,94],0X8]){}Var $_6VEO0e93:Array [Array [Boolean ,9_0],0x11];}Class _4x:__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($____),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_vf_j_p),StringType),param(Id(Jk),ArrayType(8,ArrayType(94,StringType))),param(Id(_),ArrayType(8,ArrayType(94,StringType))),param(Id(_),ArrayType(8,ArrayType(94,StringType))),param(Id(_),ArrayType(8,ArrayType(94,StringType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_6VEO0e93),ArrayType(17,ArrayType(90,BoolType))))]),ClassDecl(Id(_4x),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 393))

    def test_94(self):
        line = '''Class F{XvI(Z,F0:Boolean ;CV:_16;o_:Array [Array [Array [Array [Array [Int ,6],0b1_0_0],0x60],6],0x60];_:Array [Array [String ,0B1_0],6];_2,Y,_z,P_r,U1,_2_:Int ;s_:Array [Array [Array [Int ,05],6],0b1000011];YL,f3:Array [Array [String ,6],5];_35,_,_:Int ){} }Class n2:_Z{Constructor (){} }Class _:F{}'''
        expect = '''Program([ClassDecl(Id(F),[MethodDecl(Id(XvI),Instance,[param(Id(Z),BoolType),param(Id(F0),BoolType),param(Id(CV),ClassType(Id(_16))),param(Id(o_),ArrayType(96,ArrayType(6,ArrayType(96,ArrayType(4,ArrayType(6,IntType)))))),param(Id(_),ArrayType(6,ArrayType(2,StringType))),param(Id(_2),IntType),param(Id(Y),IntType),param(Id(_z),IntType),param(Id(P_r),IntType),param(Id(U1),IntType),param(Id(_2_),IntType),param(Id(s_),ArrayType(67,ArrayType(6,ArrayType(5,IntType)))),param(Id(YL),ArrayType(5,ArrayType(6,StringType))),param(Id(f3),ArrayType(5,ArrayType(6,StringType))),param(Id(_35),IntType),param(Id(_),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(n2),Id(_Z),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(F),[])])'''
        self.assertTrue(TestAST.test(line, expect, 394))

    def test_95(self):
        line = '''Class g{Constructor (_:q;___5U,_9:_){Continue ;}Val _,$c:Array [Float ,06_7];}Class U{Val U,$o_:W;f1(){Return ;Continue ;} }Class __{Z4J(){} }Class _{}Class j:a__{Constructor (){Break ;Var __,L,A2,_,_:W;Val _1__,_:String ;} }Class W{}Class _{}'''
        expect = '''Program([ClassDecl(Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(q))),param(Id(___5U),ClassType(Id(_))),param(Id(_9),ClassType(Id(_)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(55,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(55,FloatType),None))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(U),ClassType(Id(W)),None)),AttributeDecl(Static,ConstDecl(Id($o_),ClassType(Id(W)),None)),MethodDecl(Id(f1),Instance,[],Block([Return(),Continue]))]),ClassDecl(Id(__),[MethodDecl(Id(Z4J),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(j),Id(a__),[MethodDecl(Id(Constructor),Instance,[],Block([Break,VarDecl(Id(__),ClassType(Id(W)),NullLiteral()),VarDecl(Id(L),ClassType(Id(W)),NullLiteral()),VarDecl(Id(A2),ClassType(Id(W)),NullLiteral()),VarDecl(Id(_),ClassType(Id(W)),NullLiteral()),VarDecl(Id(_),ClassType(Id(W)),NullLiteral()),ConstDecl(Id(_1__),StringType,None),ConstDecl(Id(_),StringType,None)]))]),ClassDecl(Id(W),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 395))

    def test_96(self):
        line = '''Class M27:_B5{$_q_5_(q3:_;G:Array [Array [Array [Array [Array [Array [Boolean ,0b110010],0b110010],0X7_7],0x78],0b110010],0X7]){} }Class _:_6{}Class _:O{}Class L:w__I{}Class l{Var $__,$I:o;Val _2,$Y,$q:l;}'''
        expect = '''Program([ClassDecl(Id(M27),Id(_B5),[MethodDecl(Id($_q_5_),Static,[param(Id(q3),ClassType(Id(_))),param(Id(G),ArrayType(7,ArrayType(50,ArrayType(120,ArrayType(119,ArrayType(50,ArrayType(50,BoolType)))))))],Block([]))]),ClassDecl(Id(_),Id(_6),[]),ClassDecl(Id(_),Id(O),[]),ClassDecl(Id(L),Id(w__I),[]),ClassDecl(Id(l),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(o)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($I),ClassType(Id(o)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_2),ClassType(Id(l)),None)),AttributeDecl(Static,ConstDecl(Id($Y),ClassType(Id(l)),None)),AttributeDecl(Static,ConstDecl(Id($q),ClassType(Id(l)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 396))

    def test_97(self):
        line = '''Class _8_:r1W{Constructor (V,___23:Array [Array [Boolean ,53],0B1010011];_:Array [Boolean ,0x1A]){}_m4(){}Var $_6:Array [Int ,02];Destructor (){} }Class _2_7:i{}Class _:_5{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8_),Id(r1W),[MethodDecl(Id(Constructor),Instance,[param(Id(V),ArrayType(83,ArrayType(53,BoolType))),param(Id(___23),ArrayType(83,ArrayType(53,BoolType))),param(Id(_),ArrayType(26,BoolType))],Block([])),MethodDecl(Id(_m4),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_6),ArrayType(2,IntType))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_2_7),Id(i),[]),ClassDecl(Id(_),Id(_5),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 397))

    def test_98(self):
        line = '''Class Z:Z{_(){}K8q(j_:Int ;c:Array [Array [Int ,8],0b1];_:Float ;Gh,P_,_,_,_,o:Array [Array [Int ,0X46],0b1_1_1];__:Array [Array [Array [Float ,0B1001000],077_7],91];Y_:Array [Int ,04];d_d3,_1,_n988,N,Q:Array [Int ,0X46]){fWl::$4();}E(o,__,_:_;K,MX,e:Array [Array [Array [Array [Boolean ,0B11_111],066],0X46],0XA];_4:Array [String ,0x5C];_,_:F79v){}$_(){ {}Continue ;} }Class X{KS(_8,__:e_){} }'''
        expect = '''Program([ClassDecl(Id(Z),Id(Z),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(K8q),Instance,[param(Id(j_),IntType),param(Id(c),ArrayType(1,ArrayType(8,IntType))),param(Id(_),FloatType),param(Id(Gh),ArrayType(7,ArrayType(70,IntType))),param(Id(P_),ArrayType(7,ArrayType(70,IntType))),param(Id(_),ArrayType(7,ArrayType(70,IntType))),param(Id(_),ArrayType(7,ArrayType(70,IntType))),param(Id(_),ArrayType(7,ArrayType(70,IntType))),param(Id(o),ArrayType(7,ArrayType(70,IntType))),param(Id(__),ArrayType(91,ArrayType(511,ArrayType(72,FloatType)))),param(Id(Y_),ArrayType(4,IntType)),param(Id(d_d3),ArrayType(70,IntType)),param(Id(_1),ArrayType(70,IntType)),param(Id(_n988),ArrayType(70,IntType)),param(Id(N),ArrayType(70,IntType)),param(Id(Q),ArrayType(70,IntType))],Block([Call(Id(fWl),Id($4),[])])),MethodDecl(Id(E),Instance,[param(Id(o),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(K),ArrayType(10,ArrayType(70,ArrayType(54,ArrayType(31,BoolType))))),param(Id(MX),ArrayType(10,ArrayType(70,ArrayType(54,ArrayType(31,BoolType))))),param(Id(e),ArrayType(10,ArrayType(70,ArrayType(54,ArrayType(31,BoolType))))),param(Id(_4),ArrayType(92,StringType)),param(Id(_),ClassType(Id(F79v))),param(Id(_),ClassType(Id(F79v)))],Block([])),MethodDecl(Id($_),Static,[],Block([Block([]),Continue]))]),ClassDecl(Id(X),[MethodDecl(Id(KS),Instance,[param(Id(_8),ClassType(Id(e_))),param(Id(__),ClassType(Id(e_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 398))

    def test_99(self):
        line = '''Class z:d{Var j:Array [Float ,0x1];}Class N:__{Constructor (_:Array [Float ,072];Q,_:String ;_,Pf,Fv:_43){}Val V7_F,$_,k6:_;Var _9_,$3:Boolean ;}Class j:y{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(z),Id(d),[AttributeDecl(Instance,VarDecl(Id(j),ArrayType(1,FloatType)))]),ClassDecl(Id(N),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(58,FloatType)),param(Id(Q),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_43))),param(Id(Pf),ClassType(Id(_43))),param(Id(Fv),ClassType(Id(_43)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(V7_F),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(k6),ClassType(Id(_)),None)),AttributeDecl(Instance,VarDecl(Id(_9_),BoolType)),AttributeDecl(Static,VarDecl(Id($3),BoolType))]),ClassDecl(Id(j),Id(y),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 399))